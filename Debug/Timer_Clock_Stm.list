
Timer_Clock_Stm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bca0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a6c  0800be80  0800be80  0001be80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d8ec  0800d8ec  00020190  2**0
                  CONTENTS
  4 .ARM          00000008  0800d8ec  0800d8ec  0001d8ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d8f4  0800d8f4  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d8f4  0800d8f4  0001d8f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d8f8  0800d8f8  0001d8f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  0800d8fc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cdc  20000190  0800da8c  00020190  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000e6c  0800da8c  00020e6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020970  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000046df  00000000  00000000  00040b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c48  00000000  00000000  00045210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a58  00000000  00000000  00046e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029ae0  00000000  00000000  000488b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025ae2  00000000  00000000  00072390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed7b2  00000000  00000000  00097e72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00185624  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000873c  00000000  00000000  00185674  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000190 	.word	0x20000190
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800be68 	.word	0x0800be68

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000194 	.word	0x20000194
 800021c:	0800be68 	.word	0x0800be68

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <strcmp>:
 8000230:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000234:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000238:	2a01      	cmp	r2, #1
 800023a:	bf28      	it	cs
 800023c:	429a      	cmpcs	r2, r3
 800023e:	d0f7      	beq.n	8000230 <strcmp>
 8000240:	1ad0      	subs	r0, r2, r3
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_ldivmod>:
 80002f0:	b97b      	cbnz	r3, 8000312 <__aeabi_ldivmod+0x22>
 80002f2:	b972      	cbnz	r2, 8000312 <__aeabi_ldivmod+0x22>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bfbe      	ittt	lt
 80002f8:	2000      	movlt	r0, #0
 80002fa:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80002fe:	e006      	blt.n	800030e <__aeabi_ldivmod+0x1e>
 8000300:	bf08      	it	eq
 8000302:	2800      	cmpeq	r0, #0
 8000304:	bf1c      	itt	ne
 8000306:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800030a:	f04f 30ff 	movne.w	r0, #4294967295
 800030e:	f000 b9bf 	b.w	8000690 <__aeabi_idiv0>
 8000312:	f1ad 0c08 	sub.w	ip, sp, #8
 8000316:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800031a:	2900      	cmp	r1, #0
 800031c:	db09      	blt.n	8000332 <__aeabi_ldivmod+0x42>
 800031e:	2b00      	cmp	r3, #0
 8000320:	db1a      	blt.n	8000358 <__aeabi_ldivmod+0x68>
 8000322:	f000 f84d 	bl	80003c0 <__udivmoddi4>
 8000326:	f8dd e004 	ldr.w	lr, [sp, #4]
 800032a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800032e:	b004      	add	sp, #16
 8000330:	4770      	bx	lr
 8000332:	4240      	negs	r0, r0
 8000334:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000338:	2b00      	cmp	r3, #0
 800033a:	db1b      	blt.n	8000374 <__aeabi_ldivmod+0x84>
 800033c:	f000 f840 	bl	80003c0 <__udivmoddi4>
 8000340:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000348:	b004      	add	sp, #16
 800034a:	4240      	negs	r0, r0
 800034c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000350:	4252      	negs	r2, r2
 8000352:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000356:	4770      	bx	lr
 8000358:	4252      	negs	r2, r2
 800035a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800035e:	f000 f82f 	bl	80003c0 <__udivmoddi4>
 8000362:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000366:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036a:	b004      	add	sp, #16
 800036c:	4240      	negs	r0, r0
 800036e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000372:	4770      	bx	lr
 8000374:	4252      	negs	r2, r2
 8000376:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037a:	f000 f821 	bl	80003c0 <__udivmoddi4>
 800037e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000382:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000386:	b004      	add	sp, #16
 8000388:	4252      	negs	r2, r2
 800038a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <init_PotentioMeter>:
//static float m_voltage;
static int a_hour_value;
static int t_minute_value;
static int t_second_value;

void init_PotentioMeter(ADC_HandleTypeDef* Poten){
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
	m_adci = Poten;
 800069c:	4a04      	ldr	r2, [pc, #16]	; (80006b0 <init_PotentioMeter+0x1c>)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	6013      	str	r3, [r2, #0]
}
 80006a2:	bf00      	nop
 80006a4:	370c      	adds	r7, #12
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	200001ac 	.word	0x200001ac

080006b4 <mapping_adc>:
int mapping_adc(int adc){
 80006b4:	b480      	push	{r7}
 80006b6:	b085      	sub	sp, #20
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
	int map_adc = (adc<300)? 0:((adc-300)>3750)? 3750:(adc-300);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80006c2:	db08      	blt.n	80006d6 <mapping_adc+0x22>
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	f640 72d2 	movw	r2, #4050	; 0xfd2
 80006ca:	4293      	cmp	r3, r2
 80006cc:	bfa8      	it	ge
 80006ce:	4613      	movge	r3, r2
 80006d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80006d4:	e000      	b.n	80006d8 <mapping_adc+0x24>
 80006d6:	2300      	movs	r3, #0
 80006d8:	60fb      	str	r3, [r7, #12]
	return map_adc;
 80006da:	68fb      	ldr	r3, [r7, #12]
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3714      	adds	r7, #20
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr

080006e8 <set_Hour>:
	m_adc_value = mapping_adc(HAL_ADC_GetValue(m_adci));
	a_hour_value = (int)(m_adc_value/CHECK_VALUE);
}


void set_Hour(){
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
	HAL_ADC_Start(m_adci);
 80006ec:	4b1b      	ldr	r3, [pc, #108]	; (800075c <set_Hour+0x74>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4618      	mov	r0, r3
 80006f2:	f003 fc75 	bl	8003fe0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(m_adci, 500);
 80006f6:	4b19      	ldr	r3, [pc, #100]	; (800075c <set_Hour+0x74>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80006fe:	4618      	mov	r0, r3
 8000700:	f003 fd3c 	bl	800417c <HAL_ADC_PollForConversion>
	m_adc_value = mapping_adc(HAL_ADC_GetValue(m_adci));
 8000704:	4b15      	ldr	r3, [pc, #84]	; (800075c <set_Hour+0x74>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4618      	mov	r0, r3
 800070a:	f003 fdc2 	bl	8004292 <HAL_ADC_GetValue>
 800070e:	4603      	mov	r3, r0
 8000710:	4618      	mov	r0, r3
 8000712:	f7ff ffcf 	bl	80006b4 <mapping_adc>
 8000716:	4603      	mov	r3, r0
 8000718:	b29a      	uxth	r2, r3
 800071a:	4b11      	ldr	r3, [pc, #68]	; (8000760 <set_Hour+0x78>)
 800071c:	801a      	strh	r2, [r3, #0]
	a_hour_value = (int)(m_adc_value/H_Clock_Convert);
 800071e:	4b10      	ldr	r3, [pc, #64]	; (8000760 <set_Hour+0x78>)
 8000720:	881b      	ldrh	r3, [r3, #0]
 8000722:	461a      	mov	r2, r3
 8000724:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <set_Hour+0x7c>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	fb92 f3f3 	sdiv	r3, r2, r3
 800072c:	4a0e      	ldr	r2, [pc, #56]	; (8000768 <set_Hour+0x80>)
 800072e:	6013      	str	r3, [r2, #0]
	setnHour(a_hour_value);
 8000730:	4b0d      	ldr	r3, [pc, #52]	; (8000768 <set_Hour+0x80>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4618      	mov	r0, r3
 8000736:	f002 fa15 	bl	8002b64 <setnHour>
	if(getMode() == 2){
 800073a:	f002 f969 	bl	8002a10 <getMode>
 800073e:	4603      	mov	r3, r0
 8000740:	2b02      	cmp	r3, #2
 8000742:	d102      	bne.n	800074a <set_Hour+0x62>
		n_alarm_show();
 8000744:	f001 fa1e 	bl	8001b84 <n_alarm_show>
	}else if(getMode() == 3){
		n_modify_show();
	}
}
 8000748:	e006      	b.n	8000758 <set_Hour+0x70>
	}else if(getMode() == 3){
 800074a:	f002 f961 	bl	8002a10 <getMode>
 800074e:	4603      	mov	r3, r0
 8000750:	2b03      	cmp	r3, #3
 8000752:	d101      	bne.n	8000758 <set_Hour+0x70>
		n_modify_show();
 8000754:	f001 fa2e 	bl	8001bb4 <n_modify_show>
}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}
 800075c:	200001ac 	.word	0x200001ac
 8000760:	200001b0 	.word	0x200001b0
 8000764:	20000004 	.word	0x20000004
 8000768:	200001b4 	.word	0x200001b4

0800076c <set_Minute>:

void set_Minute(){
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
	HAL_ADC_Start(m_adci);
 8000770:	4b1f      	ldr	r3, [pc, #124]	; (80007f0 <set_Minute+0x84>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4618      	mov	r0, r3
 8000776:	f003 fc33 	bl	8003fe0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(m_adci, 500);
 800077a:	4b1d      	ldr	r3, [pc, #116]	; (80007f0 <set_Minute+0x84>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000782:	4618      	mov	r0, r3
 8000784:	f003 fcfa 	bl	800417c <HAL_ADC_PollForConversion>
	m_adc_value = mapping_adc(HAL_ADC_GetValue(m_adci));
 8000788:	4b19      	ldr	r3, [pc, #100]	; (80007f0 <set_Minute+0x84>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4618      	mov	r0, r3
 800078e:	f003 fd80 	bl	8004292 <HAL_ADC_GetValue>
 8000792:	4603      	mov	r3, r0
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff ff8d 	bl	80006b4 <mapping_adc>
 800079a:	4603      	mov	r3, r0
 800079c:	b29a      	uxth	r2, r3
 800079e:	4b15      	ldr	r3, [pc, #84]	; (80007f4 <set_Minute+0x88>)
 80007a0:	801a      	strh	r2, [r3, #0]
	t_minute_value = (int)(m_adc_value/M_Clock_Conver);
 80007a2:	4b14      	ldr	r3, [pc, #80]	; (80007f4 <set_Minute+0x88>)
 80007a4:	881b      	ldrh	r3, [r3, #0]
 80007a6:	461a      	mov	r2, r3
 80007a8:	4b13      	ldr	r3, [pc, #76]	; (80007f8 <set_Minute+0x8c>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	fb92 f3f3 	sdiv	r3, r2, r3
 80007b0:	4a12      	ldr	r2, [pc, #72]	; (80007fc <set_Minute+0x90>)
 80007b2:	6013      	str	r3, [r2, #0]
	setnMinute(t_minute_value);
 80007b4:	4b11      	ldr	r3, [pc, #68]	; (80007fc <set_Minute+0x90>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4618      	mov	r0, r3
 80007ba:	f002 f9f3 	bl	8002ba4 <setnMinute>
	if(getMode() == 1){
 80007be:	f002 f927 	bl	8002a10 <getMode>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b01      	cmp	r3, #1
 80007c6:	d102      	bne.n	80007ce <set_Minute+0x62>
		n_timer_show();
 80007c8:	f001 f978 	bl	8001abc <n_timer_show>
	}else if (getMode() == 2){
		n_alarm_show();
	}else if(getMode() == 3){
		n_modify_show();
	}
}
 80007cc:	e00e      	b.n	80007ec <set_Minute+0x80>
	}else if (getMode() == 2){
 80007ce:	f002 f91f 	bl	8002a10 <getMode>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b02      	cmp	r3, #2
 80007d6:	d102      	bne.n	80007de <set_Minute+0x72>
		n_alarm_show();
 80007d8:	f001 f9d4 	bl	8001b84 <n_alarm_show>
}
 80007dc:	e006      	b.n	80007ec <set_Minute+0x80>
	}else if(getMode() == 3){
 80007de:	f002 f917 	bl	8002a10 <getMode>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b03      	cmp	r3, #3
 80007e6:	d101      	bne.n	80007ec <set_Minute+0x80>
		n_modify_show();
 80007e8:	f001 f9e4 	bl	8001bb4 <n_modify_show>
}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	200001ac 	.word	0x200001ac
 80007f4:	200001b0 	.word	0x200001b0
 80007f8:	20000000 	.word	0x20000000
 80007fc:	200001b8 	.word	0x200001b8

08000800 <set_Second>:

void set_Second(){
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
	HAL_ADC_Start(m_adci);
 8000804:	4b15      	ldr	r3, [pc, #84]	; (800085c <set_Second+0x5c>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4618      	mov	r0, r3
 800080a:	f003 fbe9 	bl	8003fe0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(m_adci, 500);
 800080e:	4b13      	ldr	r3, [pc, #76]	; (800085c <set_Second+0x5c>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000816:	4618      	mov	r0, r3
 8000818:	f003 fcb0 	bl	800417c <HAL_ADC_PollForConversion>
	m_adc_value = mapping_adc(HAL_ADC_GetValue(m_adci));
 800081c:	4b0f      	ldr	r3, [pc, #60]	; (800085c <set_Second+0x5c>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4618      	mov	r0, r3
 8000822:	f003 fd36 	bl	8004292 <HAL_ADC_GetValue>
 8000826:	4603      	mov	r3, r0
 8000828:	4618      	mov	r0, r3
 800082a:	f7ff ff43 	bl	80006b4 <mapping_adc>
 800082e:	4603      	mov	r3, r0
 8000830:	b29a      	uxth	r2, r3
 8000832:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <set_Second+0x60>)
 8000834:	801a      	strh	r2, [r3, #0]
	t_second_value = (int)(m_adc_value/M_Clock_Conver);
 8000836:	4b0a      	ldr	r3, [pc, #40]	; (8000860 <set_Second+0x60>)
 8000838:	881b      	ldrh	r3, [r3, #0]
 800083a:	461a      	mov	r2, r3
 800083c:	4b09      	ldr	r3, [pc, #36]	; (8000864 <set_Second+0x64>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	fb92 f3f3 	sdiv	r3, r2, r3
 8000844:	4a08      	ldr	r2, [pc, #32]	; (8000868 <set_Second+0x68>)
 8000846:	6013      	str	r3, [r2, #0]
	setnSecond(t_second_value);
 8000848:	4b07      	ldr	r3, [pc, #28]	; (8000868 <set_Second+0x68>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4618      	mov	r0, r3
 800084e:	f002 f9c5 	bl	8002bdc <setnSecond>
	n_timer_show();
 8000852:	f001 f933 	bl	8001abc <n_timer_show>
}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	200001ac 	.word	0x200001ac
 8000860:	200001b0 	.word	0x200001b0
 8000864:	20000000 	.word	0x20000000
 8000868:	200001bc 	.word	0x200001bc

0800086c <set_Calender>:

void set_Calender(int mode){
 800086c:	b590      	push	{r4, r7, lr}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(m_adci);
 8000874:	4b33      	ldr	r3, [pc, #204]	; (8000944 <set_Calender+0xd8>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4618      	mov	r0, r3
 800087a:	f003 fbb1 	bl	8003fe0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(m_adci, 500);
 800087e:	4b31      	ldr	r3, [pc, #196]	; (8000944 <set_Calender+0xd8>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000886:	4618      	mov	r0, r3
 8000888:	f003 fc78 	bl	800417c <HAL_ADC_PollForConversion>
	m_adc_value = mapping_adc(HAL_ADC_GetValue(m_adci));
 800088c:	4b2d      	ldr	r3, [pc, #180]	; (8000944 <set_Calender+0xd8>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4618      	mov	r0, r3
 8000892:	f003 fcfe 	bl	8004292 <HAL_ADC_GetValue>
 8000896:	4603      	mov	r3, r0
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff ff0b 	bl	80006b4 <mapping_adc>
 800089e:	4603      	mov	r3, r0
 80008a0:	b29a      	uxth	r2, r3
 80008a2:	4b29      	ldr	r3, [pc, #164]	; (8000948 <set_Calender+0xdc>)
 80008a4:	801a      	strh	r2, [r3, #0]
	if(mode == 0){
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d10c      	bne.n	80008c6 <set_Calender+0x5a>
		//modify_Year
		setnYear((int)(m_adc_value/con_Calender[mode]));
 80008ac:	4b26      	ldr	r3, [pc, #152]	; (8000948 <set_Calender+0xdc>)
 80008ae:	881b      	ldrh	r3, [r3, #0]
 80008b0:	4619      	mov	r1, r3
 80008b2:	4a26      	ldr	r2, [pc, #152]	; (800094c <set_Calender+0xe0>)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008ba:	fb91 f3f3 	sdiv	r3, r1, r3
 80008be:	4618      	mov	r0, r3
 80008c0:	f002 f9a8 	bl	8002c14 <setnYear>
 80008c4:	e037      	b.n	8000936 <set_Calender+0xca>
	}else if(mode == 1){
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	2b01      	cmp	r3, #1
 80008ca:	d10c      	bne.n	80008e6 <set_Calender+0x7a>
		// modify Month
		setnMonth((int)(m_adc_value/con_Calender[mode]));
 80008cc:	4b1e      	ldr	r3, [pc, #120]	; (8000948 <set_Calender+0xdc>)
 80008ce:	881b      	ldrh	r3, [r3, #0]
 80008d0:	4619      	mov	r1, r3
 80008d2:	4a1e      	ldr	r2, [pc, #120]	; (800094c <set_Calender+0xe0>)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008da:	fb91 f3f3 	sdiv	r3, r1, r3
 80008de:	4618      	mov	r0, r3
 80008e0:	f002 f9b4 	bl	8002c4c <setnMonth>
 80008e4:	e027      	b.n	8000936 <set_Calender+0xca>
	}
	else if(mode == 2){
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2b02      	cmp	r3, #2
 80008ea:	d124      	bne.n	8000936 <set_Calender+0xca>
		//modify days( Year is leap year and Month is Feb, days Range is 0~29)
		if(getnYear()%4 == 0 && getnMonth() == 1){
 80008ec:	f002 f986 	bl	8002bfc <getnYear>
 80008f0:	4603      	mov	r3, r0
 80008f2:	f003 0303 	and.w	r3, r3, #3
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d10f      	bne.n	800091a <set_Calender+0xae>
 80008fa:	f002 f99b 	bl	8002c34 <getnMonth>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b01      	cmp	r3, #1
 8000902:	d10a      	bne.n	800091a <set_Calender+0xae>
			setnDay((int)(m_adc_value/TWENINE));
 8000904:	4b10      	ldr	r3, [pc, #64]	; (8000948 <set_Calender+0xdc>)
 8000906:	881b      	ldrh	r3, [r3, #0]
 8000908:	4a11      	ldr	r2, [pc, #68]	; (8000950 <set_Calender+0xe4>)
 800090a:	fba2 2303 	umull	r2, r3, r2, r3
 800090e:	09db      	lsrs	r3, r3, #7
 8000910:	b29b      	uxth	r3, r3
 8000912:	4618      	mov	r0, r3
 8000914:	f002 f9b6 	bl	8002c84 <setnDay>
 8000918:	e00d      	b.n	8000936 <set_Calender+0xca>
		}else{
			setnDay((int)(m_adc_value/con_days[getnMonth()]));
 800091a:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <set_Calender+0xdc>)
 800091c:	881b      	ldrh	r3, [r3, #0]
 800091e:	461c      	mov	r4, r3
 8000920:	f002 f988 	bl	8002c34 <getnMonth>
 8000924:	4603      	mov	r3, r0
 8000926:	4a0b      	ldr	r2, [pc, #44]	; (8000954 <set_Calender+0xe8>)
 8000928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800092c:	fb94 f3f3 	sdiv	r3, r4, r3
 8000930:	4618      	mov	r0, r3
 8000932:	f002 f9a7 	bl	8002c84 <setnDay>
		}
	}
	n_modify_show();
 8000936:	f001 f93d 	bl	8001bb4 <n_modify_show>
}
 800093a:	bf00      	nop
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	bd90      	pop	{r4, r7, pc}
 8000942:	bf00      	nop
 8000944:	200001ac 	.word	0x200001ac
 8000948:	200001b0 	.word	0x200001b0
 800094c:	20000008 	.word	0x20000008
 8000950:	f6603d99 	.word	0xf6603d99
 8000954:	20000010 	.word	0x20000010

08000958 <cal_Second>:


void cal_Second(){
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
	for(int i = 2; i>=0; i--){
 800095e:	2302      	movs	r3, #2
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	e016      	b.n	8000992 <cal_Second+0x3a>
		Timer_Second += timer_value[i] * cal_Seconds[i];
 8000964:	4a0f      	ldr	r2, [pc, #60]	; (80009a4 <cal_Second+0x4c>)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800096c:	490e      	ldr	r1, [pc, #56]	; (80009a8 <cal_Second+0x50>)
 800096e:	687a      	ldr	r2, [r7, #4]
 8000970:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000974:	fb03 f202 	mul.w	r2, r3, r2
 8000978:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <cal_Second+0x54>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4413      	add	r3, r2
 800097e:	4a0b      	ldr	r2, [pc, #44]	; (80009ac <cal_Second+0x54>)
 8000980:	6013      	str	r3, [r2, #0]
		timer_value[i] = 0 ;
 8000982:	4a08      	ldr	r2, [pc, #32]	; (80009a4 <cal_Second+0x4c>)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	2100      	movs	r1, #0
 8000988:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 2; i>=0; i--){
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	3b01      	subs	r3, #1
 8000990:	607b      	str	r3, [r7, #4]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	2b00      	cmp	r3, #0
 8000996:	dae5      	bge.n	8000964 <cal_Second+0xc>
	}
	update_timer();
 8000998:	f000 f80a 	bl	80009b0 <update_timer>
}
 800099c:	bf00      	nop
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	2000075c 	.word	0x2000075c
 80009a8:	20000040 	.word	0x20000040
 80009ac:	20000778 	.word	0x20000778

080009b0 <update_timer>:
void update_timer(){
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
	timer_value[1] = (int)Timer_Second/60;
 80009b4:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <update_timer+0x44>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a0f      	ldr	r2, [pc, #60]	; (80009f8 <update_timer+0x48>)
 80009ba:	fb82 1203 	smull	r1, r2, r2, r3
 80009be:	441a      	add	r2, r3
 80009c0:	1152      	asrs	r2, r2, #5
 80009c2:	17db      	asrs	r3, r3, #31
 80009c4:	1ad3      	subs	r3, r2, r3
 80009c6:	4a0d      	ldr	r2, [pc, #52]	; (80009fc <update_timer+0x4c>)
 80009c8:	6053      	str	r3, [r2, #4]
	timer_value[0] = (int)Timer_Second%60;
 80009ca:	4b0a      	ldr	r3, [pc, #40]	; (80009f4 <update_timer+0x44>)
 80009cc:	681a      	ldr	r2, [r3, #0]
 80009ce:	4b0a      	ldr	r3, [pc, #40]	; (80009f8 <update_timer+0x48>)
 80009d0:	fb83 1302 	smull	r1, r3, r3, r2
 80009d4:	4413      	add	r3, r2
 80009d6:	1159      	asrs	r1, r3, #5
 80009d8:	17d3      	asrs	r3, r2, #31
 80009da:	1ac9      	subs	r1, r1, r3
 80009dc:	460b      	mov	r3, r1
 80009de:	011b      	lsls	r3, r3, #4
 80009e0:	1a5b      	subs	r3, r3, r1
 80009e2:	009b      	lsls	r3, r3, #2
 80009e4:	1ad1      	subs	r1, r2, r3
 80009e6:	4b05      	ldr	r3, [pc, #20]	; (80009fc <update_timer+0x4c>)
 80009e8:	6019      	str	r1, [r3, #0]
}
 80009ea:	bf00      	nop
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr
 80009f4:	20000778 	.word	0x20000778
 80009f8:	88888889 	.word	0x88888889
 80009fc:	2000075c 	.word	0x2000075c

08000a00 <init_rtc>:
#define ALARM_FLAG RTC_BKP_DR5

static RTC_HandleTypeDef * r_hrtc;
static int c_state = -1;

void init_rtc(RTC_HandleTypeDef * hrtc){
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
	r_hrtc = hrtc;
 8000a08:	4a04      	ldr	r2, [pc, #16]	; (8000a1c <init_rtc+0x1c>)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	6013      	str	r3, [r2, #0]
}
 8000a0e:	bf00      	nop
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	200001c0 	.word	0x200001c0

08000a20 <check_RTC>:

int check_RTC(int mode){
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
	int What_mode = mode;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	60fb      	str	r3, [r7, #12]
	switch(What_mode){
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d003      	beq.n	8000a3a <check_RTC+0x1a>
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	2b02      	cmp	r3, #2
 8000a36:	d01e      	beq.n	8000a76 <check_RTC+0x56>
 8000a38:	e032      	b.n	8000aa0 <check_RTC+0x80>
	case 1:
		HAL_PWR_EnableBkUpAccess();
 8000a3a:	f004 fff5 	bl	8005a28 <HAL_PWR_EnableBkUpAccess>
		if(HAL_RTCEx_BKUPRead(r_hrtc, CALENDER_H) == 0 && HAL_RTCEx_BKUPRead(r_hrtc, CALENDER_L) == 0){
 8000a3e:	4b1b      	ldr	r3, [pc, #108]	; (8000aac <check_RTC+0x8c>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	2102      	movs	r1, #2
 8000a44:	4618      	mov	r0, r3
 8000a46:	f006 f998 	bl	8006d7a <HAL_RTCEx_BKUPRead>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d10c      	bne.n	8000a6a <check_RTC+0x4a>
 8000a50:	4b16      	ldr	r3, [pc, #88]	; (8000aac <check_RTC+0x8c>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	2101      	movs	r1, #1
 8000a56:	4618      	mov	r0, r3
 8000a58:	f006 f98f 	bl	8006d7a <HAL_RTCEx_BKUPRead>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d103      	bne.n	8000a6a <check_RTC+0x4a>
			c_state = 1;
 8000a62:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <check_RTC+0x90>)
 8000a64:	2201      	movs	r2, #1
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	e002      	b.n	8000a70 <check_RTC+0x50>
		}
		else{
			// 여기서 시간 업데이트가 필요해 보여 아니면 RTC 쪽으로 타이머를 조정하거나
			c_state = 0;
 8000a6a:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <check_RTC+0x90>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
		}
		HAL_PWR_DisableBkUpAccess();
 8000a70:	f004 ffea 	bl	8005a48 <HAL_PWR_DisableBkUpAccess>
		break;
 8000a74:	e014      	b.n	8000aa0 <check_RTC+0x80>

	case 2:
		HAL_PWR_EnableBkUpAccess();
 8000a76:	f004 ffd7 	bl	8005a28 <HAL_PWR_EnableBkUpAccess>
		if(HAL_RTCEx_BKUPRead(r_hrtc, ALARM_FLAG) == 0){
 8000a7a:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <check_RTC+0x8c>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	2105      	movs	r1, #5
 8000a80:	4618      	mov	r0, r3
 8000a82:	f006 f97a 	bl	8006d7a <HAL_RTCEx_BKUPRead>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d103      	bne.n	8000a94 <check_RTC+0x74>
			c_state = 1;
 8000a8c:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <check_RTC+0x90>)
 8000a8e:	2201      	movs	r2, #1
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	e002      	b.n	8000a9a <check_RTC+0x7a>
		}
		else{
			c_state = 0;
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <check_RTC+0x90>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
		}
		HAL_PWR_DisableBkUpAccess();
 8000a9a:	f004 ffd5 	bl	8005a48 <HAL_PWR_DisableBkUpAccess>
		break;
 8000a9e:	bf00      	nop

	}
	return c_state;
 8000aa0:	4b03      	ldr	r3, [pc, #12]	; (8000ab0 <check_RTC+0x90>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3710      	adds	r7, #16
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	200001c0 	.word	0x200001c0
 8000ab0:	2000004c 	.word	0x2000004c

08000ab4 <get_Alarm>:
void get_Alarm(){
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
	if (check_RTC(2) == 0){
 8000aba:	2002      	movs	r0, #2
 8000abc:	f7ff ffb0 	bl	8000a20 <check_RTC>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d127      	bne.n	8000b16 <get_Alarm+0x62>
		HAL_PWR_EnableBkUpAccess();
 8000ac6:	f004 ffaf 	bl	8005a28 <HAL_PWR_EnableBkUpAccess>
		int hour = HAL_RTCEx_BKUPRead(r_hrtc, ALARM_HOUR);
 8000aca:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <get_Alarm+0x6c>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	2103      	movs	r1, #3
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f006 f952 	bl	8006d7a <HAL_RTCEx_BKUPRead>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	60fb      	str	r3, [r7, #12]
		int minute = HAL_RTCEx_BKUPRead(r_hrtc, ALARM_MIN);
 8000ada:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <get_Alarm+0x6c>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	2104      	movs	r1, #4
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f006 f94a 	bl	8006d7a <HAL_RTCEx_BKUPRead>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	60bb      	str	r3, [r7, #8]
		int alert_mode = HAL_RTCEx_BKUPRead(r_hrtc, ALARM_FLAG);
 8000aea:	4b0d      	ldr	r3, [pc, #52]	; (8000b20 <get_Alarm+0x6c>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	2105      	movs	r1, #5
 8000af0:	4618      	mov	r0, r3
 8000af2:	f006 f942 	bl	8006d7a <HAL_RTCEx_BKUPRead>
 8000af6:	4603      	mov	r3, r0
 8000af8:	607b      	str	r3, [r7, #4]
		alarm_value[2] = hour;
 8000afa:	4a0a      	ldr	r2, [pc, #40]	; (8000b24 <get_Alarm+0x70>)
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	6093      	str	r3, [r2, #8]
		alarm_value[1] = minute;
 8000b00:	4a08      	ldr	r2, [pc, #32]	; (8000b24 <get_Alarm+0x70>)
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	6053      	str	r3, [r2, #4]
		alarm_value[0] = 0;
 8000b06:	4b07      	ldr	r3, [pc, #28]	; (8000b24 <get_Alarm+0x70>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
		setAlarmState(alert_mode);
 8000b0c:	6878      	ldr	r0, [r7, #4]
 8000b0e:	f001 ffc3 	bl	8002a98 <setAlarmState>
		HAL_PWR_DisableBkUpAccess();
 8000b12:	f004 ff99 	bl	8005a48 <HAL_PWR_DisableBkUpAccess>
	}
}
 8000b16:	bf00      	nop
 8000b18:	3710      	adds	r7, #16
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	200001c0 	.word	0x200001c0
 8000b24:	20000768 	.word	0x20000768

08000b28 <set_Alarm>:
void set_Alarm(int Hour, int Min){
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	6039      	str	r1, [r7, #0]
	HAL_PWR_EnableBkUpAccess();
 8000b32:	f004 ff79 	bl	8005a28 <HAL_PWR_EnableBkUpAccess>
	HAL_RTCEx_BKUPWrite(r_hrtc, ALARM_HOUR, (uint32_t)Hour);
 8000b36:	4b0d      	ldr	r3, [pc, #52]	; (8000b6c <set_Alarm+0x44>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	2103      	movs	r1, #3
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f006 f901 	bl	8006d46 <HAL_RTCEx_BKUPWrite>
	HAL_RTCEx_BKUPWrite(r_hrtc, ALARM_MIN, (uint32_t)Min);
 8000b44:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <set_Alarm+0x44>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	683a      	ldr	r2, [r7, #0]
 8000b4a:	2104      	movs	r1, #4
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f006 f8fa 	bl	8006d46 <HAL_RTCEx_BKUPWrite>
	HAL_RTCEx_BKUPWrite(r_hrtc, ALARM_FLAG, (uint32_t)1);
 8000b52:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <set_Alarm+0x44>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	2201      	movs	r2, #1
 8000b58:	2105      	movs	r1, #5
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f006 f8f3 	bl	8006d46 <HAL_RTCEx_BKUPWrite>
	HAL_PWR_DisableBkUpAccess();
 8000b60:	f004 ff72 	bl	8005a48 <HAL_PWR_DisableBkUpAccess>
}
 8000b64:	bf00      	nop
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	200001c0 	.word	0x200001c0

08000b70 <BackupTimeToRTC>:

void BackupTimeToRTC(time_t currentTime) {
 8000b70:	b590      	push	{r4, r7, lr}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	e9c7 0100 	strd	r0, r1, [r7]
	HAL_PWR_EnableBkUpAccess();
 8000b7a:	f004 ff55 	bl	8005a28 <HAL_PWR_EnableBkUpAccess>
    // 하위 32비트를 RTC 백업 레지스터에 저장
    HAL_RTCEx_BKUPWrite(r_hrtc, RTC_BKP_DR1, (uint32_t)(currentTime & 0xFFFFFFFF));
 8000b7e:	4b0e      	ldr	r3, [pc, #56]	; (8000bb8 <BackupTimeToRTC+0x48>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	683a      	ldr	r2, [r7, #0]
 8000b84:	2101      	movs	r1, #1
 8000b86:	4618      	mov	r0, r3
 8000b88:	f006 f8dd 	bl	8006d46 <HAL_RTCEx_BKUPWrite>
    // 상위 32비트를 RTC 백업 레지스터에 저장
    HAL_RTCEx_BKUPWrite(r_hrtc, RTC_BKP_DR2, (uint32_t)((currentTime >> 32) & 0xFFFFFFFF));
 8000b8c:	4b0a      	ldr	r3, [pc, #40]	; (8000bb8 <BackupTimeToRTC+0x48>)
 8000b8e:	681c      	ldr	r4, [r3, #0]
 8000b90:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000b94:	f04f 0200 	mov.w	r2, #0
 8000b98:	f04f 0300 	mov.w	r3, #0
 8000b9c:	000a      	movs	r2, r1
 8000b9e:	17cb      	asrs	r3, r1, #31
 8000ba0:	4613      	mov	r3, r2
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	2102      	movs	r1, #2
 8000ba6:	4620      	mov	r0, r4
 8000ba8:	f006 f8cd 	bl	8006d46 <HAL_RTCEx_BKUPWrite>
    HAL_PWR_DisableBkUpAccess();
 8000bac:	f004 ff4c 	bl	8005a48 <HAL_PWR_DisableBkUpAccess>
}
 8000bb0:	bf00      	nop
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd90      	pop	{r4, r7, pc}
 8000bb8:	200001c0 	.word	0x200001c0

08000bbc <RestoreTimeFromRTC>:

time_t RestoreTimeFromRTC() {
 8000bbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000bc0:	b082      	sub	sp, #8
 8000bc2:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess();
 8000bc4:	f004 ff30 	bl	8005a28 <HAL_PWR_EnableBkUpAccess>
    // 하위 32비트를 RTC 백업 레지스터에서 읽음
    uint32_t low = HAL_RTCEx_BKUPRead(r_hrtc, RTC_BKP_DR1);
 8000bc8:	4b14      	ldr	r3, [pc, #80]	; (8000c1c <RestoreTimeFromRTC+0x60>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2101      	movs	r1, #1
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f006 f8d3 	bl	8006d7a <HAL_RTCEx_BKUPRead>
 8000bd4:	6078      	str	r0, [r7, #4]
    // 상위 32비트를 RTC 백업 레지스터에서 읽음
    uint32_t high = HAL_RTCEx_BKUPRead(r_hrtc, RTC_BKP_DR2);
 8000bd6:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <RestoreTimeFromRTC+0x60>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	2102      	movs	r1, #2
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f006 f8cc 	bl	8006d7a <HAL_RTCEx_BKUPRead>
 8000be2:	6038      	str	r0, [r7, #0]
    HAL_PWR_DisableBkUpAccess();
 8000be4:	f004 ff30 	bl	8005a48 <HAL_PWR_DisableBkUpAccess>
    // 상위 32비트를 왼쪽으로 32비트 이동한 후, 하위 32비트와 결합하여 64비트 데이터로 복원
    return ((time_t)high << 32) | low;
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	2200      	movs	r2, #0
 8000bec:	469a      	mov	sl, r3
 8000bee:	4693      	mov	fp, r2
 8000bf0:	f04f 0200 	mov.w	r2, #0
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	4653      	mov	r3, sl
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	6879      	ldr	r1, [r7, #4]
 8000bfe:	2000      	movs	r0, #0
 8000c00:	460c      	mov	r4, r1
 8000c02:	4605      	mov	r5, r0
 8000c04:	ea42 0804 	orr.w	r8, r2, r4
 8000c08:	ea43 0905 	orr.w	r9, r3, r5
 8000c0c:	4642      	mov	r2, r8
 8000c0e:	464b      	mov	r3, r9
}
 8000c10:	4610      	mov	r0, r2
 8000c12:	4619      	mov	r1, r3
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000c1c:	200001c0 	.word	0x200001c0

08000c20 <main_Check>:
static int Pos = 0;
static int B_mode = 100;
static int now_mode;


void main_Check(){
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
	int mode = getMode();
 8000c26:	f001 fef3 	bl	8002a10 <getMode>
 8000c2a:	6078      	str	r0, [r7, #4]
	if(B_mode != mode){
 8000c2c:	4b38      	ldr	r3, [pc, #224]	; (8000d10 <main_Check+0xf0>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	687a      	ldr	r2, [r7, #4]
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d004      	beq.n	8000c40 <main_Check+0x20>
		toggleScreen();
 8000c36:	f000 fe4d 	bl	80018d4 <toggleScreen>
		B_mode = mode;
 8000c3a:	4a35      	ldr	r2, [pc, #212]	; (8000d10 <main_Check+0xf0>)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6013      	str	r3, [r2, #0]
	}
	// timer가 완료되면 가장 우선순위로 실행되게 해야함
	if(getTimerCompleted() || getAlarmCompleted()){
 8000c40:	f001 ff3a 	bl	8002ab8 <getTimerCompleted>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d104      	bne.n	8000c54 <main_Check+0x34>
 8000c4a:	f001 ff51 	bl	8002af0 <getAlarmCompleted>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d02b      	beq.n	8000cac <main_Check+0x8c>
		int Boozer_mode = getTimerCompleted() == 1 ? 1:(getAlarmCompleted())? 2:0;
 8000c54:	f001 ff30 	bl	8002ab8 <getTimerCompleted>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d008      	beq.n	8000c70 <main_Check+0x50>
 8000c5e:	f001 ff47 	bl	8002af0 <getAlarmCompleted>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <main_Check+0x4c>
 8000c68:	2302      	movs	r3, #2
 8000c6a:	e002      	b.n	8000c72 <main_Check+0x52>
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	e000      	b.n	8000c72 <main_Check+0x52>
 8000c70:	2301      	movs	r3, #1
 8000c72:	603b      	str	r3, [r7, #0]
		// mode == 1 (Timer Lcd and Event), mode == 2 (Alarm LCd and Event)
		if(Boozer_mode == 1){
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d102      	bne.n	8000c80 <main_Check+0x60>
			timer_lcd();
 8000c7a:	f000 fee1 	bl	8001a40 <timer_lcd>
 8000c7e:	e001      	b.n	8000c84 <main_Check+0x64>
		}
		else{
			alarm_lcd();
 8000c80:	f001 f8ec 	bl	8001e5c <alarm_lcd>
		}
		if(cancel_btn){
 8000c84:	4b23      	ldr	r3, [pc, #140]	; (8000d14 <main_Check+0xf4>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d023      	beq.n	8000cd4 <main_Check+0xb4>
			cancel_btn = 0;
 8000c8c:	4b21      	ldr	r3, [pc, #132]	; (8000d14 <main_Check+0xf4>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	701a      	strb	r2, [r3, #0]
			end_Boozer(Boozer_mode);
 8000c92:	6838      	ldr	r0, [r7, #0]
 8000c94:	f002 f846 	bl	8002d24 <end_Boozer>
			setCompleted(Boozer_mode);
 8000c98:	6838      	ldr	r0, [r7, #0]
 8000c9a:	f001 ff45 	bl	8002b28 <setCompleted>
			setMode(-1);
 8000c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca2:	f001 fec1 	bl	8002a28 <setMode>
			toggleScreen();
 8000ca6:	f000 fe15 	bl	80018d4 <toggleScreen>
	if(getTimerCompleted() || getAlarmCompleted()){
 8000caa:	e013      	b.n	8000cd4 <main_Check+0xb4>
		}
	}
	else if(mode < 0){
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	da02      	bge.n	8000cb8 <main_Check+0x98>
		printDefault();
 8000cb2:	f000 fc31 	bl	8001518 <printDefault>
 8000cb6:	e00e      	b.n	8000cd6 <main_Check+0xb6>
	}
	else if (mode >= 1){
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	dd02      	ble.n	8000cc4 <main_Check+0xa4>
		sub_Menu();
 8000cbe:	f000 f88f 	bl	8000de0 <sub_Menu>
 8000cc2:	e008      	b.n	8000cd6 <main_Check+0xb6>
	}else if (mode == 0){
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d105      	bne.n	8000cd6 <main_Check+0xb6>
		sel_Pos_control();
 8000cca:	f000 f827 	bl	8000d1c <sel_Pos_control>
		menuSelect();
 8000cce:	f000 fe07 	bl	80018e0 <menuSelect>
 8000cd2:	e000      	b.n	8000cd6 <main_Check+0xb6>
	if(getTimerCompleted() || getAlarmCompleted()){
 8000cd4:	bf00      	nop
	}
	if(cancel_btn){
 8000cd6:	4b0f      	ldr	r3, [pc, #60]	; (8000d14 <main_Check+0xf4>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d013      	beq.n	8000d06 <main_Check+0xe6>
		cancel_btn = 0;
 8000cde:	4b0d      	ldr	r3, [pc, #52]	; (8000d14 <main_Check+0xf4>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	701a      	strb	r2, [r3, #0]
		//if SubMenu or Normal Mode, Return to MenuSelect
//		if((getMode()>0) || (getMode() < 0)){
//			setMode(0);
//			Pos = 0;
//		}
		if(mode < 0){
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	da06      	bge.n	8000cf8 <main_Check+0xd8>
			setMode(0);
 8000cea:	2000      	movs	r0, #0
 8000cec:	f001 fe9c 	bl	8002a28 <setMode>
			Pos = 0;
 8000cf0:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <main_Check+0xf8>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
		// if MenuSelect Mode, return to Normal Mode
		else if (mode == 0){
			setMode(-1);
		}
	}
}
 8000cf6:	e006      	b.n	8000d06 <main_Check+0xe6>
		else if (mode == 0){
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d103      	bne.n	8000d06 <main_Check+0xe6>
			setMode(-1);
 8000cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8000d02:	f001 fe91 	bl	8002a28 <setMode>
}
 8000d06:	bf00      	nop
 8000d08:	3708      	adds	r7, #8
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20000050 	.word	0x20000050
 8000d14:	20000758 	.word	0x20000758
 8000d18:	200001c4 	.word	0x200001c4

08000d1c <sel_Pos_control>:


void sel_Pos_control(){
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
	if(up_btn){
 8000d20:	4b2a      	ldr	r3, [pc, #168]	; (8000dcc <sel_Pos_control+0xb0>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d014      	beq.n	8000d52 <sel_Pos_control+0x36>
		up_btn = 0;
 8000d28:	4b28      	ldr	r3, [pc, #160]	; (8000dcc <sel_Pos_control+0xb0>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	701a      	strb	r2, [r3, #0]
		Pos = getPos()-1;
 8000d2e:	f001 ffb9 	bl	8002ca4 <getPos>
 8000d32:	4603      	mov	r3, r0
 8000d34:	3b01      	subs	r3, #1
 8000d36:	4a26      	ldr	r2, [pc, #152]	; (8000dd0 <sel_Pos_control+0xb4>)
 8000d38:	6013      	str	r3, [r2, #0]
		if(Pos <0){
 8000d3a:	4b25      	ldr	r3, [pc, #148]	; (8000dd0 <sel_Pos_control+0xb4>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	da02      	bge.n	8000d48 <sel_Pos_control+0x2c>
			Pos = 2;
 8000d42:	4b23      	ldr	r3, [pc, #140]	; (8000dd0 <sel_Pos_control+0xb4>)
 8000d44:	2202      	movs	r2, #2
 8000d46:	601a      	str	r2, [r3, #0]
		}
		setPos(Pos);
 8000d48:	4b21      	ldr	r3, [pc, #132]	; (8000dd0 <sel_Pos_control+0xb4>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f001 ffb5 	bl	8002cbc <setPos>
	}
	if(down_btn){
 8000d52:	4b20      	ldr	r3, [pc, #128]	; (8000dd4 <sel_Pos_control+0xb8>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d014      	beq.n	8000d84 <sel_Pos_control+0x68>
		down_btn = 0;
 8000d5a:	4b1e      	ldr	r3, [pc, #120]	; (8000dd4 <sel_Pos_control+0xb8>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	701a      	strb	r2, [r3, #0]
		Pos = getPos()+1;
 8000d60:	f001 ffa0 	bl	8002ca4 <getPos>
 8000d64:	4603      	mov	r3, r0
 8000d66:	3301      	adds	r3, #1
 8000d68:	4a19      	ldr	r2, [pc, #100]	; (8000dd0 <sel_Pos_control+0xb4>)
 8000d6a:	6013      	str	r3, [r2, #0]
		if(Pos >2){
 8000d6c:	4b18      	ldr	r3, [pc, #96]	; (8000dd0 <sel_Pos_control+0xb4>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	2b02      	cmp	r3, #2
 8000d72:	dd02      	ble.n	8000d7a <sel_Pos_control+0x5e>
			Pos=0;
 8000d74:	4b16      	ldr	r3, [pc, #88]	; (8000dd0 <sel_Pos_control+0xb4>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
		}
		setPos(Pos);
 8000d7a:	4b15      	ldr	r3, [pc, #84]	; (8000dd0 <sel_Pos_control+0xb4>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f001 ff9c 	bl	8002cbc <setPos>
	}
	if(select_btn){
 8000d84:	4b14      	ldr	r3, [pc, #80]	; (8000dd8 <sel_Pos_control+0xbc>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d01d      	beq.n	8000dc8 <sel_Pos_control+0xac>
		select_btn = 0;
 8000d8c:	4b12      	ldr	r3, [pc, #72]	; (8000dd8 <sel_Pos_control+0xbc>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	701a      	strb	r2, [r3, #0]
		now_mode = getMode()+Pos+1;
 8000d92:	f001 fe3d 	bl	8002a10 <getMode>
 8000d96:	4602      	mov	r2, r0
 8000d98:	4b0d      	ldr	r3, [pc, #52]	; (8000dd0 <sel_Pos_control+0xb4>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	3301      	adds	r3, #1
 8000da0:	4a0e      	ldr	r2, [pc, #56]	; (8000ddc <sel_Pos_control+0xc0>)
 8000da2:	6013      	str	r3, [r2, #0]
		setMode(getMode()+Pos+1);
 8000da4:	f001 fe34 	bl	8002a10 <getMode>
 8000da8:	4602      	mov	r2, r0
 8000daa:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <sel_Pos_control+0xb4>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4413      	add	r3, r2
 8000db0:	3301      	adds	r3, #1
 8000db2:	4618      	mov	r0, r3
 8000db4:	f001 fe38 	bl	8002a28 <setMode>
		setPos(0);
 8000db8:	2000      	movs	r0, #0
 8000dba:	f001 ff7f 	bl	8002cbc <setPos>
		judge_timer();
 8000dbe:	f000 f82b 	bl	8000e18 <judge_timer>
		HAL_Delay(100);
 8000dc2:	2064      	movs	r0, #100	; 0x64
 8000dc4:	f003 f8a4 	bl	8003f10 <HAL_Delay>
	}
}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	20000759 	.word	0x20000759
 8000dd0:	200001c4 	.word	0x200001c4
 8000dd4:	2000075a 	.word	0x2000075a
 8000dd8:	2000075b 	.word	0x2000075b
 8000ddc:	200001c8 	.word	0x200001c8

08000de0 <sub_Menu>:

void sub_Menu(){
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
	if(getMode() >2){
 8000de4:	f001 fe14 	bl	8002a10 <getMode>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b02      	cmp	r3, #2
 8000dec:	dd02      	ble.n	8000df4 <sub_Menu+0x14>
		modify_Process();
 8000dee:	f001 fd1d 	bl	800282c <modify_Process>
	else if (getMode() >1){
		alarm_Process();
	}else if(getMode() >0){
		timer_Process();
	}
}
 8000df2:	e00e      	b.n	8000e12 <sub_Menu+0x32>
	else if (getMode() >1){
 8000df4:	f001 fe0c 	bl	8002a10 <getMode>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	dd02      	ble.n	8000e04 <sub_Menu+0x24>
		alarm_Process();
 8000dfe:	f001 fcdf 	bl	80027c0 <alarm_Process>
}
 8000e02:	e006      	b.n	8000e12 <sub_Menu+0x32>
	}else if(getMode() >0){
 8000e04:	f001 fe04 	bl	8002a10 <getMode>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	dd01      	ble.n	8000e12 <sub_Menu+0x32>
		timer_Process();
 8000e0e:	f001 fcbd 	bl	800278c <timer_Process>
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
	...

08000e18 <judge_timer>:

void judge_timer(){
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
	if(getTimerState() && getMode()==1){
 8000e1c:	f001 fe14 	bl	8002a48 <getTimerState>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d00f      	beq.n	8000e46 <judge_timer+0x2e>
 8000e26:	f001 fdf3 	bl	8002a10 <getMode>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d10a      	bne.n	8000e46 <judge_timer+0x2e>
		// 타이머가 취소되었다는 LCD를 띄우고 clear
		timer_cancle_lcd();
 8000e30:	f000 fdd0 	bl	80019d4 <timer_cancle_lcd>
		setTimerState(0);
 8000e34:	2000      	movs	r0, #0
 8000e36:	f001 fe13 	bl	8002a60 <setTimerState>
		setMode(0);
 8000e3a:	2000      	movs	r0, #0
 8000e3c:	f001 fdf4 	bl	8002a28 <setMode>
		Timer_Second = 0;
 8000e40:	4b02      	ldr	r3, [pc, #8]	; (8000e4c <judge_timer+0x34>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
	}
}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000778 	.word	0x20000778

08000e50 <init_dht11>:
static uint16_t mTime1 = 0, mTime2 = 0, mBit = 0;
static uint8_t humVal = 0, tempVal = 0, parityVal = 0, genParity = 0;
static uint8_t mData[40];


void init_dht11( TIM_HandleTypeDef *htim, GPIO_TypeDef* port, uint16_t pin){
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	4613      	mov	r3, r2
 8000e5c:	80fb      	strh	r3, [r7, #6]
	dhttemperSensor.htim = htim;
 8000e5e:	4a09      	ldr	r2, [pc, #36]	; (8000e84 <init_dht11+0x34>)
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	6093      	str	r3, [r2, #8]
	dhttemperSensor.port = port;
 8000e64:	4a07      	ldr	r2, [pc, #28]	; (8000e84 <init_dht11+0x34>)
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	6013      	str	r3, [r2, #0]
	dhttemperSensor.pin = pin;
 8000e6a:	4a06      	ldr	r2, [pc, #24]	; (8000e84 <init_dht11+0x34>)
 8000e6c:	88fb      	ldrh	r3, [r7, #6]
 8000e6e:	8093      	strh	r3, [r2, #4]
	d_init =1;
 8000e70:	4b05      	ldr	r3, [pc, #20]	; (8000e88 <init_dht11+0x38>)
 8000e72:	2201      	movs	r2, #1
 8000e74:	701a      	strb	r2, [r3, #0]
}
 8000e76:	bf00      	nop
 8000e78:	3714      	adds	r7, #20
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	200001cc 	.word	0x200001cc
 8000e88:	200001dc 	.word	0x200001dc

08000e8c <set_dht11_gpio_mode>:
//	  HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
//	}
//}

void set_dht11_gpio_mode( uint8_t pMode)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b088      	sub	sp, #32
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e96:	f107 030c 	add.w	r3, r7, #12
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
 8000ea2:	60da      	str	r2, [r3, #12]
 8000ea4:	611a      	str	r2, [r3, #16]

	if(pMode == OUTPUT)
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d111      	bne.n	8000ed0 <set_dht11_gpio_mode+0x44>
	{
	  GPIO_InitStruct.Pin = dhttemperSensor.pin;
 8000eac:	4b14      	ldr	r3, [pc, #80]	; (8000f00 <set_dht11_gpio_mode+0x74>)
 8000eae:	889b      	ldrh	r3, [r3, #4]
 8000eb0:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(dhttemperSensor.port, &GPIO_InitStruct);
 8000ebe:	4b10      	ldr	r3, [pc, #64]	; (8000f00 <set_dht11_gpio_mode+0x74>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f107 020c 	add.w	r2, r7, #12
 8000ec6:	4611      	mov	r1, r2
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f003 fd51 	bl	8004970 <HAL_GPIO_Init>
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
	  HAL_GPIO_Init(dhttemperSensor.port, &GPIO_InitStruct);
	}
}
 8000ece:	e013      	b.n	8000ef8 <set_dht11_gpio_mode+0x6c>
	}else if(pMode == INPUT)
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d110      	bne.n	8000ef8 <set_dht11_gpio_mode+0x6c>
	  GPIO_InitStruct.Pin = dhttemperSensor.pin;
 8000ed6:	4b0a      	ldr	r3, [pc, #40]	; (8000f00 <set_dht11_gpio_mode+0x74>)
 8000ed8:	889b      	ldrh	r3, [r3, #4]
 8000eda:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000edc:	2300      	movs	r3, #0
 8000ede:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(dhttemperSensor.port, &GPIO_InitStruct);
 8000ee8:	4b05      	ldr	r3, [pc, #20]	; (8000f00 <set_dht11_gpio_mode+0x74>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f107 020c 	add.w	r2, r7, #12
 8000ef0:	4611      	mov	r1, r2
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f003 fd3c 	bl	8004970 <HAL_GPIO_Init>
}
 8000ef8:	bf00      	nop
 8000efa:	3720      	adds	r7, #32
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	200001cc 	.word	0x200001cc

08000f04 <readDHT11>:
 * @brief reads dht11 value
 * @param dht struct for dht11
 * @return 1 if read ok 0 if something wrong in read
 */
uint8_t readDHT11()
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
//	uint16_t mTime1 = 0, mTime2 = 0, mBit = 0;
//	uint8_t humVal = 0, tempVal = 0, parityVal = 0, genParity = 0;
//	uint8_t mData[40];

	//start comm
	set_dht11_gpio_mode(OUTPUT);			//set pin direction as input
 8000f0a:	2001      	movs	r0, #1
 8000f0c:	f7ff ffbe 	bl	8000e8c <set_dht11_gpio_mode>
	HAL_GPIO_WritePin(dhttemperSensor.port, dhttemperSensor.pin, GPIO_PIN_RESET);
 8000f10:	4b8c      	ldr	r3, [pc, #560]	; (8001144 <readDHT11+0x240>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a8b      	ldr	r2, [pc, #556]	; (8001144 <readDHT11+0x240>)
 8000f16:	8891      	ldrh	r1, [r2, #4]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f003 fedc 	bl	8004cd8 <HAL_GPIO_WritePin>
	HAL_Delay(18);					//wait 18 ms in Low state
 8000f20:	2012      	movs	r0, #18
 8000f22:	f002 fff5 	bl	8003f10 <HAL_Delay>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f26:	b672      	cpsid	i
}
 8000f28:	bf00      	nop
	__disable_irq();	//disable all interupts to do only read dht otherwise miss timer
	HAL_TIM_Base_Start(dhttemperSensor.htim); //start timer
 8000f2a:	4b86      	ldr	r3, [pc, #536]	; (8001144 <readDHT11+0x240>)
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f005 ff92 	bl	8006e58 <HAL_TIM_Base_Start>
	set_dht11_gpio_mode(INPUT);
 8000f34:	2000      	movs	r0, #0
 8000f36:	f7ff ffa9 	bl	8000e8c <set_dht11_gpio_mode>

	//check dht answer
	__HAL_TIM_SET_COUNTER(dhttemperSensor.htim, 0);				//set timer counter to zero
 8000f3a:	4b82      	ldr	r3, [pc, #520]	; (8001144 <readDHT11+0x240>)
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2200      	movs	r2, #0
 8000f42:	625a      	str	r2, [r3, #36]	; 0x24
	while(HAL_GPIO_ReadPin(dhttemperSensor.port, dhttemperSensor.pin) == GPIO_PIN_SET){
 8000f44:	e00b      	b.n	8000f5e <readDHT11+0x5a>
		if((uint16_t)__HAL_TIM_GET_COUNTER(dhttemperSensor.htim) > 500){
 8000f46:	4b7f      	ldr	r3, [pc, #508]	; (8001144 <readDHT11+0x240>)
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000f54:	d903      	bls.n	8000f5e <readDHT11+0x5a>
  __ASM volatile ("cpsie i" : : : "memory");
 8000f56:	b662      	cpsie	i
}
 8000f58:	bf00      	nop
			__enable_irq();
			return 0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	e150      	b.n	8001200 <readDHT11+0x2fc>
	while(HAL_GPIO_ReadPin(dhttemperSensor.port, dhttemperSensor.pin) == GPIO_PIN_SET){
 8000f5e:	4b79      	ldr	r3, [pc, #484]	; (8001144 <readDHT11+0x240>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a78      	ldr	r2, [pc, #480]	; (8001144 <readDHT11+0x240>)
 8000f64:	8892      	ldrh	r2, [r2, #4]
 8000f66:	4611      	mov	r1, r2
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f003 fe9d 	bl	8004ca8 <HAL_GPIO_ReadPin>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d0e8      	beq.n	8000f46 <readDHT11+0x42>
		}
	}
	__HAL_TIM_SET_COUNTER(dhttemperSensor.htim, 0);
 8000f74:	4b73      	ldr	r3, [pc, #460]	; (8001144 <readDHT11+0x240>)
 8000f76:	689b      	ldr	r3, [r3, #8]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	625a      	str	r2, [r3, #36]	; 0x24
	while(HAL_GPIO_ReadPin(dhttemperSensor.port, dhttemperSensor.pin) == GPIO_PIN_RESET){
 8000f7e:	e00b      	b.n	8000f98 <readDHT11+0x94>
		if((uint16_t)__HAL_TIM_GET_COUNTER(dhttemperSensor.htim) > 500){
 8000f80:	4b70      	ldr	r3, [pc, #448]	; (8001144 <readDHT11+0x240>)
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f88:	b29b      	uxth	r3, r3
 8000f8a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000f8e:	d903      	bls.n	8000f98 <readDHT11+0x94>
  __ASM volatile ("cpsie i" : : : "memory");
 8000f90:	b662      	cpsie	i
}
 8000f92:	bf00      	nop
			__enable_irq();
			return 0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	e133      	b.n	8001200 <readDHT11+0x2fc>
	while(HAL_GPIO_ReadPin(dhttemperSensor.port, dhttemperSensor.pin) == GPIO_PIN_RESET){
 8000f98:	4b6a      	ldr	r3, [pc, #424]	; (8001144 <readDHT11+0x240>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a69      	ldr	r2, [pc, #420]	; (8001144 <readDHT11+0x240>)
 8000f9e:	8892      	ldrh	r2, [r2, #4]
 8000fa0:	4611      	mov	r1, r2
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f003 fe80 	bl	8004ca8 <HAL_GPIO_ReadPin>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d0e8      	beq.n	8000f80 <readDHT11+0x7c>
		}
	}
	mTime1 = (uint16_t)__HAL_TIM_GET_COUNTER(dhttemperSensor.htim);
 8000fae:	4b65      	ldr	r3, [pc, #404]	; (8001144 <readDHT11+0x240>)
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb6:	b29a      	uxth	r2, r3
 8000fb8:	4b63      	ldr	r3, [pc, #396]	; (8001148 <readDHT11+0x244>)
 8000fba:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(dhttemperSensor.htim, 0);
 8000fbc:	4b61      	ldr	r3, [pc, #388]	; (8001144 <readDHT11+0x240>)
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	625a      	str	r2, [r3, #36]	; 0x24
	while(HAL_GPIO_ReadPin(dhttemperSensor.port, dhttemperSensor.pin) == GPIO_PIN_SET){
 8000fc6:	e00b      	b.n	8000fe0 <readDHT11+0xdc>
		if((uint16_t)__HAL_TIM_GET_COUNTER(dhttemperSensor.htim) > 500){
 8000fc8:	4b5e      	ldr	r3, [pc, #376]	; (8001144 <readDHT11+0x240>)
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000fd6:	d903      	bls.n	8000fe0 <readDHT11+0xdc>
  __ASM volatile ("cpsie i" : : : "memory");
 8000fd8:	b662      	cpsie	i
}
 8000fda:	bf00      	nop
			__enable_irq();
			return 0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	e10f      	b.n	8001200 <readDHT11+0x2fc>
	while(HAL_GPIO_ReadPin(dhttemperSensor.port, dhttemperSensor.pin) == GPIO_PIN_SET){
 8000fe0:	4b58      	ldr	r3, [pc, #352]	; (8001144 <readDHT11+0x240>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a57      	ldr	r2, [pc, #348]	; (8001144 <readDHT11+0x240>)
 8000fe6:	8892      	ldrh	r2, [r2, #4]
 8000fe8:	4611      	mov	r1, r2
 8000fea:	4618      	mov	r0, r3
 8000fec:	f003 fe5c 	bl	8004ca8 <HAL_GPIO_ReadPin>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d0e8      	beq.n	8000fc8 <readDHT11+0xc4>
		}
	}
	mTime2 = (uint16_t)__HAL_TIM_GET_COUNTER(dhttemperSensor.htim);
 8000ff6:	4b53      	ldr	r3, [pc, #332]	; (8001144 <readDHT11+0x240>)
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ffe:	b29a      	uxth	r2, r3
 8001000:	4b52      	ldr	r3, [pc, #328]	; (800114c <readDHT11+0x248>)
 8001002:	801a      	strh	r2, [r3, #0]

	//if answer is wrong return
	if(mTime1 < 75 && mTime1 > 85 && mTime2 < 75 && mTime2 > 85)
 8001004:	4b50      	ldr	r3, [pc, #320]	; (8001148 <readDHT11+0x244>)
 8001006:	881b      	ldrh	r3, [r3, #0]
 8001008:	2b4a      	cmp	r3, #74	; 0x4a
 800100a:	d80f      	bhi.n	800102c <readDHT11+0x128>
 800100c:	4b4e      	ldr	r3, [pc, #312]	; (8001148 <readDHT11+0x244>)
 800100e:	881b      	ldrh	r3, [r3, #0]
 8001010:	2b55      	cmp	r3, #85	; 0x55
 8001012:	d90b      	bls.n	800102c <readDHT11+0x128>
 8001014:	4b4d      	ldr	r3, [pc, #308]	; (800114c <readDHT11+0x248>)
 8001016:	881b      	ldrh	r3, [r3, #0]
 8001018:	2b4a      	cmp	r3, #74	; 0x4a
 800101a:	d807      	bhi.n	800102c <readDHT11+0x128>
 800101c:	4b4b      	ldr	r3, [pc, #300]	; (800114c <readDHT11+0x248>)
 800101e:	881b      	ldrh	r3, [r3, #0]
 8001020:	2b55      	cmp	r3, #85	; 0x55
 8001022:	d903      	bls.n	800102c <readDHT11+0x128>
  __ASM volatile ("cpsie i" : : : "memory");
 8001024:	b662      	cpsie	i
}
 8001026:	bf00      	nop
	{
		__enable_irq();
		return 0;
 8001028:	2300      	movs	r3, #0
 800102a:	e0e9      	b.n	8001200 <readDHT11+0x2fc>
	}

//	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
	for(int j = 0; j < 40; j++)
 800102c:	2300      	movs	r3, #0
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	e062      	b.n	80010f8 <readDHT11+0x1f4>
	{
		__HAL_TIM_SET_COUNTER(dhttemperSensor.htim, 0);
 8001032:	4b44      	ldr	r3, [pc, #272]	; (8001144 <readDHT11+0x240>)
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	2200      	movs	r2, #0
 800103a:	625a      	str	r2, [r3, #36]	; 0x24
		while(HAL_GPIO_ReadPin(dhttemperSensor.port, dhttemperSensor.pin) == GPIO_PIN_RESET){
 800103c:	e00b      	b.n	8001056 <readDHT11+0x152>
			if((uint16_t)__HAL_TIM_GET_COUNTER(dhttemperSensor.htim) > 500){
 800103e:	4b41      	ldr	r3, [pc, #260]	; (8001144 <readDHT11+0x240>)
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001046:	b29b      	uxth	r3, r3
 8001048:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800104c:	d903      	bls.n	8001056 <readDHT11+0x152>
  __ASM volatile ("cpsie i" : : : "memory");
 800104e:	b662      	cpsie	i
}
 8001050:	bf00      	nop
				__enable_irq();
				return 0;
 8001052:	2300      	movs	r3, #0
 8001054:	e0d4      	b.n	8001200 <readDHT11+0x2fc>
		while(HAL_GPIO_ReadPin(dhttemperSensor.port, dhttemperSensor.pin) == GPIO_PIN_RESET){
 8001056:	4b3b      	ldr	r3, [pc, #236]	; (8001144 <readDHT11+0x240>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a3a      	ldr	r2, [pc, #232]	; (8001144 <readDHT11+0x240>)
 800105c:	8892      	ldrh	r2, [r2, #4]
 800105e:	4611      	mov	r1, r2
 8001060:	4618      	mov	r0, r3
 8001062:	f003 fe21 	bl	8004ca8 <HAL_GPIO_ReadPin>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d0e8      	beq.n	800103e <readDHT11+0x13a>
			}

		}
		__HAL_TIM_SET_COUNTER(dhttemperSensor.htim, 0);
 800106c:	4b35      	ldr	r3, [pc, #212]	; (8001144 <readDHT11+0x240>)
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2200      	movs	r2, #0
 8001074:	625a      	str	r2, [r3, #36]	; 0x24
		while(HAL_GPIO_ReadPin(dhttemperSensor.port, dhttemperSensor.pin) == GPIO_PIN_SET){
 8001076:	e00b      	b.n	8001090 <readDHT11+0x18c>
			if((uint16_t)__HAL_TIM_GET_COUNTER(dhttemperSensor.htim) > 500){
 8001078:	4b32      	ldr	r3, [pc, #200]	; (8001144 <readDHT11+0x240>)
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001080:	b29b      	uxth	r3, r3
 8001082:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001086:	d903      	bls.n	8001090 <readDHT11+0x18c>
  __ASM volatile ("cpsie i" : : : "memory");
 8001088:	b662      	cpsie	i
}
 800108a:	bf00      	nop
				__enable_irq();
				return 0;
 800108c:	2300      	movs	r3, #0
 800108e:	e0b7      	b.n	8001200 <readDHT11+0x2fc>
		while(HAL_GPIO_ReadPin(dhttemperSensor.port, dhttemperSensor.pin) == GPIO_PIN_SET){
 8001090:	4b2c      	ldr	r3, [pc, #176]	; (8001144 <readDHT11+0x240>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a2b      	ldr	r2, [pc, #172]	; (8001144 <readDHT11+0x240>)
 8001096:	8892      	ldrh	r2, [r2, #4]
 8001098:	4611      	mov	r1, r2
 800109a:	4618      	mov	r0, r3
 800109c:	f003 fe04 	bl	8004ca8 <HAL_GPIO_ReadPin>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d0e8      	beq.n	8001078 <readDHT11+0x174>
			}

		}
		mTime1 = (uint16_t)__HAL_TIM_GET_COUNTER(dhttemperSensor.htim);
 80010a6:	4b27      	ldr	r3, [pc, #156]	; (8001144 <readDHT11+0x240>)
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ae:	b29a      	uxth	r2, r3
 80010b0:	4b25      	ldr	r3, [pc, #148]	; (8001148 <readDHT11+0x244>)
 80010b2:	801a      	strh	r2, [r3, #0]

		//check pass time in high state
		//if pass time 25uS set as LOW
		if(mTime1 > 20 && mTime1 < 30)
 80010b4:	4b24      	ldr	r3, [pc, #144]	; (8001148 <readDHT11+0x244>)
 80010b6:	881b      	ldrh	r3, [r3, #0]
 80010b8:	2b14      	cmp	r3, #20
 80010ba:	d907      	bls.n	80010cc <readDHT11+0x1c8>
 80010bc:	4b22      	ldr	r3, [pc, #136]	; (8001148 <readDHT11+0x244>)
 80010be:	881b      	ldrh	r3, [r3, #0]
 80010c0:	2b1d      	cmp	r3, #29
 80010c2:	d803      	bhi.n	80010cc <readDHT11+0x1c8>
		{
			mBit = 0;
 80010c4:	4b22      	ldr	r3, [pc, #136]	; (8001150 <readDHT11+0x24c>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	801a      	strh	r2, [r3, #0]
 80010ca:	e00a      	b.n	80010e2 <readDHT11+0x1de>
		}
		else if(mTime1 > 60 && mTime1 < 80) //if pass time 70 uS set as HIGH
 80010cc:	4b1e      	ldr	r3, [pc, #120]	; (8001148 <readDHT11+0x244>)
 80010ce:	881b      	ldrh	r3, [r3, #0]
 80010d0:	2b3c      	cmp	r3, #60	; 0x3c
 80010d2:	d906      	bls.n	80010e2 <readDHT11+0x1de>
 80010d4:	4b1c      	ldr	r3, [pc, #112]	; (8001148 <readDHT11+0x244>)
 80010d6:	881b      	ldrh	r3, [r3, #0]
 80010d8:	2b4f      	cmp	r3, #79	; 0x4f
 80010da:	d802      	bhi.n	80010e2 <readDHT11+0x1de>
		{
			 mBit = 1;
 80010dc:	4b1c      	ldr	r3, [pc, #112]	; (8001150 <readDHT11+0x24c>)
 80010de:	2201      	movs	r2, #1
 80010e0:	801a      	strh	r2, [r3, #0]
		}

		//set i th data in data buffer`
		mData[j] = mBit;
 80010e2:	4b1b      	ldr	r3, [pc, #108]	; (8001150 <readDHT11+0x24c>)
 80010e4:	881b      	ldrh	r3, [r3, #0]
 80010e6:	b2d9      	uxtb	r1, r3
 80010e8:	4a1a      	ldr	r2, [pc, #104]	; (8001154 <readDHT11+0x250>)
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	4413      	add	r3, r2
 80010ee:	460a      	mov	r2, r1
 80010f0:	701a      	strb	r2, [r3, #0]
	for(int j = 0; j < 40; j++)
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	3301      	adds	r3, #1
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	2b27      	cmp	r3, #39	; 0x27
 80010fc:	dd99      	ble.n	8001032 <readDHT11+0x12e>

	}

	HAL_TIM_Base_Stop(dhttemperSensor.htim); //stop timer
 80010fe:	4b11      	ldr	r3, [pc, #68]	; (8001144 <readDHT11+0x240>)
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	4618      	mov	r0, r3
 8001104:	f005 ff18 	bl	8006f38 <HAL_TIM_Base_Stop>
  __ASM volatile ("cpsie i" : : : "memory");
 8001108:	b662      	cpsie	i
}
 800110a:	bf00      	nop
	__enable_irq(); //enable all interrupts

	//get hum value from data buffer
	for(int i = 0; i < 8; i++)
 800110c:	2300      	movs	r3, #0
 800110e:	60bb      	str	r3, [r7, #8]
 8001110:	e012      	b.n	8001138 <readDHT11+0x234>
	{
		humVal += mData[i];
 8001112:	4a10      	ldr	r2, [pc, #64]	; (8001154 <readDHT11+0x250>)
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	4413      	add	r3, r2
 8001118:	781a      	ldrb	r2, [r3, #0]
 800111a:	4b0f      	ldr	r3, [pc, #60]	; (8001158 <readDHT11+0x254>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	4413      	add	r3, r2
 8001120:	b2da      	uxtb	r2, r3
 8001122:	4b0d      	ldr	r3, [pc, #52]	; (8001158 <readDHT11+0x254>)
 8001124:	701a      	strb	r2, [r3, #0]
		humVal = humVal << 1;
 8001126:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <readDHT11+0x254>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	b2da      	uxtb	r2, r3
 800112e:	4b0a      	ldr	r3, [pc, #40]	; (8001158 <readDHT11+0x254>)
 8001130:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 8; i++)
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	3301      	adds	r3, #1
 8001136:	60bb      	str	r3, [r7, #8]
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	2b07      	cmp	r3, #7
 800113c:	dde9      	ble.n	8001112 <readDHT11+0x20e>
	}

	//get temp value from data buffer
	for(int i = 16; i < 24; i++)
 800113e:	2310      	movs	r3, #16
 8001140:	607b      	str	r3, [r7, #4]
 8001142:	e01e      	b.n	8001182 <readDHT11+0x27e>
 8001144:	200001cc 	.word	0x200001cc
 8001148:	200001de 	.word	0x200001de
 800114c:	200001e0 	.word	0x200001e0
 8001150:	200001e2 	.word	0x200001e2
 8001154:	200001e8 	.word	0x200001e8
 8001158:	200001e4 	.word	0x200001e4
	{
		tempVal += mData[i];
 800115c:	4a2a      	ldr	r2, [pc, #168]	; (8001208 <readDHT11+0x304>)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4413      	add	r3, r2
 8001162:	781a      	ldrb	r2, [r3, #0]
 8001164:	4b29      	ldr	r3, [pc, #164]	; (800120c <readDHT11+0x308>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	4413      	add	r3, r2
 800116a:	b2da      	uxtb	r2, r3
 800116c:	4b27      	ldr	r3, [pc, #156]	; (800120c <readDHT11+0x308>)
 800116e:	701a      	strb	r2, [r3, #0]
		tempVal = tempVal << 1;
 8001170:	4b26      	ldr	r3, [pc, #152]	; (800120c <readDHT11+0x308>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	b2da      	uxtb	r2, r3
 8001178:	4b24      	ldr	r3, [pc, #144]	; (800120c <readDHT11+0x308>)
 800117a:	701a      	strb	r2, [r3, #0]
	for(int i = 16; i < 24; i++)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3301      	adds	r3, #1
 8001180:	607b      	str	r3, [r7, #4]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2b17      	cmp	r3, #23
 8001186:	dde9      	ble.n	800115c <readDHT11+0x258>
	}

	//get parity value from data buffer
	for(int i = 32; i < 40; i++)
 8001188:	2320      	movs	r3, #32
 800118a:	603b      	str	r3, [r7, #0]
 800118c:	e012      	b.n	80011b4 <readDHT11+0x2b0>
	{
		parityVal += mData[i];
 800118e:	4a1e      	ldr	r2, [pc, #120]	; (8001208 <readDHT11+0x304>)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	4413      	add	r3, r2
 8001194:	781a      	ldrb	r2, [r3, #0]
 8001196:	4b1e      	ldr	r3, [pc, #120]	; (8001210 <readDHT11+0x30c>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	4413      	add	r3, r2
 800119c:	b2da      	uxtb	r2, r3
 800119e:	4b1c      	ldr	r3, [pc, #112]	; (8001210 <readDHT11+0x30c>)
 80011a0:	701a      	strb	r2, [r3, #0]
		parityVal = parityVal << 1;
 80011a2:	4b1b      	ldr	r3, [pc, #108]	; (8001210 <readDHT11+0x30c>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	4b19      	ldr	r3, [pc, #100]	; (8001210 <readDHT11+0x30c>)
 80011ac:	701a      	strb	r2, [r3, #0]
	for(int i = 32; i < 40; i++)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	3301      	adds	r3, #1
 80011b2:	603b      	str	r3, [r7, #0]
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	2b27      	cmp	r3, #39	; 0x27
 80011b8:	dde9      	ble.n	800118e <readDHT11+0x28a>
	}

	parityVal = parityVal >> 1;
 80011ba:	4b15      	ldr	r3, [pc, #84]	; (8001210 <readDHT11+0x30c>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	085b      	lsrs	r3, r3, #1
 80011c0:	b2da      	uxtb	r2, r3
 80011c2:	4b13      	ldr	r3, [pc, #76]	; (8001210 <readDHT11+0x30c>)
 80011c4:	701a      	strb	r2, [r3, #0]
	humVal = humVal >> 1;
 80011c6:	4b13      	ldr	r3, [pc, #76]	; (8001214 <readDHT11+0x310>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	085b      	lsrs	r3, r3, #1
 80011cc:	b2da      	uxtb	r2, r3
 80011ce:	4b11      	ldr	r3, [pc, #68]	; (8001214 <readDHT11+0x310>)
 80011d0:	701a      	strb	r2, [r3, #0]
	tempVal = tempVal >> 1;
 80011d2:	4b0e      	ldr	r3, [pc, #56]	; (800120c <readDHT11+0x308>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	085b      	lsrs	r3, r3, #1
 80011d8:	b2da      	uxtb	r2, r3
 80011da:	4b0c      	ldr	r3, [pc, #48]	; (800120c <readDHT11+0x308>)
 80011dc:	701a      	strb	r2, [r3, #0]

	genParity = humVal + tempVal;
 80011de:	4b0d      	ldr	r3, [pc, #52]	; (8001214 <readDHT11+0x310>)
 80011e0:	781a      	ldrb	r2, [r3, #0]
 80011e2:	4b0a      	ldr	r3, [pc, #40]	; (800120c <readDHT11+0x308>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	4413      	add	r3, r2
 80011e8:	b2da      	uxtb	r2, r3
 80011ea:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <readDHT11+0x314>)
 80011ec:	701a      	strb	r2, [r3, #0]

//	if(genParity == parityVal)

	dhttemperSensor.temperature = tempVal;
 80011ee:	4b07      	ldr	r3, [pc, #28]	; (800120c <readDHT11+0x308>)
 80011f0:	781a      	ldrb	r2, [r3, #0]
 80011f2:	4b0a      	ldr	r3, [pc, #40]	; (800121c <readDHT11+0x318>)
 80011f4:	731a      	strb	r2, [r3, #12]
	dhttemperSensor.humidty = humVal;
 80011f6:	4b07      	ldr	r3, [pc, #28]	; (8001214 <readDHT11+0x310>)
 80011f8:	781a      	ldrb	r2, [r3, #0]
 80011fa:	4b08      	ldr	r3, [pc, #32]	; (800121c <readDHT11+0x318>)
 80011fc:	735a      	strb	r2, [r3, #13]


	return 1;
 80011fe:	2301      	movs	r3, #1
}
 8001200:	4618      	mov	r0, r3
 8001202:	3710      	adds	r7, #16
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	200001e8 	.word	0x200001e8
 800120c:	200001e5 	.word	0x200001e5
 8001210:	200001e6 	.word	0x200001e6
 8001214:	200001e4 	.word	0x200001e4
 8001218:	200001e7 	.word	0x200001e7
 800121c:	200001cc 	.word	0x200001cc

08001220 <getCurrentDHTTemper>:
//
//
//	return 1;
//}

float getCurrentDHTTemper(){
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
	return dhttemperSensor.temperature;
 8001224:	4b05      	ldr	r3, [pc, #20]	; (800123c <getCurrentDHTTemper+0x1c>)
 8001226:	7b1b      	ldrb	r3, [r3, #12]
 8001228:	ee07 3a90 	vmov	s15, r3
 800122c:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 8001230:	eeb0 0a67 	vmov.f32	s0, s15
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	200001cc 	.word	0x200001cc

08001240 <getCurrentDHTHud>:

float getCurrentDHTHud(){
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
	return dhttemperSensor.humidty;
 8001244:	4b05      	ldr	r3, [pc, #20]	; (800125c <getCurrentDHTHud+0x1c>)
 8001246:	7b5b      	ldrb	r3, [r3, #13]
 8001248:	ee07 3a90 	vmov	s15, r3
 800124c:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 8001250:	eeb0 0a67 	vmov.f32	s0, s15
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	200001cc 	.word	0x200001cc

08001260 <check_send>:

extern UART_HandleTypeDef huart6;
static char data_send[20];
static int send_cnt = 1;

void check_send(){
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
	int ck_hour = clock_value[2];
 8001266:	4b10      	ldr	r3, [pc, #64]	; (80012a8 <check_send+0x48>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	607b      	str	r3, [r7, #4]
	int send_hour = send_cnt*6;
 800126c:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <check_send+0x4c>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	4613      	mov	r3, r2
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	4413      	add	r3, r2
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	603b      	str	r3, [r7, #0]
	if(ck_hour == send_hour){
 800127a:	687a      	ldr	r2, [r7, #4]
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	429a      	cmp	r2, r3
 8001280:	d10d      	bne.n	800129e <check_send+0x3e>
		send_esp32();
 8001282:	f000 f835 	bl	80012f0 <send_esp32>
		send_cnt++;
 8001286:	4b09      	ldr	r3, [pc, #36]	; (80012ac <check_send+0x4c>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	3301      	adds	r3, #1
 800128c:	4a07      	ldr	r2, [pc, #28]	; (80012ac <check_send+0x4c>)
 800128e:	6013      	str	r3, [r2, #0]
		if(send_cnt >LIMIT_CNT){
 8001290:	4b06      	ldr	r3, [pc, #24]	; (80012ac <check_send+0x4c>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2b03      	cmp	r3, #3
 8001296:	dd02      	ble.n	800129e <check_send+0x3e>
			send_cnt = 0;
 8001298:	4b04      	ldr	r3, [pc, #16]	; (80012ac <check_send+0x4c>)
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
		}
	}
}
 800129e:	bf00      	nop
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	200000ac 	.word	0x200000ac
 80012ac:	20000054 	.word	0x20000054

080012b0 <set_send_cnt>:
void set_send_cnt(int hour){
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
	int set_cnt = (int)hour/6+1;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	4a0b      	ldr	r2, [pc, #44]	; (80012e8 <set_send_cnt+0x38>)
 80012bc:	fb82 1203 	smull	r1, r2, r2, r3
 80012c0:	17db      	asrs	r3, r3, #31
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	3301      	adds	r3, #1
 80012c6:	60fb      	str	r3, [r7, #12]
	if(set_cnt >LIMIT_CNT){
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	2b03      	cmp	r3, #3
 80012cc:	dd03      	ble.n	80012d6 <set_send_cnt+0x26>
		send_cnt = 0;
 80012ce:	4b07      	ldr	r3, [pc, #28]	; (80012ec <set_send_cnt+0x3c>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
	}else{
		send_cnt = set_cnt;
	}
}
 80012d4:	e002      	b.n	80012dc <set_send_cnt+0x2c>
		send_cnt = set_cnt;
 80012d6:	4a05      	ldr	r2, [pc, #20]	; (80012ec <set_send_cnt+0x3c>)
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	6013      	str	r3, [r2, #0]
}
 80012dc:	bf00      	nop
 80012de:	3714      	adds	r7, #20
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	2aaaaaab 	.word	0x2aaaaaab
 80012ec:	20000054 	.word	0x20000054

080012f0 <send_esp32>:

void send_esp32(){
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af02      	add	r7, sp, #8
	int temper = (int)getCurrentDHTTemper();
 80012f6:	f7ff ff93 	bl	8001220 <getCurrentDHTTemper>
 80012fa:	eef0 7a40 	vmov.f32	s15, s0
 80012fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001302:	ee17 3a90 	vmov	r3, s15
 8001306:	607b      	str	r3, [r7, #4]
	int hudmity = (int)getCurrentDHTHud();
 8001308:	f7ff ff9a 	bl	8001240 <getCurrentDHTHud>
 800130c:	eef0 7a40 	vmov.f32	s15, s0
 8001310:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001314:	ee17 3a90 	vmov	r3, s15
 8001318:	603b      	str	r3, [r7, #0]
	sprintf(data_send,"%d,temp:%d,hud:%d\n",send_cnt,temper,hudmity);
 800131a:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <send_esp32+0x58>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	9300      	str	r3, [sp, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4909      	ldr	r1, [pc, #36]	; (800134c <send_esp32+0x5c>)
 8001326:	480a      	ldr	r0, [pc, #40]	; (8001350 <send_esp32+0x60>)
 8001328:	f008 fc8a 	bl	8009c40 <siprintf>
	HAL_UART_Transmit(&huart6, (uint8_t *)data_send, strlen(data_send), 100);
 800132c:	4808      	ldr	r0, [pc, #32]	; (8001350 <send_esp32+0x60>)
 800132e:	f7fe ff77 	bl	8000220 <strlen>
 8001332:	4603      	mov	r3, r0
 8001334:	b29a      	uxth	r2, r3
 8001336:	2364      	movs	r3, #100	; 0x64
 8001338:	4905      	ldr	r1, [pc, #20]	; (8001350 <send_esp32+0x60>)
 800133a:	4806      	ldr	r0, [pc, #24]	; (8001354 <send_esp32+0x64>)
 800133c:	f006 ffd6 	bl	80082ec <HAL_UART_Transmit>
}
 8001340:	bf00      	nop
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	20000054 	.word	0x20000054
 800134c:	0800be80 	.word	0x0800be80
 8001350:	20000210 	.word	0x20000210
 8001354:	2000099c 	.word	0x2000099c

08001358 <opening>:
                 "THU", "FRI", "SAT" };

const char *menus[] = {" Cancel Timer"," Timer Mode"," Alarm Setting"," Clock Modify"};
int prevousPos = -1;

void opening(){
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
	SSD1306_GotoXY(10,10);
 800135c:	210a      	movs	r1, #10
 800135e:	200a      	movs	r0, #10
 8001360:	f000 ff3c 	bl	80021dc <SSD1306_GotoXY>
	if(check_RTC(2)){
 8001364:	2002      	movs	r0, #2
 8001366:	f7ff fb5b 	bl	8000a20 <check_RTC>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d005      	beq.n	800137c <opening+0x24>
		SSD1306_Puts("Alarm Not Set.. ", &Font_7x10, 1);
 8001370:	2201      	movs	r2, #1
 8001372:	4918      	ldr	r1, [pc, #96]	; (80013d4 <opening+0x7c>)
 8001374:	4818      	ldr	r0, [pc, #96]	; (80013d8 <opening+0x80>)
 8001376:	f000 ffc7 	bl	8002308 <SSD1306_Puts>
 800137a:	e006      	b.n	800138a <opening+0x32>
	}else{
		SSD1306_Puts("Alarm Set!! ", &Font_7x10, 1);
 800137c:	2201      	movs	r2, #1
 800137e:	4915      	ldr	r1, [pc, #84]	; (80013d4 <opening+0x7c>)
 8001380:	4816      	ldr	r0, [pc, #88]	; (80013dc <opening+0x84>)
 8001382:	f000 ffc1 	bl	8002308 <SSD1306_Puts>
		get_Alarm();
 8001386:	f7ff fb95 	bl	8000ab4 <get_Alarm>
	}
	SSD1306_GotoXY(10,30);
 800138a:	211e      	movs	r1, #30
 800138c:	200a      	movs	r0, #10
 800138e:	f000 ff25 	bl	80021dc <SSD1306_GotoXY>
	if(check_RTC(1)){
 8001392:	2001      	movs	r0, #1
 8001394:	f7ff fb44 	bl	8000a20 <check_RTC>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d008      	beq.n	80013b0 <opening+0x58>
		SSD1306_Puts("Start_M is Modify", &Font_7x10, 1);
 800139e:	2201      	movs	r2, #1
 80013a0:	490c      	ldr	r1, [pc, #48]	; (80013d4 <opening+0x7c>)
 80013a2:	480f      	ldr	r0, [pc, #60]	; (80013e0 <opening+0x88>)
 80013a4:	f000 ffb0 	bl	8002308 <SSD1306_Puts>
		setMode(3);
 80013a8:	2003      	movs	r0, #3
 80013aa:	f001 fb3d 	bl	8002a28 <setMode>
 80013ae:	e006      	b.n	80013be <opening+0x66>
	}else{
		init_timer_funs();
 80013b0:	f001 fa74 	bl	800289c <init_timer_funs>
		SSD1306_Puts("Start_M is Normal", &Font_7x10, 1);
 80013b4:	2201      	movs	r2, #1
 80013b6:	4907      	ldr	r1, [pc, #28]	; (80013d4 <opening+0x7c>)
 80013b8:	480a      	ldr	r0, [pc, #40]	; (80013e4 <opening+0x8c>)
 80013ba:	f000 ffa5 	bl	8002308 <SSD1306_Puts>
		// 여기서 clock 업데이트 및 RTC 업데이트 필요
	}
	SSD1306_UpdateScreen();
 80013be:	f000 fe67 	bl	8002090 <SSD1306_UpdateScreen>
	HAL_Delay(1000);
 80013c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013c6:	f002 fda3 	bl	8003f10 <HAL_Delay>
	SSD1306_Clear();
 80013ca:	f000 ffc2 	bl	8002352 <SSD1306_Clear>
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20000058 	.word	0x20000058
 80013d8:	0800beec 	.word	0x0800beec
 80013dc:	0800bf00 	.word	0x0800bf00
 80013e0:	0800bf10 	.word	0x0800bf10
 80013e4:	0800bf24 	.word	0x0800bf24

080013e8 <printCalender>:
void startToggle(){
	if(m_toggle_count == 0) m_toggle_count = 4;
}
void printCalender(){
 80013e8:	b5b0      	push	{r4, r5, r7, lr}
 80013ea:	b094      	sub	sp, #80	; 0x50
 80013ec:	af04      	add	r7, sp, #16
	SSD1306_GotoXY(10,10);
 80013ee:	210a      	movs	r1, #10
 80013f0:	200a      	movs	r0, #10
 80013f2:	f000 fef3 	bl	80021dc <SSD1306_GotoXY>
	if(getMode() == 3){
 80013f6:	f001 fb0b 	bl	8002a10 <getMode>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b03      	cmp	r3, #3
 80013fe:	d117      	bne.n	8001430 <printCalender+0x48>
		int s_year = getnYear();
 8001400:	f001 fbfc 	bl	8002bfc <getnYear>
 8001404:	63f8      	str	r0, [r7, #60]	; 0x3c
		int s_month = getnMonth();
 8001406:	f001 fc15 	bl	8002c34 <getnMonth>
 800140a:	63b8      	str	r0, [r7, #56]	; 0x38
		int s_day = getnDay();
 800140c:	f001 fc2e 	bl	8002c6c <getnDay>
 8001410:	6378      	str	r0, [r7, #52]	; 0x34
		t->tm_year = s_year+100;
 8001412:	4b3a      	ldr	r3, [pc, #232]	; (80014fc <printCalender+0x114>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001418:	3264      	adds	r2, #100	; 0x64
 800141a:	615a      	str	r2, [r3, #20]
		t->tm_mon = s_month;
 800141c:	4b37      	ldr	r3, [pc, #220]	; (80014fc <printCalender+0x114>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001422:	611a      	str	r2, [r3, #16]
		t->tm_mday = s_day+1;
 8001424:	4b35      	ldr	r3, [pc, #212]	; (80014fc <printCalender+0x114>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800142a:	3201      	adds	r2, #1
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	e00d      	b.n	800144c <printCalender+0x64>
	}
	else{
		*t = get_struct_tm();
 8001430:	4b32      	ldr	r3, [pc, #200]	; (80014fc <printCalender+0x114>)
 8001432:	681c      	ldr	r4, [r3, #0]
 8001434:	463b      	mov	r3, r7
 8001436:	4618      	mov	r0, r3
 8001438:	f001 fabe 	bl	80029b8 <get_struct_tm>
 800143c:	4625      	mov	r5, r4
 800143e:	463c      	mov	r4, r7
 8001440:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001442:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001444:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001446:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001448:	6823      	ldr	r3, [r4, #0]
 800144a:	602b      	str	r3, [r5, #0]
	}
	cal_t = mktime(t);
 800144c:	4b2b      	ldr	r3, [pc, #172]	; (80014fc <printCalender+0x114>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4618      	mov	r0, r3
 8001452:	f008 f937 	bl	80096c4 <mktime>
 8001456:	4602      	mov	r2, r0
 8001458:	460b      	mov	r3, r1
 800145a:	4929      	ldr	r1, [pc, #164]	; (8001500 <printCalender+0x118>)
 800145c:	e9c1 2300 	strd	r2, r3, [r1]
	int show_year = t->tm_year+1900;
 8001460:	4b26      	ldr	r3, [pc, #152]	; (80014fc <printCalender+0x114>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	695b      	ldr	r3, [r3, #20]
 8001466:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 800146a:	633b      	str	r3, [r7, #48]	; 0x30
	int show_month = t->tm_mon+1;
 800146c:	4b23      	ldr	r3, [pc, #140]	; (80014fc <printCalender+0x114>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	691b      	ldr	r3, [r3, #16]
 8001472:	3301      	adds	r3, #1
 8001474:	62fb      	str	r3, [r7, #44]	; 0x2c
	int show_day = t->tm_mday;
 8001476:	4b21      	ldr	r3, [pc, #132]	; (80014fc <printCalender+0x114>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	62bb      	str	r3, [r7, #40]	; 0x28
	sprintf(calender_time,"%d %d%d/%d%d %s",show_year,show_month/10,show_month%10,show_day/10,show_day%10 ,wday[t->tm_wday]);
 800147e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001480:	4a20      	ldr	r2, [pc, #128]	; (8001504 <printCalender+0x11c>)
 8001482:	fb82 1203 	smull	r1, r2, r2, r3
 8001486:	1092      	asrs	r2, r2, #2
 8001488:	17db      	asrs	r3, r3, #31
 800148a:	1ad5      	subs	r5, r2, r3
 800148c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800148e:	4b1d      	ldr	r3, [pc, #116]	; (8001504 <printCalender+0x11c>)
 8001490:	fb83 2301 	smull	r2, r3, r3, r1
 8001494:	109a      	asrs	r2, r3, #2
 8001496:	17cb      	asrs	r3, r1, #31
 8001498:	1ad2      	subs	r2, r2, r3
 800149a:	4613      	mov	r3, r2
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	4413      	add	r3, r2
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	1aca      	subs	r2, r1, r3
 80014a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014a6:	4917      	ldr	r1, [pc, #92]	; (8001504 <printCalender+0x11c>)
 80014a8:	fb81 0103 	smull	r0, r1, r1, r3
 80014ac:	1089      	asrs	r1, r1, #2
 80014ae:	17db      	asrs	r3, r3, #31
 80014b0:	1acc      	subs	r4, r1, r3
 80014b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80014b4:	4b13      	ldr	r3, [pc, #76]	; (8001504 <printCalender+0x11c>)
 80014b6:	fb83 1300 	smull	r1, r3, r3, r0
 80014ba:	1099      	asrs	r1, r3, #2
 80014bc:	17c3      	asrs	r3, r0, #31
 80014be:	1ac9      	subs	r1, r1, r3
 80014c0:	460b      	mov	r3, r1
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	440b      	add	r3, r1
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	1ac1      	subs	r1, r0, r3
 80014ca:	4b0c      	ldr	r3, [pc, #48]	; (80014fc <printCalender+0x114>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	480d      	ldr	r0, [pc, #52]	; (8001508 <printCalender+0x120>)
 80014d2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80014d6:	9303      	str	r3, [sp, #12]
 80014d8:	9102      	str	r1, [sp, #8]
 80014da:	9401      	str	r4, [sp, #4]
 80014dc:	9200      	str	r2, [sp, #0]
 80014de:	462b      	mov	r3, r5
 80014e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014e2:	490a      	ldr	r1, [pc, #40]	; (800150c <printCalender+0x124>)
 80014e4:	480a      	ldr	r0, [pc, #40]	; (8001510 <printCalender+0x128>)
 80014e6:	f008 fbab 	bl	8009c40 <siprintf>
	SSD1306_Puts(calender_time, &Font_7x10, 1);
 80014ea:	2201      	movs	r2, #1
 80014ec:	4909      	ldr	r1, [pc, #36]	; (8001514 <printCalender+0x12c>)
 80014ee:	4808      	ldr	r0, [pc, #32]	; (8001510 <printCalender+0x128>)
 80014f0:	f000 ff0a 	bl	8002308 <SSD1306_Puts>
}
 80014f4:	bf00      	nop
 80014f6:	3740      	adds	r7, #64	; 0x40
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bdb0      	pop	{r4, r5, r7, pc}
 80014fc:	200002d8 	.word	0x200002d8
 8001500:	200002e0 	.word	0x200002e0
 8001504:	66666667 	.word	0x66666667
 8001508:	20000074 	.word	0x20000074
 800150c:	0800bf38 	.word	0x0800bf38
 8001510:	200002c4 	.word	0x200002c4
 8001514:	20000058 	.word	0x20000058

08001518 <printDefault>:
void printDefault(){
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af02      	add	r7, sp, #8
	printCalender();
 800151e:	f7ff ff63 	bl	80013e8 <printCalender>
	printClock();
 8001522:	f000 f853 	bl	80015cc <printClock>
	printDht();
 8001526:	f000 f8f3 	bl	8001710 <printDht>
	SSD1306_GotoXY(10,50);
 800152a:	2132      	movs	r1, #50	; 0x32
 800152c:	200a      	movs	r0, #10
 800152e:	f000 fe55 	bl	80021dc <SSD1306_GotoXY>
	if(getTimerState()){
 8001532:	f001 fa89 	bl	8002a48 <getTimerState>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d025      	beq.n	8001588 <printDefault+0x70>
		int tMin = timer_value[1];
 800153c:	4b1b      	ldr	r3, [pc, #108]	; (80015ac <printDefault+0x94>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	607b      	str	r3, [r7, #4]
		int tSec = timer_value[0];
 8001542:	4b1a      	ldr	r3, [pc, #104]	; (80015ac <printDefault+0x94>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	603b      	str	r3, [r7, #0]
		sprintf(timer_time,"----- %d:%d%d -----",tMin,tSec/10,tSec%10);
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	4a19      	ldr	r2, [pc, #100]	; (80015b0 <printDefault+0x98>)
 800154c:	fb82 1203 	smull	r1, r2, r2, r3
 8001550:	1092      	asrs	r2, r2, #2
 8001552:	17db      	asrs	r3, r3, #31
 8001554:	1ad0      	subs	r0, r2, r3
 8001556:	6839      	ldr	r1, [r7, #0]
 8001558:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <printDefault+0x98>)
 800155a:	fb83 2301 	smull	r2, r3, r3, r1
 800155e:	109a      	asrs	r2, r3, #2
 8001560:	17cb      	asrs	r3, r1, #31
 8001562:	1ad2      	subs	r2, r2, r3
 8001564:	4613      	mov	r3, r2
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	4413      	add	r3, r2
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	1aca      	subs	r2, r1, r3
 800156e:	9200      	str	r2, [sp, #0]
 8001570:	4603      	mov	r3, r0
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	490f      	ldr	r1, [pc, #60]	; (80015b4 <printDefault+0x9c>)
 8001576:	4810      	ldr	r0, [pc, #64]	; (80015b8 <printDefault+0xa0>)
 8001578:	f008 fb62 	bl	8009c40 <siprintf>
		SSD1306_Puts(timer_time, &Font_7x10, 1);
 800157c:	2201      	movs	r2, #1
 800157e:	490f      	ldr	r1, [pc, #60]	; (80015bc <printDefault+0xa4>)
 8001580:	480d      	ldr	r0, [pc, #52]	; (80015b8 <printDefault+0xa0>)
 8001582:	f000 fec1 	bl	8002308 <SSD1306_Puts>
 8001586:	e00b      	b.n	80015a0 <printDefault+0x88>
	}else{
		sprintf(second_time,"------ %d ------",clock_value[0]);
 8001588:	4b0d      	ldr	r3, [pc, #52]	; (80015c0 <printDefault+0xa8>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	461a      	mov	r2, r3
 800158e:	490d      	ldr	r1, [pc, #52]	; (80015c4 <printDefault+0xac>)
 8001590:	480d      	ldr	r0, [pc, #52]	; (80015c8 <printDefault+0xb0>)
 8001592:	f008 fb55 	bl	8009c40 <siprintf>
		SSD1306_Puts(second_time, &Font_7x10, 1);
 8001596:	2201      	movs	r2, #1
 8001598:	4908      	ldr	r1, [pc, #32]	; (80015bc <printDefault+0xa4>)
 800159a:	480b      	ldr	r0, [pc, #44]	; (80015c8 <printDefault+0xb0>)
 800159c:	f000 feb4 	bl	8002308 <SSD1306_Puts>
	}
	SSD1306_UpdateScreen();
 80015a0:	f000 fd76 	bl	8002090 <SSD1306_UpdateScreen>
}
 80015a4:	bf00      	nop
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	2000075c 	.word	0x2000075c
 80015b0:	66666667 	.word	0x66666667
 80015b4:	0800bf48 	.word	0x0800bf48
 80015b8:	20000224 	.word	0x20000224
 80015bc:	20000058 	.word	0x20000058
 80015c0:	200000ac 	.word	0x200000ac
 80015c4:	0800bf5c 	.word	0x0800bf5c
 80015c8:	2000029c 	.word	0x2000029c

080015cc <printClock>:

// Code by Mireu LEE
void printClock(){
 80015cc:	b5b0      	push	{r4, r5, r7, lr}
 80015ce:	b086      	sub	sp, #24
 80015d0:	af02      	add	r7, sp, #8
	int am_pm = clock_value[2]/13;
 80015d2:	4b46      	ldr	r3, [pc, #280]	; (80016ec <printClock+0x120>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	4a46      	ldr	r2, [pc, #280]	; (80016f0 <printClock+0x124>)
 80015d8:	fb82 1203 	smull	r1, r2, r2, r3
 80015dc:	1092      	asrs	r2, r2, #2
 80015de:	17db      	asrs	r3, r3, #31
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	60fb      	str	r3, [r7, #12]
	int s_hour = clock_value[2];
 80015e4:	4b41      	ldr	r3, [pc, #260]	; (80016ec <printClock+0x120>)
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	60bb      	str	r3, [r7, #8]
	int s_minute = clock_value[1];
 80015ea:	4b40      	ldr	r3, [pc, #256]	; (80016ec <printClock+0x120>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	607b      	str	r3, [r7, #4]
	SSD1306_GotoXY(10,32);
 80015f0:	2120      	movs	r1, #32
 80015f2:	200a      	movs	r0, #10
 80015f4:	f000 fdf2 	bl	80021dc <SSD1306_GotoXY>
	if(am_pm){
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d036      	beq.n	800166c <printClock+0xa0>
		SSD1306_Puts("PM", &Font_7x10, 1);
 80015fe:	2201      	movs	r2, #1
 8001600:	493c      	ldr	r1, [pc, #240]	; (80016f4 <printClock+0x128>)
 8001602:	483d      	ldr	r0, [pc, #244]	; (80016f8 <printClock+0x12c>)
 8001604:	f000 fe80 	bl	8002308 <SSD1306_Puts>
		int hour = s_hour-12;
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	3b0c      	subs	r3, #12
 800160c:	603b      	str	r3, [r7, #0]
		sprintf(clock_time,"%d%d:%d%d",hour/10,hour%10,s_minute/10,s_minute%10);
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	4a3a      	ldr	r2, [pc, #232]	; (80016fc <printClock+0x130>)
 8001612:	fb82 1203 	smull	r1, r2, r2, r3
 8001616:	1092      	asrs	r2, r2, #2
 8001618:	17db      	asrs	r3, r3, #31
 800161a:	1ad5      	subs	r5, r2, r3
 800161c:	683a      	ldr	r2, [r7, #0]
 800161e:	4b37      	ldr	r3, [pc, #220]	; (80016fc <printClock+0x130>)
 8001620:	fb83 1302 	smull	r1, r3, r3, r2
 8001624:	1099      	asrs	r1, r3, #2
 8001626:	17d3      	asrs	r3, r2, #31
 8001628:	1ac8      	subs	r0, r1, r3
 800162a:	4603      	mov	r3, r0
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	4403      	add	r3, r0
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	1ad0      	subs	r0, r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4a31      	ldr	r2, [pc, #196]	; (80016fc <printClock+0x130>)
 8001638:	fb82 1203 	smull	r1, r2, r2, r3
 800163c:	1092      	asrs	r2, r2, #2
 800163e:	17db      	asrs	r3, r3, #31
 8001640:	1ad4      	subs	r4, r2, r3
 8001642:	6879      	ldr	r1, [r7, #4]
 8001644:	4b2d      	ldr	r3, [pc, #180]	; (80016fc <printClock+0x130>)
 8001646:	fb83 2301 	smull	r2, r3, r3, r1
 800164a:	109a      	asrs	r2, r3, #2
 800164c:	17cb      	asrs	r3, r1, #31
 800164e:	1ad2      	subs	r2, r2, r3
 8001650:	4613      	mov	r3, r2
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	4413      	add	r3, r2
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	1aca      	subs	r2, r1, r3
 800165a:	9201      	str	r2, [sp, #4]
 800165c:	9400      	str	r4, [sp, #0]
 800165e:	4603      	mov	r3, r0
 8001660:	462a      	mov	r2, r5
 8001662:	4927      	ldr	r1, [pc, #156]	; (8001700 <printClock+0x134>)
 8001664:	4827      	ldr	r0, [pc, #156]	; (8001704 <printClock+0x138>)
 8001666:	f008 faeb 	bl	8009c40 <siprintf>
 800166a:	e032      	b.n	80016d2 <printClock+0x106>
	}else{
		SSD1306_Puts("AM", &Font_7x10, 1);
 800166c:	2201      	movs	r2, #1
 800166e:	4921      	ldr	r1, [pc, #132]	; (80016f4 <printClock+0x128>)
 8001670:	4825      	ldr	r0, [pc, #148]	; (8001708 <printClock+0x13c>)
 8001672:	f000 fe49 	bl	8002308 <SSD1306_Puts>
		sprintf(clock_time,"%d%d:%d%d",s_hour/10,s_hour%10,s_minute/10,s_minute%10);
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	4a20      	ldr	r2, [pc, #128]	; (80016fc <printClock+0x130>)
 800167a:	fb82 1203 	smull	r1, r2, r2, r3
 800167e:	1092      	asrs	r2, r2, #2
 8001680:	17db      	asrs	r3, r3, #31
 8001682:	1ad5      	subs	r5, r2, r3
 8001684:	68ba      	ldr	r2, [r7, #8]
 8001686:	4b1d      	ldr	r3, [pc, #116]	; (80016fc <printClock+0x130>)
 8001688:	fb83 1302 	smull	r1, r3, r3, r2
 800168c:	1099      	asrs	r1, r3, #2
 800168e:	17d3      	asrs	r3, r2, #31
 8001690:	1ac8      	subs	r0, r1, r3
 8001692:	4603      	mov	r3, r0
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	4403      	add	r3, r0
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	1ad0      	subs	r0, r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4a17      	ldr	r2, [pc, #92]	; (80016fc <printClock+0x130>)
 80016a0:	fb82 1203 	smull	r1, r2, r2, r3
 80016a4:	1092      	asrs	r2, r2, #2
 80016a6:	17db      	asrs	r3, r3, #31
 80016a8:	1ad4      	subs	r4, r2, r3
 80016aa:	6879      	ldr	r1, [r7, #4]
 80016ac:	4b13      	ldr	r3, [pc, #76]	; (80016fc <printClock+0x130>)
 80016ae:	fb83 2301 	smull	r2, r3, r3, r1
 80016b2:	109a      	asrs	r2, r3, #2
 80016b4:	17cb      	asrs	r3, r1, #31
 80016b6:	1ad2      	subs	r2, r2, r3
 80016b8:	4613      	mov	r3, r2
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	4413      	add	r3, r2
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	1aca      	subs	r2, r1, r3
 80016c2:	9201      	str	r2, [sp, #4]
 80016c4:	9400      	str	r4, [sp, #0]
 80016c6:	4603      	mov	r3, r0
 80016c8:	462a      	mov	r2, r5
 80016ca:	490d      	ldr	r1, [pc, #52]	; (8001700 <printClock+0x134>)
 80016cc:	480d      	ldr	r0, [pc, #52]	; (8001704 <printClock+0x138>)
 80016ce:	f008 fab7 	bl	8009c40 <siprintf>
	}
	SSD1306_GotoXY(27,25);
 80016d2:	2119      	movs	r1, #25
 80016d4:	201b      	movs	r0, #27
 80016d6:	f000 fd81 	bl	80021dc <SSD1306_GotoXY>
	SSD1306_Puts(clock_time, &Font_11x18, 1);
 80016da:	2201      	movs	r2, #1
 80016dc:	490b      	ldr	r1, [pc, #44]	; (800170c <printClock+0x140>)
 80016de:	4809      	ldr	r0, [pc, #36]	; (8001704 <printClock+0x138>)
 80016e0:	f000 fe12 	bl	8002308 <SSD1306_Puts>
}
 80016e4:	bf00      	nop
 80016e6:	3710      	adds	r7, #16
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bdb0      	pop	{r4, r5, r7, pc}
 80016ec:	200000ac 	.word	0x200000ac
 80016f0:	4ec4ec4f 	.word	0x4ec4ec4f
 80016f4:	20000058 	.word	0x20000058
 80016f8:	0800bf70 	.word	0x0800bf70
 80016fc:	66666667 	.word	0x66666667
 8001700:	0800bf74 	.word	0x0800bf74
 8001704:	20000274 	.word	0x20000274
 8001708:	0800bf80 	.word	0x0800bf80
 800170c:	20000060 	.word	0x20000060

08001710 <printDht>:

void printDht(){
 8001710:	b580      	push	{r7, lr}
 8001712:	b096      	sub	sp, #88	; 0x58
 8001714:	af00      	add	r7, sp, #0
	int temper = (int)getCurrentDHTTemper();
 8001716:	f7ff fd83 	bl	8001220 <getCurrentDHTTemper>
 800171a:	eef0 7a40 	vmov.f32	s15, s0
 800171e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001722:	ee17 3a90 	vmov	r3, s15
 8001726:	657b      	str	r3, [r7, #84]	; 0x54
	int hudmity = (int)getCurrentDHTHud();
 8001728:	f7ff fd8a 	bl	8001240 <getCurrentDHTHud>
 800172c:	eef0 7a40 	vmov.f32	s15, s0
 8001730:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001734:	ee17 3a90 	vmov	r3, s15
 8001738:	653b      	str	r3, [r7, #80]	; 0x50
	char hud[40], temp[40];
	sprintf(hud,"%d%%",hudmity);
 800173a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800173e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001740:	4911      	ldr	r1, [pc, #68]	; (8001788 <printDht+0x78>)
 8001742:	4618      	mov	r0, r3
 8001744:	f008 fa7c 	bl	8009c40 <siprintf>
	sprintf(temp,"%d'c",temper);
 8001748:	463b      	mov	r3, r7
 800174a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800174c:	490f      	ldr	r1, [pc, #60]	; (800178c <printDht+0x7c>)
 800174e:	4618      	mov	r0, r3
 8001750:	f008 fa76 	bl	8009c40 <siprintf>
	SSD1306_GotoXY(90,25);
 8001754:	2119      	movs	r1, #25
 8001756:	205a      	movs	r0, #90	; 0x5a
 8001758:	f000 fd40 	bl	80021dc <SSD1306_GotoXY>
	SSD1306_Puts(temp, &Font_7x10, 1);
 800175c:	463b      	mov	r3, r7
 800175e:	2201      	movs	r2, #1
 8001760:	490b      	ldr	r1, [pc, #44]	; (8001790 <printDht+0x80>)
 8001762:	4618      	mov	r0, r3
 8001764:	f000 fdd0 	bl	8002308 <SSD1306_Puts>
	SSD1306_GotoXY(90,37);
 8001768:	2125      	movs	r1, #37	; 0x25
 800176a:	205a      	movs	r0, #90	; 0x5a
 800176c:	f000 fd36 	bl	80021dc <SSD1306_GotoXY>
	SSD1306_Puts(hud, &Font_7x10, 1);
 8001770:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001774:	2201      	movs	r2, #1
 8001776:	4906      	ldr	r1, [pc, #24]	; (8001790 <printDht+0x80>)
 8001778:	4618      	mov	r0, r3
 800177a:	f000 fdc5 	bl	8002308 <SSD1306_Puts>
}
 800177e:	bf00      	nop
 8001780:	3758      	adds	r7, #88	; 0x58
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	0800bf84 	.word	0x0800bf84
 800178c:	0800bf8c 	.word	0x0800bf8c
 8001790:	20000058 	.word	0x20000058

08001794 <print_Set_time>:


void print_Set_time(){
 8001794:	b5b0      	push	{r4, r5, r7, lr}
 8001796:	b086      	sub	sp, #24
 8001798:	af02      	add	r7, sp, #8
	int s_hour = getnHour();
 800179a:	f001 f9d7 	bl	8002b4c <getnHour>
 800179e:	60f8      	str	r0, [r7, #12]
	int s_minute = getnMinute();
 80017a0:	f001 f9f4 	bl	8002b8c <getnMinute>
 80017a4:	60b8      	str	r0, [r7, #8]
	int am_pm = s_hour/13;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	4a42      	ldr	r2, [pc, #264]	; (80018b4 <print_Set_time+0x120>)
 80017aa:	fb82 1203 	smull	r1, r2, r2, r3
 80017ae:	1092      	asrs	r2, r2, #2
 80017b0:	17db      	asrs	r3, r3, #31
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	607b      	str	r3, [r7, #4]
	SSD1306_GotoXY(10,32);
 80017b6:	2120      	movs	r1, #32
 80017b8:	200a      	movs	r0, #10
 80017ba:	f000 fd0f 	bl	80021dc <SSD1306_GotoXY>
	if(am_pm){
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d036      	beq.n	8001832 <print_Set_time+0x9e>
		SSD1306_Puts("PM", &Font_7x10, 1);
 80017c4:	2201      	movs	r2, #1
 80017c6:	493c      	ldr	r1, [pc, #240]	; (80018b8 <print_Set_time+0x124>)
 80017c8:	483c      	ldr	r0, [pc, #240]	; (80018bc <print_Set_time+0x128>)
 80017ca:	f000 fd9d 	bl	8002308 <SSD1306_Puts>
		int hour = s_hour-12;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	3b0c      	subs	r3, #12
 80017d2:	603b      	str	r3, [r7, #0]
		sprintf(alarm_time,"%d%d:%d%d",hour/10,hour%10,s_minute/10,s_minute%10);
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	4a3a      	ldr	r2, [pc, #232]	; (80018c0 <print_Set_time+0x12c>)
 80017d8:	fb82 1203 	smull	r1, r2, r2, r3
 80017dc:	1092      	asrs	r2, r2, #2
 80017de:	17db      	asrs	r3, r3, #31
 80017e0:	1ad5      	subs	r5, r2, r3
 80017e2:	683a      	ldr	r2, [r7, #0]
 80017e4:	4b36      	ldr	r3, [pc, #216]	; (80018c0 <print_Set_time+0x12c>)
 80017e6:	fb83 1302 	smull	r1, r3, r3, r2
 80017ea:	1099      	asrs	r1, r3, #2
 80017ec:	17d3      	asrs	r3, r2, #31
 80017ee:	1ac8      	subs	r0, r1, r3
 80017f0:	4603      	mov	r3, r0
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	4403      	add	r3, r0
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	1ad0      	subs	r0, r2, r3
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	4a30      	ldr	r2, [pc, #192]	; (80018c0 <print_Set_time+0x12c>)
 80017fe:	fb82 1203 	smull	r1, r2, r2, r3
 8001802:	1092      	asrs	r2, r2, #2
 8001804:	17db      	asrs	r3, r3, #31
 8001806:	1ad4      	subs	r4, r2, r3
 8001808:	68b9      	ldr	r1, [r7, #8]
 800180a:	4b2d      	ldr	r3, [pc, #180]	; (80018c0 <print_Set_time+0x12c>)
 800180c:	fb83 2301 	smull	r2, r3, r3, r1
 8001810:	109a      	asrs	r2, r3, #2
 8001812:	17cb      	asrs	r3, r1, #31
 8001814:	1ad2      	subs	r2, r2, r3
 8001816:	4613      	mov	r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	4413      	add	r3, r2
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	1aca      	subs	r2, r1, r3
 8001820:	9201      	str	r2, [sp, #4]
 8001822:	9400      	str	r4, [sp, #0]
 8001824:	4603      	mov	r3, r0
 8001826:	462a      	mov	r2, r5
 8001828:	4926      	ldr	r1, [pc, #152]	; (80018c4 <print_Set_time+0x130>)
 800182a:	4827      	ldr	r0, [pc, #156]	; (80018c8 <print_Set_time+0x134>)
 800182c:	f008 fa08 	bl	8009c40 <siprintf>
 8001830:	e032      	b.n	8001898 <print_Set_time+0x104>
	}else{
		SSD1306_Puts("AM", &Font_7x10, 1);
 8001832:	2201      	movs	r2, #1
 8001834:	4920      	ldr	r1, [pc, #128]	; (80018b8 <print_Set_time+0x124>)
 8001836:	4825      	ldr	r0, [pc, #148]	; (80018cc <print_Set_time+0x138>)
 8001838:	f000 fd66 	bl	8002308 <SSD1306_Puts>
		sprintf(alarm_time,"%d%d:%d%d",s_hour/10,s_hour%10,s_minute/10,s_minute%10);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	4a20      	ldr	r2, [pc, #128]	; (80018c0 <print_Set_time+0x12c>)
 8001840:	fb82 1203 	smull	r1, r2, r2, r3
 8001844:	1092      	asrs	r2, r2, #2
 8001846:	17db      	asrs	r3, r3, #31
 8001848:	1ad5      	subs	r5, r2, r3
 800184a:	68fa      	ldr	r2, [r7, #12]
 800184c:	4b1c      	ldr	r3, [pc, #112]	; (80018c0 <print_Set_time+0x12c>)
 800184e:	fb83 1302 	smull	r1, r3, r3, r2
 8001852:	1099      	asrs	r1, r3, #2
 8001854:	17d3      	asrs	r3, r2, #31
 8001856:	1ac8      	subs	r0, r1, r3
 8001858:	4603      	mov	r3, r0
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	4403      	add	r3, r0
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	1ad0      	subs	r0, r2, r3
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	4a16      	ldr	r2, [pc, #88]	; (80018c0 <print_Set_time+0x12c>)
 8001866:	fb82 1203 	smull	r1, r2, r2, r3
 800186a:	1092      	asrs	r2, r2, #2
 800186c:	17db      	asrs	r3, r3, #31
 800186e:	1ad4      	subs	r4, r2, r3
 8001870:	68b9      	ldr	r1, [r7, #8]
 8001872:	4b13      	ldr	r3, [pc, #76]	; (80018c0 <print_Set_time+0x12c>)
 8001874:	fb83 2301 	smull	r2, r3, r3, r1
 8001878:	109a      	asrs	r2, r3, #2
 800187a:	17cb      	asrs	r3, r1, #31
 800187c:	1ad2      	subs	r2, r2, r3
 800187e:	4613      	mov	r3, r2
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	4413      	add	r3, r2
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	1aca      	subs	r2, r1, r3
 8001888:	9201      	str	r2, [sp, #4]
 800188a:	9400      	str	r4, [sp, #0]
 800188c:	4603      	mov	r3, r0
 800188e:	462a      	mov	r2, r5
 8001890:	490c      	ldr	r1, [pc, #48]	; (80018c4 <print_Set_time+0x130>)
 8001892:	480d      	ldr	r0, [pc, #52]	; (80018c8 <print_Set_time+0x134>)
 8001894:	f008 f9d4 	bl	8009c40 <siprintf>
	}
	SSD1306_GotoXY(27,25);
 8001898:	2119      	movs	r1, #25
 800189a:	201b      	movs	r0, #27
 800189c:	f000 fc9e 	bl	80021dc <SSD1306_GotoXY>
	SSD1306_Puts(alarm_time, &Font_11x18, 1);
 80018a0:	2201      	movs	r2, #1
 80018a2:	490b      	ldr	r1, [pc, #44]	; (80018d0 <print_Set_time+0x13c>)
 80018a4:	4808      	ldr	r0, [pc, #32]	; (80018c8 <print_Set_time+0x134>)
 80018a6:	f000 fd2f 	bl	8002308 <SSD1306_Puts>
}
 80018aa:	bf00      	nop
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bdb0      	pop	{r4, r5, r7, pc}
 80018b2:	bf00      	nop
 80018b4:	4ec4ec4f 	.word	0x4ec4ec4f
 80018b8:	20000058 	.word	0x20000058
 80018bc:	0800bf70 	.word	0x0800bf70
 80018c0:	66666667 	.word	0x66666667
 80018c4:	0800bf74 	.word	0x0800bf74
 80018c8:	2000024c 	.word	0x2000024c
 80018cc:	0800bf80 	.word	0x0800bf80
 80018d0:	20000060 	.word	0x20000060

080018d4 <toggleScreen>:
void toggleScreen(){
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
	SSD1306_Clear();
 80018d8:	f000 fd3b 	bl	8002352 <SSD1306_Clear>
}
 80018dc:	bf00      	nop
 80018de:	bd80      	pop	{r7, pc}

080018e0 <menuSelect>:

void menuSelect(){
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b088      	sub	sp, #32
 80018e4:	af00      	add	r7, sp, #0
	int m_pos = getPos();
 80018e6:	f001 f9dd 	bl	8002ca4 <getPos>
 80018ea:	61b8      	str	r0, [r7, #24]
	if(m_pos != prevousPos){
 80018ec:	4b32      	ldr	r3, [pc, #200]	; (80019b8 <menuSelect+0xd8>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d004      	beq.n	8001900 <menuSelect+0x20>
		toggleScreen();
 80018f6:	f7ff ffed 	bl	80018d4 <toggleScreen>
		prevousPos = m_pos;
 80018fa:	4a2f      	ldr	r2, [pc, #188]	; (80019b8 <menuSelect+0xd8>)
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	6013      	str	r3, [r2, #0]
	}
	SSD1306_GotoXY(10,10);
 8001900:	210a      	movs	r1, #10
 8001902:	200a      	movs	r0, #10
 8001904:	f000 fc6a 	bl	80021dc <SSD1306_GotoXY>
	SSD1306_Puts("----------------", &Font_7x10, 1);
 8001908:	2201      	movs	r2, #1
 800190a:	492c      	ldr	r1, [pc, #176]	; (80019bc <menuSelect+0xdc>)
 800190c:	482c      	ldr	r0, [pc, #176]	; (80019c0 <menuSelect+0xe0>)
 800190e:	f000 fcfb 	bl	8002308 <SSD1306_Puts>
	for(int i=1; i<=3; i++){
 8001912:	2301      	movs	r3, #1
 8001914:	61fb      	str	r3, [r7, #28]
 8001916:	e03d      	b.n	8001994 <menuSelect+0xb4>
		char line[20];
		SSD1306_GotoXY(10, pos_y[i-1]);
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	3b01      	subs	r3, #1
 800191c:	4a29      	ldr	r2, [pc, #164]	; (80019c4 <menuSelect+0xe4>)
 800191e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001922:	b29b      	uxth	r3, r3
 8001924:	4619      	mov	r1, r3
 8001926:	200a      	movs	r0, #10
 8001928:	f000 fc58 	bl	80021dc <SSD1306_GotoXY>
		if(i == m_pos+1){
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	3301      	adds	r3, #1
 8001930:	69fa      	ldr	r2, [r7, #28]
 8001932:	429a      	cmp	r2, r3
 8001934:	d11c      	bne.n	8001970 <menuSelect+0x90>
			if(getTimerState() && i == 1){
 8001936:	f001 f887 	bl	8002a48 <getTimerState>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d00d      	beq.n	800195c <menuSelect+0x7c>
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d10a      	bne.n	800195c <menuSelect+0x7c>
				snprintf(line,sizeof(line),">%s",menus[i-1]);
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	3b01      	subs	r3, #1
 800194a:	4a1f      	ldr	r2, [pc, #124]	; (80019c8 <menuSelect+0xe8>)
 800194c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001950:	1d38      	adds	r0, r7, #4
 8001952:	4a1e      	ldr	r2, [pc, #120]	; (80019cc <menuSelect+0xec>)
 8001954:	2114      	movs	r1, #20
 8001956:	f008 f93f 	bl	8009bd8 <sniprintf>
 800195a:	e012      	b.n	8001982 <menuSelect+0xa2>
			}
			else{
				snprintf(line,sizeof(line),">%s",menus[i]);
 800195c:	4a1a      	ldr	r2, [pc, #104]	; (80019c8 <menuSelect+0xe8>)
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001964:	1d38      	adds	r0, r7, #4
 8001966:	4a19      	ldr	r2, [pc, #100]	; (80019cc <menuSelect+0xec>)
 8001968:	2114      	movs	r1, #20
 800196a:	f008 f935 	bl	8009bd8 <sniprintf>
 800196e:	e008      	b.n	8001982 <menuSelect+0xa2>
			}
		}else{
			snprintf(line,sizeof(line),"%s",menus[i]);
 8001970:	4a15      	ldr	r2, [pc, #84]	; (80019c8 <menuSelect+0xe8>)
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001978:	1d38      	adds	r0, r7, #4
 800197a:	4a15      	ldr	r2, [pc, #84]	; (80019d0 <menuSelect+0xf0>)
 800197c:	2114      	movs	r1, #20
 800197e:	f008 f92b 	bl	8009bd8 <sniprintf>
		}
		SSD1306_Puts(line, &Font_7x10, 1);
 8001982:	1d3b      	adds	r3, r7, #4
 8001984:	2201      	movs	r2, #1
 8001986:	490d      	ldr	r1, [pc, #52]	; (80019bc <menuSelect+0xdc>)
 8001988:	4618      	mov	r0, r3
 800198a:	f000 fcbd 	bl	8002308 <SSD1306_Puts>
	for(int i=1; i<=3; i++){
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	3301      	adds	r3, #1
 8001992:	61fb      	str	r3, [r7, #28]
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	2b03      	cmp	r3, #3
 8001998:	ddbe      	ble.n	8001918 <menuSelect+0x38>
	}

	SSD1306_GotoXY(10,50);
 800199a:	2132      	movs	r1, #50	; 0x32
 800199c:	200a      	movs	r0, #10
 800199e:	f000 fc1d 	bl	80021dc <SSD1306_GotoXY>
	SSD1306_Puts("----------------", &Font_7x10, 1);
 80019a2:	2201      	movs	r2, #1
 80019a4:	4905      	ldr	r1, [pc, #20]	; (80019bc <menuSelect+0xdc>)
 80019a6:	4806      	ldr	r0, [pc, #24]	; (80019c0 <menuSelect+0xe0>)
 80019a8:	f000 fcae 	bl	8002308 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 80019ac:	f000 fb70 	bl	8002090 <SSD1306_UpdateScreen>
}
 80019b0:	bf00      	nop
 80019b2:	3720      	adds	r7, #32
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	200000a0 	.word	0x200000a0
 80019bc:	20000058 	.word	0x20000058
 80019c0:	0800bf94 	.word	0x0800bf94
 80019c4:	20000068 	.word	0x20000068
 80019c8:	20000090 	.word	0x20000090
 80019cc:	0800bfa8 	.word	0x0800bfa8
 80019d0:	0800bfac 	.word	0x0800bfac

080019d4 <timer_cancle_lcd>:

void timer_cancle_lcd(){
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
	SSD1306_GotoXY(10,10);
 80019d8:	210a      	movs	r1, #10
 80019da:	200a      	movs	r0, #10
 80019dc:	f000 fbfe 	bl	80021dc <SSD1306_GotoXY>
	SSD1306_Puts("----------------", &Font_7x10, 1);
 80019e0:	2201      	movs	r2, #1
 80019e2:	4912      	ldr	r1, [pc, #72]	; (8001a2c <timer_cancle_lcd+0x58>)
 80019e4:	4812      	ldr	r0, [pc, #72]	; (8001a30 <timer_cancle_lcd+0x5c>)
 80019e6:	f000 fc8f 	bl	8002308 <SSD1306_Puts>
	SSD1306_GotoXY(10,20);
 80019ea:	2114      	movs	r1, #20
 80019ec:	200a      	movs	r0, #10
 80019ee:	f000 fbf5 	bl	80021dc <SSD1306_GotoXY>
	SSD1306_Puts("Timer Mode be", &Font_7x10, 1);
 80019f2:	2201      	movs	r2, #1
 80019f4:	490d      	ldr	r1, [pc, #52]	; (8001a2c <timer_cancle_lcd+0x58>)
 80019f6:	480f      	ldr	r0, [pc, #60]	; (8001a34 <timer_cancle_lcd+0x60>)
 80019f8:	f000 fc86 	bl	8002308 <SSD1306_Puts>
	SSD1306_GotoXY(10,30);
 80019fc:	211e      	movs	r1, #30
 80019fe:	200a      	movs	r0, #10
 8001a00:	f000 fbec 	bl	80021dc <SSD1306_GotoXY>
	SSD1306_Puts("Canceled....", &Font_11x18, 1);
 8001a04:	2201      	movs	r2, #1
 8001a06:	490c      	ldr	r1, [pc, #48]	; (8001a38 <timer_cancle_lcd+0x64>)
 8001a08:	480c      	ldr	r0, [pc, #48]	; (8001a3c <timer_cancle_lcd+0x68>)
 8001a0a:	f000 fc7d 	bl	8002308 <SSD1306_Puts>
	SSD1306_GotoXY(10,50);
 8001a0e:	2132      	movs	r1, #50	; 0x32
 8001a10:	200a      	movs	r0, #10
 8001a12:	f000 fbe3 	bl	80021dc <SSD1306_GotoXY>
	SSD1306_Puts("----------------", &Font_7x10, 1);
 8001a16:	2201      	movs	r2, #1
 8001a18:	4904      	ldr	r1, [pc, #16]	; (8001a2c <timer_cancle_lcd+0x58>)
 8001a1a:	4805      	ldr	r0, [pc, #20]	; (8001a30 <timer_cancle_lcd+0x5c>)
 8001a1c:	f000 fc74 	bl	8002308 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001a20:	f000 fb36 	bl	8002090 <SSD1306_UpdateScreen>
	SSD1306_Clear();
 8001a24:	f000 fc95 	bl	8002352 <SSD1306_Clear>
}
 8001a28:	bf00      	nop
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	20000058 	.word	0x20000058
 8001a30:	0800bf94 	.word	0x0800bf94
 8001a34:	0800bfb0 	.word	0x0800bfb0
 8001a38:	20000060 	.word	0x20000060
 8001a3c:	0800bfc0 	.word	0x0800bfc0

08001a40 <timer_lcd>:


void timer_lcd(){
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
	SSD1306_GotoXY(10,10);
 8001a44:	210a      	movs	r1, #10
 8001a46:	200a      	movs	r0, #10
 8001a48:	f000 fbc8 	bl	80021dc <SSD1306_GotoXY>
	SSD1306_Puts("----------------", &Font_7x10, 1);
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	4916      	ldr	r1, [pc, #88]	; (8001aa8 <timer_lcd+0x68>)
 8001a50:	4816      	ldr	r0, [pc, #88]	; (8001aac <timer_lcd+0x6c>)
 8001a52:	f000 fc59 	bl	8002308 <SSD1306_Puts>
	SSD1306_GotoXY(15,20);
 8001a56:	2114      	movs	r1, #20
 8001a58:	200f      	movs	r0, #15
 8001a5a:	f000 fbbf 	bl	80021dc <SSD1306_GotoXY>
	SSD1306_Puts("Timer Completed!!", &Font_7x10, 1);
 8001a5e:	2201      	movs	r2, #1
 8001a60:	4911      	ldr	r1, [pc, #68]	; (8001aa8 <timer_lcd+0x68>)
 8001a62:	4813      	ldr	r0, [pc, #76]	; (8001ab0 <timer_lcd+0x70>)
 8001a64:	f000 fc50 	bl	8002308 <SSD1306_Puts>
	SSD1306_GotoXY(15,30);
 8001a68:	211e      	movs	r1, #30
 8001a6a:	200f      	movs	r0, #15
 8001a6c:	f000 fbb6 	bl	80021dc <SSD1306_GotoXY>
	SSD1306_Puts("Press The", &Font_7x10, 1);
 8001a70:	2201      	movs	r2, #1
 8001a72:	490d      	ldr	r1, [pc, #52]	; (8001aa8 <timer_lcd+0x68>)
 8001a74:	480f      	ldr	r0, [pc, #60]	; (8001ab4 <timer_lcd+0x74>)
 8001a76:	f000 fc47 	bl	8002308 <SSD1306_Puts>
	SSD1306_GotoXY(15,40);
 8001a7a:	2128      	movs	r1, #40	; 0x28
 8001a7c:	200f      	movs	r0, #15
 8001a7e:	f000 fbad 	bl	80021dc <SSD1306_GotoXY>
	SSD1306_Puts("Can Button", &Font_7x10, 1);
 8001a82:	2201      	movs	r2, #1
 8001a84:	4908      	ldr	r1, [pc, #32]	; (8001aa8 <timer_lcd+0x68>)
 8001a86:	480c      	ldr	r0, [pc, #48]	; (8001ab8 <timer_lcd+0x78>)
 8001a88:	f000 fc3e 	bl	8002308 <SSD1306_Puts>
	SSD1306_GotoXY(10,50);
 8001a8c:	2132      	movs	r1, #50	; 0x32
 8001a8e:	200a      	movs	r0, #10
 8001a90:	f000 fba4 	bl	80021dc <SSD1306_GotoXY>
	SSD1306_Puts("----------------", &Font_7x10, 1);
 8001a94:	2201      	movs	r2, #1
 8001a96:	4904      	ldr	r1, [pc, #16]	; (8001aa8 <timer_lcd+0x68>)
 8001a98:	4804      	ldr	r0, [pc, #16]	; (8001aac <timer_lcd+0x6c>)
 8001a9a:	f000 fc35 	bl	8002308 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001a9e:	f000 faf7 	bl	8002090 <SSD1306_UpdateScreen>
}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20000058 	.word	0x20000058
 8001aac:	0800bf94 	.word	0x0800bf94
 8001ab0:	0800bfd0 	.word	0x0800bfd0
 8001ab4:	0800bfe4 	.word	0x0800bfe4
 8001ab8:	0800bff0 	.word	0x0800bff0

08001abc <n_timer_show>:

void n_timer_show(){
 8001abc:	b5b0      	push	{r4, r5, r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af02      	add	r7, sp, #8
	int minute = getnMinute();
 8001ac2:	f001 f863 	bl	8002b8c <getnMinute>
 8001ac6:	6078      	str	r0, [r7, #4]
	int second = getnSecond();
 8001ac8:	f001 f87c 	bl	8002bc4 <getnSecond>
 8001acc:	6038      	str	r0, [r7, #0]
	sprintf(timer_time,"%d%d:%d%d",minute/10,minute%10,second/10,second%10);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a26      	ldr	r2, [pc, #152]	; (8001b6c <n_timer_show+0xb0>)
 8001ad2:	fb82 1203 	smull	r1, r2, r2, r3
 8001ad6:	1092      	asrs	r2, r2, #2
 8001ad8:	17db      	asrs	r3, r3, #31
 8001ada:	1ad5      	subs	r5, r2, r3
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	4b23      	ldr	r3, [pc, #140]	; (8001b6c <n_timer_show+0xb0>)
 8001ae0:	fb83 1302 	smull	r1, r3, r3, r2
 8001ae4:	1099      	asrs	r1, r3, #2
 8001ae6:	17d3      	asrs	r3, r2, #31
 8001ae8:	1ac8      	subs	r0, r1, r3
 8001aea:	4603      	mov	r3, r0
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	4403      	add	r3, r0
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	1ad0      	subs	r0, r2, r3
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	4a1d      	ldr	r2, [pc, #116]	; (8001b6c <n_timer_show+0xb0>)
 8001af8:	fb82 1203 	smull	r1, r2, r2, r3
 8001afc:	1092      	asrs	r2, r2, #2
 8001afe:	17db      	asrs	r3, r3, #31
 8001b00:	1ad4      	subs	r4, r2, r3
 8001b02:	6839      	ldr	r1, [r7, #0]
 8001b04:	4b19      	ldr	r3, [pc, #100]	; (8001b6c <n_timer_show+0xb0>)
 8001b06:	fb83 2301 	smull	r2, r3, r3, r1
 8001b0a:	109a      	asrs	r2, r3, #2
 8001b0c:	17cb      	asrs	r3, r1, #31
 8001b0e:	1ad2      	subs	r2, r2, r3
 8001b10:	4613      	mov	r3, r2
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	4413      	add	r3, r2
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	1aca      	subs	r2, r1, r3
 8001b1a:	9201      	str	r2, [sp, #4]
 8001b1c:	9400      	str	r4, [sp, #0]
 8001b1e:	4603      	mov	r3, r0
 8001b20:	462a      	mov	r2, r5
 8001b22:	4913      	ldr	r1, [pc, #76]	; (8001b70 <n_timer_show+0xb4>)
 8001b24:	4813      	ldr	r0, [pc, #76]	; (8001b74 <n_timer_show+0xb8>)
 8001b26:	f008 f88b 	bl	8009c40 <siprintf>
	SSD1306_GotoXY(10,10);
 8001b2a:	210a      	movs	r1, #10
 8001b2c:	200a      	movs	r0, #10
 8001b2e:	f000 fb55 	bl	80021dc <SSD1306_GotoXY>
	SSD1306_Puts("----------------", &Font_7x10, 1);
 8001b32:	2201      	movs	r2, #1
 8001b34:	4910      	ldr	r1, [pc, #64]	; (8001b78 <n_timer_show+0xbc>)
 8001b36:	4811      	ldr	r0, [pc, #68]	; (8001b7c <n_timer_show+0xc0>)
 8001b38:	f000 fbe6 	bl	8002308 <SSD1306_Puts>
	SSD1306_GotoXY(28,26);
 8001b3c:	211a      	movs	r1, #26
 8001b3e:	201c      	movs	r0, #28
 8001b40:	f000 fb4c 	bl	80021dc <SSD1306_GotoXY>
	SSD1306_Puts(timer_time, &Font_11x18, 1);
 8001b44:	2201      	movs	r2, #1
 8001b46:	490e      	ldr	r1, [pc, #56]	; (8001b80 <n_timer_show+0xc4>)
 8001b48:	480a      	ldr	r0, [pc, #40]	; (8001b74 <n_timer_show+0xb8>)
 8001b4a:	f000 fbdd 	bl	8002308 <SSD1306_Puts>
	SSD1306_GotoXY(10,50);
 8001b4e:	2132      	movs	r1, #50	; 0x32
 8001b50:	200a      	movs	r0, #10
 8001b52:	f000 fb43 	bl	80021dc <SSD1306_GotoXY>
	SSD1306_Puts("----------------", &Font_7x10, 1);
 8001b56:	2201      	movs	r2, #1
 8001b58:	4907      	ldr	r1, [pc, #28]	; (8001b78 <n_timer_show+0xbc>)
 8001b5a:	4808      	ldr	r0, [pc, #32]	; (8001b7c <n_timer_show+0xc0>)
 8001b5c:	f000 fbd4 	bl	8002308 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001b60:	f000 fa96 	bl	8002090 <SSD1306_UpdateScreen>
}
 8001b64:	bf00      	nop
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bdb0      	pop	{r4, r5, r7, pc}
 8001b6c:	66666667 	.word	0x66666667
 8001b70:	0800bf74 	.word	0x0800bf74
 8001b74:	20000224 	.word	0x20000224
 8001b78:	20000058 	.word	0x20000058
 8001b7c:	0800bf94 	.word	0x0800bf94
 8001b80:	20000060 	.word	0x20000060

08001b84 <n_alarm_show>:

void n_alarm_show(){
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
	printCalender();
 8001b88:	f7ff fc2e 	bl	80013e8 <printCalender>
	print_Set_time();
 8001b8c:	f7ff fe02 	bl	8001794 <print_Set_time>
	SSD1306_GotoXY(10,50);
 8001b90:	2132      	movs	r1, #50	; 0x32
 8001b92:	200a      	movs	r0, #10
 8001b94:	f000 fb22 	bl	80021dc <SSD1306_GotoXY>
	SSD1306_Puts("ALARM_SETTING...", &Font_7x10, 1);
 8001b98:	2201      	movs	r2, #1
 8001b9a:	4904      	ldr	r1, [pc, #16]	; (8001bac <n_alarm_show+0x28>)
 8001b9c:	4804      	ldr	r0, [pc, #16]	; (8001bb0 <n_alarm_show+0x2c>)
 8001b9e:	f000 fbb3 	bl	8002308 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001ba2:	f000 fa75 	bl	8002090 <SSD1306_UpdateScreen>
}
 8001ba6:	bf00      	nop
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	20000058 	.word	0x20000058
 8001bb0:	0800bffc 	.word	0x0800bffc

08001bb4 <n_modify_show>:

void n_modify_show(){
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
	printCalender();
 8001bb8:	f7ff fc16 	bl	80013e8 <printCalender>
	print_Set_time();
 8001bbc:	f7ff fdea 	bl	8001794 <print_Set_time>
	SSD1306_GotoXY(10,50);
 8001bc0:	2132      	movs	r1, #50	; 0x32
 8001bc2:	200a      	movs	r0, #10
 8001bc4:	f000 fb0a 	bl	80021dc <SSD1306_GotoXY>
	SSD1306_Puts("...MODIFYING...", &Font_7x10, 1);
 8001bc8:	2201      	movs	r2, #1
 8001bca:	4904      	ldr	r1, [pc, #16]	; (8001bdc <n_modify_show+0x28>)
 8001bcc:	4804      	ldr	r0, [pc, #16]	; (8001be0 <n_modify_show+0x2c>)
 8001bce:	f000 fb9b 	bl	8002308 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001bd2:	f000 fa5d 	bl	8002090 <SSD1306_UpdateScreen>
}
 8001bd6:	bf00      	nop
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	20000058 	.word	0x20000058
 8001be0:	0800c010 	.word	0x0800c010

08001be4 <check_timer_lcd>:

void check_timer_lcd(){
 8001be4:	b5b0      	push	{r4, r5, r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af02      	add	r7, sp, #8
	int minute = getnMinute();
 8001bea:	f000 ffcf 	bl	8002b8c <getnMinute>
 8001bee:	6078      	str	r0, [r7, #4]
	int second = getnSecond();
 8001bf0:	f000 ffe8 	bl	8002bc4 <getnSecond>
 8001bf4:	6038      	str	r0, [r7, #0]
	sprintf(timer_time,"%d%d:%d%d",minute/10,minute%10,second/10,second%10);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a26      	ldr	r2, [pc, #152]	; (8001c94 <check_timer_lcd+0xb0>)
 8001bfa:	fb82 1203 	smull	r1, r2, r2, r3
 8001bfe:	1092      	asrs	r2, r2, #2
 8001c00:	17db      	asrs	r3, r3, #31
 8001c02:	1ad5      	subs	r5, r2, r3
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	4b23      	ldr	r3, [pc, #140]	; (8001c94 <check_timer_lcd+0xb0>)
 8001c08:	fb83 1302 	smull	r1, r3, r3, r2
 8001c0c:	1099      	asrs	r1, r3, #2
 8001c0e:	17d3      	asrs	r3, r2, #31
 8001c10:	1ac8      	subs	r0, r1, r3
 8001c12:	4603      	mov	r3, r0
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	4403      	add	r3, r0
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	1ad0      	subs	r0, r2, r3
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	4a1d      	ldr	r2, [pc, #116]	; (8001c94 <check_timer_lcd+0xb0>)
 8001c20:	fb82 1203 	smull	r1, r2, r2, r3
 8001c24:	1092      	asrs	r2, r2, #2
 8001c26:	17db      	asrs	r3, r3, #31
 8001c28:	1ad4      	subs	r4, r2, r3
 8001c2a:	6839      	ldr	r1, [r7, #0]
 8001c2c:	4b19      	ldr	r3, [pc, #100]	; (8001c94 <check_timer_lcd+0xb0>)
 8001c2e:	fb83 2301 	smull	r2, r3, r3, r1
 8001c32:	109a      	asrs	r2, r3, #2
 8001c34:	17cb      	asrs	r3, r1, #31
 8001c36:	1ad2      	subs	r2, r2, r3
 8001c38:	4613      	mov	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	4413      	add	r3, r2
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	1aca      	subs	r2, r1, r3
 8001c42:	9201      	str	r2, [sp, #4]
 8001c44:	9400      	str	r4, [sp, #0]
 8001c46:	4603      	mov	r3, r0
 8001c48:	462a      	mov	r2, r5
 8001c4a:	4913      	ldr	r1, [pc, #76]	; (8001c98 <check_timer_lcd+0xb4>)
 8001c4c:	4813      	ldr	r0, [pc, #76]	; (8001c9c <check_timer_lcd+0xb8>)
 8001c4e:	f007 fff7 	bl	8009c40 <siprintf>
	SSD1306_GotoXY(10,10);
 8001c52:	210a      	movs	r1, #10
 8001c54:	200a      	movs	r0, #10
 8001c56:	f000 fac1 	bl	80021dc <SSD1306_GotoXY>
	SSD1306_Puts("----------------", &Font_7x10, 1);
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	4910      	ldr	r1, [pc, #64]	; (8001ca0 <check_timer_lcd+0xbc>)
 8001c5e:	4811      	ldr	r0, [pc, #68]	; (8001ca4 <check_timer_lcd+0xc0>)
 8001c60:	f000 fb52 	bl	8002308 <SSD1306_Puts>
	SSD1306_GotoXY(28,26);
 8001c64:	211a      	movs	r1, #26
 8001c66:	201c      	movs	r0, #28
 8001c68:	f000 fab8 	bl	80021dc <SSD1306_GotoXY>
	SSD1306_Puts(timer_time, &Font_11x18, 1);
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	490e      	ldr	r1, [pc, #56]	; (8001ca8 <check_timer_lcd+0xc4>)
 8001c70:	480a      	ldr	r0, [pc, #40]	; (8001c9c <check_timer_lcd+0xb8>)
 8001c72:	f000 fb49 	bl	8002308 <SSD1306_Puts>
	SSD1306_GotoXY(10,50);
 8001c76:	2132      	movs	r1, #50	; 0x32
 8001c78:	200a      	movs	r0, #10
 8001c7a:	f000 faaf 	bl	80021dc <SSD1306_GotoXY>
	SSD1306_Puts("OK? Y:SEL N:MENU", &Font_7x10, 1);
 8001c7e:	2201      	movs	r2, #1
 8001c80:	4907      	ldr	r1, [pc, #28]	; (8001ca0 <check_timer_lcd+0xbc>)
 8001c82:	480a      	ldr	r0, [pc, #40]	; (8001cac <check_timer_lcd+0xc8>)
 8001c84:	f000 fb40 	bl	8002308 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001c88:	f000 fa02 	bl	8002090 <SSD1306_UpdateScreen>
}
 8001c8c:	bf00      	nop
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bdb0      	pop	{r4, r5, r7, pc}
 8001c94:	66666667 	.word	0x66666667
 8001c98:	0800bf74 	.word	0x0800bf74
 8001c9c:	20000224 	.word	0x20000224
 8001ca0:	20000058 	.word	0x20000058
 8001ca4:	0800bf94 	.word	0x0800bf94
 8001ca8:	20000060 	.word	0x20000060
 8001cac:	0800c020 	.word	0x0800c020

08001cb0 <check_alarm_change_lcd>:

void check_alarm_change_lcd(){
 8001cb0:	b5b0      	push	{r4, r5, r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af02      	add	r7, sp, #8
	int am_pm = (int)alarm_value[2]/13;
 8001cb6:	4b53      	ldr	r3, [pc, #332]	; (8001e04 <check_alarm_change_lcd+0x154>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	4a53      	ldr	r2, [pc, #332]	; (8001e08 <check_alarm_change_lcd+0x158>)
 8001cbc:	fb82 1203 	smull	r1, r2, r2, r3
 8001cc0:	1092      	asrs	r2, r2, #2
 8001cc2:	17db      	asrs	r3, r3, #31
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	607b      	str	r3, [r7, #4]
	if(am_pm){
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d034      	beq.n	8001d38 <check_alarm_change_lcd+0x88>
		int hour = alarm_value[2]-12;
 8001cce:	4b4d      	ldr	r3, [pc, #308]	; (8001e04 <check_alarm_change_lcd+0x154>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	3b0c      	subs	r3, #12
 8001cd4:	603b      	str	r3, [r7, #0]
		sprintf(alarm_time,"You Set Pm %d%d:%d%d",hour/10,hour%10,alarm_value[1]/10,alarm_value[1]%10);
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	4a4c      	ldr	r2, [pc, #304]	; (8001e0c <check_alarm_change_lcd+0x15c>)
 8001cda:	fb82 1203 	smull	r1, r2, r2, r3
 8001cde:	1092      	asrs	r2, r2, #2
 8001ce0:	17db      	asrs	r3, r3, #31
 8001ce2:	1ad5      	subs	r5, r2, r3
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	4b49      	ldr	r3, [pc, #292]	; (8001e0c <check_alarm_change_lcd+0x15c>)
 8001ce8:	fb83 1302 	smull	r1, r3, r3, r2
 8001cec:	1099      	asrs	r1, r3, #2
 8001cee:	17d3      	asrs	r3, r2, #31
 8001cf0:	1ac8      	subs	r0, r1, r3
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	4403      	add	r3, r0
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	1ad0      	subs	r0, r2, r3
 8001cfc:	4b41      	ldr	r3, [pc, #260]	; (8001e04 <check_alarm_change_lcd+0x154>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	4a42      	ldr	r2, [pc, #264]	; (8001e0c <check_alarm_change_lcd+0x15c>)
 8001d02:	fb82 1203 	smull	r1, r2, r2, r3
 8001d06:	1092      	asrs	r2, r2, #2
 8001d08:	17db      	asrs	r3, r3, #31
 8001d0a:	1ad4      	subs	r4, r2, r3
 8001d0c:	4b3d      	ldr	r3, [pc, #244]	; (8001e04 <check_alarm_change_lcd+0x154>)
 8001d0e:	6859      	ldr	r1, [r3, #4]
 8001d10:	4b3e      	ldr	r3, [pc, #248]	; (8001e0c <check_alarm_change_lcd+0x15c>)
 8001d12:	fb83 2301 	smull	r2, r3, r3, r1
 8001d16:	109a      	asrs	r2, r3, #2
 8001d18:	17cb      	asrs	r3, r1, #31
 8001d1a:	1ad2      	subs	r2, r2, r3
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	4413      	add	r3, r2
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	1aca      	subs	r2, r1, r3
 8001d26:	9201      	str	r2, [sp, #4]
 8001d28:	9400      	str	r4, [sp, #0]
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	462a      	mov	r2, r5
 8001d2e:	4938      	ldr	r1, [pc, #224]	; (8001e10 <check_alarm_change_lcd+0x160>)
 8001d30:	4838      	ldr	r0, [pc, #224]	; (8001e14 <check_alarm_change_lcd+0x164>)
 8001d32:	f007 ff85 	bl	8009c40 <siprintf>
 8001d36:	e031      	b.n	8001d9c <check_alarm_change_lcd+0xec>
	}else{
		sprintf(alarm_time,"You Set Am %d%d:%d%d",alarm_value[2]/10,alarm_value[2]%10,alarm_value[1]/10,alarm_value[1]%10);
 8001d38:	4b32      	ldr	r3, [pc, #200]	; (8001e04 <check_alarm_change_lcd+0x154>)
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	4a33      	ldr	r2, [pc, #204]	; (8001e0c <check_alarm_change_lcd+0x15c>)
 8001d3e:	fb82 1203 	smull	r1, r2, r2, r3
 8001d42:	1092      	asrs	r2, r2, #2
 8001d44:	17db      	asrs	r3, r3, #31
 8001d46:	1ad5      	subs	r5, r2, r3
 8001d48:	4b2e      	ldr	r3, [pc, #184]	; (8001e04 <check_alarm_change_lcd+0x154>)
 8001d4a:	689a      	ldr	r2, [r3, #8]
 8001d4c:	4b2f      	ldr	r3, [pc, #188]	; (8001e0c <check_alarm_change_lcd+0x15c>)
 8001d4e:	fb83 1302 	smull	r1, r3, r3, r2
 8001d52:	1099      	asrs	r1, r3, #2
 8001d54:	17d3      	asrs	r3, r2, #31
 8001d56:	1ac8      	subs	r0, r1, r3
 8001d58:	4603      	mov	r3, r0
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	4403      	add	r3, r0
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	1ad0      	subs	r0, r2, r3
 8001d62:	4b28      	ldr	r3, [pc, #160]	; (8001e04 <check_alarm_change_lcd+0x154>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	4a29      	ldr	r2, [pc, #164]	; (8001e0c <check_alarm_change_lcd+0x15c>)
 8001d68:	fb82 1203 	smull	r1, r2, r2, r3
 8001d6c:	1092      	asrs	r2, r2, #2
 8001d6e:	17db      	asrs	r3, r3, #31
 8001d70:	1ad4      	subs	r4, r2, r3
 8001d72:	4b24      	ldr	r3, [pc, #144]	; (8001e04 <check_alarm_change_lcd+0x154>)
 8001d74:	6859      	ldr	r1, [r3, #4]
 8001d76:	4b25      	ldr	r3, [pc, #148]	; (8001e0c <check_alarm_change_lcd+0x15c>)
 8001d78:	fb83 2301 	smull	r2, r3, r3, r1
 8001d7c:	109a      	asrs	r2, r3, #2
 8001d7e:	17cb      	asrs	r3, r1, #31
 8001d80:	1ad2      	subs	r2, r2, r3
 8001d82:	4613      	mov	r3, r2
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	4413      	add	r3, r2
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	1aca      	subs	r2, r1, r3
 8001d8c:	9201      	str	r2, [sp, #4]
 8001d8e:	9400      	str	r4, [sp, #0]
 8001d90:	4603      	mov	r3, r0
 8001d92:	462a      	mov	r2, r5
 8001d94:	4920      	ldr	r1, [pc, #128]	; (8001e18 <check_alarm_change_lcd+0x168>)
 8001d96:	481f      	ldr	r0, [pc, #124]	; (8001e14 <check_alarm_change_lcd+0x164>)
 8001d98:	f007 ff52 	bl	8009c40 <siprintf>
	}
	SSD1306_GotoXY(3,10);
 8001d9c:	210a      	movs	r1, #10
 8001d9e:	2003      	movs	r0, #3
 8001da0:	f000 fa1c 	bl	80021dc <SSD1306_GotoXY>
	SSD1306_Puts("----------------", &Font_7x10, 1);
 8001da4:	2201      	movs	r2, #1
 8001da6:	491d      	ldr	r1, [pc, #116]	; (8001e1c <check_alarm_change_lcd+0x16c>)
 8001da8:	481d      	ldr	r0, [pc, #116]	; (8001e20 <check_alarm_change_lcd+0x170>)
 8001daa:	f000 faad 	bl	8002308 <SSD1306_Puts>
	SSD1306_GotoXY(3,20);
 8001dae:	2114      	movs	r1, #20
 8001db0:	2003      	movs	r0, #3
 8001db2:	f000 fa13 	bl	80021dc <SSD1306_GotoXY>
	// 대충 설정한 시간을 표시
	SSD1306_Puts(alarm_time, &Font_7x10, 1);
 8001db6:	2201      	movs	r2, #1
 8001db8:	4918      	ldr	r1, [pc, #96]	; (8001e1c <check_alarm_change_lcd+0x16c>)
 8001dba:	4816      	ldr	r0, [pc, #88]	; (8001e14 <check_alarm_change_lcd+0x164>)
 8001dbc:	f000 faa4 	bl	8002308 <SSD1306_Puts>
	// you want modify
	SSD1306_GotoXY(3,30);
 8001dc0:	211e      	movs	r1, #30
 8001dc2:	2003      	movs	r0, #3
 8001dc4:	f000 fa0a 	bl	80021dc <SSD1306_GotoXY>
	SSD1306_Puts("Want Change time", &Font_7x10, 1);
 8001dc8:	2201      	movs	r2, #1
 8001dca:	4914      	ldr	r1, [pc, #80]	; (8001e1c <check_alarm_change_lcd+0x16c>)
 8001dcc:	4815      	ldr	r0, [pc, #84]	; (8001e24 <check_alarm_change_lcd+0x174>)
 8001dce:	f000 fa9b 	bl	8002308 <SSD1306_Puts>
	SSD1306_GotoXY(3,40);
 8001dd2:	2128      	movs	r1, #40	; 0x28
 8001dd4:	2003      	movs	r0, #3
 8001dd6:	f000 fa01 	bl	80021dc <SSD1306_GotoXY>
	SSD1306_Puts("Press the SEL BTN", &Font_7x10, 1);
 8001dda:	2201      	movs	r2, #1
 8001ddc:	490f      	ldr	r1, [pc, #60]	; (8001e1c <check_alarm_change_lcd+0x16c>)
 8001dde:	4812      	ldr	r0, [pc, #72]	; (8001e28 <check_alarm_change_lcd+0x178>)
 8001de0:	f000 fa92 	bl	8002308 <SSD1306_Puts>
	SSD1306_GotoXY(3,50);
 8001de4:	2132      	movs	r1, #50	; 0x32
 8001de6:	2003      	movs	r0, #3
 8001de8:	f000 f9f8 	bl	80021dc <SSD1306_GotoXY>
	SSD1306_Puts("----------------", &Font_7x10, 1);
 8001dec:	2201      	movs	r2, #1
 8001dee:	490b      	ldr	r1, [pc, #44]	; (8001e1c <check_alarm_change_lcd+0x16c>)
 8001df0:	480b      	ldr	r0, [pc, #44]	; (8001e20 <check_alarm_change_lcd+0x170>)
 8001df2:	f000 fa89 	bl	8002308 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001df6:	f000 f94b 	bl	8002090 <SSD1306_UpdateScreen>
}
 8001dfa:	bf00      	nop
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bdb0      	pop	{r4, r5, r7, pc}
 8001e02:	bf00      	nop
 8001e04:	20000768 	.word	0x20000768
 8001e08:	4ec4ec4f 	.word	0x4ec4ec4f
 8001e0c:	66666667 	.word	0x66666667
 8001e10:	0800c034 	.word	0x0800c034
 8001e14:	2000024c 	.word	0x2000024c
 8001e18:	0800c04c 	.word	0x0800c04c
 8001e1c:	20000058 	.word	0x20000058
 8001e20:	0800bf94 	.word	0x0800bf94
 8001e24:	0800c064 	.word	0x0800c064
 8001e28:	0800c078 	.word	0x0800c078

08001e2c <check_alarm_lcd>:

void check_alarm_lcd()
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
	printCalender();
 8001e30:	f7ff fada 	bl	80013e8 <printCalender>
	print_Set_time();
 8001e34:	f7ff fcae 	bl	8001794 <print_Set_time>
	SSD1306_GotoXY(10,50);
 8001e38:	2132      	movs	r1, #50	; 0x32
 8001e3a:	200a      	movs	r0, #10
 8001e3c:	f000 f9ce 	bl	80021dc <SSD1306_GotoXY>
	SSD1306_Puts("OK? Y:SEL N:MENU", &Font_7x10, 1);
 8001e40:	2201      	movs	r2, #1
 8001e42:	4904      	ldr	r1, [pc, #16]	; (8001e54 <check_alarm_lcd+0x28>)
 8001e44:	4804      	ldr	r0, [pc, #16]	; (8001e58 <check_alarm_lcd+0x2c>)
 8001e46:	f000 fa5f 	bl	8002308 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001e4a:	f000 f921 	bl	8002090 <SSD1306_UpdateScreen>
}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	20000058 	.word	0x20000058
 8001e58:	0800c020 	.word	0x0800c020

08001e5c <alarm_lcd>:

void alarm_lcd(){
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
	SSD1306_GotoXY(10,10);
 8001e60:	210a      	movs	r1, #10
 8001e62:	200a      	movs	r0, #10
 8001e64:	f000 f9ba 	bl	80021dc <SSD1306_GotoXY>
	SSD1306_Puts("----------------", &Font_7x10, 1);
 8001e68:	2201      	movs	r2, #1
 8001e6a:	4916      	ldr	r1, [pc, #88]	; (8001ec4 <alarm_lcd+0x68>)
 8001e6c:	4816      	ldr	r0, [pc, #88]	; (8001ec8 <alarm_lcd+0x6c>)
 8001e6e:	f000 fa4b 	bl	8002308 <SSD1306_Puts>
	SSD1306_GotoXY(15,20);
 8001e72:	2114      	movs	r1, #20
 8001e74:	200f      	movs	r0, #15
 8001e76:	f000 f9b1 	bl	80021dc <SSD1306_GotoXY>
	SSD1306_Puts("Alarm Completed!!", &Font_7x10, 1);
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	4911      	ldr	r1, [pc, #68]	; (8001ec4 <alarm_lcd+0x68>)
 8001e7e:	4813      	ldr	r0, [pc, #76]	; (8001ecc <alarm_lcd+0x70>)
 8001e80:	f000 fa42 	bl	8002308 <SSD1306_Puts>
	SSD1306_GotoXY(15,30);
 8001e84:	211e      	movs	r1, #30
 8001e86:	200f      	movs	r0, #15
 8001e88:	f000 f9a8 	bl	80021dc <SSD1306_GotoXY>
	SSD1306_Puts("Press The", &Font_7x10, 1);
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	490d      	ldr	r1, [pc, #52]	; (8001ec4 <alarm_lcd+0x68>)
 8001e90:	480f      	ldr	r0, [pc, #60]	; (8001ed0 <alarm_lcd+0x74>)
 8001e92:	f000 fa39 	bl	8002308 <SSD1306_Puts>
	SSD1306_GotoXY(15,40);
 8001e96:	2128      	movs	r1, #40	; 0x28
 8001e98:	200f      	movs	r0, #15
 8001e9a:	f000 f99f 	bl	80021dc <SSD1306_GotoXY>
	SSD1306_Puts("Can Button", &Font_7x10, 1);
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	4908      	ldr	r1, [pc, #32]	; (8001ec4 <alarm_lcd+0x68>)
 8001ea2:	480c      	ldr	r0, [pc, #48]	; (8001ed4 <alarm_lcd+0x78>)
 8001ea4:	f000 fa30 	bl	8002308 <SSD1306_Puts>
	SSD1306_GotoXY(10,50);
 8001ea8:	2132      	movs	r1, #50	; 0x32
 8001eaa:	200a      	movs	r0, #10
 8001eac:	f000 f996 	bl	80021dc <SSD1306_GotoXY>
	SSD1306_Puts("----------------", &Font_7x10, 1);
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	4904      	ldr	r1, [pc, #16]	; (8001ec4 <alarm_lcd+0x68>)
 8001eb4:	4804      	ldr	r0, [pc, #16]	; (8001ec8 <alarm_lcd+0x6c>)
 8001eb6:	f000 fa27 	bl	8002308 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001eba:	f000 f8e9 	bl	8002090 <SSD1306_UpdateScreen>

}
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	20000058 	.word	0x20000058
 8001ec8:	0800bf94 	.word	0x0800bf94
 8001ecc:	0800c08c 	.word	0x0800c08c
 8001ed0:	0800bfe4 	.word	0x0800bfe4
 8001ed4:	0800bff0 	.word	0x0800bff0

08001ed8 <check_modify_lcd>:

void check_modify_lcd(){
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
	printCalender();
 8001edc:	f7ff fa84 	bl	80013e8 <printCalender>
	printClock();
 8001ee0:	f7ff fb74 	bl	80015cc <printClock>
	SSD1306_GotoXY(3,50);
 8001ee4:	2132      	movs	r1, #50	; 0x32
 8001ee6:	2003      	movs	r0, #3
 8001ee8:	f000 f978 	bl	80021dc <SSD1306_GotoXY>
	SSD1306_Puts("OK? Y:SEL N:MENU", &Font_7x10, 1);
 8001eec:	2201      	movs	r2, #1
 8001eee:	4904      	ldr	r1, [pc, #16]	; (8001f00 <check_modify_lcd+0x28>)
 8001ef0:	4804      	ldr	r0, [pc, #16]	; (8001f04 <check_modify_lcd+0x2c>)
 8001ef2:	f000 fa09 	bl	8002308 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001ef6:	f000 f8cb 	bl	8002090 <SSD1306_UpdateScreen>
}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	20000058 	.word	0x20000058
 8001f04:	0800c020 	.word	0x0800c020

08001f08 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001f0e:	f000 fa29 	bl	8002364 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001f12:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001f16:	2201      	movs	r2, #1
 8001f18:	2178      	movs	r1, #120	; 0x78
 8001f1a:	485b      	ldr	r0, [pc, #364]	; (8002088 <SSD1306_Init+0x180>)
 8001f1c:	f003 f89e 	bl	800505c <HAL_I2C_IsDeviceReady>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001f26:	2300      	movs	r3, #0
 8001f28:	e0a9      	b.n	800207e <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001f2a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001f2e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001f30:	e002      	b.n	8001f38 <SSD1306_Init+0x30>
		p--;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	3b01      	subs	r3, #1
 8001f36:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1f9      	bne.n	8001f32 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001f3e:	22ae      	movs	r2, #174	; 0xae
 8001f40:	2100      	movs	r1, #0
 8001f42:	2078      	movs	r0, #120	; 0x78
 8001f44:	f000 fa8a 	bl	800245c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001f48:	2220      	movs	r2, #32
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	2078      	movs	r0, #120	; 0x78
 8001f4e:	f000 fa85 	bl	800245c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001f52:	2210      	movs	r2, #16
 8001f54:	2100      	movs	r1, #0
 8001f56:	2078      	movs	r0, #120	; 0x78
 8001f58:	f000 fa80 	bl	800245c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001f5c:	22b0      	movs	r2, #176	; 0xb0
 8001f5e:	2100      	movs	r1, #0
 8001f60:	2078      	movs	r0, #120	; 0x78
 8001f62:	f000 fa7b 	bl	800245c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001f66:	22c8      	movs	r2, #200	; 0xc8
 8001f68:	2100      	movs	r1, #0
 8001f6a:	2078      	movs	r0, #120	; 0x78
 8001f6c:	f000 fa76 	bl	800245c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001f70:	2200      	movs	r2, #0
 8001f72:	2100      	movs	r1, #0
 8001f74:	2078      	movs	r0, #120	; 0x78
 8001f76:	f000 fa71 	bl	800245c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001f7a:	2210      	movs	r2, #16
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	2078      	movs	r0, #120	; 0x78
 8001f80:	f000 fa6c 	bl	800245c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001f84:	2240      	movs	r2, #64	; 0x40
 8001f86:	2100      	movs	r1, #0
 8001f88:	2078      	movs	r0, #120	; 0x78
 8001f8a:	f000 fa67 	bl	800245c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001f8e:	2281      	movs	r2, #129	; 0x81
 8001f90:	2100      	movs	r1, #0
 8001f92:	2078      	movs	r0, #120	; 0x78
 8001f94:	f000 fa62 	bl	800245c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001f98:	22ff      	movs	r2, #255	; 0xff
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	2078      	movs	r0, #120	; 0x78
 8001f9e:	f000 fa5d 	bl	800245c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001fa2:	22a1      	movs	r2, #161	; 0xa1
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	2078      	movs	r0, #120	; 0x78
 8001fa8:	f000 fa58 	bl	800245c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001fac:	22a6      	movs	r2, #166	; 0xa6
 8001fae:	2100      	movs	r1, #0
 8001fb0:	2078      	movs	r0, #120	; 0x78
 8001fb2:	f000 fa53 	bl	800245c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001fb6:	22a8      	movs	r2, #168	; 0xa8
 8001fb8:	2100      	movs	r1, #0
 8001fba:	2078      	movs	r0, #120	; 0x78
 8001fbc:	f000 fa4e 	bl	800245c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001fc0:	223f      	movs	r2, #63	; 0x3f
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	2078      	movs	r0, #120	; 0x78
 8001fc6:	f000 fa49 	bl	800245c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001fca:	22a4      	movs	r2, #164	; 0xa4
 8001fcc:	2100      	movs	r1, #0
 8001fce:	2078      	movs	r0, #120	; 0x78
 8001fd0:	f000 fa44 	bl	800245c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001fd4:	22d3      	movs	r2, #211	; 0xd3
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	2078      	movs	r0, #120	; 0x78
 8001fda:	f000 fa3f 	bl	800245c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001fde:	2200      	movs	r2, #0
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	2078      	movs	r0, #120	; 0x78
 8001fe4:	f000 fa3a 	bl	800245c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001fe8:	22d5      	movs	r2, #213	; 0xd5
 8001fea:	2100      	movs	r1, #0
 8001fec:	2078      	movs	r0, #120	; 0x78
 8001fee:	f000 fa35 	bl	800245c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001ff2:	22f0      	movs	r2, #240	; 0xf0
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	2078      	movs	r0, #120	; 0x78
 8001ff8:	f000 fa30 	bl	800245c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001ffc:	22d9      	movs	r2, #217	; 0xd9
 8001ffe:	2100      	movs	r1, #0
 8002000:	2078      	movs	r0, #120	; 0x78
 8002002:	f000 fa2b 	bl	800245c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8002006:	2222      	movs	r2, #34	; 0x22
 8002008:	2100      	movs	r1, #0
 800200a:	2078      	movs	r0, #120	; 0x78
 800200c:	f000 fa26 	bl	800245c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8002010:	22da      	movs	r2, #218	; 0xda
 8002012:	2100      	movs	r1, #0
 8002014:	2078      	movs	r0, #120	; 0x78
 8002016:	f000 fa21 	bl	800245c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800201a:	2212      	movs	r2, #18
 800201c:	2100      	movs	r1, #0
 800201e:	2078      	movs	r0, #120	; 0x78
 8002020:	f000 fa1c 	bl	800245c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002024:	22db      	movs	r2, #219	; 0xdb
 8002026:	2100      	movs	r1, #0
 8002028:	2078      	movs	r0, #120	; 0x78
 800202a:	f000 fa17 	bl	800245c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800202e:	2220      	movs	r2, #32
 8002030:	2100      	movs	r1, #0
 8002032:	2078      	movs	r0, #120	; 0x78
 8002034:	f000 fa12 	bl	800245c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002038:	228d      	movs	r2, #141	; 0x8d
 800203a:	2100      	movs	r1, #0
 800203c:	2078      	movs	r0, #120	; 0x78
 800203e:	f000 fa0d 	bl	800245c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8002042:	2214      	movs	r2, #20
 8002044:	2100      	movs	r1, #0
 8002046:	2078      	movs	r0, #120	; 0x78
 8002048:	f000 fa08 	bl	800245c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800204c:	22af      	movs	r2, #175	; 0xaf
 800204e:	2100      	movs	r1, #0
 8002050:	2078      	movs	r0, #120	; 0x78
 8002052:	f000 fa03 	bl	800245c <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8002056:	222e      	movs	r2, #46	; 0x2e
 8002058:	2100      	movs	r1, #0
 800205a:	2078      	movs	r0, #120	; 0x78
 800205c:	f000 f9fe 	bl	800245c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002060:	2000      	movs	r0, #0
 8002062:	f000 f843 	bl	80020ec <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8002066:	f000 f813 	bl	8002090 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800206a:	4b08      	ldr	r3, [pc, #32]	; (800208c <SSD1306_Init+0x184>)
 800206c:	2200      	movs	r2, #0
 800206e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002070:	4b06      	ldr	r3, [pc, #24]	; (800208c <SSD1306_Init+0x184>)
 8002072:	2200      	movs	r2, #0
 8002074:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8002076:	4b05      	ldr	r3, [pc, #20]	; (800208c <SSD1306_Init+0x184>)
 8002078:	2201      	movs	r2, #1
 800207a:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 800207c:	2301      	movs	r3, #1
}
 800207e:	4618      	mov	r0, r3
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	200007c8 	.word	0x200007c8
 800208c:	200006e8 	.word	0x200006e8

08002090 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8002096:	2300      	movs	r3, #0
 8002098:	71fb      	strb	r3, [r7, #7]
 800209a:	e01d      	b.n	80020d8 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800209c:	79fb      	ldrb	r3, [r7, #7]
 800209e:	3b50      	subs	r3, #80	; 0x50
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	461a      	mov	r2, r3
 80020a4:	2100      	movs	r1, #0
 80020a6:	2078      	movs	r0, #120	; 0x78
 80020a8:	f000 f9d8 	bl	800245c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80020ac:	2200      	movs	r2, #0
 80020ae:	2100      	movs	r1, #0
 80020b0:	2078      	movs	r0, #120	; 0x78
 80020b2:	f000 f9d3 	bl	800245c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80020b6:	2210      	movs	r2, #16
 80020b8:	2100      	movs	r1, #0
 80020ba:	2078      	movs	r0, #120	; 0x78
 80020bc:	f000 f9ce 	bl	800245c <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80020c0:	79fb      	ldrb	r3, [r7, #7]
 80020c2:	01db      	lsls	r3, r3, #7
 80020c4:	4a08      	ldr	r2, [pc, #32]	; (80020e8 <SSD1306_UpdateScreen+0x58>)
 80020c6:	441a      	add	r2, r3
 80020c8:	2380      	movs	r3, #128	; 0x80
 80020ca:	2140      	movs	r1, #64	; 0x40
 80020cc:	2078      	movs	r0, #120	; 0x78
 80020ce:	f000 f95f 	bl	8002390 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80020d2:	79fb      	ldrb	r3, [r7, #7]
 80020d4:	3301      	adds	r3, #1
 80020d6:	71fb      	strb	r3, [r7, #7]
 80020d8:	79fb      	ldrb	r3, [r7, #7]
 80020da:	2b07      	cmp	r3, #7
 80020dc:	d9de      	bls.n	800209c <SSD1306_UpdateScreen+0xc>
	}
}
 80020de:	bf00      	nop
 80020e0:	bf00      	nop
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	200002e8 	.word	0x200002e8

080020ec <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	4603      	mov	r3, r0
 80020f4:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80020f6:	79fb      	ldrb	r3, [r7, #7]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d101      	bne.n	8002100 <SSD1306_Fill+0x14>
 80020fc:	2300      	movs	r3, #0
 80020fe:	e000      	b.n	8002102 <SSD1306_Fill+0x16>
 8002100:	23ff      	movs	r3, #255	; 0xff
 8002102:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002106:	4619      	mov	r1, r3
 8002108:	4803      	ldr	r0, [pc, #12]	; (8002118 <SSD1306_Fill+0x2c>)
 800210a:	f007 f9fb 	bl	8009504 <memset>
}
 800210e:	bf00      	nop
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	200002e8 	.word	0x200002e8

0800211c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	4603      	mov	r3, r0
 8002124:	80fb      	strh	r3, [r7, #6]
 8002126:	460b      	mov	r3, r1
 8002128:	80bb      	strh	r3, [r7, #4]
 800212a:	4613      	mov	r3, r2
 800212c:	70fb      	strb	r3, [r7, #3]
	if (
 800212e:	88fb      	ldrh	r3, [r7, #6]
 8002130:	2b7f      	cmp	r3, #127	; 0x7f
 8002132:	d848      	bhi.n	80021c6 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8002134:	88bb      	ldrh	r3, [r7, #4]
 8002136:	2b3f      	cmp	r3, #63	; 0x3f
 8002138:	d845      	bhi.n	80021c6 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800213a:	4b26      	ldr	r3, [pc, #152]	; (80021d4 <SSD1306_DrawPixel+0xb8>)
 800213c:	791b      	ldrb	r3, [r3, #4]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d006      	beq.n	8002150 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8002142:	78fb      	ldrb	r3, [r7, #3]
 8002144:	2b00      	cmp	r3, #0
 8002146:	bf0c      	ite	eq
 8002148:	2301      	moveq	r3, #1
 800214a:	2300      	movne	r3, #0
 800214c:	b2db      	uxtb	r3, r3
 800214e:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8002150:	78fb      	ldrb	r3, [r7, #3]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d11a      	bne.n	800218c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002156:	88fa      	ldrh	r2, [r7, #6]
 8002158:	88bb      	ldrh	r3, [r7, #4]
 800215a:	08db      	lsrs	r3, r3, #3
 800215c:	b298      	uxth	r0, r3
 800215e:	4603      	mov	r3, r0
 8002160:	01db      	lsls	r3, r3, #7
 8002162:	4413      	add	r3, r2
 8002164:	4a1c      	ldr	r2, [pc, #112]	; (80021d8 <SSD1306_DrawPixel+0xbc>)
 8002166:	5cd3      	ldrb	r3, [r2, r3]
 8002168:	b25a      	sxtb	r2, r3
 800216a:	88bb      	ldrh	r3, [r7, #4]
 800216c:	f003 0307 	and.w	r3, r3, #7
 8002170:	2101      	movs	r1, #1
 8002172:	fa01 f303 	lsl.w	r3, r1, r3
 8002176:	b25b      	sxtb	r3, r3
 8002178:	4313      	orrs	r3, r2
 800217a:	b259      	sxtb	r1, r3
 800217c:	88fa      	ldrh	r2, [r7, #6]
 800217e:	4603      	mov	r3, r0
 8002180:	01db      	lsls	r3, r3, #7
 8002182:	4413      	add	r3, r2
 8002184:	b2c9      	uxtb	r1, r1
 8002186:	4a14      	ldr	r2, [pc, #80]	; (80021d8 <SSD1306_DrawPixel+0xbc>)
 8002188:	54d1      	strb	r1, [r2, r3]
 800218a:	e01d      	b.n	80021c8 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800218c:	88fa      	ldrh	r2, [r7, #6]
 800218e:	88bb      	ldrh	r3, [r7, #4]
 8002190:	08db      	lsrs	r3, r3, #3
 8002192:	b298      	uxth	r0, r3
 8002194:	4603      	mov	r3, r0
 8002196:	01db      	lsls	r3, r3, #7
 8002198:	4413      	add	r3, r2
 800219a:	4a0f      	ldr	r2, [pc, #60]	; (80021d8 <SSD1306_DrawPixel+0xbc>)
 800219c:	5cd3      	ldrb	r3, [r2, r3]
 800219e:	b25a      	sxtb	r2, r3
 80021a0:	88bb      	ldrh	r3, [r7, #4]
 80021a2:	f003 0307 	and.w	r3, r3, #7
 80021a6:	2101      	movs	r1, #1
 80021a8:	fa01 f303 	lsl.w	r3, r1, r3
 80021ac:	b25b      	sxtb	r3, r3
 80021ae:	43db      	mvns	r3, r3
 80021b0:	b25b      	sxtb	r3, r3
 80021b2:	4013      	ands	r3, r2
 80021b4:	b259      	sxtb	r1, r3
 80021b6:	88fa      	ldrh	r2, [r7, #6]
 80021b8:	4603      	mov	r3, r0
 80021ba:	01db      	lsls	r3, r3, #7
 80021bc:	4413      	add	r3, r2
 80021be:	b2c9      	uxtb	r1, r1
 80021c0:	4a05      	ldr	r2, [pc, #20]	; (80021d8 <SSD1306_DrawPixel+0xbc>)
 80021c2:	54d1      	strb	r1, [r2, r3]
 80021c4:	e000      	b.n	80021c8 <SSD1306_DrawPixel+0xac>
		return;
 80021c6:	bf00      	nop
	}
}
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	200006e8 	.word	0x200006e8
 80021d8:	200002e8 	.word	0x200002e8

080021dc <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	4603      	mov	r3, r0
 80021e4:	460a      	mov	r2, r1
 80021e6:	80fb      	strh	r3, [r7, #6]
 80021e8:	4613      	mov	r3, r2
 80021ea:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80021ec:	4a05      	ldr	r2, [pc, #20]	; (8002204 <SSD1306_GotoXY+0x28>)
 80021ee:	88fb      	ldrh	r3, [r7, #6]
 80021f0:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80021f2:	4a04      	ldr	r2, [pc, #16]	; (8002204 <SSD1306_GotoXY+0x28>)
 80021f4:	88bb      	ldrh	r3, [r7, #4]
 80021f6:	8053      	strh	r3, [r2, #2]
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr
 8002204:	200006e8 	.word	0x200006e8

08002208 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	4603      	mov	r3, r0
 8002210:	6039      	str	r1, [r7, #0]
 8002212:	71fb      	strb	r3, [r7, #7]
 8002214:	4613      	mov	r3, r2
 8002216:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002218:	4b3a      	ldr	r3, [pc, #232]	; (8002304 <SSD1306_Putc+0xfc>)
 800221a:	881b      	ldrh	r3, [r3, #0]
 800221c:	461a      	mov	r2, r3
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	4413      	add	r3, r2
	if (
 8002224:	2b7f      	cmp	r3, #127	; 0x7f
 8002226:	dc07      	bgt.n	8002238 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8002228:	4b36      	ldr	r3, [pc, #216]	; (8002304 <SSD1306_Putc+0xfc>)
 800222a:	885b      	ldrh	r3, [r3, #2]
 800222c:	461a      	mov	r2, r3
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	785b      	ldrb	r3, [r3, #1]
 8002232:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002234:	2b3f      	cmp	r3, #63	; 0x3f
 8002236:	dd01      	ble.n	800223c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8002238:	2300      	movs	r3, #0
 800223a:	e05e      	b.n	80022fa <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 800223c:	2300      	movs	r3, #0
 800223e:	617b      	str	r3, [r7, #20]
 8002240:	e04b      	b.n	80022da <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685a      	ldr	r2, [r3, #4]
 8002246:	79fb      	ldrb	r3, [r7, #7]
 8002248:	3b20      	subs	r3, #32
 800224a:	6839      	ldr	r1, [r7, #0]
 800224c:	7849      	ldrb	r1, [r1, #1]
 800224e:	fb01 f303 	mul.w	r3, r1, r3
 8002252:	4619      	mov	r1, r3
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	440b      	add	r3, r1
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	4413      	add	r3, r2
 800225c:	881b      	ldrh	r3, [r3, #0]
 800225e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8002260:	2300      	movs	r3, #0
 8002262:	613b      	str	r3, [r7, #16]
 8002264:	e030      	b.n	80022c8 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d010      	beq.n	8002298 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8002276:	4b23      	ldr	r3, [pc, #140]	; (8002304 <SSD1306_Putc+0xfc>)
 8002278:	881a      	ldrh	r2, [r3, #0]
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	b29b      	uxth	r3, r3
 800227e:	4413      	add	r3, r2
 8002280:	b298      	uxth	r0, r3
 8002282:	4b20      	ldr	r3, [pc, #128]	; (8002304 <SSD1306_Putc+0xfc>)
 8002284:	885a      	ldrh	r2, [r3, #2]
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	b29b      	uxth	r3, r3
 800228a:	4413      	add	r3, r2
 800228c:	b29b      	uxth	r3, r3
 800228e:	79ba      	ldrb	r2, [r7, #6]
 8002290:	4619      	mov	r1, r3
 8002292:	f7ff ff43 	bl	800211c <SSD1306_DrawPixel>
 8002296:	e014      	b.n	80022c2 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002298:	4b1a      	ldr	r3, [pc, #104]	; (8002304 <SSD1306_Putc+0xfc>)
 800229a:	881a      	ldrh	r2, [r3, #0]
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	b29b      	uxth	r3, r3
 80022a0:	4413      	add	r3, r2
 80022a2:	b298      	uxth	r0, r3
 80022a4:	4b17      	ldr	r3, [pc, #92]	; (8002304 <SSD1306_Putc+0xfc>)
 80022a6:	885a      	ldrh	r2, [r3, #2]
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	4413      	add	r3, r2
 80022ae:	b299      	uxth	r1, r3
 80022b0:	79bb      	ldrb	r3, [r7, #6]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	bf0c      	ite	eq
 80022b6:	2301      	moveq	r3, #1
 80022b8:	2300      	movne	r3, #0
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	461a      	mov	r2, r3
 80022be:	f7ff ff2d 	bl	800211c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	3301      	adds	r3, #1
 80022c6:	613b      	str	r3, [r7, #16]
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	461a      	mov	r2, r3
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d3c8      	bcc.n	8002266 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	3301      	adds	r3, #1
 80022d8:	617b      	str	r3, [r7, #20]
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	785b      	ldrb	r3, [r3, #1]
 80022de:	461a      	mov	r2, r3
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d3ad      	bcc.n	8002242 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80022e6:	4b07      	ldr	r3, [pc, #28]	; (8002304 <SSD1306_Putc+0xfc>)
 80022e8:	881a      	ldrh	r2, [r3, #0]
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	4413      	add	r3, r2
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	4b03      	ldr	r3, [pc, #12]	; (8002304 <SSD1306_Putc+0xfc>)
 80022f6:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80022f8:	79fb      	ldrb	r3, [r7, #7]
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3718      	adds	r7, #24
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	200006e8 	.word	0x200006e8

08002308 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	4613      	mov	r3, r2
 8002314:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8002316:	e012      	b.n	800233e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	79fa      	ldrb	r2, [r7, #7]
 800231e:	68b9      	ldr	r1, [r7, #8]
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff ff71 	bl	8002208 <SSD1306_Putc>
 8002326:	4603      	mov	r3, r0
 8002328:	461a      	mov	r2, r3
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	429a      	cmp	r2, r3
 8002330:	d002      	beq.n	8002338 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	e008      	b.n	800234a <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	3301      	adds	r3, #1
 800233c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1e8      	bne.n	8002318 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	781b      	ldrb	r3, [r3, #0]
}
 800234a:	4618      	mov	r0, r3
 800234c:	3710      	adds	r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8002352:	b580      	push	{r7, lr}
 8002354:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8002356:	2000      	movs	r0, #0
 8002358:	f7ff fec8 	bl	80020ec <SSD1306_Fill>
    SSD1306_UpdateScreen();
 800235c:	f7ff fe98 	bl	8002090 <SSD1306_UpdateScreen>
}
 8002360:	bf00      	nop
 8002362:	bd80      	pop	{r7, pc}

08002364 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800236a:	4b08      	ldr	r3, [pc, #32]	; (800238c <ssd1306_I2C_Init+0x28>)
 800236c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800236e:	e002      	b.n	8002376 <ssd1306_I2C_Init+0x12>
		p--;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	3b01      	subs	r3, #1
 8002374:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d1f9      	bne.n	8002370 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 800237c:	bf00      	nop
 800237e:	bf00      	nop
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	0003d090 	.word	0x0003d090

08002390 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002390:	b590      	push	{r4, r7, lr}
 8002392:	b0c7      	sub	sp, #284	; 0x11c
 8002394:	af02      	add	r7, sp, #8
 8002396:	4604      	mov	r4, r0
 8002398:	4608      	mov	r0, r1
 800239a:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800239e:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 80023a2:	600a      	str	r2, [r1, #0]
 80023a4:	4619      	mov	r1, r3
 80023a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80023aa:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80023ae:	4622      	mov	r2, r4
 80023b0:	701a      	strb	r2, [r3, #0]
 80023b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80023b6:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80023ba:	4602      	mov	r2, r0
 80023bc:	701a      	strb	r2, [r3, #0]
 80023be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80023c2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80023c6:	460a      	mov	r2, r1
 80023c8:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80023ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80023ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80023d2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80023d6:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 80023da:	7812      	ldrb	r2, [r2, #0]
 80023dc:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80023de:	2300      	movs	r3, #0
 80023e0:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80023e4:	e015      	b.n	8002412 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80023e6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80023ea:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80023ee:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80023f2:	6812      	ldr	r2, [r2, #0]
 80023f4:	441a      	add	r2, r3
 80023f6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80023fa:	3301      	adds	r3, #1
 80023fc:	7811      	ldrb	r1, [r2, #0]
 80023fe:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002402:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8002406:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8002408:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800240c:	3301      	adds	r3, #1
 800240e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002412:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002416:	b29b      	uxth	r3, r3
 8002418:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800241c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8002420:	8812      	ldrh	r2, [r2, #0]
 8002422:	429a      	cmp	r2, r3
 8002424:	d8df      	bhi.n	80023e6 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8002426:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800242a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	b299      	uxth	r1, r3
 8002432:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002436:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800243a:	881b      	ldrh	r3, [r3, #0]
 800243c:	3301      	adds	r3, #1
 800243e:	b29b      	uxth	r3, r3
 8002440:	f107 020c 	add.w	r2, r7, #12
 8002444:	200a      	movs	r0, #10
 8002446:	9000      	str	r0, [sp, #0]
 8002448:	4803      	ldr	r0, [pc, #12]	; (8002458 <ssd1306_I2C_WriteMulti+0xc8>)
 800244a:	f002 fd13 	bl	8004e74 <HAL_I2C_Master_Transmit>
}
 800244e:	bf00      	nop
 8002450:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8002454:	46bd      	mov	sp, r7
 8002456:	bd90      	pop	{r4, r7, pc}
 8002458:	200007c8 	.word	0x200007c8

0800245c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af02      	add	r7, sp, #8
 8002462:	4603      	mov	r3, r0
 8002464:	71fb      	strb	r3, [r7, #7]
 8002466:	460b      	mov	r3, r1
 8002468:	71bb      	strb	r3, [r7, #6]
 800246a:	4613      	mov	r3, r2
 800246c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800246e:	79bb      	ldrb	r3, [r7, #6]
 8002470:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8002472:	797b      	ldrb	r3, [r7, #5]
 8002474:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8002476:	79fb      	ldrb	r3, [r7, #7]
 8002478:	b299      	uxth	r1, r3
 800247a:	f107 020c 	add.w	r2, r7, #12
 800247e:	230a      	movs	r3, #10
 8002480:	9300      	str	r3, [sp, #0]
 8002482:	2302      	movs	r3, #2
 8002484:	4803      	ldr	r0, [pc, #12]	; (8002494 <ssd1306_I2C_Write+0x38>)
 8002486:	f002 fcf5 	bl	8004e74 <HAL_I2C_Master_Transmit>
}
 800248a:	bf00      	nop
 800248c:	3710      	adds	r7, #16
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	200007c8 	.word	0x200007c8

08002498 <handleButtonPress>:
// m_Process case is Modify the Clock's Hour and Minute Process_number, 0 is hour Modify, 1 is Minute Modify,
// i think Add a mode, year,month,day Modify Modes
static int m_Process_case = 0;


bool handleButtonPress(int *process_case, int increment) {
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
    if (select_btn) {
 80024a2:	4b1e      	ldr	r3, [pc, #120]	; (800251c <handleButtonPress+0x84>)
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d012      	beq.n	80024d0 <handleButtonPress+0x38>
        select_btn = 0;  // 0은 false
 80024aa:	4b1c      	ldr	r3, [pc, #112]	; (800251c <handleButtonPress+0x84>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	701a      	strb	r2, [r3, #0]
        if(*process_case >99){
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2b63      	cmp	r3, #99	; 0x63
 80024b6:	dd03      	ble.n	80024c0 <handleButtonPress+0x28>
			*process_case = 0;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	e005      	b.n	80024cc <handleButtonPress+0x34>
		}else{
			*process_case += increment;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	441a      	add	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	601a      	str	r2, [r3, #0]
		}
        return true;  // 1은 true
 80024cc:	2301      	movs	r3, #1
 80024ce:	e020      	b.n	8002512 <handleButtonPress+0x7a>
    }else if (cancel_btn){
 80024d0:	4b13      	ldr	r3, [pc, #76]	; (8002520 <handleButtonPress+0x88>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d01c      	beq.n	8002512 <handleButtonPress+0x7a>
    	cancel_btn = 0;
 80024d8:	4b11      	ldr	r3, [pc, #68]	; (8002520 <handleButtonPress+0x88>)
 80024da:	2200      	movs	r2, #0
 80024dc:	701a      	strb	r2, [r3, #0]
    	if(*process_case >99){
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2b63      	cmp	r3, #99	; 0x63
 80024e4:	dd03      	ble.n	80024ee <handleButtonPress+0x56>
    		setMode(0);
 80024e6:	2000      	movs	r0, #0
 80024e8:	f000 fa9e 	bl	8002a28 <setMode>
 80024ec:	e005      	b.n	80024fa <handleButtonPress+0x62>
    	}else{
    		*process_case -= increment;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	1ad2      	subs	r2, r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	601a      	str	r2, [r3, #0]
    	}
    	if(*process_case < 0){
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	da05      	bge.n	800250e <handleButtonPress+0x76>
    		*process_case=0;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]
    		setMode(0);
 8002508:	2000      	movs	r0, #0
 800250a:	f000 fa8d 	bl	8002a28 <setMode>
    	}
    	return false;  // 0은 false
 800250e:	2300      	movs	r3, #0
 8002510:	e7ff      	b.n	8002512 <handleButtonPress+0x7a>
    }
}
 8002512:	4618      	mov	r0, r3
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	2000075b 	.word	0x2000075b
 8002520:	20000758 	.word	0x20000758

08002524 <processTimerMinute>:

void processTimerMinute() {
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
    set_Minute();
 8002528:	f7fe f920 	bl	800076c <set_Minute>
    if (handleButtonPress( &t_Process_case, 1)== true) {
 800252c:	2101      	movs	r1, #1
 800252e:	4806      	ldr	r0, [pc, #24]	; (8002548 <processTimerMinute+0x24>)
 8002530:	f7ff ffb2 	bl	8002498 <handleButtonPress>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d004      	beq.n	8002544 <processTimerMinute+0x20>
        timer_value[1] = getnMinute();
 800253a:	f000 fb27 	bl	8002b8c <getnMinute>
 800253e:	4603      	mov	r3, r0
 8002540:	4a02      	ldr	r2, [pc, #8]	; (800254c <processTimerMinute+0x28>)
 8002542:	6053      	str	r3, [r2, #4]
    }
}
 8002544:	bf00      	nop
 8002546:	bd80      	pop	{r7, pc}
 8002548:	200006f0 	.word	0x200006f0
 800254c:	2000075c 	.word	0x2000075c

08002550 <processTimerSecond>:

void processTimerSecond() {
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
    set_Second();
 8002554:	f7fe f954 	bl	8000800 <set_Second>
    if (handleButtonPress(&t_Process_case, 1) == true) {
 8002558:	2101      	movs	r1, #1
 800255a:	4806      	ldr	r0, [pc, #24]	; (8002574 <processTimerSecond+0x24>)
 800255c:	f7ff ff9c 	bl	8002498 <handleButtonPress>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d004      	beq.n	8002570 <processTimerSecond+0x20>
        timer_value[0] = getnSecond();
 8002566:	f000 fb2d 	bl	8002bc4 <getnSecond>
 800256a:	4603      	mov	r3, r0
 800256c:	4a02      	ldr	r2, [pc, #8]	; (8002578 <processTimerSecond+0x28>)
 800256e:	6013      	str	r3, [r2, #0]
    }
}
 8002570:	bf00      	nop
 8002572:	bd80      	pop	{r7, pc}
 8002574:	200006f0 	.word	0x200006f0
 8002578:	2000075c 	.word	0x2000075c

0800257c <processTimerReview>:

void processTimerReview() {
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
    check_timer_lcd();
 8002580:	f7ff fb30 	bl	8001be4 <check_timer_lcd>
    if (handleButtonPress(&t_Process_case, 1)== true) {
 8002584:	2101      	movs	r1, #1
 8002586:	480d      	ldr	r0, [pc, #52]	; (80025bc <processTimerReview+0x40>)
 8002588:	f7ff ff86 	bl	8002498 <handleButtonPress>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d011      	beq.n	80025b6 <processTimerReview+0x3a>
        cal_Second();
 8002592:	f7fe f9e1 	bl	8000958 <cal_Second>
        t_Process_case = 0;
 8002596:	4b09      	ldr	r3, [pc, #36]	; (80025bc <processTimerReview+0x40>)
 8002598:	2200      	movs	r2, #0
 800259a:	601a      	str	r2, [r3, #0]
        setTimerState(1);
 800259c:	2001      	movs	r0, #1
 800259e:	f000 fa5f 	bl	8002a60 <setTimerState>
        setnMinute(0);
 80025a2:	2000      	movs	r0, #0
 80025a4:	f000 fafe 	bl	8002ba4 <setnMinute>
        setnSecond(0);
 80025a8:	2000      	movs	r0, #0
 80025aa:	f000 fb17 	bl	8002bdc <setnSecond>
        setMode(-1);
 80025ae:	f04f 30ff 	mov.w	r0, #4294967295
 80025b2:	f000 fa39 	bl	8002a28 <setMode>
    }
}
 80025b6:	bf00      	nop
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	200006f0 	.word	0x200006f0

080025c0 <processAlarmChangeCheck>:


void processAlarmChangeCheck() {
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
	check_alarm_change_lcd();
 80025c4:	f7ff fb74 	bl	8001cb0 <check_alarm_change_lcd>
    if (handleButtonPress(&a_Process_case, 1)== true) {
 80025c8:	2101      	movs	r1, #1
 80025ca:	4806      	ldr	r0, [pc, #24]	; (80025e4 <processAlarmChangeCheck+0x24>)
 80025cc:	f7ff ff64 	bl	8002498 <handleButtonPress>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d004      	beq.n	80025e0 <processAlarmChangeCheck+0x20>
        setAlarmState(0);
 80025d6:	2000      	movs	r0, #0
 80025d8:	f000 fa5e 	bl	8002a98 <setAlarmState>
        toggleScreen();
 80025dc:	f7ff f97a 	bl	80018d4 <toggleScreen>
    }
}
 80025e0:	bf00      	nop
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	200006f4 	.word	0x200006f4

080025e8 <processAlarmHour>:

void processAlarmHour(int *input_Process_case) {
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
    set_Hour();
 80025f0:	f7fe f87a 	bl	80006e8 <set_Hour>
    if (handleButtonPress(input_Process_case, 1) == true) {
 80025f4:	2101      	movs	r1, #1
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f7ff ff4e 	bl	8002498 <handleButtonPress>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d013      	beq.n	800262a <processAlarmHour+0x42>
    	int mode = getMode();
 8002602:	f000 fa05 	bl	8002a10 <getMode>
 8002606:	60f8      	str	r0, [r7, #12]
    	if(mode==2){
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2b02      	cmp	r3, #2
 800260c:	d105      	bne.n	800261a <processAlarmHour+0x32>
    		alarm_value[2] = getnHour();
 800260e:	f000 fa9d 	bl	8002b4c <getnHour>
 8002612:	4603      	mov	r3, r0
 8002614:	4a07      	ldr	r2, [pc, #28]	; (8002634 <processAlarmHour+0x4c>)
 8002616:	6093      	str	r3, [r2, #8]
    	}else if(mode==3){
    		clock_value[2] = getnHour();
    	}
    }
}
 8002618:	e007      	b.n	800262a <processAlarmHour+0x42>
    	}else if(mode==3){
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2b03      	cmp	r3, #3
 800261e:	d104      	bne.n	800262a <processAlarmHour+0x42>
    		clock_value[2] = getnHour();
 8002620:	f000 fa94 	bl	8002b4c <getnHour>
 8002624:	4603      	mov	r3, r0
 8002626:	4a04      	ldr	r2, [pc, #16]	; (8002638 <processAlarmHour+0x50>)
 8002628:	6093      	str	r3, [r2, #8]
}
 800262a:	bf00      	nop
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	20000768 	.word	0x20000768
 8002638:	200000ac 	.word	0x200000ac

0800263c <processAlarmMinute>:

void processAlarmMinute(int *input_Process_case){
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
    set_Minute();
 8002644:	f7fe f892 	bl	800076c <set_Minute>
    if (handleButtonPress(input_Process_case, 1) == true) {
 8002648:	2101      	movs	r1, #1
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f7ff ff24 	bl	8002498 <handleButtonPress>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d013      	beq.n	800267e <processAlarmMinute+0x42>
    	int mode = getMode();
 8002656:	f000 f9db 	bl	8002a10 <getMode>
 800265a:	60f8      	str	r0, [r7, #12]
    	if(mode == 2){
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2b02      	cmp	r3, #2
 8002660:	d105      	bne.n	800266e <processAlarmMinute+0x32>
    		alarm_value[1] = getnMinute();
 8002662:	f000 fa93 	bl	8002b8c <getnMinute>
 8002666:	4603      	mov	r3, r0
 8002668:	4a07      	ldr	r2, [pc, #28]	; (8002688 <processAlarmMinute+0x4c>)
 800266a:	6053      	str	r3, [r2, #4]
    	}else if(mode ==3){
    		clock_value[1] = getnMinute();
    	}
    }
}
 800266c:	e007      	b.n	800267e <processAlarmMinute+0x42>
    	}else if(mode ==3){
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2b03      	cmp	r3, #3
 8002672:	d104      	bne.n	800267e <processAlarmMinute+0x42>
    		clock_value[1] = getnMinute();
 8002674:	f000 fa8a 	bl	8002b8c <getnMinute>
 8002678:	4603      	mov	r3, r0
 800267a:	4a04      	ldr	r2, [pc, #16]	; (800268c <processAlarmMinute+0x50>)
 800267c:	6053      	str	r3, [r2, #4]
}
 800267e:	bf00      	nop
 8002680:	3710      	adds	r7, #16
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	20000768 	.word	0x20000768
 800268c:	200000ac 	.word	0x200000ac

08002690 <processAlarmReview>:

void processAlarmReview() {
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
    check_alarm_lcd();
 8002694:	f7ff fbca 	bl	8001e2c <check_alarm_lcd>
    handleButtonPress( &a_Process_case, 1);
 8002698:	2101      	movs	r1, #1
 800269a:	4802      	ldr	r0, [pc, #8]	; (80026a4 <processAlarmReview+0x14>)
 800269c:	f7ff fefc 	bl	8002498 <handleButtonPress>
}
 80026a0:	bf00      	nop
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	200006f4 	.word	0x200006f4

080026a8 <processAlarmFinalization>:

void processAlarmFinalization() {
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
	setAlarmState(1);
 80026ae:	2001      	movs	r0, #1
 80026b0:	f000 f9f2 	bl	8002a98 <setAlarmState>
	int aHour = getnHour();
 80026b4:	f000 fa4a 	bl	8002b4c <getnHour>
 80026b8:	6078      	str	r0, [r7, #4]
	int aMin = getnMinute();
 80026ba:	f000 fa67 	bl	8002b8c <getnMinute>
 80026be:	6038      	str	r0, [r7, #0]
	set_Alarm(aHour,aMin);
 80026c0:	6839      	ldr	r1, [r7, #0]
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f7fe fa30 	bl	8000b28 <set_Alarm>
    setnHour(0);
 80026c8:	2000      	movs	r0, #0
 80026ca:	f000 fa4b 	bl	8002b64 <setnHour>
    setnMinute(0);
 80026ce:	2000      	movs	r0, #0
 80026d0:	f000 fa68 	bl	8002ba4 <setnMinute>
    n_alarm_show();
 80026d4:	f7ff fa56 	bl	8001b84 <n_alarm_show>
    setMode(-1);
 80026d8:	f04f 30ff 	mov.w	r0, #4294967295
 80026dc:	f000 f9a4 	bl	8002a28 <setMode>
    a_Process_case = 0;
 80026e0:	4b03      	ldr	r3, [pc, #12]	; (80026f0 <processAlarmFinalization+0x48>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	601a      	str	r2, [r3, #0]
}
 80026e6:	bf00      	nop
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	200006f4 	.word	0x200006f4

080026f4 <processModifyCalender>:

void processModifyCalender(int *input_Process_case){
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
	set_Calender(*input_Process_case);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4618      	mov	r0, r3
 8002702:	f7fe f8b3 	bl	800086c <set_Calender>
	handleButtonPress(input_Process_case, 1);
 8002706:	2101      	movs	r1, #1
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f7ff fec5 	bl	8002498 <handleButtonPress>
}
 800270e:	bf00      	nop
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <processModifyCheck>:
void processModifyCheck(int *input_Process_case){
 8002716:	b580      	push	{r7, lr}
 8002718:	b082      	sub	sp, #8
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
	check_modify_lcd();
 800271e:	f7ff fbdb 	bl	8001ed8 <check_modify_lcd>
	handleButtonPress(input_Process_case, 1);
 8002722:	2101      	movs	r1, #1
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f7ff feb7 	bl	8002498 <handleButtonPress>
}
 800272a:	bf00      	nop
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
	...

08002734 <processModifyFinalization>:

void processModifyFinalization(){
 8002734:	b5b0      	push	{r4, r5, r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af02      	add	r7, sp, #8
	set_tm_strut(getnYear(),getnMonth(),getnDay()+1,clock_value[2],clock_value[1]);
 800273a:	f000 fa5f 	bl	8002bfc <getnYear>
 800273e:	4604      	mov	r4, r0
 8002740:	f000 fa78 	bl	8002c34 <getnMonth>
 8002744:	4605      	mov	r5, r0
 8002746:	f000 fa91 	bl	8002c6c <getnDay>
 800274a:	4603      	mov	r3, r0
 800274c:	1c5a      	adds	r2, r3, #1
 800274e:	4b0c      	ldr	r3, [pc, #48]	; (8002780 <processModifyFinalization+0x4c>)
 8002750:	6899      	ldr	r1, [r3, #8]
 8002752:	4b0b      	ldr	r3, [pc, #44]	; (8002780 <processModifyFinalization+0x4c>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	9300      	str	r3, [sp, #0]
 8002758:	460b      	mov	r3, r1
 800275a:	4629      	mov	r1, r5
 800275c:	4620      	mov	r0, r4
 800275e:	f000 f8c7 	bl	80028f0 <set_tm_strut>
	set_RTC_Time_t();
 8002762:	f000 f8f5 	bl	8002950 <set_RTC_Time_t>
	default_second = 0;
 8002766:	4b07      	ldr	r3, [pc, #28]	; (8002784 <processModifyFinalization+0x50>)
 8002768:	2200      	movs	r2, #0
 800276a:	601a      	str	r2, [r3, #0]
	setMode(-1);
 800276c:	f04f 30ff 	mov.w	r0, #4294967295
 8002770:	f000 f95a 	bl	8002a28 <setMode>
	m_Process_case = 0;
 8002774:	4b04      	ldr	r3, [pc, #16]	; (8002788 <processModifyFinalization+0x54>)
 8002776:	2200      	movs	r2, #0
 8002778:	601a      	str	r2, [r3, #0]
}
 800277a:	bf00      	nop
 800277c:	46bd      	mov	sp, r7
 800277e:	bdb0      	pop	{r4, r5, r7, pc}
 8002780:	200000ac 	.word	0x200000ac
 8002784:	20000774 	.word	0x20000774
 8002788:	200006f8 	.word	0x200006f8

0800278c <timer_Process>:

void timer_Process() {
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
    switch (t_Process_case) {
 8002790:	4b0a      	ldr	r3, [pc, #40]	; (80027bc <timer_Process+0x30>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2b02      	cmp	r3, #2
 8002796:	d00c      	beq.n	80027b2 <timer_Process+0x26>
 8002798:	2b02      	cmp	r3, #2
 800279a:	dc0d      	bgt.n	80027b8 <timer_Process+0x2c>
 800279c:	2b00      	cmp	r3, #0
 800279e:	d002      	beq.n	80027a6 <timer_Process+0x1a>
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d003      	beq.n	80027ac <timer_Process+0x20>
            break;
        case 2:
            processTimerReview();
            break;
    }
}
 80027a4:	e008      	b.n	80027b8 <timer_Process+0x2c>
            processTimerMinute();
 80027a6:	f7ff febd 	bl	8002524 <processTimerMinute>
            break;
 80027aa:	e005      	b.n	80027b8 <timer_Process+0x2c>
            processTimerSecond();
 80027ac:	f7ff fed0 	bl	8002550 <processTimerSecond>
            break;
 80027b0:	e002      	b.n	80027b8 <timer_Process+0x2c>
            processTimerReview();
 80027b2:	f7ff fee3 	bl	800257c <processTimerReview>
            break;
 80027b6:	bf00      	nop
}
 80027b8:	bf00      	nop
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	200006f0 	.word	0x200006f0

080027c0 <alarm_Process>:

void alarm_Process() {
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
    if (getAlarmState()) {
 80027c4:	f000 f95c 	bl	8002a80 <getAlarmState>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d002      	beq.n	80027d4 <alarm_Process+0x14>
        a_Process_case = 100;
 80027ce:	4b16      	ldr	r3, [pc, #88]	; (8002828 <alarm_Process+0x68>)
 80027d0:	2264      	movs	r2, #100	; 0x64
 80027d2:	601a      	str	r2, [r3, #0]
    }
    switch (a_Process_case) {
 80027d4:	4b14      	ldr	r3, [pc, #80]	; (8002828 <alarm_Process+0x68>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2b03      	cmp	r3, #3
 80027da:	dc0f      	bgt.n	80027fc <alarm_Process+0x3c>
 80027dc:	2b00      	cmp	r3, #0
 80027de:	db21      	blt.n	8002824 <alarm_Process+0x64>
 80027e0:	2b03      	cmp	r3, #3
 80027e2:	d81f      	bhi.n	8002824 <alarm_Process+0x64>
 80027e4:	a201      	add	r2, pc, #4	; (adr r2, 80027ec <alarm_Process+0x2c>)
 80027e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ea:	bf00      	nop
 80027ec:	08002803 	.word	0x08002803
 80027f0:	0800280b 	.word	0x0800280b
 80027f4:	08002813 	.word	0x08002813
 80027f8:	08002819 	.word	0x08002819
 80027fc:	2b64      	cmp	r3, #100	; 0x64
 80027fe:	d00e      	beq.n	800281e <alarm_Process+0x5e>
            break;
        case 100: // if You Set a Alarm before, Process_Value bigger than All Phase
			processAlarmChangeCheck();
			break;
    }
}
 8002800:	e010      	b.n	8002824 <alarm_Process+0x64>
            processAlarmHour(&a_Process_case);
 8002802:	4809      	ldr	r0, [pc, #36]	; (8002828 <alarm_Process+0x68>)
 8002804:	f7ff fef0 	bl	80025e8 <processAlarmHour>
            break;
 8002808:	e00c      	b.n	8002824 <alarm_Process+0x64>
            processAlarmMinute(&a_Process_case);
 800280a:	4807      	ldr	r0, [pc, #28]	; (8002828 <alarm_Process+0x68>)
 800280c:	f7ff ff16 	bl	800263c <processAlarmMinute>
            break;
 8002810:	e008      	b.n	8002824 <alarm_Process+0x64>
            processAlarmReview();
 8002812:	f7ff ff3d 	bl	8002690 <processAlarmReview>
            break;
 8002816:	e005      	b.n	8002824 <alarm_Process+0x64>
            processAlarmFinalization();
 8002818:	f7ff ff46 	bl	80026a8 <processAlarmFinalization>
            break;
 800281c:	e002      	b.n	8002824 <alarm_Process+0x64>
			processAlarmChangeCheck();
 800281e:	f7ff fecf 	bl	80025c0 <processAlarmChangeCheck>
			break;
 8002822:	bf00      	nop
}
 8002824:	bf00      	nop
 8002826:	bd80      	pop	{r7, pc}
 8002828:	200006f4 	.word	0x200006f4

0800282c <modify_Process>:
void modify_Process(){
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
	switch(m_Process_case){
 8002830:	4b19      	ldr	r3, [pc, #100]	; (8002898 <modify_Process+0x6c>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2b06      	cmp	r3, #6
 8002836:	d82c      	bhi.n	8002892 <modify_Process+0x66>
 8002838:	a201      	add	r2, pc, #4	; (adr r2, 8002840 <modify_Process+0x14>)
 800283a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800283e:	bf00      	nop
 8002840:	0800285d 	.word	0x0800285d
 8002844:	08002865 	.word	0x08002865
 8002848:	0800286d 	.word	0x0800286d
 800284c:	08002875 	.word	0x08002875
 8002850:	0800287d 	.word	0x0800287d
 8002854:	08002885 	.word	0x08002885
 8002858:	0800288d 	.word	0x0800288d
	case 0 :
		processModifyCalender(&m_Process_case);
 800285c:	480e      	ldr	r0, [pc, #56]	; (8002898 <modify_Process+0x6c>)
 800285e:	f7ff ff49 	bl	80026f4 <processModifyCalender>
		break;
 8002862:	e016      	b.n	8002892 <modify_Process+0x66>
	case 1:
		processModifyCalender(&m_Process_case);
 8002864:	480c      	ldr	r0, [pc, #48]	; (8002898 <modify_Process+0x6c>)
 8002866:	f7ff ff45 	bl	80026f4 <processModifyCalender>
		break;
 800286a:	e012      	b.n	8002892 <modify_Process+0x66>
	case 2:
		// show the Check the OLED
		processModifyCalender(&m_Process_case);
 800286c:	480a      	ldr	r0, [pc, #40]	; (8002898 <modify_Process+0x6c>)
 800286e:	f7ff ff41 	bl	80026f4 <processModifyCalender>
		break;
 8002872:	e00e      	b.n	8002892 <modify_Process+0x66>
	case 3:
		processAlarmHour(&m_Process_case);
 8002874:	4808      	ldr	r0, [pc, #32]	; (8002898 <modify_Process+0x6c>)
 8002876:	f7ff feb7 	bl	80025e8 <processAlarmHour>
		break;
 800287a:	e00a      	b.n	8002892 <modify_Process+0x66>
	case 4:
		processAlarmMinute(&m_Process_case);
 800287c:	4806      	ldr	r0, [pc, #24]	; (8002898 <modify_Process+0x6c>)
 800287e:	f7ff fedd 	bl	800263c <processAlarmMinute>
		break;
 8002882:	e006      	b.n	8002892 <modify_Process+0x66>
	case 5:
		processModifyCheck(&m_Process_case);
 8002884:	4804      	ldr	r0, [pc, #16]	; (8002898 <modify_Process+0x6c>)
 8002886:	f7ff ff46 	bl	8002716 <processModifyCheck>
		break;
 800288a:	e002      	b.n	8002892 <modify_Process+0x66>
	case 6:
		processModifyFinalization();
 800288c:	f7ff ff52 	bl	8002734 <processModifyFinalization>
		break;
 8002890:	bf00      	nop
	}
}
 8002892:	bf00      	nop
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	200006f8 	.word	0x200006f8

0800289c <init_timer_funs>:
#include "esp32_dht11.h"

static time_t sec_con;
static struct tm current_time;

void init_timer_funs(){
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
	get_RTC_Time_t();
 80028a0:	f000 f848 	bl	8002934 <get_RTC_Time_t>
	convert_tm();
 80028a4:	f000 f872 	bl	800298c <convert_tm>
	update_clock_value();
 80028a8:	f000 f80c 	bl	80028c4 <update_clock_value>
	set_send_cnt(current_time.tm_hour);
 80028ac:	4b04      	ldr	r3, [pc, #16]	; (80028c0 <init_timer_funs+0x24>)
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7fe fcfd 	bl	80012b0 <set_send_cnt>
	set_RTC_Time_t();
 80028b6:	f000 f84b 	bl	8002950 <set_RTC_Time_t>
}
 80028ba:	bf00      	nop
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	20000708 	.word	0x20000708

080028c4 <update_clock_value>:
void update_clock_value(){
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
	clock_value[2] = current_time.tm_hour;
 80028c8:	4b07      	ldr	r3, [pc, #28]	; (80028e8 <update_clock_value+0x24>)
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	4a07      	ldr	r2, [pc, #28]	; (80028ec <update_clock_value+0x28>)
 80028ce:	6093      	str	r3, [r2, #8]
	clock_value[1] = current_time.tm_min;
 80028d0:	4b05      	ldr	r3, [pc, #20]	; (80028e8 <update_clock_value+0x24>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	4a05      	ldr	r2, [pc, #20]	; (80028ec <update_clock_value+0x28>)
 80028d6:	6053      	str	r3, [r2, #4]
	//  여기서 온도데이터 업데이트를 진행핼까?
	if(clock_value[1] == 0){
 80028d8:	4b04      	ldr	r3, [pc, #16]	; (80028ec <update_clock_value+0x28>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d101      	bne.n	80028e4 <update_clock_value+0x20>
		check_send();
 80028e0:	f7fe fcbe 	bl	8001260 <check_send>
	}
}
 80028e4:	bf00      	nop
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	20000708 	.word	0x20000708
 80028ec:	200000ac 	.word	0x200000ac

080028f0 <set_tm_strut>:

void set_tm_strut(int year,int month, int mday, int hour, int minute){
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
 80028fc:	603b      	str	r3, [r7, #0]
	current_time.tm_year= year+100;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	3364      	adds	r3, #100	; 0x64
 8002902:	4a0b      	ldr	r2, [pc, #44]	; (8002930 <set_tm_strut+0x40>)
 8002904:	6153      	str	r3, [r2, #20]
	current_time.tm_mon = month;
 8002906:	4a0a      	ldr	r2, [pc, #40]	; (8002930 <set_tm_strut+0x40>)
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	6113      	str	r3, [r2, #16]
	current_time.tm_mday = mday;
 800290c:	4a08      	ldr	r2, [pc, #32]	; (8002930 <set_tm_strut+0x40>)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	60d3      	str	r3, [r2, #12]
	current_time.tm_hour = hour;
 8002912:	4a07      	ldr	r2, [pc, #28]	; (8002930 <set_tm_strut+0x40>)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	6093      	str	r3, [r2, #8]
	current_time.tm_min = minute;
 8002918:	4a05      	ldr	r2, [pc, #20]	; (8002930 <set_tm_strut+0x40>)
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	6053      	str	r3, [r2, #4]
	set_send_cnt(hour);
 800291e:	6838      	ldr	r0, [r7, #0]
 8002920:	f7fe fcc6 	bl	80012b0 <set_send_cnt>
	convert_time_t();
 8002924:	f000 f822 	bl	800296c <convert_time_t>
}
 8002928:	bf00      	nop
 800292a:	3710      	adds	r7, #16
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	20000708 	.word	0x20000708

08002934 <get_RTC_Time_t>:

void get_RTC_Time_t(){
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
	sec_con = RestoreTimeFromRTC();
 8002938:	f7fe f940 	bl	8000bbc <RestoreTimeFromRTC>
 800293c:	4602      	mov	r2, r0
 800293e:	460b      	mov	r3, r1
 8002940:	4902      	ldr	r1, [pc, #8]	; (800294c <get_RTC_Time_t+0x18>)
 8002942:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002946:	bf00      	nop
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	20000700 	.word	0x20000700

08002950 <set_RTC_Time_t>:

void set_RTC_Time_t(){
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
	BackupTimeToRTC(sec_con);
 8002954:	4b04      	ldr	r3, [pc, #16]	; (8002968 <set_RTC_Time_t+0x18>)
 8002956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800295a:	4610      	mov	r0, r2
 800295c:	4619      	mov	r1, r3
 800295e:	f7fe f907 	bl	8000b70 <BackupTimeToRTC>
}
 8002962:	bf00      	nop
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	20000700 	.word	0x20000700

0800296c <convert_time_t>:

void convert_time_t(){
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
	sec_con = mktime(&current_time);
 8002970:	4804      	ldr	r0, [pc, #16]	; (8002984 <convert_time_t+0x18>)
 8002972:	f006 fea7 	bl	80096c4 <mktime>
 8002976:	4602      	mov	r2, r0
 8002978:	460b      	mov	r3, r1
 800297a:	4903      	ldr	r1, [pc, #12]	; (8002988 <convert_time_t+0x1c>)
 800297c:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002980:	bf00      	nop
 8002982:	bd80      	pop	{r7, pc}
 8002984:	20000708 	.word	0x20000708
 8002988:	20000700 	.word	0x20000700

0800298c <convert_tm>:

void convert_tm(){
 800298c:	b5b0      	push	{r4, r5, r7, lr}
 800298e:	af00      	add	r7, sp, #0
	current_time = *localtime(&sec_con);
 8002990:	4807      	ldr	r0, [pc, #28]	; (80029b0 <convert_tm+0x24>)
 8002992:	f006 fc95 	bl	80092c0 <localtime>
 8002996:	4603      	mov	r3, r0
 8002998:	4a06      	ldr	r2, [pc, #24]	; (80029b4 <convert_tm+0x28>)
 800299a:	4614      	mov	r4, r2
 800299c:	461d      	mov	r5, r3
 800299e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029a6:	682b      	ldr	r3, [r5, #0]
 80029a8:	6023      	str	r3, [r4, #0]
}
 80029aa:	bf00      	nop
 80029ac:	bdb0      	pop	{r4, r5, r7, pc}
 80029ae:	bf00      	nop
 80029b0:	20000700 	.word	0x20000700
 80029b4:	20000708 	.word	0x20000708

080029b8 <get_struct_tm>:

void set_struct_tm(struct tm * calender){
	current_time = *calender;
}
struct tm get_struct_tm(){
 80029b8:	b4b0      	push	{r4, r5, r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
	return current_time;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4a07      	ldr	r2, [pc, #28]	; (80029e0 <get_struct_tm+0x28>)
 80029c4:	461c      	mov	r4, r3
 80029c6:	4615      	mov	r5, r2
 80029c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029d0:	682b      	ldr	r3, [r5, #0]
 80029d2:	6023      	str	r3, [r4, #0]
}
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	bcb0      	pop	{r4, r5, r7}
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	20000708 	.word	0x20000708

080029e4 <set_time_t>:

void set_time_t(){
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
	sec_con += minute_cnt;
 80029e8:	4b08      	ldr	r3, [pc, #32]	; (8002a0c <set_time_t+0x28>)
 80029ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ee:	f112 003c 	adds.w	r0, r2, #60	; 0x3c
 80029f2:	f143 0100 	adc.w	r1, r3, #0
 80029f6:	4b05      	ldr	r3, [pc, #20]	; (8002a0c <set_time_t+0x28>)
 80029f8:	e9c3 0100 	strd	r0, r1, [r3]
	convert_tm();
 80029fc:	f7ff ffc6 	bl	800298c <convert_tm>
	update_clock_value();
 8002a00:	f7ff ff60 	bl	80028c4 <update_clock_value>
	set_RTC_Time_t();
 8002a04:	f7ff ffa4 	bl	8002950 <set_RTC_Time_t>
}
 8002a08:	bf00      	nop
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	20000700 	.word	0x20000700

08002a10 <getMode>:

// Mode_Process_variable


// functions about Sub menu or select_menu and main_menu Mode
int getMode(){
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
	 return D_mode;
 8002a14:	4b03      	ldr	r3, [pc, #12]	; (8002a24 <getMode+0x14>)
 8002a16:	681b      	ldr	r3, [r3, #0]
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	200000a4 	.word	0x200000a4

08002a28 <setMode>:
void setMode(int setMode){
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
	D_mode = setMode;
 8002a30:	4a04      	ldr	r2, [pc, #16]	; (8002a44 <setMode+0x1c>)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6013      	str	r3, [r2, #0]
}
 8002a36:	bf00      	nop
 8002a38:	370c      	adds	r7, #12
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	200000a4 	.word	0x200000a4

08002a48 <getTimerState>:

// Functions About Timer_mode
int getTimerState(){
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0
	 return timer_on;
 8002a4c:	4b03      	ldr	r3, [pc, #12]	; (8002a5c <getTimerState+0x14>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	20000744 	.word	0x20000744

08002a60 <setTimerState>:
void setTimerState(int timer){
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
	timer_on = timer;
 8002a68:	4a04      	ldr	r2, [pc, #16]	; (8002a7c <setTimerState+0x1c>)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6013      	str	r3, [r2, #0]
}
 8002a6e:	bf00      	nop
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	20000744 	.word	0x20000744

08002a80 <getAlarmState>:
// Check to set a Alarm Mode
int getAlarmState(){
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
	return alarm_On;
 8002a84:	4b03      	ldr	r3, [pc, #12]	; (8002a94 <getAlarmState+0x14>)
 8002a86:	681b      	ldr	r3, [r3, #0]
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	20000750 	.word	0x20000750

08002a98 <setAlarmState>:
void setAlarmState(int State){
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
	alarm_On = State;
 8002aa0:	4a04      	ldr	r2, [pc, #16]	; (8002ab4 <setAlarmState+0x1c>)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6013      	str	r3, [r2, #0]
}
 8002aa6:	bf00      	nop
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	20000750 	.word	0x20000750

08002ab8 <getTimerCompleted>:

// Functions about Timer Complete
int getTimerCompleted(){
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
	return com_timer;
 8002abc:	4b03      	ldr	r3, [pc, #12]	; (8002acc <getTimerCompleted+0x14>)
 8002abe:	681b      	ldr	r3, [r3, #0]
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	20000748 	.word	0x20000748

08002ad0 <setTimerCompleted>:
void setTimerCompleted(int completed){
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
	com_timer = completed;
 8002ad8:	4a04      	ldr	r2, [pc, #16]	; (8002aec <setTimerCompleted+0x1c>)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6013      	str	r3, [r2, #0]
}
 8002ade:	bf00      	nop
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	20000748 	.word	0x20000748

08002af0 <getAlarmCompleted>:
// Functions About Alarm Complete
int getAlarmCompleted(){
 8002af0:	b480      	push	{r7}
 8002af2:	af00      	add	r7, sp, #0
	return com_alarm;
 8002af4:	4b03      	ldr	r3, [pc, #12]	; (8002b04 <getAlarmCompleted+0x14>)
 8002af6:	681b      	ldr	r3, [r3, #0]
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	2000074c 	.word	0x2000074c

08002b08 <setAlarmCompleted>:
void setAlarmCompleted(int completed){
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
	com_alarm = completed;
 8002b10:	4a04      	ldr	r2, [pc, #16]	; (8002b24 <setAlarmCompleted+0x1c>)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6013      	str	r3, [r2, #0]
}
 8002b16:	bf00      	nop
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	2000074c 	.word	0x2000074c

08002b28 <setCompleted>:

void setCompleted(int mode){
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
	if(mode == 1){
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d103      	bne.n	8002b3e <setCompleted+0x16>
		setTimerCompleted(0);
 8002b36:	2000      	movs	r0, #0
 8002b38:	f7ff ffca 	bl	8002ad0 <setTimerCompleted>
	}else{
		setAlarmCompleted(0);
	}
}
 8002b3c:	e002      	b.n	8002b44 <setCompleted+0x1c>
		setAlarmCompleted(0);
 8002b3e:	2000      	movs	r0, #0
 8002b40:	f7ff ffe2 	bl	8002b08 <setAlarmCompleted>
}
 8002b44:	bf00      	nop
 8002b46:	3708      	adds	r7, #8
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <getnHour>:

// Timer or Alarm set a Time
int getnHour(){
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
	return n_hour;
 8002b50:	4b03      	ldr	r3, [pc, #12]	; (8002b60 <getnHour+0x14>)
 8002b52:	681b      	ldr	r3, [r3, #0]
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	20000730 	.word	0x20000730

08002b64 <setnHour>:

void setnHour(int hour){
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
	if(hour == 24){
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2b18      	cmp	r3, #24
 8002b70:	d101      	bne.n	8002b76 <setnHour+0x12>
		hour = 0;
 8002b72:	2300      	movs	r3, #0
 8002b74:	607b      	str	r3, [r7, #4]
	}
	n_hour = hour;
 8002b76:	4a04      	ldr	r2, [pc, #16]	; (8002b88 <setnHour+0x24>)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6013      	str	r3, [r2, #0]
}
 8002b7c:	bf00      	nop
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr
 8002b88:	20000730 	.word	0x20000730

08002b8c <getnMinute>:

int getnMinute(){
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
	return n_minute;
 8002b90:	4b03      	ldr	r3, [pc, #12]	; (8002ba0 <getnMinute+0x14>)
 8002b92:	681b      	ldr	r3, [r3, #0]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	20000734 	.word	0x20000734

08002ba4 <setnMinute>:
void setnMinute(int minute){
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
	n_minute = minute;
 8002bac:	4a04      	ldr	r2, [pc, #16]	; (8002bc0 <setnMinute+0x1c>)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6013      	str	r3, [r2, #0]
}
 8002bb2:	bf00      	nop
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	20000734 	.word	0x20000734

08002bc4 <getnSecond>:

int getnSecond(){
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
	return n_second;
 8002bc8:	4b03      	ldr	r3, [pc, #12]	; (8002bd8 <getnSecond+0x14>)
 8002bca:	681b      	ldr	r3, [r3, #0]
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	20000738 	.word	0x20000738

08002bdc <setnSecond>:
void setnSecond(int second){
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
	n_second = second;
 8002be4:	4a04      	ldr	r2, [pc, #16]	; (8002bf8 <setnSecond+0x1c>)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6013      	str	r3, [r2, #0]
}
 8002bea:	bf00      	nop
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	20000738 	.word	0x20000738

08002bfc <getnYear>:

int getnYear(){
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
	return n_year;
 8002c00:	4b03      	ldr	r3, [pc, #12]	; (8002c10 <getnYear+0x14>)
 8002c02:	681b      	ldr	r3, [r3, #0]
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	2000073c 	.word	0x2000073c

08002c14 <setnYear>:

void setnYear(int s_year){
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
	n_year = s_year;
 8002c1c:	4a04      	ldr	r2, [pc, #16]	; (8002c30 <setnYear+0x1c>)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6013      	str	r3, [r2, #0]
}
 8002c22:	bf00      	nop
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	2000073c 	.word	0x2000073c

08002c34 <getnMonth>:

int getnMonth(){
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
	return n_month;
 8002c38:	4b03      	ldr	r3, [pc, #12]	; (8002c48 <getnMonth+0x14>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	20000740 	.word	0x20000740

08002c4c <setnMonth>:
void setnMonth(int s_month){
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
	n_month = s_month;
 8002c54:	4a04      	ldr	r2, [pc, #16]	; (8002c68 <setnMonth+0x1c>)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6013      	str	r3, [r2, #0]
}
 8002c5a:	bf00      	nop
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	20000740 	.word	0x20000740

08002c6c <getnDay>:
int getnDay(){
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
	return n_day;
 8002c70:	4b03      	ldr	r3, [pc, #12]	; (8002c80 <getnDay+0x14>)
 8002c72:	681b      	ldr	r3, [r3, #0]
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	200000a8 	.word	0x200000a8

08002c84 <setnDay>:
void setnDay(int s_day){
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
	n_day = s_day;
 8002c8c:	4a04      	ldr	r2, [pc, #16]	; (8002ca0 <setnDay+0x1c>)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6013      	str	r3, [r2, #0]
}
 8002c92:	bf00      	nop
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	200000a8 	.word	0x200000a8

08002ca4 <getPos>:
// select_menu_Position Functions
int getPos(){
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
	return sel_po;
 8002ca8:	4b03      	ldr	r3, [pc, #12]	; (8002cb8 <getPos+0x14>)
 8002caa:	681b      	ldr	r3, [r3, #0]
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	2000072c 	.word	0x2000072c

08002cbc <setPos>:
void setPos(int Pos){
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
	if(Pos >2){
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	dd02      	ble.n	8002cd0 <setPos+0x14>
		Pos = 2;
 8002cca:	2302      	movs	r3, #2
 8002ccc:	607b      	str	r3, [r7, #4]
 8002cce:	e004      	b.n	8002cda <setPos+0x1e>
	}
	else if (Pos <0){
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	da01      	bge.n	8002cda <setPos+0x1e>
		Pos = 0;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	607b      	str	r3, [r7, #4]
	}
	sel_po = Pos;
 8002cda:	4a04      	ldr	r2, [pc, #16]	; (8002cec <setPos+0x30>)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6013      	str	r3, [r2, #0]
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr
 8002cec:	2000072c 	.word	0x2000072c

08002cf0 <start_Boozer>:
#include "timer_mode.h"
#include "ssd1306.h"
#include "esp32_dht11.h"

static int alarm_check = 0;
void start_Boozer(int mode){
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
	toggleScreen();
 8002cf8:	f7fe fdec 	bl	80018d4 <toggleScreen>
	if(mode ==1){
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d102      	bne.n	8002d08 <start_Boozer+0x18>
		setTimerState(0);
 8002d02:	2000      	movs	r0, #0
 8002d04:	f7ff feac 	bl	8002a60 <setTimerState>
	}
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, htim4.Init.Period);
 8002d08:	4b05      	ldr	r3, [pc, #20]	; (8002d20 <start_Boozer+0x30>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a04      	ldr	r2, [pc, #16]	; (8002d20 <start_Boozer+0x30>)
 8002d0e:	68d2      	ldr	r2, [r2, #12]
 8002d10:	63da      	str	r2, [r3, #60]	; 0x3c
	setCompleted(mode);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f7ff ff08 	bl	8002b28 <setCompleted>
}
 8002d18:	bf00      	nop
 8002d1a:	3708      	adds	r7, #8
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	20000880 	.word	0x20000880

08002d24 <end_Boozer>:

void end_Boozer(int mode){
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
	if(mode == 1){
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d103      	bne.n	8002d3a <end_Boozer+0x16>
		alert_mode = 0;
 8002d32:	4b09      	ldr	r3, [pc, #36]	; (8002d58 <end_Boozer+0x34>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	701a      	strb	r2, [r3, #0]
 8002d38:	e002      	b.n	8002d40 <end_Boozer+0x1c>
	}else{
		alarm_check = 0;
 8002d3a:	4b08      	ldr	r3, [pc, #32]	; (8002d5c <end_Boozer+0x38>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	601a      	str	r2, [r3, #0]
	}
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 8002d40:	4b07      	ldr	r3, [pc, #28]	; (8002d60 <end_Boozer+0x3c>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2200      	movs	r2, #0
 8002d46:	63da      	str	r2, [r3, #60]	; 0x3c
	setCompleted(mode);
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f7ff feed 	bl	8002b28 <setCompleted>
}
 8002d4e:	bf00      	nop
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	2000077c 	.word	0x2000077c
 8002d5c:	20000754 	.word	0x20000754
 8002d60:	20000880 	.word	0x20000880

08002d64 <check_Alarm>:

void check_Alarm(){
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
	if((alarm_value[2] == clock_value[2]) && (alarm_value[1] == clock_value[1])){
 8002d68:	4b0f      	ldr	r3, [pc, #60]	; (8002da8 <check_Alarm+0x44>)
 8002d6a:	689a      	ldr	r2, [r3, #8]
 8002d6c:	4b0f      	ldr	r3, [pc, #60]	; (8002dac <check_Alarm+0x48>)
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d116      	bne.n	8002da2 <check_Alarm+0x3e>
 8002d74:	4b0c      	ldr	r3, [pc, #48]	; (8002da8 <check_Alarm+0x44>)
 8002d76:	685a      	ldr	r2, [r3, #4]
 8002d78:	4b0c      	ldr	r3, [pc, #48]	; (8002dac <check_Alarm+0x48>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d110      	bne.n	8002da2 <check_Alarm+0x3e>
		if(!alarm_check && clock_value[0] == 0){
 8002d80:	4b0b      	ldr	r3, [pc, #44]	; (8002db0 <check_Alarm+0x4c>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d10c      	bne.n	8002da2 <check_Alarm+0x3e>
 8002d88:	4b08      	ldr	r3, [pc, #32]	; (8002dac <check_Alarm+0x48>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d108      	bne.n	8002da2 <check_Alarm+0x3e>
			alarm_check = 1;
 8002d90:	4b07      	ldr	r3, [pc, #28]	; (8002db0 <check_Alarm+0x4c>)
 8002d92:	2201      	movs	r2, #1
 8002d94:	601a      	str	r2, [r3, #0]
			start_Boozer(2);
 8002d96:	2002      	movs	r0, #2
 8002d98:	f7ff ffaa 	bl	8002cf0 <start_Boozer>
			setAlarmCompleted(1);
 8002d9c:	2001      	movs	r0, #1
 8002d9e:	f7ff feb3 	bl	8002b08 <setAlarmCompleted>
		}
	}
}
 8002da2:	bf00      	nop
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	20000768 	.word	0x20000768
 8002dac:	200000ac 	.word	0x200000ac
 8002db0:	20000754 	.word	0x20000754

08002db4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002db8:	f001 f84d 	bl	8003e56 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002dbc:	f000 f83e 	bl	8002e3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002dc0:	f000 fada 	bl	8003378 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8002dc4:	f000 fa4a 	bl	800325c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8002dc8:	f000 faa8 	bl	800331c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 8002dcc:	f000 f964 	bl	8003098 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002dd0:	f000 f9b2 	bl	8003138 <MX_TIM4_Init>
  MX_ADC3_Init();
 8002dd4:	f000 f89e 	bl	8002f14 <MX_ADC3_Init>
  MX_I2C1_Init();
 8002dd8:	f000 f8ee 	bl	8002fb8 <MX_I2C1_Init>
  MX_RTC_Init();
 8002ddc:	f000 f92c 	bl	8003038 <MX_RTC_Init>
  MX_TIM6_Init();
 8002de0:	f000 fa06 	bl	80031f0 <MX_TIM6_Init>
  MX_USART6_UART_Init();
 8002de4:	f000 fa6a 	bl	80032bc <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
//  HAL_GPIO_WritePin(SOUND_OUT_GPIO_Port, SOUND_OUT_Pin, GPIO_PIN_RESET);
  init_PotentioMeter(&hadc3);
 8002de8:	480e      	ldr	r0, [pc, #56]	; (8002e24 <main+0x70>)
 8002dea:	f7fd fc53 	bl	8000694 <init_PotentioMeter>
  init_rtc(&hrtc);
 8002dee:	480e      	ldr	r0, [pc, #56]	; (8002e28 <main+0x74>)
 8002df0:	f7fd fe06 	bl	8000a00 <init_rtc>
//  init_timer_funs();

  SSD1306_Init();
 8002df4:	f7ff f888 	bl	8001f08 <SSD1306_Init>
  init_dht11(&htim6, TEMP_DATA_GPIO_Port, TEMP_DATA_Pin);
 8002df8:	2201      	movs	r2, #1
 8002dfa:	490c      	ldr	r1, [pc, #48]	; (8002e2c <main+0x78>)
 8002dfc:	480c      	ldr	r0, [pc, #48]	; (8002e30 <main+0x7c>)
 8002dfe:	f7fe f827 	bl	8000e50 <init_dht11>
  HAL_TIM_Base_Start(&htim6);
 8002e02:	480b      	ldr	r0, [pc, #44]	; (8002e30 <main+0x7c>)
 8002e04:	f004 f828 	bl	8006e58 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 8002e08:	480a      	ldr	r0, [pc, #40]	; (8002e34 <main+0x80>)
 8002e0a:	f004 f8bd 	bl	8006f88 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8002e0e:	2108      	movs	r1, #8
 8002e10:	4809      	ldr	r0, [pc, #36]	; (8002e38 <main+0x84>)
 8002e12:	f004 f989 	bl	8007128 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  opening();
 8002e16:	f7fe fa9f 	bl	8001358 <opening>
    /* USER CODE BEGIN 3 */
	  //Update Check Loops
//	  check_adc_change();
//	  update_test();
	  // Main Loop
	  readDHT11();
 8002e1a:	f7fe f873 	bl	8000f04 <readDHT11>
	  main_Check();
 8002e1e:	f7fd feff 	bl	8000c20 <main_Check>
	  readDHT11();
 8002e22:	e7fa      	b.n	8002e1a <main+0x66>
 8002e24:	20000780 	.word	0x20000780
 8002e28:	20000814 	.word	0x20000814
 8002e2c:	40020800 	.word	0x40020800
 8002e30:	200008cc 	.word	0x200008cc
 8002e34:	20000834 	.word	0x20000834
 8002e38:	20000880 	.word	0x20000880

08002e3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b094      	sub	sp, #80	; 0x50
 8002e40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e42:	f107 0320 	add.w	r3, r7, #32
 8002e46:	2230      	movs	r2, #48	; 0x30
 8002e48:	2100      	movs	r1, #0
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f006 fb5a 	bl	8009504 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e50:	f107 030c 	add.w	r3, r7, #12
 8002e54:	2200      	movs	r2, #0
 8002e56:	601a      	str	r2, [r3, #0]
 8002e58:	605a      	str	r2, [r3, #4]
 8002e5a:	609a      	str	r2, [r3, #8]
 8002e5c:	60da      	str	r2, [r3, #12]
 8002e5e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002e60:	f002 fde2 	bl	8005a28 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e64:	4b29      	ldr	r3, [pc, #164]	; (8002f0c <SystemClock_Config+0xd0>)
 8002e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e68:	4a28      	ldr	r2, [pc, #160]	; (8002f0c <SystemClock_Config+0xd0>)
 8002e6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e6e:	6413      	str	r3, [r2, #64]	; 0x40
 8002e70:	4b26      	ldr	r3, [pc, #152]	; (8002f0c <SystemClock_Config+0xd0>)
 8002e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e78:	60bb      	str	r3, [r7, #8]
 8002e7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002e7c:	4b24      	ldr	r3, [pc, #144]	; (8002f10 <SystemClock_Config+0xd4>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002e84:	4a22      	ldr	r2, [pc, #136]	; (8002f10 <SystemClock_Config+0xd4>)
 8002e86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e8a:	6013      	str	r3, [r2, #0]
 8002e8c:	4b20      	ldr	r3, [pc, #128]	; (8002f10 <SystemClock_Config+0xd4>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002e94:	607b      	str	r3, [r7, #4]
 8002e96:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002e98:	2309      	movs	r3, #9
 8002e9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002e9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ea0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002eaa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002eae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002eb0:	2304      	movs	r3, #4
 8002eb2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8002eb4:	2390      	movs	r3, #144	; 0x90
 8002eb6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002eb8:	2302      	movs	r3, #2
 8002eba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8002ebc:	2306      	movs	r3, #6
 8002ebe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ec0:	f107 0320 	add.w	r3, r7, #32
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f002 fdcf 	bl	8005a68 <HAL_RCC_OscConfig>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002ed0:	f000 fb2a 	bl	8003528 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ed4:	230f      	movs	r3, #15
 8002ed6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ed8:	2302      	movs	r3, #2
 8002eda:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8002edc:	2380      	movs	r3, #128	; 0x80
 8002ede:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002ee0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ee4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002ee6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002eea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002eec:	f107 030c 	add.w	r3, r7, #12
 8002ef0:	2102      	movs	r1, #2
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f003 f85c 	bl	8005fb0 <HAL_RCC_ClockConfig>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002efe:	f000 fb13 	bl	8003528 <Error_Handler>
  }
}
 8002f02:	bf00      	nop
 8002f04:	3750      	adds	r7, #80	; 0x50
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	40023800 	.word	0x40023800
 8002f10:	40007000 	.word	0x40007000

08002f14 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002f1a:	463b      	mov	r3, r7
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	601a      	str	r2, [r3, #0]
 8002f20:	605a      	str	r2, [r3, #4]
 8002f22:	609a      	str	r2, [r3, #8]
 8002f24:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8002f26:	4b21      	ldr	r3, [pc, #132]	; (8002fac <MX_ADC3_Init+0x98>)
 8002f28:	4a21      	ldr	r2, [pc, #132]	; (8002fb0 <MX_ADC3_Init+0x9c>)
 8002f2a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002f2c:	4b1f      	ldr	r3, [pc, #124]	; (8002fac <MX_ADC3_Init+0x98>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002f32:	4b1e      	ldr	r3, [pc, #120]	; (8002fac <MX_ADC3_Init+0x98>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002f38:	4b1c      	ldr	r3, [pc, #112]	; (8002fac <MX_ADC3_Init+0x98>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8002f3e:	4b1b      	ldr	r3, [pc, #108]	; (8002fac <MX_ADC3_Init+0x98>)
 8002f40:	2201      	movs	r2, #1
 8002f42:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002f44:	4b19      	ldr	r3, [pc, #100]	; (8002fac <MX_ADC3_Init+0x98>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002f4c:	4b17      	ldr	r3, [pc, #92]	; (8002fac <MX_ADC3_Init+0x98>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002f52:	4b16      	ldr	r3, [pc, #88]	; (8002fac <MX_ADC3_Init+0x98>)
 8002f54:	4a17      	ldr	r2, [pc, #92]	; (8002fb4 <MX_ADC3_Init+0xa0>)
 8002f56:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002f58:	4b14      	ldr	r3, [pc, #80]	; (8002fac <MX_ADC3_Init+0x98>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8002f5e:	4b13      	ldr	r3, [pc, #76]	; (8002fac <MX_ADC3_Init+0x98>)
 8002f60:	2201      	movs	r2, #1
 8002f62:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8002f64:	4b11      	ldr	r3, [pc, #68]	; (8002fac <MX_ADC3_Init+0x98>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002f6c:	4b0f      	ldr	r3, [pc, #60]	; (8002fac <MX_ADC3_Init+0x98>)
 8002f6e:	2201      	movs	r2, #1
 8002f70:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002f72:	480e      	ldr	r0, [pc, #56]	; (8002fac <MX_ADC3_Init+0x98>)
 8002f74:	f000 fff0 	bl	8003f58 <HAL_ADC_Init>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 8002f7e:	f000 fad3 	bl	8003528 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002f82:	2303      	movs	r3, #3
 8002f84:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002f86:	2301      	movs	r3, #1
 8002f88:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002f8e:	463b      	mov	r3, r7
 8002f90:	4619      	mov	r1, r3
 8002f92:	4806      	ldr	r0, [pc, #24]	; (8002fac <MX_ADC3_Init+0x98>)
 8002f94:	f001 f98a 	bl	80042ac <HAL_ADC_ConfigChannel>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8002f9e:	f000 fac3 	bl	8003528 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8002fa2:	bf00      	nop
 8002fa4:	3710      	adds	r7, #16
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	20000780 	.word	0x20000780
 8002fb0:	40012200 	.word	0x40012200
 8002fb4:	0f000001 	.word	0x0f000001

08002fb8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002fbc:	4b1b      	ldr	r3, [pc, #108]	; (800302c <MX_I2C1_Init+0x74>)
 8002fbe:	4a1c      	ldr	r2, [pc, #112]	; (8003030 <MX_I2C1_Init+0x78>)
 8002fc0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00301739;
 8002fc2:	4b1a      	ldr	r3, [pc, #104]	; (800302c <MX_I2C1_Init+0x74>)
 8002fc4:	4a1b      	ldr	r2, [pc, #108]	; (8003034 <MX_I2C1_Init+0x7c>)
 8002fc6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002fc8:	4b18      	ldr	r3, [pc, #96]	; (800302c <MX_I2C1_Init+0x74>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002fce:	4b17      	ldr	r3, [pc, #92]	; (800302c <MX_I2C1_Init+0x74>)
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002fd4:	4b15      	ldr	r3, [pc, #84]	; (800302c <MX_I2C1_Init+0x74>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002fda:	4b14      	ldr	r3, [pc, #80]	; (800302c <MX_I2C1_Init+0x74>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002fe0:	4b12      	ldr	r3, [pc, #72]	; (800302c <MX_I2C1_Init+0x74>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002fe6:	4b11      	ldr	r3, [pc, #68]	; (800302c <MX_I2C1_Init+0x74>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002fec:	4b0f      	ldr	r3, [pc, #60]	; (800302c <MX_I2C1_Init+0x74>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002ff2:	480e      	ldr	r0, [pc, #56]	; (800302c <MX_I2C1_Init+0x74>)
 8002ff4:	f001 feae 	bl	8004d54 <HAL_I2C_Init>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002ffe:	f000 fa93 	bl	8003528 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003002:	2100      	movs	r1, #0
 8003004:	4809      	ldr	r0, [pc, #36]	; (800302c <MX_I2C1_Init+0x74>)
 8003006:	f002 fb2f 	bl	8005668 <HAL_I2CEx_ConfigAnalogFilter>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d001      	beq.n	8003014 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003010:	f000 fa8a 	bl	8003528 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003014:	2100      	movs	r1, #0
 8003016:	4805      	ldr	r0, [pc, #20]	; (800302c <MX_I2C1_Init+0x74>)
 8003018:	f002 fb71 	bl	80056fe <HAL_I2CEx_ConfigDigitalFilter>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003022:	f000 fa81 	bl	8003528 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003026:	bf00      	nop
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	200007c8 	.word	0x200007c8
 8003030:	40005400 	.word	0x40005400
 8003034:	00301739 	.word	0x00301739

08003038 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800303c:	4b14      	ldr	r3, [pc, #80]	; (8003090 <MX_RTC_Init+0x58>)
 800303e:	4a15      	ldr	r2, [pc, #84]	; (8003094 <MX_RTC_Init+0x5c>)
 8003040:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003042:	4b13      	ldr	r3, [pc, #76]	; (8003090 <MX_RTC_Init+0x58>)
 8003044:	2200      	movs	r2, #0
 8003046:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003048:	4b11      	ldr	r3, [pc, #68]	; (8003090 <MX_RTC_Init+0x58>)
 800304a:	227f      	movs	r2, #127	; 0x7f
 800304c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800304e:	4b10      	ldr	r3, [pc, #64]	; (8003090 <MX_RTC_Init+0x58>)
 8003050:	22ff      	movs	r2, #255	; 0xff
 8003052:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003054:	4b0e      	ldr	r3, [pc, #56]	; (8003090 <MX_RTC_Init+0x58>)
 8003056:	2200      	movs	r2, #0
 8003058:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800305a:	4b0d      	ldr	r3, [pc, #52]	; (8003090 <MX_RTC_Init+0x58>)
 800305c:	2200      	movs	r2, #0
 800305e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003060:	4b0b      	ldr	r3, [pc, #44]	; (8003090 <MX_RTC_Init+0x58>)
 8003062:	2200      	movs	r2, #0
 8003064:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003066:	480a      	ldr	r0, [pc, #40]	; (8003090 <MX_RTC_Init+0x58>)
 8003068:	f003 fd12 	bl	8006a90 <HAL_RTC_Init>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8003072:	f000 fa59 	bl	8003528 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8003076:	2200      	movs	r2, #0
 8003078:	2100      	movs	r1, #0
 800307a:	4805      	ldr	r0, [pc, #20]	; (8003090 <MX_RTC_Init+0x58>)
 800307c:	f003 fdee 	bl	8006c5c <HAL_RTCEx_SetWakeUpTimer>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8003086:	f000 fa4f 	bl	8003528 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800308a:	bf00      	nop
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	20000814 	.word	0x20000814
 8003094:	40002800 	.word	0x40002800

08003098 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b088      	sub	sp, #32
 800309c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800309e:	f107 0310 	add.w	r3, r7, #16
 80030a2:	2200      	movs	r2, #0
 80030a4:	601a      	str	r2, [r3, #0]
 80030a6:	605a      	str	r2, [r3, #4]
 80030a8:	609a      	str	r2, [r3, #8]
 80030aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030ac:	1d3b      	adds	r3, r7, #4
 80030ae:	2200      	movs	r2, #0
 80030b0:	601a      	str	r2, [r3, #0]
 80030b2:	605a      	str	r2, [r3, #4]
 80030b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80030b6:	4b1e      	ldr	r3, [pc, #120]	; (8003130 <MX_TIM3_Init+0x98>)
 80030b8:	4a1e      	ldr	r2, [pc, #120]	; (8003134 <MX_TIM3_Init+0x9c>)
 80030ba:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 80030bc:	4b1c      	ldr	r3, [pc, #112]	; (8003130 <MX_TIM3_Init+0x98>)
 80030be:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80030c2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030c4:	4b1a      	ldr	r3, [pc, #104]	; (8003130 <MX_TIM3_Init+0x98>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80030ca:	4b19      	ldr	r3, [pc, #100]	; (8003130 <MX_TIM3_Init+0x98>)
 80030cc:	f242 720f 	movw	r2, #9999	; 0x270f
 80030d0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030d2:	4b17      	ldr	r3, [pc, #92]	; (8003130 <MX_TIM3_Init+0x98>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80030d8:	4b15      	ldr	r3, [pc, #84]	; (8003130 <MX_TIM3_Init+0x98>)
 80030da:	2280      	movs	r2, #128	; 0x80
 80030dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80030de:	4814      	ldr	r0, [pc, #80]	; (8003130 <MX_TIM3_Init+0x98>)
 80030e0:	f003 fe63 	bl	8006daa <HAL_TIM_Base_Init>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80030ea:	f000 fa1d 	bl	8003528 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80030f4:	f107 0310 	add.w	r3, r7, #16
 80030f8:	4619      	mov	r1, r3
 80030fa:	480d      	ldr	r0, [pc, #52]	; (8003130 <MX_TIM3_Init+0x98>)
 80030fc:	f004 fb42 	bl	8007784 <HAL_TIM_ConfigClockSource>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d001      	beq.n	800310a <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8003106:	f000 fa0f 	bl	8003528 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800310a:	2300      	movs	r3, #0
 800310c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800310e:	2300      	movs	r3, #0
 8003110:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003112:	1d3b      	adds	r3, r7, #4
 8003114:	4619      	mov	r1, r3
 8003116:	4806      	ldr	r0, [pc, #24]	; (8003130 <MX_TIM3_Init+0x98>)
 8003118:	f004 ffee 	bl	80080f8 <HAL_TIMEx_MasterConfigSynchronization>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8003122:	f000 fa01 	bl	8003528 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003126:	bf00      	nop
 8003128:	3720      	adds	r7, #32
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	20000834 	.word	0x20000834
 8003134:	40000400 	.word	0x40000400

08003138 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b08a      	sub	sp, #40	; 0x28
 800313c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800313e:	f107 031c 	add.w	r3, r7, #28
 8003142:	2200      	movs	r2, #0
 8003144:	601a      	str	r2, [r3, #0]
 8003146:	605a      	str	r2, [r3, #4]
 8003148:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800314a:	463b      	mov	r3, r7
 800314c:	2200      	movs	r2, #0
 800314e:	601a      	str	r2, [r3, #0]
 8003150:	605a      	str	r2, [r3, #4]
 8003152:	609a      	str	r2, [r3, #8]
 8003154:	60da      	str	r2, [r3, #12]
 8003156:	611a      	str	r2, [r3, #16]
 8003158:	615a      	str	r2, [r3, #20]
 800315a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800315c:	4b22      	ldr	r3, [pc, #136]	; (80031e8 <MX_TIM4_Init+0xb0>)
 800315e:	4a23      	ldr	r2, [pc, #140]	; (80031ec <MX_TIM4_Init+0xb4>)
 8003160:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 325;
 8003162:	4b21      	ldr	r3, [pc, #132]	; (80031e8 <MX_TIM4_Init+0xb0>)
 8003164:	f240 1245 	movw	r2, #325	; 0x145
 8003168:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800316a:	4b1f      	ldr	r3, [pc, #124]	; (80031e8 <MX_TIM4_Init+0xb0>)
 800316c:	2200      	movs	r2, #0
 800316e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 327;
 8003170:	4b1d      	ldr	r3, [pc, #116]	; (80031e8 <MX_TIM4_Init+0xb0>)
 8003172:	f240 1247 	movw	r2, #327	; 0x147
 8003176:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003178:	4b1b      	ldr	r3, [pc, #108]	; (80031e8 <MX_TIM4_Init+0xb0>)
 800317a:	2200      	movs	r2, #0
 800317c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800317e:	4b1a      	ldr	r3, [pc, #104]	; (80031e8 <MX_TIM4_Init+0xb0>)
 8003180:	2200      	movs	r2, #0
 8003182:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003184:	4818      	ldr	r0, [pc, #96]	; (80031e8 <MX_TIM4_Init+0xb0>)
 8003186:	f003 ff77 	bl	8007078 <HAL_TIM_PWM_Init>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d001      	beq.n	8003194 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 8003190:	f000 f9ca 	bl	8003528 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003194:	2300      	movs	r3, #0
 8003196:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003198:	2300      	movs	r3, #0
 800319a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800319c:	f107 031c 	add.w	r3, r7, #28
 80031a0:	4619      	mov	r1, r3
 80031a2:	4811      	ldr	r0, [pc, #68]	; (80031e8 <MX_TIM4_Init+0xb0>)
 80031a4:	f004 ffa8 	bl	80080f8 <HAL_TIMEx_MasterConfigSynchronization>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 80031ae:	f000 f9bb 	bl	8003528 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80031b2:	2360      	movs	r3, #96	; 0x60
 80031b4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80031b6:	2300      	movs	r3, #0
 80031b8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80031ba:	2300      	movs	r3, #0
 80031bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80031be:	2300      	movs	r3, #0
 80031c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80031c2:	463b      	mov	r3, r7
 80031c4:	2208      	movs	r2, #8
 80031c6:	4619      	mov	r1, r3
 80031c8:	4807      	ldr	r0, [pc, #28]	; (80031e8 <MX_TIM4_Init+0xb0>)
 80031ca:	f004 f9c7 	bl	800755c <HAL_TIM_PWM_ConfigChannel>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d001      	beq.n	80031d8 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 80031d4:	f000 f9a8 	bl	8003528 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80031d8:	4803      	ldr	r0, [pc, #12]	; (80031e8 <MX_TIM4_Init+0xb0>)
 80031da:	f000 faf7 	bl	80037cc <HAL_TIM_MspPostInit>

}
 80031de:	bf00      	nop
 80031e0:	3728      	adds	r7, #40	; 0x28
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	20000880 	.word	0x20000880
 80031ec:	40000800 	.word	0x40000800

080031f0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031f6:	1d3b      	adds	r3, r7, #4
 80031f8:	2200      	movs	r2, #0
 80031fa:	601a      	str	r2, [r3, #0]
 80031fc:	605a      	str	r2, [r3, #4]
 80031fe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003200:	4b14      	ldr	r3, [pc, #80]	; (8003254 <MX_TIM6_Init+0x64>)
 8003202:	4a15      	ldr	r2, [pc, #84]	; (8003258 <MX_TIM6_Init+0x68>)
 8003204:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 72-1;
 8003206:	4b13      	ldr	r3, [pc, #76]	; (8003254 <MX_TIM6_Init+0x64>)
 8003208:	2247      	movs	r2, #71	; 0x47
 800320a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800320c:	4b11      	ldr	r3, [pc, #68]	; (8003254 <MX_TIM6_Init+0x64>)
 800320e:	2200      	movs	r2, #0
 8003210:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8003212:	4b10      	ldr	r3, [pc, #64]	; (8003254 <MX_TIM6_Init+0x64>)
 8003214:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003218:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800321a:	4b0e      	ldr	r3, [pc, #56]	; (8003254 <MX_TIM6_Init+0x64>)
 800321c:	2200      	movs	r2, #0
 800321e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003220:	480c      	ldr	r0, [pc, #48]	; (8003254 <MX_TIM6_Init+0x64>)
 8003222:	f003 fdc2 	bl	8006daa <HAL_TIM_Base_Init>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d001      	beq.n	8003230 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800322c:	f000 f97c 	bl	8003528 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003230:	2300      	movs	r3, #0
 8003232:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003234:	2300      	movs	r3, #0
 8003236:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003238:	1d3b      	adds	r3, r7, #4
 800323a:	4619      	mov	r1, r3
 800323c:	4805      	ldr	r0, [pc, #20]	; (8003254 <MX_TIM6_Init+0x64>)
 800323e:	f004 ff5b 	bl	80080f8 <HAL_TIMEx_MasterConfigSynchronization>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8003248:	f000 f96e 	bl	8003528 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800324c:	bf00      	nop
 800324e:	3710      	adds	r7, #16
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	200008cc 	.word	0x200008cc
 8003258:	40001000 	.word	0x40001000

0800325c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003260:	4b14      	ldr	r3, [pc, #80]	; (80032b4 <MX_USART3_UART_Init+0x58>)
 8003262:	4a15      	ldr	r2, [pc, #84]	; (80032b8 <MX_USART3_UART_Init+0x5c>)
 8003264:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003266:	4b13      	ldr	r3, [pc, #76]	; (80032b4 <MX_USART3_UART_Init+0x58>)
 8003268:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800326c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800326e:	4b11      	ldr	r3, [pc, #68]	; (80032b4 <MX_USART3_UART_Init+0x58>)
 8003270:	2200      	movs	r2, #0
 8003272:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003274:	4b0f      	ldr	r3, [pc, #60]	; (80032b4 <MX_USART3_UART_Init+0x58>)
 8003276:	2200      	movs	r2, #0
 8003278:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800327a:	4b0e      	ldr	r3, [pc, #56]	; (80032b4 <MX_USART3_UART_Init+0x58>)
 800327c:	2200      	movs	r2, #0
 800327e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003280:	4b0c      	ldr	r3, [pc, #48]	; (80032b4 <MX_USART3_UART_Init+0x58>)
 8003282:	220c      	movs	r2, #12
 8003284:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003286:	4b0b      	ldr	r3, [pc, #44]	; (80032b4 <MX_USART3_UART_Init+0x58>)
 8003288:	2200      	movs	r2, #0
 800328a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800328c:	4b09      	ldr	r3, [pc, #36]	; (80032b4 <MX_USART3_UART_Init+0x58>)
 800328e:	2200      	movs	r2, #0
 8003290:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003292:	4b08      	ldr	r3, [pc, #32]	; (80032b4 <MX_USART3_UART_Init+0x58>)
 8003294:	2200      	movs	r2, #0
 8003296:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003298:	4b06      	ldr	r3, [pc, #24]	; (80032b4 <MX_USART3_UART_Init+0x58>)
 800329a:	2200      	movs	r2, #0
 800329c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800329e:	4805      	ldr	r0, [pc, #20]	; (80032b4 <MX_USART3_UART_Init+0x58>)
 80032a0:	f004 ffd6 	bl	8008250 <HAL_UART_Init>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d001      	beq.n	80032ae <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80032aa:	f000 f93d 	bl	8003528 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80032ae:	bf00      	nop
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	20000918 	.word	0x20000918
 80032b8:	40004800 	.word	0x40004800

080032bc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80032c0:	4b14      	ldr	r3, [pc, #80]	; (8003314 <MX_USART6_UART_Init+0x58>)
 80032c2:	4a15      	ldr	r2, [pc, #84]	; (8003318 <MX_USART6_UART_Init+0x5c>)
 80032c4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80032c6:	4b13      	ldr	r3, [pc, #76]	; (8003314 <MX_USART6_UART_Init+0x58>)
 80032c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80032cc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80032ce:	4b11      	ldr	r3, [pc, #68]	; (8003314 <MX_USART6_UART_Init+0x58>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80032d4:	4b0f      	ldr	r3, [pc, #60]	; (8003314 <MX_USART6_UART_Init+0x58>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80032da:	4b0e      	ldr	r3, [pc, #56]	; (8003314 <MX_USART6_UART_Init+0x58>)
 80032dc:	2200      	movs	r2, #0
 80032de:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80032e0:	4b0c      	ldr	r3, [pc, #48]	; (8003314 <MX_USART6_UART_Init+0x58>)
 80032e2:	220c      	movs	r2, #12
 80032e4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032e6:	4b0b      	ldr	r3, [pc, #44]	; (8003314 <MX_USART6_UART_Init+0x58>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80032ec:	4b09      	ldr	r3, [pc, #36]	; (8003314 <MX_USART6_UART_Init+0x58>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80032f2:	4b08      	ldr	r3, [pc, #32]	; (8003314 <MX_USART6_UART_Init+0x58>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80032f8:	4b06      	ldr	r3, [pc, #24]	; (8003314 <MX_USART6_UART_Init+0x58>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80032fe:	4805      	ldr	r0, [pc, #20]	; (8003314 <MX_USART6_UART_Init+0x58>)
 8003300:	f004 ffa6 	bl	8008250 <HAL_UART_Init>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800330a:	f000 f90d 	bl	8003528 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800330e:	bf00      	nop
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	2000099c 	.word	0x2000099c
 8003318:	40011400 	.word	0x40011400

0800331c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003320:	4b14      	ldr	r3, [pc, #80]	; (8003374 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003322:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003326:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8003328:	4b12      	ldr	r3, [pc, #72]	; (8003374 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800332a:	2206      	movs	r2, #6
 800332c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800332e:	4b11      	ldr	r3, [pc, #68]	; (8003374 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003330:	2200      	movs	r2, #0
 8003332:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003334:	4b0f      	ldr	r3, [pc, #60]	; (8003374 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003336:	2202      	movs	r2, #2
 8003338:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800333a:	4b0e      	ldr	r3, [pc, #56]	; (8003374 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800333c:	2201      	movs	r2, #1
 800333e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8003340:	4b0c      	ldr	r3, [pc, #48]	; (8003374 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003342:	2200      	movs	r2, #0
 8003344:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8003346:	4b0b      	ldr	r3, [pc, #44]	; (8003374 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003348:	2200      	movs	r2, #0
 800334a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800334c:	4b09      	ldr	r3, [pc, #36]	; (8003374 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800334e:	2201      	movs	r2, #1
 8003350:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8003352:	4b08      	ldr	r3, [pc, #32]	; (8003374 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003354:	2201      	movs	r2, #1
 8003356:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8003358:	4b06      	ldr	r3, [pc, #24]	; (8003374 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800335a:	2200      	movs	r2, #0
 800335c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800335e:	4805      	ldr	r0, [pc, #20]	; (8003374 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003360:	f002 fa19 	bl	8005796 <HAL_PCD_Init>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800336a:	f000 f8dd 	bl	8003528 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800336e:	bf00      	nop
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	20000a20 	.word	0x20000a20

08003378 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b08c      	sub	sp, #48	; 0x30
 800337c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800337e:	f107 031c 	add.w	r3, r7, #28
 8003382:	2200      	movs	r2, #0
 8003384:	601a      	str	r2, [r3, #0]
 8003386:	605a      	str	r2, [r3, #4]
 8003388:	609a      	str	r2, [r3, #8]
 800338a:	60da      	str	r2, [r3, #12]
 800338c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800338e:	4b61      	ldr	r3, [pc, #388]	; (8003514 <MX_GPIO_Init+0x19c>)
 8003390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003392:	4a60      	ldr	r2, [pc, #384]	; (8003514 <MX_GPIO_Init+0x19c>)
 8003394:	f043 0304 	orr.w	r3, r3, #4
 8003398:	6313      	str	r3, [r2, #48]	; 0x30
 800339a:	4b5e      	ldr	r3, [pc, #376]	; (8003514 <MX_GPIO_Init+0x19c>)
 800339c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339e:	f003 0304 	and.w	r3, r3, #4
 80033a2:	61bb      	str	r3, [r7, #24]
 80033a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80033a6:	4b5b      	ldr	r3, [pc, #364]	; (8003514 <MX_GPIO_Init+0x19c>)
 80033a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033aa:	4a5a      	ldr	r2, [pc, #360]	; (8003514 <MX_GPIO_Init+0x19c>)
 80033ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033b0:	6313      	str	r3, [r2, #48]	; 0x30
 80033b2:	4b58      	ldr	r3, [pc, #352]	; (8003514 <MX_GPIO_Init+0x19c>)
 80033b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ba:	617b      	str	r3, [r7, #20]
 80033bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80033be:	4b55      	ldr	r3, [pc, #340]	; (8003514 <MX_GPIO_Init+0x19c>)
 80033c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c2:	4a54      	ldr	r2, [pc, #336]	; (8003514 <MX_GPIO_Init+0x19c>)
 80033c4:	f043 0301 	orr.w	r3, r3, #1
 80033c8:	6313      	str	r3, [r2, #48]	; 0x30
 80033ca:	4b52      	ldr	r3, [pc, #328]	; (8003514 <MX_GPIO_Init+0x19c>)
 80033cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	613b      	str	r3, [r7, #16]
 80033d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80033d6:	4b4f      	ldr	r3, [pc, #316]	; (8003514 <MX_GPIO_Init+0x19c>)
 80033d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033da:	4a4e      	ldr	r2, [pc, #312]	; (8003514 <MX_GPIO_Init+0x19c>)
 80033dc:	f043 0302 	orr.w	r3, r3, #2
 80033e0:	6313      	str	r3, [r2, #48]	; 0x30
 80033e2:	4b4c      	ldr	r3, [pc, #304]	; (8003514 <MX_GPIO_Init+0x19c>)
 80033e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	60fb      	str	r3, [r7, #12]
 80033ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80033ee:	4b49      	ldr	r3, [pc, #292]	; (8003514 <MX_GPIO_Init+0x19c>)
 80033f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f2:	4a48      	ldr	r2, [pc, #288]	; (8003514 <MX_GPIO_Init+0x19c>)
 80033f4:	f043 0310 	orr.w	r3, r3, #16
 80033f8:	6313      	str	r3, [r2, #48]	; 0x30
 80033fa:	4b46      	ldr	r3, [pc, #280]	; (8003514 <MX_GPIO_Init+0x19c>)
 80033fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fe:	f003 0310 	and.w	r3, r3, #16
 8003402:	60bb      	str	r3, [r7, #8]
 8003404:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003406:	4b43      	ldr	r3, [pc, #268]	; (8003514 <MX_GPIO_Init+0x19c>)
 8003408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340a:	4a42      	ldr	r2, [pc, #264]	; (8003514 <MX_GPIO_Init+0x19c>)
 800340c:	f043 0308 	orr.w	r3, r3, #8
 8003410:	6313      	str	r3, [r2, #48]	; 0x30
 8003412:	4b40      	ldr	r3, [pc, #256]	; (8003514 <MX_GPIO_Init+0x19c>)
 8003414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003416:	f003 0308 	and.w	r3, r3, #8
 800341a:	607b      	str	r3, [r7, #4]
 800341c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800341e:	4b3d      	ldr	r3, [pc, #244]	; (8003514 <MX_GPIO_Init+0x19c>)
 8003420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003422:	4a3c      	ldr	r2, [pc, #240]	; (8003514 <MX_GPIO_Init+0x19c>)
 8003424:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003428:	6313      	str	r3, [r2, #48]	; 0x30
 800342a:	4b3a      	ldr	r3, [pc, #232]	; (8003514 <MX_GPIO_Init+0x19c>)
 800342c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003432:	603b      	str	r3, [r7, #0]
 8003434:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEMP_DATA_GPIO_Port, TEMP_DATA_Pin, GPIO_PIN_SET);
 8003436:	2201      	movs	r2, #1
 8003438:	2101      	movs	r1, #1
 800343a:	4837      	ldr	r0, [pc, #220]	; (8003518 <MX_GPIO_Init+0x1a0>)
 800343c:	f001 fc4c 	bl	8004cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8003440:	2200      	movs	r2, #0
 8003442:	f244 0181 	movw	r1, #16513	; 0x4081
 8003446:	4835      	ldr	r0, [pc, #212]	; (800351c <MX_GPIO_Init+0x1a4>)
 8003448:	f001 fc46 	bl	8004cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800344c:	2200      	movs	r2, #0
 800344e:	2140      	movs	r1, #64	; 0x40
 8003450:	4833      	ldr	r0, [pc, #204]	; (8003520 <MX_GPIO_Init+0x1a8>)
 8003452:	f001 fc41 	bl	8004cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8003456:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800345a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800345c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003460:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003462:	2300      	movs	r3, #0
 8003464:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8003466:	f107 031c 	add.w	r3, r7, #28
 800346a:	4619      	mov	r1, r3
 800346c:	482a      	ldr	r0, [pc, #168]	; (8003518 <MX_GPIO_Init+0x1a0>)
 800346e:	f001 fa7f 	bl	8004970 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEMP_DATA_Pin */
  GPIO_InitStruct.Pin = TEMP_DATA_Pin;
 8003472:	2301      	movs	r3, #1
 8003474:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003476:	2301      	movs	r3, #1
 8003478:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800347a:	2301      	movs	r3, #1
 800347c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800347e:	2302      	movs	r3, #2
 8003480:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TEMP_DATA_GPIO_Port, &GPIO_InitStruct);
 8003482:	f107 031c 	add.w	r3, r7, #28
 8003486:	4619      	mov	r1, r3
 8003488:	4823      	ldr	r0, [pc, #140]	; (8003518 <MX_GPIO_Init+0x1a0>)
 800348a:	f001 fa71 	bl	8004970 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800348e:	f244 0381 	movw	r3, #16513	; 0x4081
 8003492:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003494:	2301      	movs	r3, #1
 8003496:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003498:	2300      	movs	r3, #0
 800349a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800349c:	2300      	movs	r3, #0
 800349e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034a0:	f107 031c 	add.w	r3, r7, #28
 80034a4:	4619      	mov	r1, r3
 80034a6:	481d      	ldr	r0, [pc, #116]	; (800351c <MX_GPIO_Init+0x1a4>)
 80034a8:	f001 fa62 	bl	8004970 <HAL_GPIO_Init>

  /*Configure GPIO pins : UP_B_Pin DOWN_B_Pin SEL_B_Pin */
  GPIO_InitStruct.Pin = UP_B_Pin|DOWN_B_Pin|SEL_B_Pin;
 80034ac:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 80034b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80034b2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80034b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034b8:	2301      	movs	r3, #1
 80034ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80034bc:	f107 031c 	add.w	r3, r7, #28
 80034c0:	4619      	mov	r1, r3
 80034c2:	4818      	ldr	r0, [pc, #96]	; (8003524 <MX_GPIO_Init+0x1ac>)
 80034c4:	f001 fa54 	bl	8004970 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80034c8:	2340      	movs	r3, #64	; 0x40
 80034ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034cc:	2301      	movs	r3, #1
 80034ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d0:	2300      	movs	r3, #0
 80034d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034d4:	2300      	movs	r3, #0
 80034d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80034d8:	f107 031c 	add.w	r3, r7, #28
 80034dc:	4619      	mov	r1, r3
 80034de:	4810      	ldr	r0, [pc, #64]	; (8003520 <MX_GPIO_Init+0x1a8>)
 80034e0:	f001 fa46 	bl	8004970 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80034e4:	2380      	movs	r3, #128	; 0x80
 80034e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034e8:	2300      	movs	r3, #0
 80034ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ec:	2300      	movs	r3, #0
 80034ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80034f0:	f107 031c 	add.w	r3, r7, #28
 80034f4:	4619      	mov	r1, r3
 80034f6:	480a      	ldr	r0, [pc, #40]	; (8003520 <MX_GPIO_Init+0x1a8>)
 80034f8:	f001 fa3a 	bl	8004970 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80034fc:	2200      	movs	r2, #0
 80034fe:	2100      	movs	r1, #0
 8003500:	2028      	movs	r0, #40	; 0x28
 8003502:	f001 f9fe 	bl	8004902 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003506:	2028      	movs	r0, #40	; 0x28
 8003508:	f001 fa17 	bl	800493a <HAL_NVIC_EnableIRQ>

}
 800350c:	bf00      	nop
 800350e:	3730      	adds	r7, #48	; 0x30
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}
 8003514:	40023800 	.word	0x40023800
 8003518:	40020800 	.word	0x40020800
 800351c:	40020400 	.word	0x40020400
 8003520:	40021800 	.word	0x40021800
 8003524:	40021000 	.word	0x40021000

08003528 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800352c:	b672      	cpsid	i
}
 800352e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003530:	e7fe      	b.n	8003530 <Error_Handler+0x8>
	...

08003534 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800353a:	4b0f      	ldr	r3, [pc, #60]	; (8003578 <HAL_MspInit+0x44>)
 800353c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353e:	4a0e      	ldr	r2, [pc, #56]	; (8003578 <HAL_MspInit+0x44>)
 8003540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003544:	6413      	str	r3, [r2, #64]	; 0x40
 8003546:	4b0c      	ldr	r3, [pc, #48]	; (8003578 <HAL_MspInit+0x44>)
 8003548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800354e:	607b      	str	r3, [r7, #4]
 8003550:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003552:	4b09      	ldr	r3, [pc, #36]	; (8003578 <HAL_MspInit+0x44>)
 8003554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003556:	4a08      	ldr	r2, [pc, #32]	; (8003578 <HAL_MspInit+0x44>)
 8003558:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800355c:	6453      	str	r3, [r2, #68]	; 0x44
 800355e:	4b06      	ldr	r3, [pc, #24]	; (8003578 <HAL_MspInit+0x44>)
 8003560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003562:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003566:	603b      	str	r3, [r7, #0]
 8003568:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800356a:	bf00      	nop
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	40023800 	.word	0x40023800

0800357c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b08a      	sub	sp, #40	; 0x28
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003584:	f107 0314 	add.w	r3, r7, #20
 8003588:	2200      	movs	r2, #0
 800358a:	601a      	str	r2, [r3, #0]
 800358c:	605a      	str	r2, [r3, #4]
 800358e:	609a      	str	r2, [r3, #8]
 8003590:	60da      	str	r2, [r3, #12]
 8003592:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a15      	ldr	r2, [pc, #84]	; (80035f0 <HAL_ADC_MspInit+0x74>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d123      	bne.n	80035e6 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800359e:	4b15      	ldr	r3, [pc, #84]	; (80035f4 <HAL_ADC_MspInit+0x78>)
 80035a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a2:	4a14      	ldr	r2, [pc, #80]	; (80035f4 <HAL_ADC_MspInit+0x78>)
 80035a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035a8:	6453      	str	r3, [r2, #68]	; 0x44
 80035aa:	4b12      	ldr	r3, [pc, #72]	; (80035f4 <HAL_ADC_MspInit+0x78>)
 80035ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035b2:	613b      	str	r3, [r7, #16]
 80035b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035b6:	4b0f      	ldr	r3, [pc, #60]	; (80035f4 <HAL_ADC_MspInit+0x78>)
 80035b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ba:	4a0e      	ldr	r2, [pc, #56]	; (80035f4 <HAL_ADC_MspInit+0x78>)
 80035bc:	f043 0301 	orr.w	r3, r3, #1
 80035c0:	6313      	str	r3, [r2, #48]	; 0x30
 80035c2:	4b0c      	ldr	r3, [pc, #48]	; (80035f4 <HAL_ADC_MspInit+0x78>)
 80035c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	60fb      	str	r3, [r7, #12]
 80035cc:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PA3     ------> ADC3_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80035ce:	2308      	movs	r3, #8
 80035d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035d2:	2303      	movs	r3, #3
 80035d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d6:	2300      	movs	r3, #0
 80035d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035da:	f107 0314 	add.w	r3, r7, #20
 80035de:	4619      	mov	r1, r3
 80035e0:	4805      	ldr	r0, [pc, #20]	; (80035f8 <HAL_ADC_MspInit+0x7c>)
 80035e2:	f001 f9c5 	bl	8004970 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80035e6:	bf00      	nop
 80035e8:	3728      	adds	r7, #40	; 0x28
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	40012200 	.word	0x40012200
 80035f4:	40023800 	.word	0x40023800
 80035f8:	40020000 	.word	0x40020000

080035fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b0aa      	sub	sp, #168	; 0xa8
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003604:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003608:	2200      	movs	r2, #0
 800360a:	601a      	str	r2, [r3, #0]
 800360c:	605a      	str	r2, [r3, #4]
 800360e:	609a      	str	r2, [r3, #8]
 8003610:	60da      	str	r2, [r3, #12]
 8003612:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003614:	f107 0314 	add.w	r3, r7, #20
 8003618:	2280      	movs	r2, #128	; 0x80
 800361a:	2100      	movs	r1, #0
 800361c:	4618      	mov	r0, r3
 800361e:	f005 ff71 	bl	8009504 <memset>
  if(hi2c->Instance==I2C1)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a22      	ldr	r2, [pc, #136]	; (80036b0 <HAL_I2C_MspInit+0xb4>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d13c      	bne.n	80036a6 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800362c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003630:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003632:	2300      	movs	r3, #0
 8003634:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003636:	f107 0314 	add.w	r3, r7, #20
 800363a:	4618      	mov	r0, r3
 800363c:	f002 fede 	bl	80063fc <HAL_RCCEx_PeriphCLKConfig>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d001      	beq.n	800364a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003646:	f7ff ff6f 	bl	8003528 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800364a:	4b1a      	ldr	r3, [pc, #104]	; (80036b4 <HAL_I2C_MspInit+0xb8>)
 800364c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364e:	4a19      	ldr	r2, [pc, #100]	; (80036b4 <HAL_I2C_MspInit+0xb8>)
 8003650:	f043 0302 	orr.w	r3, r3, #2
 8003654:	6313      	str	r3, [r2, #48]	; 0x30
 8003656:	4b17      	ldr	r3, [pc, #92]	; (80036b4 <HAL_I2C_MspInit+0xb8>)
 8003658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	613b      	str	r3, [r7, #16]
 8003660:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_PIN_Pin|SDA_PIN_Pin;
 8003662:	f44f 7310 	mov.w	r3, #576	; 0x240
 8003666:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800366a:	2312      	movs	r3, #18
 800366c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003670:	2300      	movs	r3, #0
 8003672:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003676:	2303      	movs	r3, #3
 8003678:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800367c:	2304      	movs	r3, #4
 800367e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003682:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003686:	4619      	mov	r1, r3
 8003688:	480b      	ldr	r0, [pc, #44]	; (80036b8 <HAL_I2C_MspInit+0xbc>)
 800368a:	f001 f971 	bl	8004970 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800368e:	4b09      	ldr	r3, [pc, #36]	; (80036b4 <HAL_I2C_MspInit+0xb8>)
 8003690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003692:	4a08      	ldr	r2, [pc, #32]	; (80036b4 <HAL_I2C_MspInit+0xb8>)
 8003694:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003698:	6413      	str	r3, [r2, #64]	; 0x40
 800369a:	4b06      	ldr	r3, [pc, #24]	; (80036b4 <HAL_I2C_MspInit+0xb8>)
 800369c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036a2:	60fb      	str	r3, [r7, #12]
 80036a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80036a6:	bf00      	nop
 80036a8:	37a8      	adds	r7, #168	; 0xa8
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	40005400 	.word	0x40005400
 80036b4:	40023800 	.word	0x40023800
 80036b8:	40020400 	.word	0x40020400

080036bc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b0a2      	sub	sp, #136	; 0x88
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80036c4:	f107 0308 	add.w	r3, r7, #8
 80036c8:	2280      	movs	r2, #128	; 0x80
 80036ca:	2100      	movs	r1, #0
 80036cc:	4618      	mov	r0, r3
 80036ce:	f005 ff19 	bl	8009504 <memset>
  if(hrtc->Instance==RTC)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a0e      	ldr	r2, [pc, #56]	; (8003710 <HAL_RTC_MspInit+0x54>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d114      	bne.n	8003706 <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80036dc:	2320      	movs	r3, #32
 80036de:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80036e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036e4:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80036e6:	f107 0308 	add.w	r3, r7, #8
 80036ea:	4618      	mov	r0, r3
 80036ec:	f002 fe86 	bl	80063fc <HAL_RCCEx_PeriphCLKConfig>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80036f6:	f7ff ff17 	bl	8003528 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80036fa:	4b06      	ldr	r3, [pc, #24]	; (8003714 <HAL_RTC_MspInit+0x58>)
 80036fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036fe:	4a05      	ldr	r2, [pc, #20]	; (8003714 <HAL_RTC_MspInit+0x58>)
 8003700:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003704:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003706:	bf00      	nop
 8003708:	3788      	adds	r7, #136	; 0x88
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	40002800 	.word	0x40002800
 8003714:	40023800 	.word	0x40023800

08003718 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a16      	ldr	r2, [pc, #88]	; (8003780 <HAL_TIM_Base_MspInit+0x68>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d114      	bne.n	8003754 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800372a:	4b16      	ldr	r3, [pc, #88]	; (8003784 <HAL_TIM_Base_MspInit+0x6c>)
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	4a15      	ldr	r2, [pc, #84]	; (8003784 <HAL_TIM_Base_MspInit+0x6c>)
 8003730:	f043 0302 	orr.w	r3, r3, #2
 8003734:	6413      	str	r3, [r2, #64]	; 0x40
 8003736:	4b13      	ldr	r3, [pc, #76]	; (8003784 <HAL_TIM_Base_MspInit+0x6c>)
 8003738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	60fb      	str	r3, [r7, #12]
 8003740:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003742:	2200      	movs	r2, #0
 8003744:	2100      	movs	r1, #0
 8003746:	201d      	movs	r0, #29
 8003748:	f001 f8db 	bl	8004902 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800374c:	201d      	movs	r0, #29
 800374e:	f001 f8f4 	bl	800493a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003752:	e010      	b.n	8003776 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM6)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a0b      	ldr	r2, [pc, #44]	; (8003788 <HAL_TIM_Base_MspInit+0x70>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d10b      	bne.n	8003776 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800375e:	4b09      	ldr	r3, [pc, #36]	; (8003784 <HAL_TIM_Base_MspInit+0x6c>)
 8003760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003762:	4a08      	ldr	r2, [pc, #32]	; (8003784 <HAL_TIM_Base_MspInit+0x6c>)
 8003764:	f043 0310 	orr.w	r3, r3, #16
 8003768:	6413      	str	r3, [r2, #64]	; 0x40
 800376a:	4b06      	ldr	r3, [pc, #24]	; (8003784 <HAL_TIM_Base_MspInit+0x6c>)
 800376c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376e:	f003 0310 	and.w	r3, r3, #16
 8003772:	60bb      	str	r3, [r7, #8]
 8003774:	68bb      	ldr	r3, [r7, #8]
}
 8003776:	bf00      	nop
 8003778:	3710      	adds	r7, #16
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	40000400 	.word	0x40000400
 8003784:	40023800 	.word	0x40023800
 8003788:	40001000 	.word	0x40001000

0800378c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800378c:	b480      	push	{r7}
 800378e:	b085      	sub	sp, #20
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a0a      	ldr	r2, [pc, #40]	; (80037c4 <HAL_TIM_PWM_MspInit+0x38>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d10b      	bne.n	80037b6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800379e:	4b0a      	ldr	r3, [pc, #40]	; (80037c8 <HAL_TIM_PWM_MspInit+0x3c>)
 80037a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a2:	4a09      	ldr	r2, [pc, #36]	; (80037c8 <HAL_TIM_PWM_MspInit+0x3c>)
 80037a4:	f043 0304 	orr.w	r3, r3, #4
 80037a8:	6413      	str	r3, [r2, #64]	; 0x40
 80037aa:	4b07      	ldr	r3, [pc, #28]	; (80037c8 <HAL_TIM_PWM_MspInit+0x3c>)
 80037ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ae:	f003 0304 	and.w	r3, r3, #4
 80037b2:	60fb      	str	r3, [r7, #12]
 80037b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80037b6:	bf00      	nop
 80037b8:	3714      	adds	r7, #20
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	40000800 	.word	0x40000800
 80037c8:	40023800 	.word	0x40023800

080037cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b088      	sub	sp, #32
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037d4:	f107 030c 	add.w	r3, r7, #12
 80037d8:	2200      	movs	r2, #0
 80037da:	601a      	str	r2, [r3, #0]
 80037dc:	605a      	str	r2, [r3, #4]
 80037de:	609a      	str	r2, [r3, #8]
 80037e0:	60da      	str	r2, [r3, #12]
 80037e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a11      	ldr	r2, [pc, #68]	; (8003830 <HAL_TIM_MspPostInit+0x64>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d11c      	bne.n	8003828 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80037ee:	4b11      	ldr	r3, [pc, #68]	; (8003834 <HAL_TIM_MspPostInit+0x68>)
 80037f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f2:	4a10      	ldr	r2, [pc, #64]	; (8003834 <HAL_TIM_MspPostInit+0x68>)
 80037f4:	f043 0308 	orr.w	r3, r3, #8
 80037f8:	6313      	str	r3, [r2, #48]	; 0x30
 80037fa:	4b0e      	ldr	r3, [pc, #56]	; (8003834 <HAL_TIM_MspPostInit+0x68>)
 80037fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fe:	f003 0308 	and.w	r3, r3, #8
 8003802:	60bb      	str	r3, [r7, #8]
 8003804:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003806:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800380a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800380c:	2302      	movs	r3, #2
 800380e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003810:	2300      	movs	r3, #0
 8003812:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003814:	2300      	movs	r3, #0
 8003816:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003818:	2302      	movs	r3, #2
 800381a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800381c:	f107 030c 	add.w	r3, r7, #12
 8003820:	4619      	mov	r1, r3
 8003822:	4805      	ldr	r0, [pc, #20]	; (8003838 <HAL_TIM_MspPostInit+0x6c>)
 8003824:	f001 f8a4 	bl	8004970 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003828:	bf00      	nop
 800382a:	3720      	adds	r7, #32
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	40000800 	.word	0x40000800
 8003834:	40023800 	.word	0x40023800
 8003838:	40020c00 	.word	0x40020c00

0800383c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b0ac      	sub	sp, #176	; 0xb0
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003844:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003848:	2200      	movs	r2, #0
 800384a:	601a      	str	r2, [r3, #0]
 800384c:	605a      	str	r2, [r3, #4]
 800384e:	609a      	str	r2, [r3, #8]
 8003850:	60da      	str	r2, [r3, #12]
 8003852:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003854:	f107 031c 	add.w	r3, r7, #28
 8003858:	2280      	movs	r2, #128	; 0x80
 800385a:	2100      	movs	r1, #0
 800385c:	4618      	mov	r0, r3
 800385e:	f005 fe51 	bl	8009504 <memset>
  if(huart->Instance==USART3)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a43      	ldr	r2, [pc, #268]	; (8003974 <HAL_UART_MspInit+0x138>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d13d      	bne.n	80038e8 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800386c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003870:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003872:	2300      	movs	r3, #0
 8003874:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003876:	f107 031c 	add.w	r3, r7, #28
 800387a:	4618      	mov	r0, r3
 800387c:	f002 fdbe 	bl	80063fc <HAL_RCCEx_PeriphCLKConfig>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d001      	beq.n	800388a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003886:	f7ff fe4f 	bl	8003528 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800388a:	4b3b      	ldr	r3, [pc, #236]	; (8003978 <HAL_UART_MspInit+0x13c>)
 800388c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388e:	4a3a      	ldr	r2, [pc, #232]	; (8003978 <HAL_UART_MspInit+0x13c>)
 8003890:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003894:	6413      	str	r3, [r2, #64]	; 0x40
 8003896:	4b38      	ldr	r3, [pc, #224]	; (8003978 <HAL_UART_MspInit+0x13c>)
 8003898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800389e:	61bb      	str	r3, [r7, #24]
 80038a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80038a2:	4b35      	ldr	r3, [pc, #212]	; (8003978 <HAL_UART_MspInit+0x13c>)
 80038a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a6:	4a34      	ldr	r2, [pc, #208]	; (8003978 <HAL_UART_MspInit+0x13c>)
 80038a8:	f043 0308 	orr.w	r3, r3, #8
 80038ac:	6313      	str	r3, [r2, #48]	; 0x30
 80038ae:	4b32      	ldr	r3, [pc, #200]	; (8003978 <HAL_UART_MspInit+0x13c>)
 80038b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b2:	f003 0308 	and.w	r3, r3, #8
 80038b6:	617b      	str	r3, [r7, #20]
 80038b8:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80038ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80038be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038c2:	2302      	movs	r3, #2
 80038c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038c8:	2300      	movs	r3, #0
 80038ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038ce:	2303      	movs	r3, #3
 80038d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80038d4:	2307      	movs	r3, #7
 80038d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80038da:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80038de:	4619      	mov	r1, r3
 80038e0:	4826      	ldr	r0, [pc, #152]	; (800397c <HAL_UART_MspInit+0x140>)
 80038e2:	f001 f845 	bl	8004970 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80038e6:	e040      	b.n	800396a <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART6)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a24      	ldr	r2, [pc, #144]	; (8003980 <HAL_UART_MspInit+0x144>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d13b      	bne.n	800396a <HAL_UART_MspInit+0x12e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80038f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80038f6:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80038f8:	2300      	movs	r3, #0
 80038fa:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80038fc:	f107 031c 	add.w	r3, r7, #28
 8003900:	4618      	mov	r0, r3
 8003902:	f002 fd7b 	bl	80063fc <HAL_RCCEx_PeriphCLKConfig>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d001      	beq.n	8003910 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 800390c:	f7ff fe0c 	bl	8003528 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003910:	4b19      	ldr	r3, [pc, #100]	; (8003978 <HAL_UART_MspInit+0x13c>)
 8003912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003914:	4a18      	ldr	r2, [pc, #96]	; (8003978 <HAL_UART_MspInit+0x13c>)
 8003916:	f043 0320 	orr.w	r3, r3, #32
 800391a:	6453      	str	r3, [r2, #68]	; 0x44
 800391c:	4b16      	ldr	r3, [pc, #88]	; (8003978 <HAL_UART_MspInit+0x13c>)
 800391e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003920:	f003 0320 	and.w	r3, r3, #32
 8003924:	613b      	str	r3, [r7, #16]
 8003926:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003928:	4b13      	ldr	r3, [pc, #76]	; (8003978 <HAL_UART_MspInit+0x13c>)
 800392a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392c:	4a12      	ldr	r2, [pc, #72]	; (8003978 <HAL_UART_MspInit+0x13c>)
 800392e:	f043 0304 	orr.w	r3, r3, #4
 8003932:	6313      	str	r3, [r2, #48]	; 0x30
 8003934:	4b10      	ldr	r3, [pc, #64]	; (8003978 <HAL_UART_MspInit+0x13c>)
 8003936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003938:	f003 0304 	and.w	r3, r3, #4
 800393c:	60fb      	str	r3, [r7, #12]
 800393e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003940:	23c0      	movs	r3, #192	; 0xc0
 8003942:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003946:	2302      	movs	r3, #2
 8003948:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800394c:	2300      	movs	r3, #0
 800394e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003952:	2303      	movs	r3, #3
 8003954:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003958:	2308      	movs	r3, #8
 800395a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800395e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003962:	4619      	mov	r1, r3
 8003964:	4807      	ldr	r0, [pc, #28]	; (8003984 <HAL_UART_MspInit+0x148>)
 8003966:	f001 f803 	bl	8004970 <HAL_GPIO_Init>
}
 800396a:	bf00      	nop
 800396c:	37b0      	adds	r7, #176	; 0xb0
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	40004800 	.word	0x40004800
 8003978:	40023800 	.word	0x40023800
 800397c:	40020c00 	.word	0x40020c00
 8003980:	40011400 	.word	0x40011400
 8003984:	40020800 	.word	0x40020800

08003988 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b0aa      	sub	sp, #168	; 0xa8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003990:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003994:	2200      	movs	r2, #0
 8003996:	601a      	str	r2, [r3, #0]
 8003998:	605a      	str	r2, [r3, #4]
 800399a:	609a      	str	r2, [r3, #8]
 800399c:	60da      	str	r2, [r3, #12]
 800399e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80039a0:	f107 0314 	add.w	r3, r7, #20
 80039a4:	2280      	movs	r2, #128	; 0x80
 80039a6:	2100      	movs	r1, #0
 80039a8:	4618      	mov	r0, r3
 80039aa:	f005 fdab 	bl	8009504 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039b6:	d159      	bne.n	8003a6c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80039b8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80039bc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80039be:	2300      	movs	r3, #0
 80039c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80039c4:	f107 0314 	add.w	r3, r7, #20
 80039c8:	4618      	mov	r0, r3
 80039ca:	f002 fd17 	bl	80063fc <HAL_RCCEx_PeriphCLKConfig>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d001      	beq.n	80039d8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80039d4:	f7ff fda8 	bl	8003528 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039d8:	4b26      	ldr	r3, [pc, #152]	; (8003a74 <HAL_PCD_MspInit+0xec>)
 80039da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039dc:	4a25      	ldr	r2, [pc, #148]	; (8003a74 <HAL_PCD_MspInit+0xec>)
 80039de:	f043 0301 	orr.w	r3, r3, #1
 80039e2:	6313      	str	r3, [r2, #48]	; 0x30
 80039e4:	4b23      	ldr	r3, [pc, #140]	; (8003a74 <HAL_PCD_MspInit+0xec>)
 80039e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e8:	f003 0301 	and.w	r3, r3, #1
 80039ec:	613b      	str	r3, [r7, #16]
 80039ee:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80039f0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80039f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039f8:	2302      	movs	r3, #2
 80039fa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039fe:	2300      	movs	r3, #0
 8003a00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a04:	2303      	movs	r3, #3
 8003a06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003a0a:	230a      	movs	r3, #10
 8003a0c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a10:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003a14:	4619      	mov	r1, r3
 8003a16:	4818      	ldr	r0, [pc, #96]	; (8003a78 <HAL_PCD_MspInit+0xf0>)
 8003a18:	f000 ffaa 	bl	8004970 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8003a1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a20:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a24:	2300      	movs	r3, #0
 8003a26:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003a30:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003a34:	4619      	mov	r1, r3
 8003a36:	4810      	ldr	r0, [pc, #64]	; (8003a78 <HAL_PCD_MspInit+0xf0>)
 8003a38:	f000 ff9a 	bl	8004970 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003a3c:	4b0d      	ldr	r3, [pc, #52]	; (8003a74 <HAL_PCD_MspInit+0xec>)
 8003a3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a40:	4a0c      	ldr	r2, [pc, #48]	; (8003a74 <HAL_PCD_MspInit+0xec>)
 8003a42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a46:	6353      	str	r3, [r2, #52]	; 0x34
 8003a48:	4b0a      	ldr	r3, [pc, #40]	; (8003a74 <HAL_PCD_MspInit+0xec>)
 8003a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a50:	60fb      	str	r3, [r7, #12]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	4b07      	ldr	r3, [pc, #28]	; (8003a74 <HAL_PCD_MspInit+0xec>)
 8003a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a58:	4a06      	ldr	r2, [pc, #24]	; (8003a74 <HAL_PCD_MspInit+0xec>)
 8003a5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a5e:	6453      	str	r3, [r2, #68]	; 0x44
 8003a60:	4b04      	ldr	r3, [pc, #16]	; (8003a74 <HAL_PCD_MspInit+0xec>)
 8003a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a68:	60bb      	str	r3, [r7, #8]
 8003a6a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8003a6c:	bf00      	nop
 8003a6e:	37a8      	adds	r7, #168	; 0xa8
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	40023800 	.word	0x40023800
 8003a78:	40020000 	.word	0x40020000

08003a7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a80:	e7fe      	b.n	8003a80 <NMI_Handler+0x4>

08003a82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a82:	b480      	push	{r7}
 8003a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a86:	e7fe      	b.n	8003a86 <HardFault_Handler+0x4>

08003a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a8c:	e7fe      	b.n	8003a8c <MemManage_Handler+0x4>

08003a8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a8e:	b480      	push	{r7}
 8003a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a92:	e7fe      	b.n	8003a92 <BusFault_Handler+0x4>

08003a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a94:	b480      	push	{r7}
 8003a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a98:	e7fe      	b.n	8003a98 <UsageFault_Handler+0x4>

08003a9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a9e:	bf00      	nop
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003aac:	bf00      	nop
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr

08003ab6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ab6:	b480      	push	{r7}
 8003ab8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003aba:	bf00      	nop
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ac8:	f000 fa02 	bl	8003ed0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003acc:	bf00      	nop
 8003ace:	bd80      	pop	{r7, pc}

08003ad0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003ad6:	4825      	ldr	r0, [pc, #148]	; (8003b6c <TIM3_IRQHandler+0x9c>)
 8003ad8:	f003 fc20 	bl	800731c <HAL_TIM_IRQHandler>
//  second_count ++;
//  update_clock(second_count);
//  if(second_count > 120){
//  	  second_count=0;
//    }
  int now_mode = getMode();
 8003adc:	f7fe ff98 	bl	8002a10 <getMode>
 8003ae0:	6078      	str	r0, [r7, #4]
  // if now mode is Modify, Don't Increase Second..
  if(now_mode != 3){
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2b03      	cmp	r3, #3
 8003ae6:	d008      	beq.n	8003afa <TIM3_IRQHandler+0x2a>
	  clock_value[0] = ++default_second;
 8003ae8:	4b21      	ldr	r3, [pc, #132]	; (8003b70 <TIM3_IRQHandler+0xa0>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	3301      	adds	r3, #1
 8003aee:	4a20      	ldr	r2, [pc, #128]	; (8003b70 <TIM3_IRQHandler+0xa0>)
 8003af0:	6013      	str	r3, [r2, #0]
 8003af2:	4b1f      	ldr	r3, [pc, #124]	; (8003b70 <TIM3_IRQHandler+0xa0>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a1f      	ldr	r2, [pc, #124]	; (8003b74 <TIM3_IRQHandler+0xa4>)
 8003af8:	6013      	str	r3, [r2, #0]
  }
  if(default_second >=60){
 8003afa:	4b1d      	ldr	r3, [pc, #116]	; (8003b70 <TIM3_IRQHandler+0xa0>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2b3b      	cmp	r3, #59	; 0x3b
 8003b00:	dd0f      	ble.n	8003b22 <TIM3_IRQHandler+0x52>
	  default_second=0;
 8003b02:	4b1b      	ldr	r3, [pc, #108]	; (8003b70 <TIM3_IRQHandler+0xa0>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	601a      	str	r2, [r3, #0]
	  set_time_t();
 8003b08:	f7fe ff6c 	bl	80029e4 <set_time_t>
	  clock_value[0]=default_second;
 8003b0c:	4b18      	ldr	r3, [pc, #96]	; (8003b70 <TIM3_IRQHandler+0xa0>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a18      	ldr	r2, [pc, #96]	; (8003b74 <TIM3_IRQHandler+0xa4>)
 8003b12:	6013      	str	r3, [r2, #0]
	  if(getAlarmState()){
 8003b14:	f7fe ffb4 	bl	8002a80 <getAlarmState>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d001      	beq.n	8003b22 <TIM3_IRQHandler+0x52>
		  check_Alarm();
 8003b1e:	f7ff f921 	bl	8002d64 <check_Alarm>
	  }
	  // alarm check ?��?��
  }
  if(getTimerState() == 1){
 8003b22:	f7fe ff91 	bl	8002a48 <getTimerState>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d11a      	bne.n	8003b62 <TIM3_IRQHandler+0x92>
	  Timer_Second--;
 8003b2c:	4b12      	ldr	r3, [pc, #72]	; (8003b78 <TIM3_IRQHandler+0xa8>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	3b01      	subs	r3, #1
 8003b32:	4a11      	ldr	r2, [pc, #68]	; (8003b78 <TIM3_IRQHandler+0xa8>)
 8003b34:	6013      	str	r3, [r2, #0]
	  update_timer();
 8003b36:	f7fc ff3b 	bl	80009b0 <update_timer>
	  if(Timer_Second == 0 && getTimerState()==1){
 8003b3a:	4b0f      	ldr	r3, [pc, #60]	; (8003b78 <TIM3_IRQHandler+0xa8>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d10f      	bne.n	8003b62 <TIM3_IRQHandler+0x92>
 8003b42:	f7fe ff81 	bl	8002a48 <getTimerState>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d10a      	bne.n	8003b62 <TIM3_IRQHandler+0x92>
		  alert_mode = 1;
 8003b4c:	4b0b      	ldr	r3, [pc, #44]	; (8003b7c <TIM3_IRQHandler+0xac>)
 8003b4e:	2201      	movs	r2, #1
 8003b50:	701a      	strb	r2, [r3, #0]
		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, htim4.Init.Period);
 8003b52:	4b0b      	ldr	r3, [pc, #44]	; (8003b80 <TIM3_IRQHandler+0xb0>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a0a      	ldr	r2, [pc, #40]	; (8003b80 <TIM3_IRQHandler+0xb0>)
 8003b58:	68d2      	ldr	r2, [r2, #12]
 8003b5a:	63da      	str	r2, [r3, #60]	; 0x3c
		  start_Boozer(1);
 8003b5c:	2001      	movs	r0, #1
 8003b5e:	f7ff f8c7 	bl	8002cf0 <start_Boozer>
	  }
  }

  /* USER CODE END TIM3_IRQn 1 */
}
 8003b62:	bf00      	nop
 8003b64:	3708      	adds	r7, #8
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	20000834 	.word	0x20000834
 8003b70:	20000774 	.word	0x20000774
 8003b74:	200000ac 	.word	0x200000ac
 8003b78:	20000778 	.word	0x20000778
 8003b7c:	2000077c 	.word	0x2000077c
 8003b80:	20000880 	.word	0x20000880

08003b84 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UP_B_Pin);
 8003b88:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003b8c:	f001 f8be 	bl	8004d0c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8003b90:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003b94:	f001 f8ba 	bl	8004d0c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DOWN_B_Pin);
 8003b98:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003b9c:	f001 f8b6 	bl	8004d0c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SEL_B_Pin);
 8003ba0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003ba4:	f001 f8b2 	bl	8004d0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  if((HAL_GetTick() - btn_time) > BUTTON_GAP){
 8003ba8:	f000 f9a6 	bl	8003ef8 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	4b22      	ldr	r3, [pc, #136]	; (8003c38 <EXTI15_10_IRQHandler+0xb4>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003bb8:	d937      	bls.n	8003c2a <EXTI15_10_IRQHandler+0xa6>
	  cancel_btn = HAL_GPIO_ReadPin(USER_Btn_GPIO_Port,USER_Btn_Pin);
 8003bba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003bbe:	481f      	ldr	r0, [pc, #124]	; (8003c3c <EXTI15_10_IRQHandler+0xb8>)
 8003bc0:	f001 f872 	bl	8004ca8 <HAL_GPIO_ReadPin>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	4b1d      	ldr	r3, [pc, #116]	; (8003c40 <EXTI15_10_IRQHandler+0xbc>)
 8003bca:	701a      	strb	r2, [r3, #0]
	  // Mode�??????? 메뉴 모드?��?���??????? ?��?��?��?���??????? ?��?�� ?��?�� �????????���??????? �???????(0?��?��?�� ?��?��)
	  if(getMode() >= 0){
 8003bcc:	f7fe ff20 	bl	8002a10 <getMode>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	db29      	blt.n	8003c2a <EXTI15_10_IRQHandler+0xa6>
		  up_btn = !HAL_GPIO_ReadPin(UP_B_GPIO_Port,UP_B_Pin);
 8003bd6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003bda:	481a      	ldr	r0, [pc, #104]	; (8003c44 <EXTI15_10_IRQHandler+0xc0>)
 8003bdc:	f001 f864 	bl	8004ca8 <HAL_GPIO_ReadPin>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	bf0c      	ite	eq
 8003be6:	2301      	moveq	r3, #1
 8003be8:	2300      	movne	r3, #0
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	461a      	mov	r2, r3
 8003bee:	4b16      	ldr	r3, [pc, #88]	; (8003c48 <EXTI15_10_IRQHandler+0xc4>)
 8003bf0:	701a      	strb	r2, [r3, #0]
		  down_btn = !HAL_GPIO_ReadPin(DOWN_B_GPIO_Port,DOWN_B_Pin);
 8003bf2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003bf6:	4813      	ldr	r0, [pc, #76]	; (8003c44 <EXTI15_10_IRQHandler+0xc0>)
 8003bf8:	f001 f856 	bl	8004ca8 <HAL_GPIO_ReadPin>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	bf0c      	ite	eq
 8003c02:	2301      	moveq	r3, #1
 8003c04:	2300      	movne	r3, #0
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	461a      	mov	r2, r3
 8003c0a:	4b10      	ldr	r3, [pc, #64]	; (8003c4c <EXTI15_10_IRQHandler+0xc8>)
 8003c0c:	701a      	strb	r2, [r3, #0]
		  select_btn = !HAL_GPIO_ReadPin(SEL_B_GPIO_Port,SEL_B_Pin);
 8003c0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c12:	480c      	ldr	r0, [pc, #48]	; (8003c44 <EXTI15_10_IRQHandler+0xc0>)
 8003c14:	f001 f848 	bl	8004ca8 <HAL_GPIO_ReadPin>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	bf0c      	ite	eq
 8003c1e:	2301      	moveq	r3, #1
 8003c20:	2300      	movne	r3, #0
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	461a      	mov	r2, r3
 8003c26:	4b0a      	ldr	r3, [pc, #40]	; (8003c50 <EXTI15_10_IRQHandler+0xcc>)
 8003c28:	701a      	strb	r2, [r3, #0]
	  }
  }
  btn_time = HAL_GetTick();
 8003c2a:	f000 f965 	bl	8003ef8 <HAL_GetTick>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	4a01      	ldr	r2, [pc, #4]	; (8003c38 <EXTI15_10_IRQHandler+0xb4>)
 8003c32:	6013      	str	r3, [r2, #0]
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003c34:	bf00      	nop
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	20000e24 	.word	0x20000e24
 8003c3c:	40020800 	.word	0x40020800
 8003c40:	20000758 	.word	0x20000758
 8003c44:	40021000 	.word	0x40021000
 8003c48:	20000759 	.word	0x20000759
 8003c4c:	2000075a 	.word	0x2000075a
 8003c50:	2000075b 	.word	0x2000075b

08003c54 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003c54:	b480      	push	{r7}
 8003c56:	af00      	add	r7, sp, #0
	return 1;
 8003c58:	2301      	movs	r3, #1
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <_kill>:

int _kill(int pid, int sig)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003c6e:	f005 fafd 	bl	800926c <__errno>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2216      	movs	r2, #22
 8003c76:	601a      	str	r2, [r3, #0]
	return -1;
 8003c78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3708      	adds	r7, #8
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <_exit>:

void _exit (int status)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003c8c:	f04f 31ff 	mov.w	r1, #4294967295
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f7ff ffe7 	bl	8003c64 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003c96:	e7fe      	b.n	8003c96 <_exit+0x12>

08003c98 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b086      	sub	sp, #24
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	617b      	str	r3, [r7, #20]
 8003ca8:	e00a      	b.n	8003cc0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003caa:	f3af 8000 	nop.w
 8003cae:	4601      	mov	r1, r0
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	1c5a      	adds	r2, r3, #1
 8003cb4:	60ba      	str	r2, [r7, #8]
 8003cb6:	b2ca      	uxtb	r2, r1
 8003cb8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	617b      	str	r3, [r7, #20]
 8003cc0:	697a      	ldr	r2, [r7, #20]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	dbf0      	blt.n	8003caa <_read+0x12>
	}

return len;
 8003cc8:	687b      	ldr	r3, [r7, #4]
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3718      	adds	r7, #24
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003cd2:	b580      	push	{r7, lr}
 8003cd4:	b086      	sub	sp, #24
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	60f8      	str	r0, [r7, #12]
 8003cda:	60b9      	str	r1, [r7, #8]
 8003cdc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cde:	2300      	movs	r3, #0
 8003ce0:	617b      	str	r3, [r7, #20]
 8003ce2:	e009      	b.n	8003cf8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	1c5a      	adds	r2, r3, #1
 8003ce8:	60ba      	str	r2, [r7, #8]
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	4618      	mov	r0, r3
 8003cee:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	617b      	str	r3, [r7, #20]
 8003cf8:	697a      	ldr	r2, [r7, #20]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	dbf1      	blt.n	8003ce4 <_write+0x12>
	}
	return len;
 8003d00:	687b      	ldr	r3, [r7, #4]
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3718      	adds	r7, #24
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <_close>:

int _close(int file)
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b083      	sub	sp, #12
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
	return -1;
 8003d12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	370c      	adds	r7, #12
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr

08003d22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003d22:	b480      	push	{r7}
 8003d24:	b083      	sub	sp, #12
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
 8003d2a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d32:	605a      	str	r2, [r3, #4]
	return 0;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	370c      	adds	r7, #12
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr

08003d42 <_isatty>:

int _isatty(int file)
{
 8003d42:	b480      	push	{r7}
 8003d44:	b083      	sub	sp, #12
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
	return 1;
 8003d4a:	2301      	movs	r3, #1
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	607a      	str	r2, [r7, #4]
	return 0;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3714      	adds	r7, #20
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
	...

08003d74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d7c:	4a14      	ldr	r2, [pc, #80]	; (8003dd0 <_sbrk+0x5c>)
 8003d7e:	4b15      	ldr	r3, [pc, #84]	; (8003dd4 <_sbrk+0x60>)
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d88:	4b13      	ldr	r3, [pc, #76]	; (8003dd8 <_sbrk+0x64>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d102      	bne.n	8003d96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d90:	4b11      	ldr	r3, [pc, #68]	; (8003dd8 <_sbrk+0x64>)
 8003d92:	4a12      	ldr	r2, [pc, #72]	; (8003ddc <_sbrk+0x68>)
 8003d94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d96:	4b10      	ldr	r3, [pc, #64]	; (8003dd8 <_sbrk+0x64>)
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4413      	add	r3, r2
 8003d9e:	693a      	ldr	r2, [r7, #16]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d207      	bcs.n	8003db4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003da4:	f005 fa62 	bl	800926c <__errno>
 8003da8:	4603      	mov	r3, r0
 8003daa:	220c      	movs	r2, #12
 8003dac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003dae:	f04f 33ff 	mov.w	r3, #4294967295
 8003db2:	e009      	b.n	8003dc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003db4:	4b08      	ldr	r3, [pc, #32]	; (8003dd8 <_sbrk+0x64>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003dba:	4b07      	ldr	r3, [pc, #28]	; (8003dd8 <_sbrk+0x64>)
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	4a05      	ldr	r2, [pc, #20]	; (8003dd8 <_sbrk+0x64>)
 8003dc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3718      	adds	r7, #24
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	20040000 	.word	0x20040000
 8003dd4:	00000400 	.word	0x00000400
 8003dd8:	20000e2c 	.word	0x20000e2c
 8003ddc:	20000e70 	.word	0x20000e70

08003de0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003de0:	b480      	push	{r7}
 8003de2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003de4:	4b06      	ldr	r3, [pc, #24]	; (8003e00 <SystemInit+0x20>)
 8003de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dea:	4a05      	ldr	r2, [pc, #20]	; (8003e00 <SystemInit+0x20>)
 8003dec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003df0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003df4:	bf00      	nop
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	e000ed00 	.word	0xe000ed00

08003e04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003e04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003e3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003e08:	480d      	ldr	r0, [pc, #52]	; (8003e40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003e0a:	490e      	ldr	r1, [pc, #56]	; (8003e44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003e0c:	4a0e      	ldr	r2, [pc, #56]	; (8003e48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003e0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e10:	e002      	b.n	8003e18 <LoopCopyDataInit>

08003e12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e16:	3304      	adds	r3, #4

08003e18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e1c:	d3f9      	bcc.n	8003e12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e1e:	4a0b      	ldr	r2, [pc, #44]	; (8003e4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003e20:	4c0b      	ldr	r4, [pc, #44]	; (8003e50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003e22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e24:	e001      	b.n	8003e2a <LoopFillZerobss>

08003e26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e28:	3204      	adds	r2, #4

08003e2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e2c:	d3fb      	bcc.n	8003e26 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003e2e:	f7ff ffd7 	bl	8003de0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003e32:	f005 fa21 	bl	8009278 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003e36:	f7fe ffbd 	bl	8002db4 <main>
  bx  lr    
 8003e3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003e3c:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8003e40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e44:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8003e48:	0800d8fc 	.word	0x0800d8fc
  ldr r2, =_sbss
 8003e4c:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8003e50:	20000e6c 	.word	0x20000e6c

08003e54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e54:	e7fe      	b.n	8003e54 <ADC_IRQHandler>

08003e56 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e56:	b580      	push	{r7, lr}
 8003e58:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e5a:	2003      	movs	r0, #3
 8003e5c:	f000 fd46 	bl	80048ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003e60:	2000      	movs	r0, #0
 8003e62:	f000 f805 	bl	8003e70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003e66:	f7ff fb65 	bl	8003534 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b082      	sub	sp, #8
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003e78:	4b12      	ldr	r3, [pc, #72]	; (8003ec4 <HAL_InitTick+0x54>)
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	4b12      	ldr	r3, [pc, #72]	; (8003ec8 <HAL_InitTick+0x58>)
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	4619      	mov	r1, r3
 8003e82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e86:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f000 fd61 	bl	8004956 <HAL_SYSTICK_Config>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d001      	beq.n	8003e9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e00e      	b.n	8003ebc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2b0f      	cmp	r3, #15
 8003ea2:	d80a      	bhi.n	8003eba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	6879      	ldr	r1, [r7, #4]
 8003ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8003eac:	f000 fd29 	bl	8004902 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003eb0:	4a06      	ldr	r2, [pc, #24]	; (8003ecc <HAL_InitTick+0x5c>)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	e000      	b.n	8003ebc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3708      	adds	r7, #8
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	200000bc 	.word	0x200000bc
 8003ec8:	200000c4 	.word	0x200000c4
 8003ecc:	200000c0 	.word	0x200000c0

08003ed0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ed4:	4b06      	ldr	r3, [pc, #24]	; (8003ef0 <HAL_IncTick+0x20>)
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	461a      	mov	r2, r3
 8003eda:	4b06      	ldr	r3, [pc, #24]	; (8003ef4 <HAL_IncTick+0x24>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4413      	add	r3, r2
 8003ee0:	4a04      	ldr	r2, [pc, #16]	; (8003ef4 <HAL_IncTick+0x24>)
 8003ee2:	6013      	str	r3, [r2, #0]
}
 8003ee4:	bf00      	nop
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	200000c4 	.word	0x200000c4
 8003ef4:	20000e30 	.word	0x20000e30

08003ef8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	af00      	add	r7, sp, #0
  return uwTick;
 8003efc:	4b03      	ldr	r3, [pc, #12]	; (8003f0c <HAL_GetTick+0x14>)
 8003efe:	681b      	ldr	r3, [r3, #0]
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	20000e30 	.word	0x20000e30

08003f10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f18:	f7ff ffee 	bl	8003ef8 <HAL_GetTick>
 8003f1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f28:	d005      	beq.n	8003f36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f2a:	4b0a      	ldr	r3, [pc, #40]	; (8003f54 <HAL_Delay+0x44>)
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	461a      	mov	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	4413      	add	r3, r2
 8003f34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003f36:	bf00      	nop
 8003f38:	f7ff ffde 	bl	8003ef8 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d8f7      	bhi.n	8003f38 <HAL_Delay+0x28>
  {
  }
}
 8003f48:	bf00      	nop
 8003f4a:	bf00      	nop
 8003f4c:	3710      	adds	r7, #16
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	200000c4 	.word	0x200000c4

08003f58 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f60:	2300      	movs	r3, #0
 8003f62:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d101      	bne.n	8003f6e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e031      	b.n	8003fd2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d109      	bne.n	8003f8a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f7ff fb00 	bl	800357c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8e:	f003 0310 	and.w	r3, r3, #16
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d116      	bne.n	8003fc4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f9a:	4b10      	ldr	r3, [pc, #64]	; (8003fdc <HAL_ADC_Init+0x84>)
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	f043 0202 	orr.w	r2, r3, #2
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 fad6 	bl	8004558 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb6:	f023 0303 	bic.w	r3, r3, #3
 8003fba:	f043 0201 	orr.w	r2, r3, #1
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	641a      	str	r2, [r3, #64]	; 0x40
 8003fc2:	e001      	b.n	8003fc8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3710      	adds	r7, #16
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	ffffeefd 	.word	0xffffeefd

08003fe0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b085      	sub	sp, #20
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d101      	bne.n	8003ffa <HAL_ADC_Start+0x1a>
 8003ff6:	2302      	movs	r3, #2
 8003ff8:	e0ad      	b.n	8004156 <HAL_ADC_Start+0x176>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f003 0301 	and.w	r3, r3, #1
 800400c:	2b01      	cmp	r3, #1
 800400e:	d018      	beq.n	8004042 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	689a      	ldr	r2, [r3, #8]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f042 0201 	orr.w	r2, r2, #1
 800401e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8004020:	4b50      	ldr	r3, [pc, #320]	; (8004164 <HAL_ADC_Start+0x184>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a50      	ldr	r2, [pc, #320]	; (8004168 <HAL_ADC_Start+0x188>)
 8004026:	fba2 2303 	umull	r2, r3, r2, r3
 800402a:	0c9a      	lsrs	r2, r3, #18
 800402c:	4613      	mov	r3, r2
 800402e:	005b      	lsls	r3, r3, #1
 8004030:	4413      	add	r3, r2
 8004032:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004034:	e002      	b.n	800403c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	3b01      	subs	r3, #1
 800403a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d1f9      	bne.n	8004036 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	f003 0301 	and.w	r3, r3, #1
 800404c:	2b01      	cmp	r3, #1
 800404e:	d175      	bne.n	800413c <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004054:	4b45      	ldr	r3, [pc, #276]	; (800416c <HAL_ADC_Start+0x18c>)
 8004056:	4013      	ands	r3, r2
 8004058:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800406a:	2b00      	cmp	r3, #0
 800406c:	d007      	beq.n	800407e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004072:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004076:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004082:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004086:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800408a:	d106      	bne.n	800409a <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004090:	f023 0206 	bic.w	r2, r3, #6
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	645a      	str	r2, [r3, #68]	; 0x44
 8004098:	e002      	b.n	80040a0 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80040b0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80040b2:	4b2f      	ldr	r3, [pc, #188]	; (8004170 <HAL_ADC_Start+0x190>)
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	f003 031f 	and.w	r3, r3, #31
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d10f      	bne.n	80040de <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d143      	bne.n	8004154 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	689a      	ldr	r2, [r3, #8]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80040da:	609a      	str	r2, [r3, #8]
 80040dc:	e03a      	b.n	8004154 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a24      	ldr	r2, [pc, #144]	; (8004174 <HAL_ADC_Start+0x194>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d10e      	bne.n	8004106 <HAL_ADC_Start+0x126>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d107      	bne.n	8004106 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	689a      	ldr	r2, [r3, #8]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004104:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8004106:	4b1a      	ldr	r3, [pc, #104]	; (8004170 <HAL_ADC_Start+0x190>)
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	f003 0310 	and.w	r3, r3, #16
 800410e:	2b00      	cmp	r3, #0
 8004110:	d120      	bne.n	8004154 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a18      	ldr	r2, [pc, #96]	; (8004178 <HAL_ADC_Start+0x198>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d11b      	bne.n	8004154 <HAL_ADC_Start+0x174>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d114      	bne.n	8004154 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	689a      	ldr	r2, [r3, #8]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004138:	609a      	str	r2, [r3, #8]
 800413a:	e00b      	b.n	8004154 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004140:	f043 0210 	orr.w	r2, r3, #16
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800414c:	f043 0201 	orr.w	r2, r3, #1
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	3714      	adds	r7, #20
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	200000bc 	.word	0x200000bc
 8004168:	431bde83 	.word	0x431bde83
 800416c:	fffff8fe 	.word	0xfffff8fe
 8004170:	40012300 	.word	0x40012300
 8004174:	40012000 	.word	0x40012000
 8004178:	40012200 	.word	0x40012200

0800417c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004186:	2300      	movs	r3, #0
 8004188:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004194:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004198:	d113      	bne.n	80041c2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80041a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041a8:	d10b      	bne.n	80041c2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ae:	f043 0220 	orr.w	r2, r3, #32
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e063      	b.n	800428a <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80041c2:	f7ff fe99 	bl	8003ef8 <HAL_GetTick>
 80041c6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80041c8:	e021      	b.n	800420e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d0:	d01d      	beq.n	800420e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d007      	beq.n	80041e8 <HAL_ADC_PollForConversion+0x6c>
 80041d8:	f7ff fe8e 	bl	8003ef8 <HAL_GetTick>
 80041dc:	4602      	mov	r2, r0
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	683a      	ldr	r2, [r7, #0]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d212      	bcs.n	800420e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d00b      	beq.n	800420e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fa:	f043 0204 	orr.w	r2, r3, #4
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e03d      	b.n	800428a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0302 	and.w	r3, r3, #2
 8004218:	2b02      	cmp	r3, #2
 800421a:	d1d6      	bne.n	80041ca <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f06f 0212 	mvn.w	r2, #18
 8004224:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d123      	bne.n	8004288 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004244:	2b00      	cmp	r3, #0
 8004246:	d11f      	bne.n	8004288 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800424e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004252:	2b00      	cmp	r3, #0
 8004254:	d006      	beq.n	8004264 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004260:	2b00      	cmp	r3, #0
 8004262:	d111      	bne.n	8004288 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004268:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004274:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d105      	bne.n	8004288 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004280:	f043 0201 	orr.w	r2, r3, #1
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}

08004292 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004292:	b480      	push	{r7}
 8004294:	b083      	sub	sp, #12
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b085      	sub	sp, #20
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80042b6:	2300      	movs	r3, #0
 80042b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d101      	bne.n	80042c8 <HAL_ADC_ConfigChannel+0x1c>
 80042c4:	2302      	movs	r3, #2
 80042c6:	e136      	b.n	8004536 <HAL_ADC_ConfigChannel+0x28a>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2b09      	cmp	r3, #9
 80042d6:	d93a      	bls.n	800434e <HAL_ADC_ConfigChannel+0xa2>
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042e0:	d035      	beq.n	800434e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68d9      	ldr	r1, [r3, #12]
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	461a      	mov	r2, r3
 80042f0:	4613      	mov	r3, r2
 80042f2:	005b      	lsls	r3, r3, #1
 80042f4:	4413      	add	r3, r2
 80042f6:	3b1e      	subs	r3, #30
 80042f8:	2207      	movs	r2, #7
 80042fa:	fa02 f303 	lsl.w	r3, r2, r3
 80042fe:	43da      	mvns	r2, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	400a      	ands	r2, r1
 8004306:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a8d      	ldr	r2, [pc, #564]	; (8004544 <HAL_ADC_ConfigChannel+0x298>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d10a      	bne.n	8004328 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68d9      	ldr	r1, [r3, #12]
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	061a      	lsls	r2, r3, #24
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	430a      	orrs	r2, r1
 8004324:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004326:	e035      	b.n	8004394 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	68d9      	ldr	r1, [r3, #12]
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	689a      	ldr	r2, [r3, #8]
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	b29b      	uxth	r3, r3
 8004338:	4618      	mov	r0, r3
 800433a:	4603      	mov	r3, r0
 800433c:	005b      	lsls	r3, r3, #1
 800433e:	4403      	add	r3, r0
 8004340:	3b1e      	subs	r3, #30
 8004342:	409a      	lsls	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	430a      	orrs	r2, r1
 800434a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800434c:	e022      	b.n	8004394 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	6919      	ldr	r1, [r3, #16]
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	b29b      	uxth	r3, r3
 800435a:	461a      	mov	r2, r3
 800435c:	4613      	mov	r3, r2
 800435e:	005b      	lsls	r3, r3, #1
 8004360:	4413      	add	r3, r2
 8004362:	2207      	movs	r2, #7
 8004364:	fa02 f303 	lsl.w	r3, r2, r3
 8004368:	43da      	mvns	r2, r3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	400a      	ands	r2, r1
 8004370:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	6919      	ldr	r1, [r3, #16]
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	689a      	ldr	r2, [r3, #8]
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	b29b      	uxth	r3, r3
 8004382:	4618      	mov	r0, r3
 8004384:	4603      	mov	r3, r0
 8004386:	005b      	lsls	r3, r3, #1
 8004388:	4403      	add	r3, r0
 800438a:	409a      	lsls	r2, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	430a      	orrs	r2, r1
 8004392:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	2b06      	cmp	r3, #6
 800439a:	d824      	bhi.n	80043e6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	685a      	ldr	r2, [r3, #4]
 80043a6:	4613      	mov	r3, r2
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	4413      	add	r3, r2
 80043ac:	3b05      	subs	r3, #5
 80043ae:	221f      	movs	r2, #31
 80043b0:	fa02 f303 	lsl.w	r3, r2, r3
 80043b4:	43da      	mvns	r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	400a      	ands	r2, r1
 80043bc:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	4618      	mov	r0, r3
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	685a      	ldr	r2, [r3, #4]
 80043d0:	4613      	mov	r3, r2
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	4413      	add	r3, r2
 80043d6:	3b05      	subs	r3, #5
 80043d8:	fa00 f203 	lsl.w	r2, r0, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	430a      	orrs	r2, r1
 80043e2:	635a      	str	r2, [r3, #52]	; 0x34
 80043e4:	e04c      	b.n	8004480 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	2b0c      	cmp	r3, #12
 80043ec:	d824      	bhi.n	8004438 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	685a      	ldr	r2, [r3, #4]
 80043f8:	4613      	mov	r3, r2
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	4413      	add	r3, r2
 80043fe:	3b23      	subs	r3, #35	; 0x23
 8004400:	221f      	movs	r2, #31
 8004402:	fa02 f303 	lsl.w	r3, r2, r3
 8004406:	43da      	mvns	r2, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	400a      	ands	r2, r1
 800440e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	b29b      	uxth	r3, r3
 800441c:	4618      	mov	r0, r3
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	685a      	ldr	r2, [r3, #4]
 8004422:	4613      	mov	r3, r2
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	4413      	add	r3, r2
 8004428:	3b23      	subs	r3, #35	; 0x23
 800442a:	fa00 f203 	lsl.w	r2, r0, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	430a      	orrs	r2, r1
 8004434:	631a      	str	r2, [r3, #48]	; 0x30
 8004436:	e023      	b.n	8004480 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	685a      	ldr	r2, [r3, #4]
 8004442:	4613      	mov	r3, r2
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	4413      	add	r3, r2
 8004448:	3b41      	subs	r3, #65	; 0x41
 800444a:	221f      	movs	r2, #31
 800444c:	fa02 f303 	lsl.w	r3, r2, r3
 8004450:	43da      	mvns	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	400a      	ands	r2, r1
 8004458:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	b29b      	uxth	r3, r3
 8004466:	4618      	mov	r0, r3
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	685a      	ldr	r2, [r3, #4]
 800446c:	4613      	mov	r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	4413      	add	r3, r2
 8004472:	3b41      	subs	r3, #65	; 0x41
 8004474:	fa00 f203 	lsl.w	r2, r0, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	430a      	orrs	r2, r1
 800447e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a30      	ldr	r2, [pc, #192]	; (8004548 <HAL_ADC_ConfigChannel+0x29c>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d10a      	bne.n	80044a0 <HAL_ADC_ConfigChannel+0x1f4>
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004492:	d105      	bne.n	80044a0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8004494:	4b2d      	ldr	r3, [pc, #180]	; (800454c <HAL_ADC_ConfigChannel+0x2a0>)
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	4a2c      	ldr	r2, [pc, #176]	; (800454c <HAL_ADC_ConfigChannel+0x2a0>)
 800449a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800449e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a28      	ldr	r2, [pc, #160]	; (8004548 <HAL_ADC_ConfigChannel+0x29c>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d10f      	bne.n	80044ca <HAL_ADC_ConfigChannel+0x21e>
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2b12      	cmp	r3, #18
 80044b0:	d10b      	bne.n	80044ca <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80044b2:	4b26      	ldr	r3, [pc, #152]	; (800454c <HAL_ADC_ConfigChannel+0x2a0>)
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	4a25      	ldr	r2, [pc, #148]	; (800454c <HAL_ADC_ConfigChannel+0x2a0>)
 80044b8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80044bc:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80044be:	4b23      	ldr	r3, [pc, #140]	; (800454c <HAL_ADC_ConfigChannel+0x2a0>)
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	4a22      	ldr	r2, [pc, #136]	; (800454c <HAL_ADC_ConfigChannel+0x2a0>)
 80044c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80044c8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a1e      	ldr	r2, [pc, #120]	; (8004548 <HAL_ADC_ConfigChannel+0x29c>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d12b      	bne.n	800452c <HAL_ADC_ConfigChannel+0x280>
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a1a      	ldr	r2, [pc, #104]	; (8004544 <HAL_ADC_ConfigChannel+0x298>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d003      	beq.n	80044e6 <HAL_ADC_ConfigChannel+0x23a>
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2b11      	cmp	r3, #17
 80044e4:	d122      	bne.n	800452c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80044e6:	4b19      	ldr	r3, [pc, #100]	; (800454c <HAL_ADC_ConfigChannel+0x2a0>)
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	4a18      	ldr	r2, [pc, #96]	; (800454c <HAL_ADC_ConfigChannel+0x2a0>)
 80044ec:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80044f0:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80044f2:	4b16      	ldr	r3, [pc, #88]	; (800454c <HAL_ADC_ConfigChannel+0x2a0>)
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	4a15      	ldr	r2, [pc, #84]	; (800454c <HAL_ADC_ConfigChannel+0x2a0>)
 80044f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80044fc:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a10      	ldr	r2, [pc, #64]	; (8004544 <HAL_ADC_ConfigChannel+0x298>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d111      	bne.n	800452c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004508:	4b11      	ldr	r3, [pc, #68]	; (8004550 <HAL_ADC_ConfigChannel+0x2a4>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a11      	ldr	r2, [pc, #68]	; (8004554 <HAL_ADC_ConfigChannel+0x2a8>)
 800450e:	fba2 2303 	umull	r2, r3, r2, r3
 8004512:	0c9a      	lsrs	r2, r3, #18
 8004514:	4613      	mov	r3, r2
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	4413      	add	r3, r2
 800451a:	005b      	lsls	r3, r3, #1
 800451c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800451e:	e002      	b.n	8004526 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	3b01      	subs	r3, #1
 8004524:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d1f9      	bne.n	8004520 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3714      	adds	r7, #20
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	10000012 	.word	0x10000012
 8004548:	40012000 	.word	0x40012000
 800454c:	40012300 	.word	0x40012300
 8004550:	200000bc 	.word	0x200000bc
 8004554:	431bde83 	.word	0x431bde83

08004558 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8004560:	4b78      	ldr	r3, [pc, #480]	; (8004744 <ADC_Init+0x1ec>)
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	4a77      	ldr	r2, [pc, #476]	; (8004744 <ADC_Init+0x1ec>)
 8004566:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800456a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800456c:	4b75      	ldr	r3, [pc, #468]	; (8004744 <ADC_Init+0x1ec>)
 800456e:	685a      	ldr	r2, [r3, #4]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	4973      	ldr	r1, [pc, #460]	; (8004744 <ADC_Init+0x1ec>)
 8004576:	4313      	orrs	r3, r2
 8004578:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	685a      	ldr	r2, [r3, #4]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004588:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	6859      	ldr	r1, [r3, #4]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	021a      	lsls	r2, r3, #8
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	430a      	orrs	r2, r1
 800459c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	685a      	ldr	r2, [r3, #4]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80045ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	6859      	ldr	r1, [r3, #4]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	689a      	ldr	r2, [r3, #8]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	430a      	orrs	r2, r1
 80045be:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	689a      	ldr	r2, [r3, #8]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	6899      	ldr	r1, [r3, #8]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	68da      	ldr	r2, [r3, #12]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	430a      	orrs	r2, r1
 80045e0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e6:	4a58      	ldr	r2, [pc, #352]	; (8004748 <ADC_Init+0x1f0>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d022      	beq.n	8004632 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	689a      	ldr	r2, [r3, #8]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80045fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	6899      	ldr	r1, [r3, #8]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	430a      	orrs	r2, r1
 800460c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	689a      	ldr	r2, [r3, #8]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800461c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	6899      	ldr	r1, [r3, #8]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	430a      	orrs	r2, r1
 800462e:	609a      	str	r2, [r3, #8]
 8004630:	e00f      	b.n	8004652 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	689a      	ldr	r2, [r3, #8]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004640:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	689a      	ldr	r2, [r3, #8]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004650:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	689a      	ldr	r2, [r3, #8]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f022 0202 	bic.w	r2, r2, #2
 8004660:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	6899      	ldr	r1, [r3, #8]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	005a      	lsls	r2, r3, #1
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	430a      	orrs	r2, r1
 8004674:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f893 3020 	ldrb.w	r3, [r3, #32]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d01b      	beq.n	80046b8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	685a      	ldr	r2, [r3, #4]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800468e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	685a      	ldr	r2, [r3, #4]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800469e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	6859      	ldr	r1, [r3, #4]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046aa:	3b01      	subs	r3, #1
 80046ac:	035a      	lsls	r2, r3, #13
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	430a      	orrs	r2, r1
 80046b4:	605a      	str	r2, [r3, #4]
 80046b6:	e007      	b.n	80046c8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	685a      	ldr	r2, [r3, #4]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046c6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80046d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	69db      	ldr	r3, [r3, #28]
 80046e2:	3b01      	subs	r3, #1
 80046e4:	051a      	lsls	r2, r3, #20
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	430a      	orrs	r2, r1
 80046ec:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	689a      	ldr	r2, [r3, #8]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80046fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	6899      	ldr	r1, [r3, #8]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800470a:	025a      	lsls	r2, r3, #9
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	430a      	orrs	r2, r1
 8004712:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	689a      	ldr	r2, [r3, #8]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004722:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	6899      	ldr	r1, [r3, #8]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	695b      	ldr	r3, [r3, #20]
 800472e:	029a      	lsls	r2, r3, #10
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	430a      	orrs	r2, r1
 8004736:	609a      	str	r2, [r3, #8]
}
 8004738:	bf00      	nop
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr
 8004744:	40012300 	.word	0x40012300
 8004748:	0f000001 	.word	0x0f000001

0800474c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800474c:	b480      	push	{r7}
 800474e:	b085      	sub	sp, #20
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f003 0307 	and.w	r3, r3, #7
 800475a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800475c:	4b0b      	ldr	r3, [pc, #44]	; (800478c <__NVIC_SetPriorityGrouping+0x40>)
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004762:	68ba      	ldr	r2, [r7, #8]
 8004764:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004768:	4013      	ands	r3, r2
 800476a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004774:	4b06      	ldr	r3, [pc, #24]	; (8004790 <__NVIC_SetPriorityGrouping+0x44>)
 8004776:	4313      	orrs	r3, r2
 8004778:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800477a:	4a04      	ldr	r2, [pc, #16]	; (800478c <__NVIC_SetPriorityGrouping+0x40>)
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	60d3      	str	r3, [r2, #12]
}
 8004780:	bf00      	nop
 8004782:	3714      	adds	r7, #20
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr
 800478c:	e000ed00 	.word	0xe000ed00
 8004790:	05fa0000 	.word	0x05fa0000

08004794 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004794:	b480      	push	{r7}
 8004796:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004798:	4b04      	ldr	r3, [pc, #16]	; (80047ac <__NVIC_GetPriorityGrouping+0x18>)
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	0a1b      	lsrs	r3, r3, #8
 800479e:	f003 0307 	and.w	r3, r3, #7
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr
 80047ac:	e000ed00 	.word	0xe000ed00

080047b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	4603      	mov	r3, r0
 80047b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	db0b      	blt.n	80047da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047c2:	79fb      	ldrb	r3, [r7, #7]
 80047c4:	f003 021f 	and.w	r2, r3, #31
 80047c8:	4907      	ldr	r1, [pc, #28]	; (80047e8 <__NVIC_EnableIRQ+0x38>)
 80047ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ce:	095b      	lsrs	r3, r3, #5
 80047d0:	2001      	movs	r0, #1
 80047d2:	fa00 f202 	lsl.w	r2, r0, r2
 80047d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80047da:	bf00      	nop
 80047dc:	370c      	adds	r7, #12
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	e000e100 	.word	0xe000e100

080047ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	4603      	mov	r3, r0
 80047f4:	6039      	str	r1, [r7, #0]
 80047f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	db0a      	blt.n	8004816 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	b2da      	uxtb	r2, r3
 8004804:	490c      	ldr	r1, [pc, #48]	; (8004838 <__NVIC_SetPriority+0x4c>)
 8004806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800480a:	0112      	lsls	r2, r2, #4
 800480c:	b2d2      	uxtb	r2, r2
 800480e:	440b      	add	r3, r1
 8004810:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004814:	e00a      	b.n	800482c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	b2da      	uxtb	r2, r3
 800481a:	4908      	ldr	r1, [pc, #32]	; (800483c <__NVIC_SetPriority+0x50>)
 800481c:	79fb      	ldrb	r3, [r7, #7]
 800481e:	f003 030f 	and.w	r3, r3, #15
 8004822:	3b04      	subs	r3, #4
 8004824:	0112      	lsls	r2, r2, #4
 8004826:	b2d2      	uxtb	r2, r2
 8004828:	440b      	add	r3, r1
 800482a:	761a      	strb	r2, [r3, #24]
}
 800482c:	bf00      	nop
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr
 8004838:	e000e100 	.word	0xe000e100
 800483c:	e000ed00 	.word	0xe000ed00

08004840 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004840:	b480      	push	{r7}
 8004842:	b089      	sub	sp, #36	; 0x24
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f003 0307 	and.w	r3, r3, #7
 8004852:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	f1c3 0307 	rsb	r3, r3, #7
 800485a:	2b04      	cmp	r3, #4
 800485c:	bf28      	it	cs
 800485e:	2304      	movcs	r3, #4
 8004860:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	3304      	adds	r3, #4
 8004866:	2b06      	cmp	r3, #6
 8004868:	d902      	bls.n	8004870 <NVIC_EncodePriority+0x30>
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	3b03      	subs	r3, #3
 800486e:	e000      	b.n	8004872 <NVIC_EncodePriority+0x32>
 8004870:	2300      	movs	r3, #0
 8004872:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004874:	f04f 32ff 	mov.w	r2, #4294967295
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	fa02 f303 	lsl.w	r3, r2, r3
 800487e:	43da      	mvns	r2, r3
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	401a      	ands	r2, r3
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004888:	f04f 31ff 	mov.w	r1, #4294967295
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	fa01 f303 	lsl.w	r3, r1, r3
 8004892:	43d9      	mvns	r1, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004898:	4313      	orrs	r3, r2
         );
}
 800489a:	4618      	mov	r0, r3
 800489c:	3724      	adds	r7, #36	; 0x24
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
	...

080048a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	3b01      	subs	r3, #1
 80048b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048b8:	d301      	bcc.n	80048be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80048ba:	2301      	movs	r3, #1
 80048bc:	e00f      	b.n	80048de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80048be:	4a0a      	ldr	r2, [pc, #40]	; (80048e8 <SysTick_Config+0x40>)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	3b01      	subs	r3, #1
 80048c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80048c6:	210f      	movs	r1, #15
 80048c8:	f04f 30ff 	mov.w	r0, #4294967295
 80048cc:	f7ff ff8e 	bl	80047ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048d0:	4b05      	ldr	r3, [pc, #20]	; (80048e8 <SysTick_Config+0x40>)
 80048d2:	2200      	movs	r2, #0
 80048d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048d6:	4b04      	ldr	r3, [pc, #16]	; (80048e8 <SysTick_Config+0x40>)
 80048d8:	2207      	movs	r2, #7
 80048da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3708      	adds	r7, #8
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	e000e010 	.word	0xe000e010

080048ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f7ff ff29 	bl	800474c <__NVIC_SetPriorityGrouping>
}
 80048fa:	bf00      	nop
 80048fc:	3708      	adds	r7, #8
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}

08004902 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004902:	b580      	push	{r7, lr}
 8004904:	b086      	sub	sp, #24
 8004906:	af00      	add	r7, sp, #0
 8004908:	4603      	mov	r3, r0
 800490a:	60b9      	str	r1, [r7, #8]
 800490c:	607a      	str	r2, [r7, #4]
 800490e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004910:	2300      	movs	r3, #0
 8004912:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004914:	f7ff ff3e 	bl	8004794 <__NVIC_GetPriorityGrouping>
 8004918:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	68b9      	ldr	r1, [r7, #8]
 800491e:	6978      	ldr	r0, [r7, #20]
 8004920:	f7ff ff8e 	bl	8004840 <NVIC_EncodePriority>
 8004924:	4602      	mov	r2, r0
 8004926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800492a:	4611      	mov	r1, r2
 800492c:	4618      	mov	r0, r3
 800492e:	f7ff ff5d 	bl	80047ec <__NVIC_SetPriority>
}
 8004932:	bf00      	nop
 8004934:	3718      	adds	r7, #24
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}

0800493a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800493a:	b580      	push	{r7, lr}
 800493c:	b082      	sub	sp, #8
 800493e:	af00      	add	r7, sp, #0
 8004940:	4603      	mov	r3, r0
 8004942:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004948:	4618      	mov	r0, r3
 800494a:	f7ff ff31 	bl	80047b0 <__NVIC_EnableIRQ>
}
 800494e:	bf00      	nop
 8004950:	3708      	adds	r7, #8
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}

08004956 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004956:	b580      	push	{r7, lr}
 8004958:	b082      	sub	sp, #8
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f7ff ffa2 	bl	80048a8 <SysTick_Config>
 8004964:	4603      	mov	r3, r0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3708      	adds	r7, #8
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
	...

08004970 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004970:	b480      	push	{r7}
 8004972:	b089      	sub	sp, #36	; 0x24
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800497a:	2300      	movs	r3, #0
 800497c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800497e:	2300      	movs	r3, #0
 8004980:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004982:	2300      	movs	r3, #0
 8004984:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004986:	2300      	movs	r3, #0
 8004988:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800498a:	2300      	movs	r3, #0
 800498c:	61fb      	str	r3, [r7, #28]
 800498e:	e169      	b.n	8004c64 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004990:	2201      	movs	r2, #1
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	fa02 f303 	lsl.w	r3, r2, r3
 8004998:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	697a      	ldr	r2, [r7, #20]
 80049a0:	4013      	ands	r3, r2
 80049a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80049a4:	693a      	ldr	r2, [r7, #16]
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	f040 8158 	bne.w	8004c5e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f003 0303 	and.w	r3, r3, #3
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d005      	beq.n	80049c6 <HAL_GPIO_Init+0x56>
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f003 0303 	and.w	r3, r3, #3
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d130      	bne.n	8004a28 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	005b      	lsls	r3, r3, #1
 80049d0:	2203      	movs	r2, #3
 80049d2:	fa02 f303 	lsl.w	r3, r2, r3
 80049d6:	43db      	mvns	r3, r3
 80049d8:	69ba      	ldr	r2, [r7, #24]
 80049da:	4013      	ands	r3, r2
 80049dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	68da      	ldr	r2, [r3, #12]
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	005b      	lsls	r3, r3, #1
 80049e6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ea:	69ba      	ldr	r2, [r7, #24]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	69ba      	ldr	r2, [r7, #24]
 80049f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80049fc:	2201      	movs	r2, #1
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	fa02 f303 	lsl.w	r3, r2, r3
 8004a04:	43db      	mvns	r3, r3
 8004a06:	69ba      	ldr	r2, [r7, #24]
 8004a08:	4013      	ands	r3, r2
 8004a0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	091b      	lsrs	r3, r3, #4
 8004a12:	f003 0201 	and.w	r2, r3, #1
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	fa02 f303 	lsl.w	r3, r2, r3
 8004a1c:	69ba      	ldr	r2, [r7, #24]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	69ba      	ldr	r2, [r7, #24]
 8004a26:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	f003 0303 	and.w	r3, r3, #3
 8004a30:	2b03      	cmp	r3, #3
 8004a32:	d017      	beq.n	8004a64 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	005b      	lsls	r3, r3, #1
 8004a3e:	2203      	movs	r2, #3
 8004a40:	fa02 f303 	lsl.w	r3, r2, r3
 8004a44:	43db      	mvns	r3, r3
 8004a46:	69ba      	ldr	r2, [r7, #24]
 8004a48:	4013      	ands	r3, r2
 8004a4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	689a      	ldr	r2, [r3, #8]
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	005b      	lsls	r3, r3, #1
 8004a54:	fa02 f303 	lsl.w	r3, r2, r3
 8004a58:	69ba      	ldr	r2, [r7, #24]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	69ba      	ldr	r2, [r7, #24]
 8004a62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f003 0303 	and.w	r3, r3, #3
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d123      	bne.n	8004ab8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	08da      	lsrs	r2, r3, #3
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	3208      	adds	r2, #8
 8004a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	f003 0307 	and.w	r3, r3, #7
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	220f      	movs	r2, #15
 8004a88:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8c:	43db      	mvns	r3, r3
 8004a8e:	69ba      	ldr	r2, [r7, #24]
 8004a90:	4013      	ands	r3, r2
 8004a92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	691a      	ldr	r2, [r3, #16]
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	f003 0307 	and.w	r3, r3, #7
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa4:	69ba      	ldr	r2, [r7, #24]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	08da      	lsrs	r2, r3, #3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	3208      	adds	r2, #8
 8004ab2:	69b9      	ldr	r1, [r7, #24]
 8004ab4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	005b      	lsls	r3, r3, #1
 8004ac2:	2203      	movs	r2, #3
 8004ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac8:	43db      	mvns	r3, r3
 8004aca:	69ba      	ldr	r2, [r7, #24]
 8004acc:	4013      	ands	r3, r2
 8004ace:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f003 0203 	and.w	r2, r3, #3
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	005b      	lsls	r3, r3, #1
 8004adc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae0:	69ba      	ldr	r2, [r7, #24]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	69ba      	ldr	r2, [r7, #24]
 8004aea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	f000 80b2 	beq.w	8004c5e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004afa:	4b60      	ldr	r3, [pc, #384]	; (8004c7c <HAL_GPIO_Init+0x30c>)
 8004afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004afe:	4a5f      	ldr	r2, [pc, #380]	; (8004c7c <HAL_GPIO_Init+0x30c>)
 8004b00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b04:	6453      	str	r3, [r2, #68]	; 0x44
 8004b06:	4b5d      	ldr	r3, [pc, #372]	; (8004c7c <HAL_GPIO_Init+0x30c>)
 8004b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b0e:	60fb      	str	r3, [r7, #12]
 8004b10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004b12:	4a5b      	ldr	r2, [pc, #364]	; (8004c80 <HAL_GPIO_Init+0x310>)
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	089b      	lsrs	r3, r3, #2
 8004b18:	3302      	adds	r3, #2
 8004b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	f003 0303 	and.w	r3, r3, #3
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	220f      	movs	r2, #15
 8004b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2e:	43db      	mvns	r3, r3
 8004b30:	69ba      	ldr	r2, [r7, #24]
 8004b32:	4013      	ands	r3, r2
 8004b34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a52      	ldr	r2, [pc, #328]	; (8004c84 <HAL_GPIO_Init+0x314>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d02b      	beq.n	8004b96 <HAL_GPIO_Init+0x226>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a51      	ldr	r2, [pc, #324]	; (8004c88 <HAL_GPIO_Init+0x318>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d025      	beq.n	8004b92 <HAL_GPIO_Init+0x222>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a50      	ldr	r2, [pc, #320]	; (8004c8c <HAL_GPIO_Init+0x31c>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d01f      	beq.n	8004b8e <HAL_GPIO_Init+0x21e>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a4f      	ldr	r2, [pc, #316]	; (8004c90 <HAL_GPIO_Init+0x320>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d019      	beq.n	8004b8a <HAL_GPIO_Init+0x21a>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a4e      	ldr	r2, [pc, #312]	; (8004c94 <HAL_GPIO_Init+0x324>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d013      	beq.n	8004b86 <HAL_GPIO_Init+0x216>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a4d      	ldr	r2, [pc, #308]	; (8004c98 <HAL_GPIO_Init+0x328>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d00d      	beq.n	8004b82 <HAL_GPIO_Init+0x212>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a4c      	ldr	r2, [pc, #304]	; (8004c9c <HAL_GPIO_Init+0x32c>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d007      	beq.n	8004b7e <HAL_GPIO_Init+0x20e>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a4b      	ldr	r2, [pc, #300]	; (8004ca0 <HAL_GPIO_Init+0x330>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d101      	bne.n	8004b7a <HAL_GPIO_Init+0x20a>
 8004b76:	2307      	movs	r3, #7
 8004b78:	e00e      	b.n	8004b98 <HAL_GPIO_Init+0x228>
 8004b7a:	2308      	movs	r3, #8
 8004b7c:	e00c      	b.n	8004b98 <HAL_GPIO_Init+0x228>
 8004b7e:	2306      	movs	r3, #6
 8004b80:	e00a      	b.n	8004b98 <HAL_GPIO_Init+0x228>
 8004b82:	2305      	movs	r3, #5
 8004b84:	e008      	b.n	8004b98 <HAL_GPIO_Init+0x228>
 8004b86:	2304      	movs	r3, #4
 8004b88:	e006      	b.n	8004b98 <HAL_GPIO_Init+0x228>
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e004      	b.n	8004b98 <HAL_GPIO_Init+0x228>
 8004b8e:	2302      	movs	r3, #2
 8004b90:	e002      	b.n	8004b98 <HAL_GPIO_Init+0x228>
 8004b92:	2301      	movs	r3, #1
 8004b94:	e000      	b.n	8004b98 <HAL_GPIO_Init+0x228>
 8004b96:	2300      	movs	r3, #0
 8004b98:	69fa      	ldr	r2, [r7, #28]
 8004b9a:	f002 0203 	and.w	r2, r2, #3
 8004b9e:	0092      	lsls	r2, r2, #2
 8004ba0:	4093      	lsls	r3, r2
 8004ba2:	69ba      	ldr	r2, [r7, #24]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004ba8:	4935      	ldr	r1, [pc, #212]	; (8004c80 <HAL_GPIO_Init+0x310>)
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	089b      	lsrs	r3, r3, #2
 8004bae:	3302      	adds	r3, #2
 8004bb0:	69ba      	ldr	r2, [r7, #24]
 8004bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004bb6:	4b3b      	ldr	r3, [pc, #236]	; (8004ca4 <HAL_GPIO_Init+0x334>)
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	43db      	mvns	r3, r3
 8004bc0:	69ba      	ldr	r2, [r7, #24]
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d003      	beq.n	8004bda <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004bd2:	69ba      	ldr	r2, [r7, #24]
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004bda:	4a32      	ldr	r2, [pc, #200]	; (8004ca4 <HAL_GPIO_Init+0x334>)
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004be0:	4b30      	ldr	r3, [pc, #192]	; (8004ca4 <HAL_GPIO_Init+0x334>)
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	43db      	mvns	r3, r3
 8004bea:	69ba      	ldr	r2, [r7, #24]
 8004bec:	4013      	ands	r3, r2
 8004bee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d003      	beq.n	8004c04 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004bfc:	69ba      	ldr	r2, [r7, #24]
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004c04:	4a27      	ldr	r2, [pc, #156]	; (8004ca4 <HAL_GPIO_Init+0x334>)
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004c0a:	4b26      	ldr	r3, [pc, #152]	; (8004ca4 <HAL_GPIO_Init+0x334>)
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	43db      	mvns	r3, r3
 8004c14:	69ba      	ldr	r2, [r7, #24]
 8004c16:	4013      	ands	r3, r2
 8004c18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d003      	beq.n	8004c2e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004c26:	69ba      	ldr	r2, [r7, #24]
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004c2e:	4a1d      	ldr	r2, [pc, #116]	; (8004ca4 <HAL_GPIO_Init+0x334>)
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004c34:	4b1b      	ldr	r3, [pc, #108]	; (8004ca4 <HAL_GPIO_Init+0x334>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	43db      	mvns	r3, r3
 8004c3e:	69ba      	ldr	r2, [r7, #24]
 8004c40:	4013      	ands	r3, r2
 8004c42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d003      	beq.n	8004c58 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004c50:	69ba      	ldr	r2, [r7, #24]
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004c58:	4a12      	ldr	r2, [pc, #72]	; (8004ca4 <HAL_GPIO_Init+0x334>)
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	3301      	adds	r3, #1
 8004c62:	61fb      	str	r3, [r7, #28]
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	2b0f      	cmp	r3, #15
 8004c68:	f67f ae92 	bls.w	8004990 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004c6c:	bf00      	nop
 8004c6e:	bf00      	nop
 8004c70:	3724      	adds	r7, #36	; 0x24
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop
 8004c7c:	40023800 	.word	0x40023800
 8004c80:	40013800 	.word	0x40013800
 8004c84:	40020000 	.word	0x40020000
 8004c88:	40020400 	.word	0x40020400
 8004c8c:	40020800 	.word	0x40020800
 8004c90:	40020c00 	.word	0x40020c00
 8004c94:	40021000 	.word	0x40021000
 8004c98:	40021400 	.word	0x40021400
 8004c9c:	40021800 	.word	0x40021800
 8004ca0:	40021c00 	.word	0x40021c00
 8004ca4:	40013c00 	.word	0x40013c00

08004ca8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b085      	sub	sp, #20
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	460b      	mov	r3, r1
 8004cb2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	691a      	ldr	r2, [r3, #16]
 8004cb8:	887b      	ldrh	r3, [r7, #2]
 8004cba:	4013      	ands	r3, r2
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d002      	beq.n	8004cc6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	73fb      	strb	r3, [r7, #15]
 8004cc4:	e001      	b.n	8004cca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3714      	adds	r7, #20
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	460b      	mov	r3, r1
 8004ce2:	807b      	strh	r3, [r7, #2]
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ce8:	787b      	ldrb	r3, [r7, #1]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d003      	beq.n	8004cf6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004cee:	887a      	ldrh	r2, [r7, #2]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004cf4:	e003      	b.n	8004cfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004cf6:	887b      	ldrh	r3, [r7, #2]
 8004cf8:	041a      	lsls	r2, r3, #16
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	619a      	str	r2, [r3, #24]
}
 8004cfe:	bf00      	nop
 8004d00:	370c      	adds	r7, #12
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
	...

08004d0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	4603      	mov	r3, r0
 8004d14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004d16:	4b08      	ldr	r3, [pc, #32]	; (8004d38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d18:	695a      	ldr	r2, [r3, #20]
 8004d1a:	88fb      	ldrh	r3, [r7, #6]
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d006      	beq.n	8004d30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004d22:	4a05      	ldr	r2, [pc, #20]	; (8004d38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d24:	88fb      	ldrh	r3, [r7, #6]
 8004d26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004d28:	88fb      	ldrh	r3, [r7, #6]
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f000 f806 	bl	8004d3c <HAL_GPIO_EXTI_Callback>
  }
}
 8004d30:	bf00      	nop
 8004d32:	3708      	adds	r7, #8
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	40013c00 	.word	0x40013c00

08004d3c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	4603      	mov	r3, r0
 8004d44:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004d46:	bf00      	nop
 8004d48:	370c      	adds	r7, #12
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr
	...

08004d54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d101      	bne.n	8004d66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e07f      	b.n	8004e66 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d106      	bne.n	8004d80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f7fe fc3e 	bl	80035fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2224      	movs	r2, #36	; 0x24
 8004d84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f022 0201 	bic.w	r2, r2, #1
 8004d96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	685a      	ldr	r2, [r3, #4]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004da4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	689a      	ldr	r2, [r3, #8]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004db4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d107      	bne.n	8004dce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	689a      	ldr	r2, [r3, #8]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004dca:	609a      	str	r2, [r3, #8]
 8004dcc:	e006      	b.n	8004ddc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	689a      	ldr	r2, [r3, #8]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004dda:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	d104      	bne.n	8004dee <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004dec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	6859      	ldr	r1, [r3, #4]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	4b1d      	ldr	r3, [pc, #116]	; (8004e70 <HAL_I2C_Init+0x11c>)
 8004dfa:	430b      	orrs	r3, r1
 8004dfc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68da      	ldr	r2, [r3, #12]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e0c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	691a      	ldr	r2, [r3, #16]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	695b      	ldr	r3, [r3, #20]
 8004e16:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	699b      	ldr	r3, [r3, #24]
 8004e1e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	430a      	orrs	r2, r1
 8004e26:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	69d9      	ldr	r1, [r3, #28]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a1a      	ldr	r2, [r3, #32]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	430a      	orrs	r2, r1
 8004e36:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f042 0201 	orr.w	r2, r2, #1
 8004e46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2220      	movs	r2, #32
 8004e52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3708      	adds	r7, #8
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	02008000 	.word	0x02008000

08004e74 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b088      	sub	sp, #32
 8004e78:	af02      	add	r7, sp, #8
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	607a      	str	r2, [r7, #4]
 8004e7e:	461a      	mov	r2, r3
 8004e80:	460b      	mov	r3, r1
 8004e82:	817b      	strh	r3, [r7, #10]
 8004e84:	4613      	mov	r3, r2
 8004e86:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	2b20      	cmp	r3, #32
 8004e92:	f040 80da 	bne.w	800504a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d101      	bne.n	8004ea4 <HAL_I2C_Master_Transmit+0x30>
 8004ea0:	2302      	movs	r3, #2
 8004ea2:	e0d3      	b.n	800504c <HAL_I2C_Master_Transmit+0x1d8>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004eac:	f7ff f824 	bl	8003ef8 <HAL_GetTick>
 8004eb0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	9300      	str	r3, [sp, #0]
 8004eb6:	2319      	movs	r3, #25
 8004eb8:	2201      	movs	r2, #1
 8004eba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ebe:	68f8      	ldr	r0, [r7, #12]
 8004ec0:	f000 f9f8 	bl	80052b4 <I2C_WaitOnFlagUntilTimeout>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d001      	beq.n	8004ece <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e0be      	b.n	800504c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2221      	movs	r2, #33	; 0x21
 8004ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2210      	movs	r2, #16
 8004eda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	893a      	ldrh	r2, [r7, #8]
 8004eee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	2bff      	cmp	r3, #255	; 0xff
 8004efe:	d90e      	bls.n	8004f1e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	22ff      	movs	r2, #255	; 0xff
 8004f04:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f0a:	b2da      	uxtb	r2, r3
 8004f0c:	8979      	ldrh	r1, [r7, #10]
 8004f0e:	4b51      	ldr	r3, [pc, #324]	; (8005054 <HAL_I2C_Master_Transmit+0x1e0>)
 8004f10:	9300      	str	r3, [sp, #0]
 8004f12:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f16:	68f8      	ldr	r0, [r7, #12]
 8004f18:	f000 fb74 	bl	8005604 <I2C_TransferConfig>
 8004f1c:	e06c      	b.n	8004ff8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f22:	b29a      	uxth	r2, r3
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f2c:	b2da      	uxtb	r2, r3
 8004f2e:	8979      	ldrh	r1, [r7, #10]
 8004f30:	4b48      	ldr	r3, [pc, #288]	; (8005054 <HAL_I2C_Master_Transmit+0x1e0>)
 8004f32:	9300      	str	r3, [sp, #0]
 8004f34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f38:	68f8      	ldr	r0, [r7, #12]
 8004f3a:	f000 fb63 	bl	8005604 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004f3e:	e05b      	b.n	8004ff8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f40:	697a      	ldr	r2, [r7, #20]
 8004f42:	6a39      	ldr	r1, [r7, #32]
 8004f44:	68f8      	ldr	r0, [r7, #12]
 8004f46:	f000 f9f5 	bl	8005334 <I2C_WaitOnTXISFlagUntilTimeout>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d001      	beq.n	8004f54 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e07b      	b.n	800504c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f58:	781a      	ldrb	r2, [r3, #0]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f64:	1c5a      	adds	r2, r3, #1
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	3b01      	subs	r3, #1
 8004f72:	b29a      	uxth	r2, r3
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f7c:	3b01      	subs	r3, #1
 8004f7e:	b29a      	uxth	r2, r3
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d034      	beq.n	8004ff8 <HAL_I2C_Master_Transmit+0x184>
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d130      	bne.n	8004ff8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	9300      	str	r3, [sp, #0]
 8004f9a:	6a3b      	ldr	r3, [r7, #32]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	2180      	movs	r1, #128	; 0x80
 8004fa0:	68f8      	ldr	r0, [r7, #12]
 8004fa2:	f000 f987 	bl	80052b4 <I2C_WaitOnFlagUntilTimeout>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d001      	beq.n	8004fb0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e04d      	b.n	800504c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	2bff      	cmp	r3, #255	; 0xff
 8004fb8:	d90e      	bls.n	8004fd8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	22ff      	movs	r2, #255	; 0xff
 8004fbe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fc4:	b2da      	uxtb	r2, r3
 8004fc6:	8979      	ldrh	r1, [r7, #10]
 8004fc8:	2300      	movs	r3, #0
 8004fca:	9300      	str	r3, [sp, #0]
 8004fcc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004fd0:	68f8      	ldr	r0, [r7, #12]
 8004fd2:	f000 fb17 	bl	8005604 <I2C_TransferConfig>
 8004fd6:	e00f      	b.n	8004ff8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fdc:	b29a      	uxth	r2, r3
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fe6:	b2da      	uxtb	r2, r3
 8004fe8:	8979      	ldrh	r1, [r7, #10]
 8004fea:	2300      	movs	r3, #0
 8004fec:	9300      	str	r3, [sp, #0]
 8004fee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ff2:	68f8      	ldr	r0, [r7, #12]
 8004ff4:	f000 fb06 	bl	8005604 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d19e      	bne.n	8004f40 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005002:	697a      	ldr	r2, [r7, #20]
 8005004:	6a39      	ldr	r1, [r7, #32]
 8005006:	68f8      	ldr	r0, [r7, #12]
 8005008:	f000 f9d4 	bl	80053b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d001      	beq.n	8005016 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e01a      	b.n	800504c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	2220      	movs	r2, #32
 800501c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	6859      	ldr	r1, [r3, #4]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	4b0b      	ldr	r3, [pc, #44]	; (8005058 <HAL_I2C_Master_Transmit+0x1e4>)
 800502a:	400b      	ands	r3, r1
 800502c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2220      	movs	r2, #32
 8005032:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2200      	movs	r2, #0
 8005042:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005046:	2300      	movs	r3, #0
 8005048:	e000      	b.n	800504c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800504a:	2302      	movs	r3, #2
  }
}
 800504c:	4618      	mov	r0, r3
 800504e:	3718      	adds	r7, #24
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}
 8005054:	80002000 	.word	0x80002000
 8005058:	fe00e800 	.word	0xfe00e800

0800505c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b08a      	sub	sp, #40	; 0x28
 8005060:	af02      	add	r7, sp, #8
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	607a      	str	r2, [r7, #4]
 8005066:	603b      	str	r3, [r7, #0]
 8005068:	460b      	mov	r3, r1
 800506a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800506c:	2300      	movs	r3, #0
 800506e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005076:	b2db      	uxtb	r3, r3
 8005078:	2b20      	cmp	r3, #32
 800507a:	f040 80ef 	bne.w	800525c <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	699b      	ldr	r3, [r3, #24]
 8005084:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005088:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800508c:	d101      	bne.n	8005092 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800508e:	2302      	movs	r3, #2
 8005090:	e0e5      	b.n	800525e <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005098:	2b01      	cmp	r3, #1
 800509a:	d101      	bne.n	80050a0 <HAL_I2C_IsDeviceReady+0x44>
 800509c:	2302      	movs	r3, #2
 800509e:	e0de      	b.n	800525e <HAL_I2C_IsDeviceReady+0x202>
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2224      	movs	r2, #36	; 0x24
 80050ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2200      	movs	r2, #0
 80050b4:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d105      	bne.n	80050ca <HAL_I2C_IsDeviceReady+0x6e>
 80050be:	897b      	ldrh	r3, [r7, #10]
 80050c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80050c4:	4b68      	ldr	r3, [pc, #416]	; (8005268 <HAL_I2C_IsDeviceReady+0x20c>)
 80050c6:	4313      	orrs	r3, r2
 80050c8:	e004      	b.n	80050d4 <HAL_I2C_IsDeviceReady+0x78>
 80050ca:	897b      	ldrh	r3, [r7, #10]
 80050cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050d0:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	6812      	ldr	r2, [r2, #0]
 80050d8:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80050da:	f7fe ff0d 	bl	8003ef8 <HAL_GetTick>
 80050de:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	699b      	ldr	r3, [r3, #24]
 80050e6:	f003 0320 	and.w	r3, r3, #32
 80050ea:	2b20      	cmp	r3, #32
 80050ec:	bf0c      	ite	eq
 80050ee:	2301      	moveq	r3, #1
 80050f0:	2300      	movne	r3, #0
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	699b      	ldr	r3, [r3, #24]
 80050fc:	f003 0310 	and.w	r3, r3, #16
 8005100:	2b10      	cmp	r3, #16
 8005102:	bf0c      	ite	eq
 8005104:	2301      	moveq	r3, #1
 8005106:	2300      	movne	r3, #0
 8005108:	b2db      	uxtb	r3, r3
 800510a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800510c:	e034      	b.n	8005178 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005114:	d01a      	beq.n	800514c <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005116:	f7fe feef 	bl	8003ef8 <HAL_GetTick>
 800511a:	4602      	mov	r2, r0
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	683a      	ldr	r2, [r7, #0]
 8005122:	429a      	cmp	r2, r3
 8005124:	d302      	bcc.n	800512c <HAL_I2C_IsDeviceReady+0xd0>
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d10f      	bne.n	800514c <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2220      	movs	r2, #32
 8005130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005138:	f043 0220 	orr.w	r2, r3, #32
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2200      	movs	r2, #0
 8005144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e088      	b.n	800525e <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	699b      	ldr	r3, [r3, #24]
 8005152:	f003 0320 	and.w	r3, r3, #32
 8005156:	2b20      	cmp	r3, #32
 8005158:	bf0c      	ite	eq
 800515a:	2301      	moveq	r3, #1
 800515c:	2300      	movne	r3, #0
 800515e:	b2db      	uxtb	r3, r3
 8005160:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	699b      	ldr	r3, [r3, #24]
 8005168:	f003 0310 	and.w	r3, r3, #16
 800516c:	2b10      	cmp	r3, #16
 800516e:	bf0c      	ite	eq
 8005170:	2301      	moveq	r3, #1
 8005172:	2300      	movne	r3, #0
 8005174:	b2db      	uxtb	r3, r3
 8005176:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005178:	7ffb      	ldrb	r3, [r7, #31]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d102      	bne.n	8005184 <HAL_I2C_IsDeviceReady+0x128>
 800517e:	7fbb      	ldrb	r3, [r7, #30]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d0c4      	beq.n	800510e <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	699b      	ldr	r3, [r3, #24]
 800518a:	f003 0310 	and.w	r3, r3, #16
 800518e:	2b10      	cmp	r3, #16
 8005190:	d01a      	beq.n	80051c8 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	9300      	str	r3, [sp, #0]
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	2200      	movs	r2, #0
 800519a:	2120      	movs	r1, #32
 800519c:	68f8      	ldr	r0, [r7, #12]
 800519e:	f000 f889 	bl	80052b4 <I2C_WaitOnFlagUntilTimeout>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d001      	beq.n	80051ac <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e058      	b.n	800525e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2220      	movs	r2, #32
 80051b2:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2220      	movs	r2, #32
 80051b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2200      	movs	r2, #0
 80051c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80051c4:	2300      	movs	r3, #0
 80051c6:	e04a      	b.n	800525e <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	9300      	str	r3, [sp, #0]
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	2200      	movs	r2, #0
 80051d0:	2120      	movs	r1, #32
 80051d2:	68f8      	ldr	r0, [r7, #12]
 80051d4:	f000 f86e 	bl	80052b4 <I2C_WaitOnFlagUntilTimeout>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d001      	beq.n	80051e2 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e03d      	b.n	800525e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	2210      	movs	r2, #16
 80051e8:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	2220      	movs	r2, #32
 80051f0:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d118      	bne.n	800522c <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	685a      	ldr	r2, [r3, #4]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005208:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	9300      	str	r3, [sp, #0]
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	2200      	movs	r2, #0
 8005212:	2120      	movs	r1, #32
 8005214:	68f8      	ldr	r0, [r7, #12]
 8005216:	f000 f84d 	bl	80052b4 <I2C_WaitOnFlagUntilTimeout>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d001      	beq.n	8005224 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	e01c      	b.n	800525e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2220      	movs	r2, #32
 800522a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	3301      	adds	r3, #1
 8005230:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	429a      	cmp	r2, r3
 8005238:	f63f af3d 	bhi.w	80050b6 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2220      	movs	r2, #32
 8005240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005248:	f043 0220 	orr.w	r2, r3, #32
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2200      	movs	r2, #0
 8005254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e000      	b.n	800525e <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 800525c:	2302      	movs	r3, #2
  }
}
 800525e:	4618      	mov	r0, r3
 8005260:	3720      	adds	r7, #32
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	02002000 	.word	0x02002000

0800526c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	699b      	ldr	r3, [r3, #24]
 800527a:	f003 0302 	and.w	r3, r3, #2
 800527e:	2b02      	cmp	r3, #2
 8005280:	d103      	bne.n	800528a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	2200      	movs	r2, #0
 8005288:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	699b      	ldr	r3, [r3, #24]
 8005290:	f003 0301 	and.w	r3, r3, #1
 8005294:	2b01      	cmp	r3, #1
 8005296:	d007      	beq.n	80052a8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	699a      	ldr	r2, [r3, #24]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f042 0201 	orr.w	r2, r2, #1
 80052a6:	619a      	str	r2, [r3, #24]
  }
}
 80052a8:	bf00      	nop
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	60f8      	str	r0, [r7, #12]
 80052bc:	60b9      	str	r1, [r7, #8]
 80052be:	603b      	str	r3, [r7, #0]
 80052c0:	4613      	mov	r3, r2
 80052c2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052c4:	e022      	b.n	800530c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052cc:	d01e      	beq.n	800530c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052ce:	f7fe fe13 	bl	8003ef8 <HAL_GetTick>
 80052d2:	4602      	mov	r2, r0
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	1ad3      	subs	r3, r2, r3
 80052d8:	683a      	ldr	r2, [r7, #0]
 80052da:	429a      	cmp	r2, r3
 80052dc:	d302      	bcc.n	80052e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d113      	bne.n	800530c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052e8:	f043 0220 	orr.w	r2, r3, #32
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2220      	movs	r2, #32
 80052f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2200      	movs	r2, #0
 80052fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2200      	movs	r2, #0
 8005304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e00f      	b.n	800532c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	699a      	ldr	r2, [r3, #24]
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	4013      	ands	r3, r2
 8005316:	68ba      	ldr	r2, [r7, #8]
 8005318:	429a      	cmp	r2, r3
 800531a:	bf0c      	ite	eq
 800531c:	2301      	moveq	r3, #1
 800531e:	2300      	movne	r3, #0
 8005320:	b2db      	uxtb	r3, r3
 8005322:	461a      	mov	r2, r3
 8005324:	79fb      	ldrb	r3, [r7, #7]
 8005326:	429a      	cmp	r2, r3
 8005328:	d0cd      	beq.n	80052c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	3710      	adds	r7, #16
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005340:	e02c      	b.n	800539c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	68b9      	ldr	r1, [r7, #8]
 8005346:	68f8      	ldr	r0, [r7, #12]
 8005348:	f000 f870 	bl	800542c <I2C_IsErrorOccurred>
 800534c:	4603      	mov	r3, r0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d001      	beq.n	8005356 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e02a      	b.n	80053ac <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800535c:	d01e      	beq.n	800539c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800535e:	f7fe fdcb 	bl	8003ef8 <HAL_GetTick>
 8005362:	4602      	mov	r2, r0
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	1ad3      	subs	r3, r2, r3
 8005368:	68ba      	ldr	r2, [r7, #8]
 800536a:	429a      	cmp	r2, r3
 800536c:	d302      	bcc.n	8005374 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d113      	bne.n	800539c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005378:	f043 0220 	orr.w	r2, r3, #32
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2220      	movs	r2, #32
 8005384:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2200      	movs	r2, #0
 800538c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2200      	movs	r2, #0
 8005394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	e007      	b.n	80053ac <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	f003 0302 	and.w	r3, r3, #2
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d1cb      	bne.n	8005342 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3710      	adds	r7, #16
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80053c0:	e028      	b.n	8005414 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	68b9      	ldr	r1, [r7, #8]
 80053c6:	68f8      	ldr	r0, [r7, #12]
 80053c8:	f000 f830 	bl	800542c <I2C_IsErrorOccurred>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d001      	beq.n	80053d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e026      	b.n	8005424 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053d6:	f7fe fd8f 	bl	8003ef8 <HAL_GetTick>
 80053da:	4602      	mov	r2, r0
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	68ba      	ldr	r2, [r7, #8]
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d302      	bcc.n	80053ec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d113      	bne.n	8005414 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053f0:	f043 0220 	orr.w	r2, r3, #32
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2220      	movs	r2, #32
 80053fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2200      	movs	r2, #0
 8005404:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2200      	movs	r2, #0
 800540c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	e007      	b.n	8005424 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	f003 0320 	and.w	r3, r3, #32
 800541e:	2b20      	cmp	r3, #32
 8005420:	d1cf      	bne.n	80053c2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005422:	2300      	movs	r3, #0
}
 8005424:	4618      	mov	r0, r3
 8005426:	3710      	adds	r7, #16
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b08a      	sub	sp, #40	; 0x28
 8005430:	af00      	add	r7, sp, #0
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005438:	2300      	movs	r3, #0
 800543a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	699b      	ldr	r3, [r3, #24]
 8005444:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005446:	2300      	movs	r3, #0
 8005448:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	f003 0310 	and.w	r3, r3, #16
 8005454:	2b00      	cmp	r3, #0
 8005456:	d075      	beq.n	8005544 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2210      	movs	r2, #16
 800545e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005460:	e056      	b.n	8005510 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005468:	d052      	beq.n	8005510 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800546a:	f7fe fd45 	bl	8003ef8 <HAL_GetTick>
 800546e:	4602      	mov	r2, r0
 8005470:	69fb      	ldr	r3, [r7, #28]
 8005472:	1ad3      	subs	r3, r2, r3
 8005474:	68ba      	ldr	r2, [r7, #8]
 8005476:	429a      	cmp	r2, r3
 8005478:	d302      	bcc.n	8005480 <I2C_IsErrorOccurred+0x54>
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d147      	bne.n	8005510 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800548a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005492:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	699b      	ldr	r3, [r3, #24]
 800549a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800549e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054a2:	d12e      	bne.n	8005502 <I2C_IsErrorOccurred+0xd6>
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054aa:	d02a      	beq.n	8005502 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80054ac:	7cfb      	ldrb	r3, [r7, #19]
 80054ae:	2b20      	cmp	r3, #32
 80054b0:	d027      	beq.n	8005502 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	685a      	ldr	r2, [r3, #4]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054c0:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80054c2:	f7fe fd19 	bl	8003ef8 <HAL_GetTick>
 80054c6:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054c8:	e01b      	b.n	8005502 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80054ca:	f7fe fd15 	bl	8003ef8 <HAL_GetTick>
 80054ce:	4602      	mov	r2, r0
 80054d0:	69fb      	ldr	r3, [r7, #28]
 80054d2:	1ad3      	subs	r3, r2, r3
 80054d4:	2b19      	cmp	r3, #25
 80054d6:	d914      	bls.n	8005502 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054dc:	f043 0220 	orr.w	r2, r3, #32
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2220      	movs	r2, #32
 80054e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2200      	movs	r2, #0
 80054f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	699b      	ldr	r3, [r3, #24]
 8005508:	f003 0320 	and.w	r3, r3, #32
 800550c:	2b20      	cmp	r3, #32
 800550e:	d1dc      	bne.n	80054ca <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	f003 0320 	and.w	r3, r3, #32
 800551a:	2b20      	cmp	r3, #32
 800551c:	d003      	beq.n	8005526 <I2C_IsErrorOccurred+0xfa>
 800551e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005522:	2b00      	cmp	r3, #0
 8005524:	d09d      	beq.n	8005462 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005526:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800552a:	2b00      	cmp	r3, #0
 800552c:	d103      	bne.n	8005536 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2220      	movs	r2, #32
 8005534:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005536:	6a3b      	ldr	r3, [r7, #32]
 8005538:	f043 0304 	orr.w	r3, r3, #4
 800553c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	699b      	ldr	r3, [r3, #24]
 800554a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800554c:	69bb      	ldr	r3, [r7, #24]
 800554e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00b      	beq.n	800556e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005556:	6a3b      	ldr	r3, [r7, #32]
 8005558:	f043 0301 	orr.w	r3, r3, #1
 800555c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005566:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005574:	2b00      	cmp	r3, #0
 8005576:	d00b      	beq.n	8005590 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005578:	6a3b      	ldr	r3, [r7, #32]
 800557a:	f043 0308 	orr.w	r3, r3, #8
 800557e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005588:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005596:	2b00      	cmp	r3, #0
 8005598:	d00b      	beq.n	80055b2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800559a:	6a3b      	ldr	r3, [r7, #32]
 800559c:	f043 0302 	orr.w	r3, r3, #2
 80055a0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055aa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80055b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d01c      	beq.n	80055f4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80055ba:	68f8      	ldr	r0, [r7, #12]
 80055bc:	f7ff fe56 	bl	800526c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	6859      	ldr	r1, [r3, #4]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	4b0d      	ldr	r3, [pc, #52]	; (8005600 <I2C_IsErrorOccurred+0x1d4>)
 80055cc:	400b      	ands	r3, r1
 80055ce:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055d4:	6a3b      	ldr	r3, [r7, #32]
 80055d6:	431a      	orrs	r2, r3
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2220      	movs	r2, #32
 80055e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2200      	movs	r2, #0
 80055f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80055f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3728      	adds	r7, #40	; 0x28
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	fe00e800 	.word	0xfe00e800

08005604 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005604:	b480      	push	{r7}
 8005606:	b087      	sub	sp, #28
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	607b      	str	r3, [r7, #4]
 800560e:	460b      	mov	r3, r1
 8005610:	817b      	strh	r3, [r7, #10]
 8005612:	4613      	mov	r3, r2
 8005614:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005616:	897b      	ldrh	r3, [r7, #10]
 8005618:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800561c:	7a7b      	ldrb	r3, [r7, #9]
 800561e:	041b      	lsls	r3, r3, #16
 8005620:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005624:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800562a:	6a3b      	ldr	r3, [r7, #32]
 800562c:	4313      	orrs	r3, r2
 800562e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005632:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	685a      	ldr	r2, [r3, #4]
 800563a:	6a3b      	ldr	r3, [r7, #32]
 800563c:	0d5b      	lsrs	r3, r3, #21
 800563e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005642:	4b08      	ldr	r3, [pc, #32]	; (8005664 <I2C_TransferConfig+0x60>)
 8005644:	430b      	orrs	r3, r1
 8005646:	43db      	mvns	r3, r3
 8005648:	ea02 0103 	and.w	r1, r2, r3
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	697a      	ldr	r2, [r7, #20]
 8005652:	430a      	orrs	r2, r1
 8005654:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005656:	bf00      	nop
 8005658:	371c      	adds	r7, #28
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr
 8005662:	bf00      	nop
 8005664:	03ff63ff 	.word	0x03ff63ff

08005668 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005678:	b2db      	uxtb	r3, r3
 800567a:	2b20      	cmp	r3, #32
 800567c:	d138      	bne.n	80056f0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005684:	2b01      	cmp	r3, #1
 8005686:	d101      	bne.n	800568c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005688:	2302      	movs	r3, #2
 800568a:	e032      	b.n	80056f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2224      	movs	r2, #36	; 0x24
 8005698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f022 0201 	bic.w	r2, r2, #1
 80056aa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80056ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	6819      	ldr	r1, [r3, #0]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	683a      	ldr	r2, [r7, #0]
 80056c8:	430a      	orrs	r2, r1
 80056ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f042 0201 	orr.w	r2, r2, #1
 80056da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2220      	movs	r2, #32
 80056e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80056ec:	2300      	movs	r3, #0
 80056ee:	e000      	b.n	80056f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80056f0:	2302      	movs	r3, #2
  }
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	370c      	adds	r7, #12
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr

080056fe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80056fe:	b480      	push	{r7}
 8005700:	b085      	sub	sp, #20
 8005702:	af00      	add	r7, sp, #0
 8005704:	6078      	str	r0, [r7, #4]
 8005706:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800570e:	b2db      	uxtb	r3, r3
 8005710:	2b20      	cmp	r3, #32
 8005712:	d139      	bne.n	8005788 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800571a:	2b01      	cmp	r3, #1
 800571c:	d101      	bne.n	8005722 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800571e:	2302      	movs	r3, #2
 8005720:	e033      	b.n	800578a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2201      	movs	r2, #1
 8005726:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2224      	movs	r2, #36	; 0x24
 800572e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f022 0201 	bic.w	r2, r2, #1
 8005740:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005750:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	021b      	lsls	r3, r3, #8
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	4313      	orrs	r3, r2
 800575a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	68fa      	ldr	r2, [r7, #12]
 8005762:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f042 0201 	orr.w	r2, r2, #1
 8005772:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2220      	movs	r2, #32
 8005778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005784:	2300      	movs	r3, #0
 8005786:	e000      	b.n	800578a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005788:	2302      	movs	r3, #2
  }
}
 800578a:	4618      	mov	r0, r3
 800578c:	3714      	adds	r7, #20
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr

08005796 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005796:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005798:	b08f      	sub	sp, #60	; 0x3c
 800579a:	af0a      	add	r7, sp, #40	; 0x28
 800579c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d101      	bne.n	80057a8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	e116      	b.n	80059d6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d106      	bne.n	80057c8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f7fe f8e0 	bl	8003988 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2203      	movs	r2, #3
 80057cc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d102      	bne.n	80057e2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4618      	mov	r0, r3
 80057e8:	f003 fa9a 	bl	8008d20 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	603b      	str	r3, [r7, #0]
 80057f2:	687e      	ldr	r6, [r7, #4]
 80057f4:	466d      	mov	r5, sp
 80057f6:	f106 0410 	add.w	r4, r6, #16
 80057fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80057fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005800:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005802:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005806:	e885 0003 	stmia.w	r5, {r0, r1}
 800580a:	1d33      	adds	r3, r6, #4
 800580c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800580e:	6838      	ldr	r0, [r7, #0]
 8005810:	f003 f9fe 	bl	8008c10 <USB_CoreInit>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d005      	beq.n	8005826 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2202      	movs	r2, #2
 800581e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005822:	2301      	movs	r3, #1
 8005824:	e0d7      	b.n	80059d6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	2100      	movs	r1, #0
 800582c:	4618      	mov	r0, r3
 800582e:	f003 fa88 	bl	8008d42 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005832:	2300      	movs	r3, #0
 8005834:	73fb      	strb	r3, [r7, #15]
 8005836:	e04a      	b.n	80058ce <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005838:	7bfa      	ldrb	r2, [r7, #15]
 800583a:	6879      	ldr	r1, [r7, #4]
 800583c:	4613      	mov	r3, r2
 800583e:	00db      	lsls	r3, r3, #3
 8005840:	1a9b      	subs	r3, r3, r2
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	440b      	add	r3, r1
 8005846:	333d      	adds	r3, #61	; 0x3d
 8005848:	2201      	movs	r2, #1
 800584a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800584c:	7bfa      	ldrb	r2, [r7, #15]
 800584e:	6879      	ldr	r1, [r7, #4]
 8005850:	4613      	mov	r3, r2
 8005852:	00db      	lsls	r3, r3, #3
 8005854:	1a9b      	subs	r3, r3, r2
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	440b      	add	r3, r1
 800585a:	333c      	adds	r3, #60	; 0x3c
 800585c:	7bfa      	ldrb	r2, [r7, #15]
 800585e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005860:	7bfa      	ldrb	r2, [r7, #15]
 8005862:	7bfb      	ldrb	r3, [r7, #15]
 8005864:	b298      	uxth	r0, r3
 8005866:	6879      	ldr	r1, [r7, #4]
 8005868:	4613      	mov	r3, r2
 800586a:	00db      	lsls	r3, r3, #3
 800586c:	1a9b      	subs	r3, r3, r2
 800586e:	009b      	lsls	r3, r3, #2
 8005870:	440b      	add	r3, r1
 8005872:	3342      	adds	r3, #66	; 0x42
 8005874:	4602      	mov	r2, r0
 8005876:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005878:	7bfa      	ldrb	r2, [r7, #15]
 800587a:	6879      	ldr	r1, [r7, #4]
 800587c:	4613      	mov	r3, r2
 800587e:	00db      	lsls	r3, r3, #3
 8005880:	1a9b      	subs	r3, r3, r2
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	440b      	add	r3, r1
 8005886:	333f      	adds	r3, #63	; 0x3f
 8005888:	2200      	movs	r2, #0
 800588a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800588c:	7bfa      	ldrb	r2, [r7, #15]
 800588e:	6879      	ldr	r1, [r7, #4]
 8005890:	4613      	mov	r3, r2
 8005892:	00db      	lsls	r3, r3, #3
 8005894:	1a9b      	subs	r3, r3, r2
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	440b      	add	r3, r1
 800589a:	3344      	adds	r3, #68	; 0x44
 800589c:	2200      	movs	r2, #0
 800589e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80058a0:	7bfa      	ldrb	r2, [r7, #15]
 80058a2:	6879      	ldr	r1, [r7, #4]
 80058a4:	4613      	mov	r3, r2
 80058a6:	00db      	lsls	r3, r3, #3
 80058a8:	1a9b      	subs	r3, r3, r2
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	440b      	add	r3, r1
 80058ae:	3348      	adds	r3, #72	; 0x48
 80058b0:	2200      	movs	r2, #0
 80058b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80058b4:	7bfa      	ldrb	r2, [r7, #15]
 80058b6:	6879      	ldr	r1, [r7, #4]
 80058b8:	4613      	mov	r3, r2
 80058ba:	00db      	lsls	r3, r3, #3
 80058bc:	1a9b      	subs	r3, r3, r2
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	440b      	add	r3, r1
 80058c2:	3350      	adds	r3, #80	; 0x50
 80058c4:	2200      	movs	r2, #0
 80058c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80058c8:	7bfb      	ldrb	r3, [r7, #15]
 80058ca:	3301      	adds	r3, #1
 80058cc:	73fb      	strb	r3, [r7, #15]
 80058ce:	7bfa      	ldrb	r2, [r7, #15]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d3af      	bcc.n	8005838 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80058d8:	2300      	movs	r3, #0
 80058da:	73fb      	strb	r3, [r7, #15]
 80058dc:	e044      	b.n	8005968 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80058de:	7bfa      	ldrb	r2, [r7, #15]
 80058e0:	6879      	ldr	r1, [r7, #4]
 80058e2:	4613      	mov	r3, r2
 80058e4:	00db      	lsls	r3, r3, #3
 80058e6:	1a9b      	subs	r3, r3, r2
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	440b      	add	r3, r1
 80058ec:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80058f0:	2200      	movs	r2, #0
 80058f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80058f4:	7bfa      	ldrb	r2, [r7, #15]
 80058f6:	6879      	ldr	r1, [r7, #4]
 80058f8:	4613      	mov	r3, r2
 80058fa:	00db      	lsls	r3, r3, #3
 80058fc:	1a9b      	subs	r3, r3, r2
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	440b      	add	r3, r1
 8005902:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005906:	7bfa      	ldrb	r2, [r7, #15]
 8005908:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800590a:	7bfa      	ldrb	r2, [r7, #15]
 800590c:	6879      	ldr	r1, [r7, #4]
 800590e:	4613      	mov	r3, r2
 8005910:	00db      	lsls	r3, r3, #3
 8005912:	1a9b      	subs	r3, r3, r2
 8005914:	009b      	lsls	r3, r3, #2
 8005916:	440b      	add	r3, r1
 8005918:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800591c:	2200      	movs	r2, #0
 800591e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005920:	7bfa      	ldrb	r2, [r7, #15]
 8005922:	6879      	ldr	r1, [r7, #4]
 8005924:	4613      	mov	r3, r2
 8005926:	00db      	lsls	r3, r3, #3
 8005928:	1a9b      	subs	r3, r3, r2
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	440b      	add	r3, r1
 800592e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005932:	2200      	movs	r2, #0
 8005934:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005936:	7bfa      	ldrb	r2, [r7, #15]
 8005938:	6879      	ldr	r1, [r7, #4]
 800593a:	4613      	mov	r3, r2
 800593c:	00db      	lsls	r3, r3, #3
 800593e:	1a9b      	subs	r3, r3, r2
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	440b      	add	r3, r1
 8005944:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005948:	2200      	movs	r2, #0
 800594a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800594c:	7bfa      	ldrb	r2, [r7, #15]
 800594e:	6879      	ldr	r1, [r7, #4]
 8005950:	4613      	mov	r3, r2
 8005952:	00db      	lsls	r3, r3, #3
 8005954:	1a9b      	subs	r3, r3, r2
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	440b      	add	r3, r1
 800595a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800595e:	2200      	movs	r2, #0
 8005960:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005962:	7bfb      	ldrb	r3, [r7, #15]
 8005964:	3301      	adds	r3, #1
 8005966:	73fb      	strb	r3, [r7, #15]
 8005968:	7bfa      	ldrb	r2, [r7, #15]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	429a      	cmp	r2, r3
 8005970:	d3b5      	bcc.n	80058de <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	603b      	str	r3, [r7, #0]
 8005978:	687e      	ldr	r6, [r7, #4]
 800597a:	466d      	mov	r5, sp
 800597c:	f106 0410 	add.w	r4, r6, #16
 8005980:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005982:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005984:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005986:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005988:	e894 0003 	ldmia.w	r4, {r0, r1}
 800598c:	e885 0003 	stmia.w	r5, {r0, r1}
 8005990:	1d33      	adds	r3, r6, #4
 8005992:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005994:	6838      	ldr	r0, [r7, #0]
 8005996:	f003 fa21 	bl	8008ddc <USB_DevInit>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d005      	beq.n	80059ac <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2202      	movs	r2, #2
 80059a4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e014      	b.n	80059d6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d102      	bne.n	80059ca <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f000 f80b 	bl	80059e0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4618      	mov	r0, r3
 80059d0:	f003 fbeb 	bl	80091aa <USB_DevDisconnect>

  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3714      	adds	r7, #20
 80059da:	46bd      	mov	sp, r7
 80059dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080059e0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b085      	sub	sp, #20
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2201      	movs	r2, #1
 80059f2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	699b      	ldr	r3, [r3, #24]
 8005a02:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a0e:	4b05      	ldr	r3, [pc, #20]	; (8005a24 <HAL_PCDEx_ActivateLPM+0x44>)
 8005a10:	4313      	orrs	r3, r2
 8005a12:	68fa      	ldr	r2, [r7, #12]
 8005a14:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005a16:	2300      	movs	r3, #0
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3714      	adds	r7, #20
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr
 8005a24:	10000003 	.word	0x10000003

08005a28 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a2c:	4b05      	ldr	r3, [pc, #20]	; (8005a44 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a04      	ldr	r2, [pc, #16]	; (8005a44 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005a32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a36:	6013      	str	r3, [r2, #0]
}
 8005a38:	bf00      	nop
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop
 8005a44:	40007000 	.word	0x40007000

08005a48 <HAL_PWR_DisableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	af00      	add	r7, sp, #0
  /* Disable access to RTC and backup registers */
	CLEAR_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a4c:	4b05      	ldr	r3, [pc, #20]	; (8005a64 <HAL_PWR_DisableBkUpAccess+0x1c>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a04      	ldr	r2, [pc, #16]	; (8005a64 <HAL_PWR_DisableBkUpAccess+0x1c>)
 8005a52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a56:	6013      	str	r3, [r2, #0]
}
 8005a58:	bf00      	nop
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop
 8005a64:	40007000 	.word	0x40007000

08005a68 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b086      	sub	sp, #24
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005a70:	2300      	movs	r3, #0
 8005a72:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d101      	bne.n	8005a7e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e291      	b.n	8005fa2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 0301 	and.w	r3, r3, #1
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	f000 8087 	beq.w	8005b9a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005a8c:	4b96      	ldr	r3, [pc, #600]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	f003 030c 	and.w	r3, r3, #12
 8005a94:	2b04      	cmp	r3, #4
 8005a96:	d00c      	beq.n	8005ab2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a98:	4b93      	ldr	r3, [pc, #588]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	f003 030c 	and.w	r3, r3, #12
 8005aa0:	2b08      	cmp	r3, #8
 8005aa2:	d112      	bne.n	8005aca <HAL_RCC_OscConfig+0x62>
 8005aa4:	4b90      	ldr	r3, [pc, #576]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005aac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ab0:	d10b      	bne.n	8005aca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ab2:	4b8d      	ldr	r3, [pc, #564]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d06c      	beq.n	8005b98 <HAL_RCC_OscConfig+0x130>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d168      	bne.n	8005b98 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e26b      	b.n	8005fa2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ad2:	d106      	bne.n	8005ae2 <HAL_RCC_OscConfig+0x7a>
 8005ad4:	4b84      	ldr	r3, [pc, #528]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a83      	ldr	r2, [pc, #524]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005ada:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ade:	6013      	str	r3, [r2, #0]
 8005ae0:	e02e      	b.n	8005b40 <HAL_RCC_OscConfig+0xd8>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d10c      	bne.n	8005b04 <HAL_RCC_OscConfig+0x9c>
 8005aea:	4b7f      	ldr	r3, [pc, #508]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a7e      	ldr	r2, [pc, #504]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005af0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005af4:	6013      	str	r3, [r2, #0]
 8005af6:	4b7c      	ldr	r3, [pc, #496]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a7b      	ldr	r2, [pc, #492]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005afc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b00:	6013      	str	r3, [r2, #0]
 8005b02:	e01d      	b.n	8005b40 <HAL_RCC_OscConfig+0xd8>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b0c:	d10c      	bne.n	8005b28 <HAL_RCC_OscConfig+0xc0>
 8005b0e:	4b76      	ldr	r3, [pc, #472]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a75      	ldr	r2, [pc, #468]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005b14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b18:	6013      	str	r3, [r2, #0]
 8005b1a:	4b73      	ldr	r3, [pc, #460]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a72      	ldr	r2, [pc, #456]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005b20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b24:	6013      	str	r3, [r2, #0]
 8005b26:	e00b      	b.n	8005b40 <HAL_RCC_OscConfig+0xd8>
 8005b28:	4b6f      	ldr	r3, [pc, #444]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a6e      	ldr	r2, [pc, #440]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005b2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b32:	6013      	str	r3, [r2, #0]
 8005b34:	4b6c      	ldr	r3, [pc, #432]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a6b      	ldr	r2, [pc, #428]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005b3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d013      	beq.n	8005b70 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b48:	f7fe f9d6 	bl	8003ef8 <HAL_GetTick>
 8005b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b4e:	e008      	b.n	8005b62 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b50:	f7fe f9d2 	bl	8003ef8 <HAL_GetTick>
 8005b54:	4602      	mov	r2, r0
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	2b64      	cmp	r3, #100	; 0x64
 8005b5c:	d901      	bls.n	8005b62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005b5e:	2303      	movs	r3, #3
 8005b60:	e21f      	b.n	8005fa2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b62:	4b61      	ldr	r3, [pc, #388]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d0f0      	beq.n	8005b50 <HAL_RCC_OscConfig+0xe8>
 8005b6e:	e014      	b.n	8005b9a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b70:	f7fe f9c2 	bl	8003ef8 <HAL_GetTick>
 8005b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b76:	e008      	b.n	8005b8a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b78:	f7fe f9be 	bl	8003ef8 <HAL_GetTick>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	1ad3      	subs	r3, r2, r3
 8005b82:	2b64      	cmp	r3, #100	; 0x64
 8005b84:	d901      	bls.n	8005b8a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005b86:	2303      	movs	r3, #3
 8005b88:	e20b      	b.n	8005fa2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b8a:	4b57      	ldr	r3, [pc, #348]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d1f0      	bne.n	8005b78 <HAL_RCC_OscConfig+0x110>
 8005b96:	e000      	b.n	8005b9a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f003 0302 	and.w	r3, r3, #2
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d069      	beq.n	8005c7a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005ba6:	4b50      	ldr	r3, [pc, #320]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	f003 030c 	and.w	r3, r3, #12
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d00b      	beq.n	8005bca <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005bb2:	4b4d      	ldr	r3, [pc, #308]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	f003 030c 	and.w	r3, r3, #12
 8005bba:	2b08      	cmp	r3, #8
 8005bbc:	d11c      	bne.n	8005bf8 <HAL_RCC_OscConfig+0x190>
 8005bbe:	4b4a      	ldr	r3, [pc, #296]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d116      	bne.n	8005bf8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bca:	4b47      	ldr	r3, [pc, #284]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f003 0302 	and.w	r3, r3, #2
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d005      	beq.n	8005be2 <HAL_RCC_OscConfig+0x17a>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	68db      	ldr	r3, [r3, #12]
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d001      	beq.n	8005be2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e1df      	b.n	8005fa2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005be2:	4b41      	ldr	r3, [pc, #260]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	00db      	lsls	r3, r3, #3
 8005bf0:	493d      	ldr	r1, [pc, #244]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bf6:	e040      	b.n	8005c7a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d023      	beq.n	8005c48 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c00:	4b39      	ldr	r3, [pc, #228]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a38      	ldr	r2, [pc, #224]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005c06:	f043 0301 	orr.w	r3, r3, #1
 8005c0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c0c:	f7fe f974 	bl	8003ef8 <HAL_GetTick>
 8005c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c12:	e008      	b.n	8005c26 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c14:	f7fe f970 	bl	8003ef8 <HAL_GetTick>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	2b02      	cmp	r3, #2
 8005c20:	d901      	bls.n	8005c26 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005c22:	2303      	movs	r3, #3
 8005c24:	e1bd      	b.n	8005fa2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c26:	4b30      	ldr	r3, [pc, #192]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f003 0302 	and.w	r3, r3, #2
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d0f0      	beq.n	8005c14 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c32:	4b2d      	ldr	r3, [pc, #180]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	00db      	lsls	r3, r3, #3
 8005c40:	4929      	ldr	r1, [pc, #164]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005c42:	4313      	orrs	r3, r2
 8005c44:	600b      	str	r3, [r1, #0]
 8005c46:	e018      	b.n	8005c7a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c48:	4b27      	ldr	r3, [pc, #156]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a26      	ldr	r2, [pc, #152]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005c4e:	f023 0301 	bic.w	r3, r3, #1
 8005c52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c54:	f7fe f950 	bl	8003ef8 <HAL_GetTick>
 8005c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c5a:	e008      	b.n	8005c6e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c5c:	f7fe f94c 	bl	8003ef8 <HAL_GetTick>
 8005c60:	4602      	mov	r2, r0
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	1ad3      	subs	r3, r2, r3
 8005c66:	2b02      	cmp	r3, #2
 8005c68:	d901      	bls.n	8005c6e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005c6a:	2303      	movs	r3, #3
 8005c6c:	e199      	b.n	8005fa2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c6e:	4b1e      	ldr	r3, [pc, #120]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f003 0302 	and.w	r3, r3, #2
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d1f0      	bne.n	8005c5c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 0308 	and.w	r3, r3, #8
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d038      	beq.n	8005cf8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	695b      	ldr	r3, [r3, #20]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d019      	beq.n	8005cc2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c8e:	4b16      	ldr	r3, [pc, #88]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005c90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c92:	4a15      	ldr	r2, [pc, #84]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005c94:	f043 0301 	orr.w	r3, r3, #1
 8005c98:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c9a:	f7fe f92d 	bl	8003ef8 <HAL_GetTick>
 8005c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ca0:	e008      	b.n	8005cb4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ca2:	f7fe f929 	bl	8003ef8 <HAL_GetTick>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	2b02      	cmp	r3, #2
 8005cae:	d901      	bls.n	8005cb4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	e176      	b.n	8005fa2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cb4:	4b0c      	ldr	r3, [pc, #48]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005cb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cb8:	f003 0302 	and.w	r3, r3, #2
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d0f0      	beq.n	8005ca2 <HAL_RCC_OscConfig+0x23a>
 8005cc0:	e01a      	b.n	8005cf8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005cc2:	4b09      	ldr	r3, [pc, #36]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005cc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cc6:	4a08      	ldr	r2, [pc, #32]	; (8005ce8 <HAL_RCC_OscConfig+0x280>)
 8005cc8:	f023 0301 	bic.w	r3, r3, #1
 8005ccc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cce:	f7fe f913 	bl	8003ef8 <HAL_GetTick>
 8005cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cd4:	e00a      	b.n	8005cec <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005cd6:	f7fe f90f 	bl	8003ef8 <HAL_GetTick>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	1ad3      	subs	r3, r2, r3
 8005ce0:	2b02      	cmp	r3, #2
 8005ce2:	d903      	bls.n	8005cec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005ce4:	2303      	movs	r3, #3
 8005ce6:	e15c      	b.n	8005fa2 <HAL_RCC_OscConfig+0x53a>
 8005ce8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cec:	4b91      	ldr	r3, [pc, #580]	; (8005f34 <HAL_RCC_OscConfig+0x4cc>)
 8005cee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cf0:	f003 0302 	and.w	r3, r3, #2
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d1ee      	bne.n	8005cd6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 0304 	and.w	r3, r3, #4
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	f000 80a4 	beq.w	8005e4e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d06:	4b8b      	ldr	r3, [pc, #556]	; (8005f34 <HAL_RCC_OscConfig+0x4cc>)
 8005d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d10d      	bne.n	8005d2e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d12:	4b88      	ldr	r3, [pc, #544]	; (8005f34 <HAL_RCC_OscConfig+0x4cc>)
 8005d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d16:	4a87      	ldr	r2, [pc, #540]	; (8005f34 <HAL_RCC_OscConfig+0x4cc>)
 8005d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8005d1e:	4b85      	ldr	r3, [pc, #532]	; (8005f34 <HAL_RCC_OscConfig+0x4cc>)
 8005d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d26:	60bb      	str	r3, [r7, #8]
 8005d28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d2e:	4b82      	ldr	r3, [pc, #520]	; (8005f38 <HAL_RCC_OscConfig+0x4d0>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d118      	bne.n	8005d6c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005d3a:	4b7f      	ldr	r3, [pc, #508]	; (8005f38 <HAL_RCC_OscConfig+0x4d0>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a7e      	ldr	r2, [pc, #504]	; (8005f38 <HAL_RCC_OscConfig+0x4d0>)
 8005d40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d46:	f7fe f8d7 	bl	8003ef8 <HAL_GetTick>
 8005d4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d4c:	e008      	b.n	8005d60 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d4e:	f7fe f8d3 	bl	8003ef8 <HAL_GetTick>
 8005d52:	4602      	mov	r2, r0
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	1ad3      	subs	r3, r2, r3
 8005d58:	2b64      	cmp	r3, #100	; 0x64
 8005d5a:	d901      	bls.n	8005d60 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005d5c:	2303      	movs	r3, #3
 8005d5e:	e120      	b.n	8005fa2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d60:	4b75      	ldr	r3, [pc, #468]	; (8005f38 <HAL_RCC_OscConfig+0x4d0>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d0f0      	beq.n	8005d4e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d106      	bne.n	8005d82 <HAL_RCC_OscConfig+0x31a>
 8005d74:	4b6f      	ldr	r3, [pc, #444]	; (8005f34 <HAL_RCC_OscConfig+0x4cc>)
 8005d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d78:	4a6e      	ldr	r2, [pc, #440]	; (8005f34 <HAL_RCC_OscConfig+0x4cc>)
 8005d7a:	f043 0301 	orr.w	r3, r3, #1
 8005d7e:	6713      	str	r3, [r2, #112]	; 0x70
 8005d80:	e02d      	b.n	8005dde <HAL_RCC_OscConfig+0x376>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d10c      	bne.n	8005da4 <HAL_RCC_OscConfig+0x33c>
 8005d8a:	4b6a      	ldr	r3, [pc, #424]	; (8005f34 <HAL_RCC_OscConfig+0x4cc>)
 8005d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d8e:	4a69      	ldr	r2, [pc, #420]	; (8005f34 <HAL_RCC_OscConfig+0x4cc>)
 8005d90:	f023 0301 	bic.w	r3, r3, #1
 8005d94:	6713      	str	r3, [r2, #112]	; 0x70
 8005d96:	4b67      	ldr	r3, [pc, #412]	; (8005f34 <HAL_RCC_OscConfig+0x4cc>)
 8005d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d9a:	4a66      	ldr	r2, [pc, #408]	; (8005f34 <HAL_RCC_OscConfig+0x4cc>)
 8005d9c:	f023 0304 	bic.w	r3, r3, #4
 8005da0:	6713      	str	r3, [r2, #112]	; 0x70
 8005da2:	e01c      	b.n	8005dde <HAL_RCC_OscConfig+0x376>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	2b05      	cmp	r3, #5
 8005daa:	d10c      	bne.n	8005dc6 <HAL_RCC_OscConfig+0x35e>
 8005dac:	4b61      	ldr	r3, [pc, #388]	; (8005f34 <HAL_RCC_OscConfig+0x4cc>)
 8005dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005db0:	4a60      	ldr	r2, [pc, #384]	; (8005f34 <HAL_RCC_OscConfig+0x4cc>)
 8005db2:	f043 0304 	orr.w	r3, r3, #4
 8005db6:	6713      	str	r3, [r2, #112]	; 0x70
 8005db8:	4b5e      	ldr	r3, [pc, #376]	; (8005f34 <HAL_RCC_OscConfig+0x4cc>)
 8005dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dbc:	4a5d      	ldr	r2, [pc, #372]	; (8005f34 <HAL_RCC_OscConfig+0x4cc>)
 8005dbe:	f043 0301 	orr.w	r3, r3, #1
 8005dc2:	6713      	str	r3, [r2, #112]	; 0x70
 8005dc4:	e00b      	b.n	8005dde <HAL_RCC_OscConfig+0x376>
 8005dc6:	4b5b      	ldr	r3, [pc, #364]	; (8005f34 <HAL_RCC_OscConfig+0x4cc>)
 8005dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dca:	4a5a      	ldr	r2, [pc, #360]	; (8005f34 <HAL_RCC_OscConfig+0x4cc>)
 8005dcc:	f023 0301 	bic.w	r3, r3, #1
 8005dd0:	6713      	str	r3, [r2, #112]	; 0x70
 8005dd2:	4b58      	ldr	r3, [pc, #352]	; (8005f34 <HAL_RCC_OscConfig+0x4cc>)
 8005dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dd6:	4a57      	ldr	r2, [pc, #348]	; (8005f34 <HAL_RCC_OscConfig+0x4cc>)
 8005dd8:	f023 0304 	bic.w	r3, r3, #4
 8005ddc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d015      	beq.n	8005e12 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005de6:	f7fe f887 	bl	8003ef8 <HAL_GetTick>
 8005dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dec:	e00a      	b.n	8005e04 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dee:	f7fe f883 	bl	8003ef8 <HAL_GetTick>
 8005df2:	4602      	mov	r2, r0
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	1ad3      	subs	r3, r2, r3
 8005df8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d901      	bls.n	8005e04 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005e00:	2303      	movs	r3, #3
 8005e02:	e0ce      	b.n	8005fa2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e04:	4b4b      	ldr	r3, [pc, #300]	; (8005f34 <HAL_RCC_OscConfig+0x4cc>)
 8005e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e08:	f003 0302 	and.w	r3, r3, #2
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d0ee      	beq.n	8005dee <HAL_RCC_OscConfig+0x386>
 8005e10:	e014      	b.n	8005e3c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e12:	f7fe f871 	bl	8003ef8 <HAL_GetTick>
 8005e16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e18:	e00a      	b.n	8005e30 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e1a:	f7fe f86d 	bl	8003ef8 <HAL_GetTick>
 8005e1e:	4602      	mov	r2, r0
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	1ad3      	subs	r3, r2, r3
 8005e24:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d901      	bls.n	8005e30 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005e2c:	2303      	movs	r3, #3
 8005e2e:	e0b8      	b.n	8005fa2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e30:	4b40      	ldr	r3, [pc, #256]	; (8005f34 <HAL_RCC_OscConfig+0x4cc>)
 8005e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e34:	f003 0302 	and.w	r3, r3, #2
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d1ee      	bne.n	8005e1a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005e3c:	7dfb      	ldrb	r3, [r7, #23]
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d105      	bne.n	8005e4e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e42:	4b3c      	ldr	r3, [pc, #240]	; (8005f34 <HAL_RCC_OscConfig+0x4cc>)
 8005e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e46:	4a3b      	ldr	r2, [pc, #236]	; (8005f34 <HAL_RCC_OscConfig+0x4cc>)
 8005e48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e4c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	699b      	ldr	r3, [r3, #24]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	f000 80a4 	beq.w	8005fa0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e58:	4b36      	ldr	r3, [pc, #216]	; (8005f34 <HAL_RCC_OscConfig+0x4cc>)
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	f003 030c 	and.w	r3, r3, #12
 8005e60:	2b08      	cmp	r3, #8
 8005e62:	d06b      	beq.n	8005f3c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	699b      	ldr	r3, [r3, #24]
 8005e68:	2b02      	cmp	r3, #2
 8005e6a:	d149      	bne.n	8005f00 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e6c:	4b31      	ldr	r3, [pc, #196]	; (8005f34 <HAL_RCC_OscConfig+0x4cc>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a30      	ldr	r2, [pc, #192]	; (8005f34 <HAL_RCC_OscConfig+0x4cc>)
 8005e72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e78:	f7fe f83e 	bl	8003ef8 <HAL_GetTick>
 8005e7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e7e:	e008      	b.n	8005e92 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e80:	f7fe f83a 	bl	8003ef8 <HAL_GetTick>
 8005e84:	4602      	mov	r2, r0
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	2b02      	cmp	r3, #2
 8005e8c:	d901      	bls.n	8005e92 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005e8e:	2303      	movs	r3, #3
 8005e90:	e087      	b.n	8005fa2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e92:	4b28      	ldr	r3, [pc, #160]	; (8005f34 <HAL_RCC_OscConfig+0x4cc>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d1f0      	bne.n	8005e80 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	69da      	ldr	r2, [r3, #28]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a1b      	ldr	r3, [r3, #32]
 8005ea6:	431a      	orrs	r2, r3
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eac:	019b      	lsls	r3, r3, #6
 8005eae:	431a      	orrs	r2, r3
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb4:	085b      	lsrs	r3, r3, #1
 8005eb6:	3b01      	subs	r3, #1
 8005eb8:	041b      	lsls	r3, r3, #16
 8005eba:	431a      	orrs	r2, r3
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec0:	061b      	lsls	r3, r3, #24
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	4a1b      	ldr	r2, [pc, #108]	; (8005f34 <HAL_RCC_OscConfig+0x4cc>)
 8005ec6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005eca:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ecc:	4b19      	ldr	r3, [pc, #100]	; (8005f34 <HAL_RCC_OscConfig+0x4cc>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a18      	ldr	r2, [pc, #96]	; (8005f34 <HAL_RCC_OscConfig+0x4cc>)
 8005ed2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ed6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ed8:	f7fe f80e 	bl	8003ef8 <HAL_GetTick>
 8005edc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ede:	e008      	b.n	8005ef2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ee0:	f7fe f80a 	bl	8003ef8 <HAL_GetTick>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	1ad3      	subs	r3, r2, r3
 8005eea:	2b02      	cmp	r3, #2
 8005eec:	d901      	bls.n	8005ef2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005eee:	2303      	movs	r3, #3
 8005ef0:	e057      	b.n	8005fa2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ef2:	4b10      	ldr	r3, [pc, #64]	; (8005f34 <HAL_RCC_OscConfig+0x4cc>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d0f0      	beq.n	8005ee0 <HAL_RCC_OscConfig+0x478>
 8005efe:	e04f      	b.n	8005fa0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f00:	4b0c      	ldr	r3, [pc, #48]	; (8005f34 <HAL_RCC_OscConfig+0x4cc>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a0b      	ldr	r2, [pc, #44]	; (8005f34 <HAL_RCC_OscConfig+0x4cc>)
 8005f06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f0c:	f7fd fff4 	bl	8003ef8 <HAL_GetTick>
 8005f10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f12:	e008      	b.n	8005f26 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f14:	f7fd fff0 	bl	8003ef8 <HAL_GetTick>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	1ad3      	subs	r3, r2, r3
 8005f1e:	2b02      	cmp	r3, #2
 8005f20:	d901      	bls.n	8005f26 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005f22:	2303      	movs	r3, #3
 8005f24:	e03d      	b.n	8005fa2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f26:	4b03      	ldr	r3, [pc, #12]	; (8005f34 <HAL_RCC_OscConfig+0x4cc>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d1f0      	bne.n	8005f14 <HAL_RCC_OscConfig+0x4ac>
 8005f32:	e035      	b.n	8005fa0 <HAL_RCC_OscConfig+0x538>
 8005f34:	40023800 	.word	0x40023800
 8005f38:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005f3c:	4b1b      	ldr	r3, [pc, #108]	; (8005fac <HAL_RCC_OscConfig+0x544>)
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	699b      	ldr	r3, [r3, #24]
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d028      	beq.n	8005f9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d121      	bne.n	8005f9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d11a      	bne.n	8005f9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005f72:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d111      	bne.n	8005f9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f82:	085b      	lsrs	r3, r3, #1
 8005f84:	3b01      	subs	r3, #1
 8005f86:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d107      	bne.n	8005f9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f96:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d001      	beq.n	8005fa0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e000      	b.n	8005fa2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005fa0:	2300      	movs	r3, #0
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3718      	adds	r7, #24
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
 8005faa:	bf00      	nop
 8005fac:	40023800 	.word	0x40023800

08005fb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d101      	bne.n	8005fc8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e0d0      	b.n	800616a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005fc8:	4b6a      	ldr	r3, [pc, #424]	; (8006174 <HAL_RCC_ClockConfig+0x1c4>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f003 030f 	and.w	r3, r3, #15
 8005fd0:	683a      	ldr	r2, [r7, #0]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d910      	bls.n	8005ff8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fd6:	4b67      	ldr	r3, [pc, #412]	; (8006174 <HAL_RCC_ClockConfig+0x1c4>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f023 020f 	bic.w	r2, r3, #15
 8005fde:	4965      	ldr	r1, [pc, #404]	; (8006174 <HAL_RCC_ClockConfig+0x1c4>)
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fe6:	4b63      	ldr	r3, [pc, #396]	; (8006174 <HAL_RCC_ClockConfig+0x1c4>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f003 030f 	and.w	r3, r3, #15
 8005fee:	683a      	ldr	r2, [r7, #0]
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d001      	beq.n	8005ff8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e0b8      	b.n	800616a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 0302 	and.w	r3, r3, #2
 8006000:	2b00      	cmp	r3, #0
 8006002:	d020      	beq.n	8006046 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 0304 	and.w	r3, r3, #4
 800600c:	2b00      	cmp	r3, #0
 800600e:	d005      	beq.n	800601c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006010:	4b59      	ldr	r3, [pc, #356]	; (8006178 <HAL_RCC_ClockConfig+0x1c8>)
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	4a58      	ldr	r2, [pc, #352]	; (8006178 <HAL_RCC_ClockConfig+0x1c8>)
 8006016:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800601a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 0308 	and.w	r3, r3, #8
 8006024:	2b00      	cmp	r3, #0
 8006026:	d005      	beq.n	8006034 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006028:	4b53      	ldr	r3, [pc, #332]	; (8006178 <HAL_RCC_ClockConfig+0x1c8>)
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	4a52      	ldr	r2, [pc, #328]	; (8006178 <HAL_RCC_ClockConfig+0x1c8>)
 800602e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006032:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006034:	4b50      	ldr	r3, [pc, #320]	; (8006178 <HAL_RCC_ClockConfig+0x1c8>)
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	494d      	ldr	r1, [pc, #308]	; (8006178 <HAL_RCC_ClockConfig+0x1c8>)
 8006042:	4313      	orrs	r3, r2
 8006044:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 0301 	and.w	r3, r3, #1
 800604e:	2b00      	cmp	r3, #0
 8006050:	d040      	beq.n	80060d4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	2b01      	cmp	r3, #1
 8006058:	d107      	bne.n	800606a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800605a:	4b47      	ldr	r3, [pc, #284]	; (8006178 <HAL_RCC_ClockConfig+0x1c8>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006062:	2b00      	cmp	r3, #0
 8006064:	d115      	bne.n	8006092 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	e07f      	b.n	800616a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	2b02      	cmp	r3, #2
 8006070:	d107      	bne.n	8006082 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006072:	4b41      	ldr	r3, [pc, #260]	; (8006178 <HAL_RCC_ClockConfig+0x1c8>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800607a:	2b00      	cmp	r3, #0
 800607c:	d109      	bne.n	8006092 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	e073      	b.n	800616a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006082:	4b3d      	ldr	r3, [pc, #244]	; (8006178 <HAL_RCC_ClockConfig+0x1c8>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f003 0302 	and.w	r3, r3, #2
 800608a:	2b00      	cmp	r3, #0
 800608c:	d101      	bne.n	8006092 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	e06b      	b.n	800616a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006092:	4b39      	ldr	r3, [pc, #228]	; (8006178 <HAL_RCC_ClockConfig+0x1c8>)
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	f023 0203 	bic.w	r2, r3, #3
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	4936      	ldr	r1, [pc, #216]	; (8006178 <HAL_RCC_ClockConfig+0x1c8>)
 80060a0:	4313      	orrs	r3, r2
 80060a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060a4:	f7fd ff28 	bl	8003ef8 <HAL_GetTick>
 80060a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060aa:	e00a      	b.n	80060c2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060ac:	f7fd ff24 	bl	8003ef8 <HAL_GetTick>
 80060b0:	4602      	mov	r2, r0
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	1ad3      	subs	r3, r2, r3
 80060b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d901      	bls.n	80060c2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80060be:	2303      	movs	r3, #3
 80060c0:	e053      	b.n	800616a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060c2:	4b2d      	ldr	r3, [pc, #180]	; (8006178 <HAL_RCC_ClockConfig+0x1c8>)
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	f003 020c 	and.w	r2, r3, #12
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d1eb      	bne.n	80060ac <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80060d4:	4b27      	ldr	r3, [pc, #156]	; (8006174 <HAL_RCC_ClockConfig+0x1c4>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f003 030f 	and.w	r3, r3, #15
 80060dc:	683a      	ldr	r2, [r7, #0]
 80060de:	429a      	cmp	r2, r3
 80060e0:	d210      	bcs.n	8006104 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060e2:	4b24      	ldr	r3, [pc, #144]	; (8006174 <HAL_RCC_ClockConfig+0x1c4>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f023 020f 	bic.w	r2, r3, #15
 80060ea:	4922      	ldr	r1, [pc, #136]	; (8006174 <HAL_RCC_ClockConfig+0x1c4>)
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060f2:	4b20      	ldr	r3, [pc, #128]	; (8006174 <HAL_RCC_ClockConfig+0x1c4>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 030f 	and.w	r3, r3, #15
 80060fa:	683a      	ldr	r2, [r7, #0]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d001      	beq.n	8006104 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	e032      	b.n	800616a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 0304 	and.w	r3, r3, #4
 800610c:	2b00      	cmp	r3, #0
 800610e:	d008      	beq.n	8006122 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006110:	4b19      	ldr	r3, [pc, #100]	; (8006178 <HAL_RCC_ClockConfig+0x1c8>)
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	4916      	ldr	r1, [pc, #88]	; (8006178 <HAL_RCC_ClockConfig+0x1c8>)
 800611e:	4313      	orrs	r3, r2
 8006120:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 0308 	and.w	r3, r3, #8
 800612a:	2b00      	cmp	r3, #0
 800612c:	d009      	beq.n	8006142 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800612e:	4b12      	ldr	r3, [pc, #72]	; (8006178 <HAL_RCC_ClockConfig+0x1c8>)
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	00db      	lsls	r3, r3, #3
 800613c:	490e      	ldr	r1, [pc, #56]	; (8006178 <HAL_RCC_ClockConfig+0x1c8>)
 800613e:	4313      	orrs	r3, r2
 8006140:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006142:	f000 f821 	bl	8006188 <HAL_RCC_GetSysClockFreq>
 8006146:	4602      	mov	r2, r0
 8006148:	4b0b      	ldr	r3, [pc, #44]	; (8006178 <HAL_RCC_ClockConfig+0x1c8>)
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	091b      	lsrs	r3, r3, #4
 800614e:	f003 030f 	and.w	r3, r3, #15
 8006152:	490a      	ldr	r1, [pc, #40]	; (800617c <HAL_RCC_ClockConfig+0x1cc>)
 8006154:	5ccb      	ldrb	r3, [r1, r3]
 8006156:	fa22 f303 	lsr.w	r3, r2, r3
 800615a:	4a09      	ldr	r2, [pc, #36]	; (8006180 <HAL_RCC_ClockConfig+0x1d0>)
 800615c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800615e:	4b09      	ldr	r3, [pc, #36]	; (8006184 <HAL_RCC_ClockConfig+0x1d4>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4618      	mov	r0, r3
 8006164:	f7fd fe84 	bl	8003e70 <HAL_InitTick>

  return HAL_OK;
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	3710      	adds	r7, #16
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	40023c00 	.word	0x40023c00
 8006178:	40023800 	.word	0x40023800
 800617c:	0800d574 	.word	0x0800d574
 8006180:	200000bc 	.word	0x200000bc
 8006184:	200000c0 	.word	0x200000c0

08006188 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006188:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800618c:	b094      	sub	sp, #80	; 0x50
 800618e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006190:	2300      	movs	r3, #0
 8006192:	647b      	str	r3, [r7, #68]	; 0x44
 8006194:	2300      	movs	r3, #0
 8006196:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006198:	2300      	movs	r3, #0
 800619a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800619c:	2300      	movs	r3, #0
 800619e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80061a0:	4b79      	ldr	r3, [pc, #484]	; (8006388 <HAL_RCC_GetSysClockFreq+0x200>)
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	f003 030c 	and.w	r3, r3, #12
 80061a8:	2b08      	cmp	r3, #8
 80061aa:	d00d      	beq.n	80061c8 <HAL_RCC_GetSysClockFreq+0x40>
 80061ac:	2b08      	cmp	r3, #8
 80061ae:	f200 80e1 	bhi.w	8006374 <HAL_RCC_GetSysClockFreq+0x1ec>
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d002      	beq.n	80061bc <HAL_RCC_GetSysClockFreq+0x34>
 80061b6:	2b04      	cmp	r3, #4
 80061b8:	d003      	beq.n	80061c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80061ba:	e0db      	b.n	8006374 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80061bc:	4b73      	ldr	r3, [pc, #460]	; (800638c <HAL_RCC_GetSysClockFreq+0x204>)
 80061be:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80061c0:	e0db      	b.n	800637a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80061c2:	4b73      	ldr	r3, [pc, #460]	; (8006390 <HAL_RCC_GetSysClockFreq+0x208>)
 80061c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80061c6:	e0d8      	b.n	800637a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80061c8:	4b6f      	ldr	r3, [pc, #444]	; (8006388 <HAL_RCC_GetSysClockFreq+0x200>)
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061d0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80061d2:	4b6d      	ldr	r3, [pc, #436]	; (8006388 <HAL_RCC_GetSysClockFreq+0x200>)
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d063      	beq.n	80062a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061de:	4b6a      	ldr	r3, [pc, #424]	; (8006388 <HAL_RCC_GetSysClockFreq+0x200>)
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	099b      	lsrs	r3, r3, #6
 80061e4:	2200      	movs	r2, #0
 80061e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80061e8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80061ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061f0:	633b      	str	r3, [r7, #48]	; 0x30
 80061f2:	2300      	movs	r3, #0
 80061f4:	637b      	str	r3, [r7, #52]	; 0x34
 80061f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80061fa:	4622      	mov	r2, r4
 80061fc:	462b      	mov	r3, r5
 80061fe:	f04f 0000 	mov.w	r0, #0
 8006202:	f04f 0100 	mov.w	r1, #0
 8006206:	0159      	lsls	r1, r3, #5
 8006208:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800620c:	0150      	lsls	r0, r2, #5
 800620e:	4602      	mov	r2, r0
 8006210:	460b      	mov	r3, r1
 8006212:	4621      	mov	r1, r4
 8006214:	1a51      	subs	r1, r2, r1
 8006216:	6139      	str	r1, [r7, #16]
 8006218:	4629      	mov	r1, r5
 800621a:	eb63 0301 	sbc.w	r3, r3, r1
 800621e:	617b      	str	r3, [r7, #20]
 8006220:	f04f 0200 	mov.w	r2, #0
 8006224:	f04f 0300 	mov.w	r3, #0
 8006228:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800622c:	4659      	mov	r1, fp
 800622e:	018b      	lsls	r3, r1, #6
 8006230:	4651      	mov	r1, sl
 8006232:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006236:	4651      	mov	r1, sl
 8006238:	018a      	lsls	r2, r1, #6
 800623a:	4651      	mov	r1, sl
 800623c:	ebb2 0801 	subs.w	r8, r2, r1
 8006240:	4659      	mov	r1, fp
 8006242:	eb63 0901 	sbc.w	r9, r3, r1
 8006246:	f04f 0200 	mov.w	r2, #0
 800624a:	f04f 0300 	mov.w	r3, #0
 800624e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006252:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006256:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800625a:	4690      	mov	r8, r2
 800625c:	4699      	mov	r9, r3
 800625e:	4623      	mov	r3, r4
 8006260:	eb18 0303 	adds.w	r3, r8, r3
 8006264:	60bb      	str	r3, [r7, #8]
 8006266:	462b      	mov	r3, r5
 8006268:	eb49 0303 	adc.w	r3, r9, r3
 800626c:	60fb      	str	r3, [r7, #12]
 800626e:	f04f 0200 	mov.w	r2, #0
 8006272:	f04f 0300 	mov.w	r3, #0
 8006276:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800627a:	4629      	mov	r1, r5
 800627c:	024b      	lsls	r3, r1, #9
 800627e:	4621      	mov	r1, r4
 8006280:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006284:	4621      	mov	r1, r4
 8006286:	024a      	lsls	r2, r1, #9
 8006288:	4610      	mov	r0, r2
 800628a:	4619      	mov	r1, r3
 800628c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800628e:	2200      	movs	r2, #0
 8006290:	62bb      	str	r3, [r7, #40]	; 0x28
 8006292:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006294:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006298:	f7fa f87a 	bl	8000390 <__aeabi_uldivmod>
 800629c:	4602      	mov	r2, r0
 800629e:	460b      	mov	r3, r1
 80062a0:	4613      	mov	r3, r2
 80062a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062a4:	e058      	b.n	8006358 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062a6:	4b38      	ldr	r3, [pc, #224]	; (8006388 <HAL_RCC_GetSysClockFreq+0x200>)
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	099b      	lsrs	r3, r3, #6
 80062ac:	2200      	movs	r2, #0
 80062ae:	4618      	mov	r0, r3
 80062b0:	4611      	mov	r1, r2
 80062b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80062b6:	623b      	str	r3, [r7, #32]
 80062b8:	2300      	movs	r3, #0
 80062ba:	627b      	str	r3, [r7, #36]	; 0x24
 80062bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80062c0:	4642      	mov	r2, r8
 80062c2:	464b      	mov	r3, r9
 80062c4:	f04f 0000 	mov.w	r0, #0
 80062c8:	f04f 0100 	mov.w	r1, #0
 80062cc:	0159      	lsls	r1, r3, #5
 80062ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80062d2:	0150      	lsls	r0, r2, #5
 80062d4:	4602      	mov	r2, r0
 80062d6:	460b      	mov	r3, r1
 80062d8:	4641      	mov	r1, r8
 80062da:	ebb2 0a01 	subs.w	sl, r2, r1
 80062de:	4649      	mov	r1, r9
 80062e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80062e4:	f04f 0200 	mov.w	r2, #0
 80062e8:	f04f 0300 	mov.w	r3, #0
 80062ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80062f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80062f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80062f8:	ebb2 040a 	subs.w	r4, r2, sl
 80062fc:	eb63 050b 	sbc.w	r5, r3, fp
 8006300:	f04f 0200 	mov.w	r2, #0
 8006304:	f04f 0300 	mov.w	r3, #0
 8006308:	00eb      	lsls	r3, r5, #3
 800630a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800630e:	00e2      	lsls	r2, r4, #3
 8006310:	4614      	mov	r4, r2
 8006312:	461d      	mov	r5, r3
 8006314:	4643      	mov	r3, r8
 8006316:	18e3      	adds	r3, r4, r3
 8006318:	603b      	str	r3, [r7, #0]
 800631a:	464b      	mov	r3, r9
 800631c:	eb45 0303 	adc.w	r3, r5, r3
 8006320:	607b      	str	r3, [r7, #4]
 8006322:	f04f 0200 	mov.w	r2, #0
 8006326:	f04f 0300 	mov.w	r3, #0
 800632a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800632e:	4629      	mov	r1, r5
 8006330:	028b      	lsls	r3, r1, #10
 8006332:	4621      	mov	r1, r4
 8006334:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006338:	4621      	mov	r1, r4
 800633a:	028a      	lsls	r2, r1, #10
 800633c:	4610      	mov	r0, r2
 800633e:	4619      	mov	r1, r3
 8006340:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006342:	2200      	movs	r2, #0
 8006344:	61bb      	str	r3, [r7, #24]
 8006346:	61fa      	str	r2, [r7, #28]
 8006348:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800634c:	f7fa f820 	bl	8000390 <__aeabi_uldivmod>
 8006350:	4602      	mov	r2, r0
 8006352:	460b      	mov	r3, r1
 8006354:	4613      	mov	r3, r2
 8006356:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006358:	4b0b      	ldr	r3, [pc, #44]	; (8006388 <HAL_RCC_GetSysClockFreq+0x200>)
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	0c1b      	lsrs	r3, r3, #16
 800635e:	f003 0303 	and.w	r3, r3, #3
 8006362:	3301      	adds	r3, #1
 8006364:	005b      	lsls	r3, r3, #1
 8006366:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8006368:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800636a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800636c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006370:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006372:	e002      	b.n	800637a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006374:	4b05      	ldr	r3, [pc, #20]	; (800638c <HAL_RCC_GetSysClockFreq+0x204>)
 8006376:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006378:	bf00      	nop
    }
  }
  return sysclockfreq;
 800637a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800637c:	4618      	mov	r0, r3
 800637e:	3750      	adds	r7, #80	; 0x50
 8006380:	46bd      	mov	sp, r7
 8006382:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006386:	bf00      	nop
 8006388:	40023800 	.word	0x40023800
 800638c:	00f42400 	.word	0x00f42400
 8006390:	007a1200 	.word	0x007a1200

08006394 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006394:	b480      	push	{r7}
 8006396:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006398:	4b03      	ldr	r3, [pc, #12]	; (80063a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800639a:	681b      	ldr	r3, [r3, #0]
}
 800639c:	4618      	mov	r0, r3
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr
 80063a6:	bf00      	nop
 80063a8:	200000bc 	.word	0x200000bc

080063ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80063b0:	f7ff fff0 	bl	8006394 <HAL_RCC_GetHCLKFreq>
 80063b4:	4602      	mov	r2, r0
 80063b6:	4b05      	ldr	r3, [pc, #20]	; (80063cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	0a9b      	lsrs	r3, r3, #10
 80063bc:	f003 0307 	and.w	r3, r3, #7
 80063c0:	4903      	ldr	r1, [pc, #12]	; (80063d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80063c2:	5ccb      	ldrb	r3, [r1, r3]
 80063c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	bd80      	pop	{r7, pc}
 80063cc:	40023800 	.word	0x40023800
 80063d0:	0800d584 	.word	0x0800d584

080063d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80063d8:	f7ff ffdc 	bl	8006394 <HAL_RCC_GetHCLKFreq>
 80063dc:	4602      	mov	r2, r0
 80063de:	4b05      	ldr	r3, [pc, #20]	; (80063f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	0b5b      	lsrs	r3, r3, #13
 80063e4:	f003 0307 	and.w	r3, r3, #7
 80063e8:	4903      	ldr	r1, [pc, #12]	; (80063f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80063ea:	5ccb      	ldrb	r3, [r1, r3]
 80063ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	bd80      	pop	{r7, pc}
 80063f4:	40023800 	.word	0x40023800
 80063f8:	0800d584 	.word	0x0800d584

080063fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b088      	sub	sp, #32
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006404:	2300      	movs	r3, #0
 8006406:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006408:	2300      	movs	r3, #0
 800640a:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 800640c:	2300      	movs	r3, #0
 800640e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006410:	2300      	movs	r3, #0
 8006412:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 0301 	and.w	r3, r3, #1
 800641c:	2b00      	cmp	r3, #0
 800641e:	d012      	beq.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006420:	4b65      	ldr	r3, [pc, #404]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	4a64      	ldr	r2, [pc, #400]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006426:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800642a:	6093      	str	r3, [r2, #8]
 800642c:	4b62      	ldr	r3, [pc, #392]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800642e:	689a      	ldr	r2, [r3, #8]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006434:	4960      	ldr	r1, [pc, #384]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006436:	4313      	orrs	r3, r2
 8006438:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800643e:	2b00      	cmp	r3, #0
 8006440:	d101      	bne.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 8006442:	2301      	movs	r3, #1
 8006444:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800644e:	2b00      	cmp	r3, #0
 8006450:	d017      	beq.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006452:	4b59      	ldr	r3, [pc, #356]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006454:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006458:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006460:	4955      	ldr	r1, [pc, #340]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006462:	4313      	orrs	r3, r2
 8006464:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800646c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006470:	d101      	bne.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 8006472:	2301      	movs	r3, #1
 8006474:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800647a:	2b00      	cmp	r3, #0
 800647c:	d101      	bne.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 800647e:	2301      	movs	r3, #1
 8006480:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800648a:	2b00      	cmp	r3, #0
 800648c:	d017      	beq.n	80064be <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800648e:	4b4a      	ldr	r3, [pc, #296]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006490:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006494:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800649c:	4946      	ldr	r1, [pc, #280]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800649e:	4313      	orrs	r3, r2
 80064a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064ac:	d101      	bne.n	80064b2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 80064ae:	2301      	movs	r3, #1
 80064b0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d101      	bne.n	80064be <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 80064ba:	2301      	movs	r3, #1
 80064bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f003 0320 	and.w	r3, r3, #32
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	f000 808b 	beq.w	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80064cc:	4b3a      	ldr	r3, [pc, #232]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80064ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d0:	4a39      	ldr	r2, [pc, #228]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80064d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064d6:	6413      	str	r3, [r2, #64]	; 0x40
 80064d8:	4b37      	ldr	r3, [pc, #220]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80064da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064e0:	60fb      	str	r3, [r7, #12]
 80064e2:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80064e4:	4b35      	ldr	r3, [pc, #212]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a34      	ldr	r2, [pc, #208]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80064ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064f0:	f7fd fd02 	bl	8003ef8 <HAL_GetTick>
 80064f4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80064f6:	e008      	b.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064f8:	f7fd fcfe 	bl	8003ef8 <HAL_GetTick>
 80064fc:	4602      	mov	r2, r0
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	1ad3      	subs	r3, r2, r3
 8006502:	2b64      	cmp	r3, #100	; 0x64
 8006504:	d901      	bls.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006506:	2303      	movs	r3, #3
 8006508:	e2bc      	b.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800650a:	4b2c      	ldr	r3, [pc, #176]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006512:	2b00      	cmp	r3, #0
 8006514:	d0f0      	beq.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006516:	4b28      	ldr	r3, [pc, #160]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800651a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800651e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d035      	beq.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800652a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800652e:	693a      	ldr	r2, [r7, #16]
 8006530:	429a      	cmp	r2, r3
 8006532:	d02e      	beq.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006534:	4b20      	ldr	r3, [pc, #128]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006538:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800653c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800653e:	4b1e      	ldr	r3, [pc, #120]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006542:	4a1d      	ldr	r2, [pc, #116]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006548:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800654a:	4b1b      	ldr	r3, [pc, #108]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800654c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800654e:	4a1a      	ldr	r2, [pc, #104]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006550:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006554:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006556:	4a18      	ldr	r2, [pc, #96]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800655c:	4b16      	ldr	r3, [pc, #88]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800655e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006560:	f003 0301 	and.w	r3, r3, #1
 8006564:	2b01      	cmp	r3, #1
 8006566:	d114      	bne.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006568:	f7fd fcc6 	bl	8003ef8 <HAL_GetTick>
 800656c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800656e:	e00a      	b.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006570:	f7fd fcc2 	bl	8003ef8 <HAL_GetTick>
 8006574:	4602      	mov	r2, r0
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	1ad3      	subs	r3, r2, r3
 800657a:	f241 3288 	movw	r2, #5000	; 0x1388
 800657e:	4293      	cmp	r3, r2
 8006580:	d901      	bls.n	8006586 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8006582:	2303      	movs	r3, #3
 8006584:	e27e      	b.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006586:	4b0c      	ldr	r3, [pc, #48]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800658a:	f003 0302 	and.w	r3, r3, #2
 800658e:	2b00      	cmp	r3, #0
 8006590:	d0ee      	beq.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006596:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800659a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800659e:	d111      	bne.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 80065a0:	4b05      	ldr	r3, [pc, #20]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80065ac:	4b04      	ldr	r3, [pc, #16]	; (80065c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80065ae:	400b      	ands	r3, r1
 80065b0:	4901      	ldr	r1, [pc, #4]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80065b2:	4313      	orrs	r3, r2
 80065b4:	608b      	str	r3, [r1, #8]
 80065b6:	e00b      	b.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80065b8:	40023800 	.word	0x40023800
 80065bc:	40007000 	.word	0x40007000
 80065c0:	0ffffcff 	.word	0x0ffffcff
 80065c4:	4ba4      	ldr	r3, [pc, #656]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	4aa3      	ldr	r2, [pc, #652]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80065ca:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80065ce:	6093      	str	r3, [r2, #8]
 80065d0:	4ba1      	ldr	r3, [pc, #644]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80065d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065dc:	499e      	ldr	r1, [pc, #632]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80065de:	4313      	orrs	r3, r2
 80065e0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f003 0310 	and.w	r3, r3, #16
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d010      	beq.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80065ee:	4b9a      	ldr	r3, [pc, #616]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80065f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065f4:	4a98      	ldr	r2, [pc, #608]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80065f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80065fa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80065fe:	4b96      	ldr	r3, [pc, #600]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006600:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006608:	4993      	ldr	r1, [pc, #588]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800660a:	4313      	orrs	r3, r2
 800660c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006618:	2b00      	cmp	r3, #0
 800661a:	d00a      	beq.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800661c:	4b8e      	ldr	r3, [pc, #568]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800661e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006622:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800662a:	498b      	ldr	r1, [pc, #556]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800662c:	4313      	orrs	r3, r2
 800662e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800663a:	2b00      	cmp	r3, #0
 800663c:	d00a      	beq.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800663e:	4b86      	ldr	r3, [pc, #536]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006644:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800664c:	4982      	ldr	r1, [pc, #520]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800664e:	4313      	orrs	r3, r2
 8006650:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800665c:	2b00      	cmp	r3, #0
 800665e:	d00a      	beq.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006660:	4b7d      	ldr	r3, [pc, #500]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006666:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800666e:	497a      	ldr	r1, [pc, #488]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006670:	4313      	orrs	r3, r2
 8006672:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800667e:	2b00      	cmp	r3, #0
 8006680:	d00a      	beq.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006682:	4b75      	ldr	r3, [pc, #468]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006688:	f023 0203 	bic.w	r2, r3, #3
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006690:	4971      	ldr	r1, [pc, #452]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006692:	4313      	orrs	r3, r2
 8006694:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d00a      	beq.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80066a4:	4b6c      	ldr	r3, [pc, #432]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80066a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066aa:	f023 020c 	bic.w	r2, r3, #12
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b2:	4969      	ldr	r1, [pc, #420]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80066b4:	4313      	orrs	r3, r2
 80066b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d00a      	beq.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80066c6:	4b64      	ldr	r3, [pc, #400]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80066c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066d4:	4960      	ldr	r1, [pc, #384]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80066d6:	4313      	orrs	r3, r2
 80066d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d00a      	beq.n	80066fe <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80066e8:	4b5b      	ldr	r3, [pc, #364]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80066ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066f6:	4958      	ldr	r1, [pc, #352]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80066f8:	4313      	orrs	r3, r2
 80066fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006706:	2b00      	cmp	r3, #0
 8006708:	d00a      	beq.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800670a:	4b53      	ldr	r3, [pc, #332]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800670c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006710:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006718:	494f      	ldr	r1, [pc, #316]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800671a:	4313      	orrs	r3, r2
 800671c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006728:	2b00      	cmp	r3, #0
 800672a:	d00a      	beq.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800672c:	4b4a      	ldr	r3, [pc, #296]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800672e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006732:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800673a:	4947      	ldr	r1, [pc, #284]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800673c:	4313      	orrs	r3, r2
 800673e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800674a:	2b00      	cmp	r3, #0
 800674c:	d00a      	beq.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800674e:	4b42      	ldr	r3, [pc, #264]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006754:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800675c:	493e      	ldr	r1, [pc, #248]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800675e:	4313      	orrs	r3, r2
 8006760:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800676c:	2b00      	cmp	r3, #0
 800676e:	d00a      	beq.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006770:	4b39      	ldr	r3, [pc, #228]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006776:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800677e:	4936      	ldr	r1, [pc, #216]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006780:	4313      	orrs	r3, r2
 8006782:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800678e:	2b00      	cmp	r3, #0
 8006790:	d011      	beq.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006792:	4b31      	ldr	r3, [pc, #196]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006798:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067a0:	492d      	ldr	r1, [pc, #180]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80067a2:	4313      	orrs	r3, r2
 80067a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067b0:	d101      	bne.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 80067b2:	2301      	movs	r3, #1
 80067b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d00a      	beq.n	80067d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80067c2:	4b25      	ldr	r3, [pc, #148]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80067c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067c8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067d0:	4921      	ldr	r1, [pc, #132]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80067d2:	4313      	orrs	r3, r2
 80067d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d00a      	beq.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80067e4:	4b1c      	ldr	r3, [pc, #112]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80067e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067ea:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067f2:	4919      	ldr	r1, [pc, #100]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80067f4:	4313      	orrs	r3, r2
 80067f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00a      	beq.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8006806:	4b14      	ldr	r3, [pc, #80]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800680c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006814:	4910      	ldr	r1, [pc, #64]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006816:	4313      	orrs	r3, r2
 8006818:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800681c:	69fb      	ldr	r3, [r7, #28]
 800681e:	2b01      	cmp	r3, #1
 8006820:	d006      	beq.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800682a:	2b00      	cmp	r3, #0
 800682c:	f000 809d 	beq.w	800696a <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006830:	4b09      	ldr	r3, [pc, #36]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a08      	ldr	r2, [pc, #32]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006836:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800683a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800683c:	f7fd fb5c 	bl	8003ef8 <HAL_GetTick>
 8006840:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006842:	e00b      	b.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006844:	f7fd fb58 	bl	8003ef8 <HAL_GetTick>
 8006848:	4602      	mov	r2, r0
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	1ad3      	subs	r3, r2, r3
 800684e:	2b64      	cmp	r3, #100	; 0x64
 8006850:	d904      	bls.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006852:	2303      	movs	r3, #3
 8006854:	e116      	b.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8006856:	bf00      	nop
 8006858:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800685c:	4b8b      	ldr	r3, [pc, #556]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006864:	2b00      	cmp	r3, #0
 8006866:	d1ed      	bne.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 0301 	and.w	r3, r3, #1
 8006870:	2b00      	cmp	r3, #0
 8006872:	d017      	beq.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006878:	2b00      	cmp	r3, #0
 800687a:	d113      	bne.n	80068a4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800687c:	4b83      	ldr	r3, [pc, #524]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800687e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006882:	0e1b      	lsrs	r3, r3, #24
 8006884:	f003 030f 	and.w	r3, r3, #15
 8006888:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	019a      	lsls	r2, r3, #6
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	061b      	lsls	r3, r3, #24
 8006894:	431a      	orrs	r2, r3
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	071b      	lsls	r3, r3, #28
 800689c:	497b      	ldr	r1, [pc, #492]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800689e:	4313      	orrs	r3, r2
 80068a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d004      	beq.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x4be>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068b8:	d00a      	beq.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d024      	beq.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068ce:	d11f      	bne.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80068d0:	4b6e      	ldr	r3, [pc, #440]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80068d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068d6:	0f1b      	lsrs	r3, r3, #28
 80068d8:	f003 0307 	and.w	r3, r3, #7
 80068dc:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	019a      	lsls	r2, r3, #6
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	061b      	lsls	r3, r3, #24
 80068ea:	431a      	orrs	r2, r3
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	071b      	lsls	r3, r3, #28
 80068f0:	4966      	ldr	r1, [pc, #408]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80068f2:	4313      	orrs	r3, r2
 80068f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80068f8:	4b64      	ldr	r3, [pc, #400]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80068fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068fe:	f023 021f 	bic.w	r2, r3, #31
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	69db      	ldr	r3, [r3, #28]
 8006906:	3b01      	subs	r3, #1
 8006908:	4960      	ldr	r1, [pc, #384]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800690a:	4313      	orrs	r3, r2
 800690c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006918:	2b00      	cmp	r3, #0
 800691a:	d00d      	beq.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	019a      	lsls	r2, r3, #6
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	061b      	lsls	r3, r3, #24
 8006928:	431a      	orrs	r2, r3
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	071b      	lsls	r3, r3, #28
 8006930:	4956      	ldr	r1, [pc, #344]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006932:	4313      	orrs	r3, r2
 8006934:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006938:	4b54      	ldr	r3, [pc, #336]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a53      	ldr	r2, [pc, #332]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800693e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006942:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006944:	f7fd fad8 	bl	8003ef8 <HAL_GetTick>
 8006948:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800694a:	e008      	b.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800694c:	f7fd fad4 	bl	8003ef8 <HAL_GetTick>
 8006950:	4602      	mov	r2, r0
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	1ad3      	subs	r3, r2, r3
 8006956:	2b64      	cmp	r3, #100	; 0x64
 8006958:	d901      	bls.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800695a:	2303      	movs	r3, #3
 800695c:	e092      	b.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800695e:	4b4b      	ldr	r3, [pc, #300]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006966:	2b00      	cmp	r3, #0
 8006968:	d0f0      	beq.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800696a:	69bb      	ldr	r3, [r7, #24]
 800696c:	2b01      	cmp	r3, #1
 800696e:	f040 8088 	bne.w	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006972:	4b46      	ldr	r3, [pc, #280]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a45      	ldr	r2, [pc, #276]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006978:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800697c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800697e:	f7fd fabb 	bl	8003ef8 <HAL_GetTick>
 8006982:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006984:	e008      	b.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006986:	f7fd fab7 	bl	8003ef8 <HAL_GetTick>
 800698a:	4602      	mov	r2, r0
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	1ad3      	subs	r3, r2, r3
 8006990:	2b64      	cmp	r3, #100	; 0x64
 8006992:	d901      	bls.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006994:	2303      	movs	r3, #3
 8006996:	e075      	b.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006998:	4b3c      	ldr	r3, [pc, #240]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80069a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069a4:	d0ef      	beq.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d003      	beq.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x5be>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d009      	beq.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d024      	beq.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d120      	bne.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80069ce:	4b2f      	ldr	r3, [pc, #188]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80069d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069d4:	0c1b      	lsrs	r3, r3, #16
 80069d6:	f003 0303 	and.w	r3, r3, #3
 80069da:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	691b      	ldr	r3, [r3, #16]
 80069e0:	019a      	lsls	r2, r3, #6
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	041b      	lsls	r3, r3, #16
 80069e6:	431a      	orrs	r2, r3
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	695b      	ldr	r3, [r3, #20]
 80069ec:	061b      	lsls	r3, r3, #24
 80069ee:	4927      	ldr	r1, [pc, #156]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80069f0:	4313      	orrs	r3, r2
 80069f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80069f6:	4b25      	ldr	r3, [pc, #148]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80069f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069fc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6a1b      	ldr	r3, [r3, #32]
 8006a04:	3b01      	subs	r3, #1
 8006a06:	021b      	lsls	r3, r3, #8
 8006a08:	4920      	ldr	r1, [pc, #128]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d018      	beq.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x652>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a24:	d113      	bne.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006a26:	4b19      	ldr	r3, [pc, #100]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a2c:	0e1b      	lsrs	r3, r3, #24
 8006a2e:	f003 030f 	and.w	r3, r3, #15
 8006a32:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	691b      	ldr	r3, [r3, #16]
 8006a38:	019a      	lsls	r2, r3, #6
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	699b      	ldr	r3, [r3, #24]
 8006a3e:	041b      	lsls	r3, r3, #16
 8006a40:	431a      	orrs	r2, r3
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	061b      	lsls	r3, r3, #24
 8006a46:	4911      	ldr	r1, [pc, #68]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006a4e:	4b0f      	ldr	r3, [pc, #60]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a0e      	ldr	r2, [pc, #56]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006a54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a5a:	f7fd fa4d 	bl	8003ef8 <HAL_GetTick>
 8006a5e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006a60:	e008      	b.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006a62:	f7fd fa49 	bl	8003ef8 <HAL_GetTick>
 8006a66:	4602      	mov	r2, r0
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	1ad3      	subs	r3, r2, r3
 8006a6c:	2b64      	cmp	r3, #100	; 0x64
 8006a6e:	d901      	bls.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a70:	2303      	movs	r3, #3
 8006a72:	e007      	b.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006a74:	4b05      	ldr	r3, [pc, #20]	; (8006a8c <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a80:	d1ef      	bne.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 8006a82:	2300      	movs	r3, #0
}
 8006a84:	4618      	mov	r0, r3
 8006a86:	3720      	adds	r7, #32
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}
 8006a8c:	40023800 	.word	0x40023800

08006a90 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b082      	sub	sp, #8
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d101      	bne.n	8006aa2 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	e081      	b.n	8006ba6 <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	7f5b      	ldrb	r3, [r3, #29]
 8006aa6:	b2db      	uxtb	r3, r3
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d105      	bne.n	8006ab8 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f7fc fe02 	bl	80036bc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2202      	movs	r2, #2
 8006abc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	22ca      	movs	r2, #202	; 0xca
 8006ac4:	625a      	str	r2, [r3, #36]	; 0x24
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	2253      	movs	r2, #83	; 0x53
 8006acc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 f898 	bl	8006c04 <RTC_EnterInitMode>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d008      	beq.n	8006aec <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	22ff      	movs	r2, #255	; 0xff
 8006ae0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2204      	movs	r2, #4
 8006ae6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e05c      	b.n	8006ba6 <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	6899      	ldr	r1, [r3, #8]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681a      	ldr	r2, [r3, #0]
 8006af6:	4b2e      	ldr	r3, [pc, #184]	; (8006bb0 <HAL_RTC_Init+0x120>)
 8006af8:	400b      	ands	r3, r1
 8006afa:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	6899      	ldr	r1, [r3, #8]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	685a      	ldr	r2, [r3, #4]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	691b      	ldr	r3, [r3, #16]
 8006b0a:	431a      	orrs	r2, r3
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	695b      	ldr	r3, [r3, #20]
 8006b10:	431a      	orrs	r2, r3
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	430a      	orrs	r2, r1
 8006b18:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	68d2      	ldr	r2, [r2, #12]
 8006b22:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	6919      	ldr	r1, [r3, #16]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	041a      	lsls	r2, r3, #16
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	430a      	orrs	r2, r1
 8006b36:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	68da      	ldr	r2, [r3, #12]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b46:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	f003 0320 	and.w	r3, r3, #32
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d10e      	bne.n	8006b74 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 f82c 	bl	8006bb4 <HAL_RTC_WaitForSynchro>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d008      	beq.n	8006b74 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	22ff      	movs	r2, #255	; 0xff
 8006b68:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2204      	movs	r2, #4
 8006b6e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8006b70:	2301      	movs	r3, #1
 8006b72:	e018      	b.n	8006ba6 <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f022 0208 	bic.w	r2, r2, #8
 8006b82:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	699a      	ldr	r2, [r3, #24]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	430a      	orrs	r2, r1
 8006b94:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	22ff      	movs	r2, #255	; 0xff
 8006b9c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8006ba4:	2300      	movs	r3, #0
  }
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3708      	adds	r7, #8
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}
 8006bae:	bf00      	nop
 8006bb0:	ff8fffbf 	.word	0xff8fffbf

08006bb4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b084      	sub	sp, #16
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	68da      	ldr	r2, [r3, #12]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006bce:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006bd0:	f7fd f992 	bl	8003ef8 <HAL_GetTick>
 8006bd4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006bd6:	e009      	b.n	8006bec <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006bd8:	f7fd f98e 	bl	8003ef8 <HAL_GetTick>
 8006bdc:	4602      	mov	r2, r0
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	1ad3      	subs	r3, r2, r3
 8006be2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006be6:	d901      	bls.n	8006bec <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006be8:	2303      	movs	r3, #3
 8006bea:	e007      	b.n	8006bfc <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	68db      	ldr	r3, [r3, #12]
 8006bf2:	f003 0320 	and.w	r3, r3, #32
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d0ee      	beq.n	8006bd8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006bfa:	2300      	movs	r3, #0
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3710      	adds	r7, #16
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b084      	sub	sp, #16
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	68db      	ldr	r3, [r3, #12]
 8006c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d119      	bne.n	8006c52 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f04f 32ff 	mov.w	r2, #4294967295
 8006c26:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006c28:	f7fd f966 	bl	8003ef8 <HAL_GetTick>
 8006c2c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006c2e:	e009      	b.n	8006c44 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006c30:	f7fd f962 	bl	8003ef8 <HAL_GetTick>
 8006c34:	4602      	mov	r2, r0
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	1ad3      	subs	r3, r2, r3
 8006c3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c3e:	d901      	bls.n	8006c44 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8006c40:	2303      	movs	r3, #3
 8006c42:	e007      	b.n	8006c54 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d0ee      	beq.n	8006c30 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8006c52:	2300      	movs	r3, #0
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3710      	adds	r7, #16
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b086      	sub	sp, #24
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	60f8      	str	r0, [r7, #12]
 8006c64:	60b9      	str	r1, [r7, #8]
 8006c66:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	7f1b      	ldrb	r3, [r3, #28]
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d101      	bne.n	8006c78 <HAL_RTCEx_SetWakeUpTimer+0x1c>
 8006c74:	2302      	movs	r3, #2
 8006c76:	e062      	b.n	8006d3e <HAL_RTCEx_SetWakeUpTimer+0xe2>
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2202      	movs	r2, #2
 8006c82:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	22ca      	movs	r2, #202	; 0xca
 8006c8a:	625a      	str	r2, [r3, #36]	; 0x24
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	2253      	movs	r2, #83	; 0x53
 8006c92:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	689a      	ldr	r2, [r3, #8]
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ca2:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006ca4:	f7fd f928 	bl	8003ef8 <HAL_GetTick>
 8006ca8:	6178      	str	r0, [r7, #20]

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d01b      	beq.n	8006cf0 <HAL_RTCEx_SetWakeUpTimer+0x94>
  {
    /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8006cb8:	e013      	b.n	8006ce2 <HAL_RTCEx_SetWakeUpTimer+0x86>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006cba:	f7fd f91d 	bl	8003ef8 <HAL_GetTick>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	1ad3      	subs	r3, r2, r3
 8006cc4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006cc8:	d90b      	bls.n	8006ce2 <HAL_RTCEx_SetWakeUpTimer+0x86>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	22ff      	movs	r2, #255	; 0xff
 8006cd0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2203      	movs	r2, #3
 8006cd6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8006cde:	2303      	movs	r3, #3
 8006ce0:	e02d      	b.n	8006d3e <HAL_RTCEx_SetWakeUpTimer+0xe2>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	f003 0304 	and.w	r3, r3, #4
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d0e4      	beq.n	8006cba <HAL_RTCEx_SetWakeUpTimer+0x5e>
      }
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	689a      	ldr	r2, [r3, #8]
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f022 0207 	bic.w	r2, r2, #7
 8006cfe:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	6899      	ldr	r1, [r3, #8]
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	687a      	ldr	r2, [r7, #4]
 8006d0c:	430a      	orrs	r2, r1
 8006d0e:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	68ba      	ldr	r2, [r7, #8]
 8006d16:	615a      	str	r2, [r3, #20]

   /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	689a      	ldr	r2, [r3, #8]
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006d26:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	22ff      	movs	r2, #255	; 0xff
 8006d2e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2201      	movs	r2, #1
 8006d34:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8006d3c:	2300      	movs	r3, #0
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3718      	adds	r7, #24
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}

08006d46 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8006d46:	b480      	push	{r7}
 8006d48:	b087      	sub	sp, #28
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	60f8      	str	r0, [r7, #12]
 8006d4e:	60b9      	str	r1, [r7, #8]
 8006d50:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0;
 8006d52:	2300      	movs	r3, #0
 8006d54:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	3350      	adds	r3, #80	; 0x50
 8006d5c:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4);
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	697a      	ldr	r2, [r7, #20]
 8006d64:	4413      	add	r3, r2
 8006d66:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	687a      	ldr	r2, [r7, #4]
 8006d6c:	601a      	str	r2, [r3, #0]
}
 8006d6e:	bf00      	nop
 8006d70:	371c      	adds	r7, #28
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr

08006d7a <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8006d7a:	b480      	push	{r7}
 8006d7c:	b085      	sub	sp, #20
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	6078      	str	r0, [r7, #4]
 8006d82:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0;
 8006d84:	2300      	movs	r3, #0
 8006d86:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	3350      	adds	r3, #80	; 0x50
 8006d8e:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4);
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	68fa      	ldr	r2, [r7, #12]
 8006d96:	4413      	add	r3, r2
 8006d98:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3714      	adds	r7, #20
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr

08006daa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006daa:	b580      	push	{r7, lr}
 8006dac:	b082      	sub	sp, #8
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d101      	bne.n	8006dbc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006db8:	2301      	movs	r3, #1
 8006dba:	e049      	b.n	8006e50 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dc2:	b2db      	uxtb	r3, r3
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d106      	bne.n	8006dd6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f7fc fca1 	bl	8003718 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2202      	movs	r2, #2
 8006dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	3304      	adds	r3, #4
 8006de6:	4619      	mov	r1, r3
 8006de8:	4610      	mov	r0, r2
 8006dea:	f000 fdc7 	bl	800797c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2201      	movs	r2, #1
 8006df2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2201      	movs	r2, #1
 8006dfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2201      	movs	r2, #1
 8006e02:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2201      	movs	r2, #1
 8006e0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2201      	movs	r2, #1
 8006e12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2201      	movs	r2, #1
 8006e1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2201      	movs	r2, #1
 8006e22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2201      	movs	r2, #1
 8006e2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2201      	movs	r2, #1
 8006e32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2201      	movs	r2, #1
 8006e3a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2201      	movs	r2, #1
 8006e42:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2201      	movs	r2, #1
 8006e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e4e:	2300      	movs	r3, #0
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3708      	adds	r7, #8
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}

08006e58 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b085      	sub	sp, #20
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e66:	b2db      	uxtb	r3, r3
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d001      	beq.n	8006e70 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	e04c      	b.n	8006f0a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2202      	movs	r2, #2
 8006e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a26      	ldr	r2, [pc, #152]	; (8006f18 <HAL_TIM_Base_Start+0xc0>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d022      	beq.n	8006ec8 <HAL_TIM_Base_Start+0x70>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e8a:	d01d      	beq.n	8006ec8 <HAL_TIM_Base_Start+0x70>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a22      	ldr	r2, [pc, #136]	; (8006f1c <HAL_TIM_Base_Start+0xc4>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d018      	beq.n	8006ec8 <HAL_TIM_Base_Start+0x70>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a21      	ldr	r2, [pc, #132]	; (8006f20 <HAL_TIM_Base_Start+0xc8>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d013      	beq.n	8006ec8 <HAL_TIM_Base_Start+0x70>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a1f      	ldr	r2, [pc, #124]	; (8006f24 <HAL_TIM_Base_Start+0xcc>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d00e      	beq.n	8006ec8 <HAL_TIM_Base_Start+0x70>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a1e      	ldr	r2, [pc, #120]	; (8006f28 <HAL_TIM_Base_Start+0xd0>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d009      	beq.n	8006ec8 <HAL_TIM_Base_Start+0x70>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4a1c      	ldr	r2, [pc, #112]	; (8006f2c <HAL_TIM_Base_Start+0xd4>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d004      	beq.n	8006ec8 <HAL_TIM_Base_Start+0x70>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a1b      	ldr	r2, [pc, #108]	; (8006f30 <HAL_TIM_Base_Start+0xd8>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d115      	bne.n	8006ef4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	689a      	ldr	r2, [r3, #8]
 8006ece:	4b19      	ldr	r3, [pc, #100]	; (8006f34 <HAL_TIM_Base_Start+0xdc>)
 8006ed0:	4013      	ands	r3, r2
 8006ed2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2b06      	cmp	r3, #6
 8006ed8:	d015      	beq.n	8006f06 <HAL_TIM_Base_Start+0xae>
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ee0:	d011      	beq.n	8006f06 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f042 0201 	orr.w	r2, r2, #1
 8006ef0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ef2:	e008      	b.n	8006f06 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f042 0201 	orr.w	r2, r2, #1
 8006f02:	601a      	str	r2, [r3, #0]
 8006f04:	e000      	b.n	8006f08 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f06:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006f08:	2300      	movs	r3, #0
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3714      	adds	r7, #20
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr
 8006f16:	bf00      	nop
 8006f18:	40010000 	.word	0x40010000
 8006f1c:	40000400 	.word	0x40000400
 8006f20:	40000800 	.word	0x40000800
 8006f24:	40000c00 	.word	0x40000c00
 8006f28:	40010400 	.word	0x40010400
 8006f2c:	40014000 	.word	0x40014000
 8006f30:	40001800 	.word	0x40001800
 8006f34:	00010007 	.word	0x00010007

08006f38 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b083      	sub	sp, #12
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	6a1a      	ldr	r2, [r3, #32]
 8006f46:	f241 1311 	movw	r3, #4369	; 0x1111
 8006f4a:	4013      	ands	r3, r2
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d10f      	bne.n	8006f70 <HAL_TIM_Base_Stop+0x38>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	6a1a      	ldr	r2, [r3, #32]
 8006f56:	f240 4344 	movw	r3, #1092	; 0x444
 8006f5a:	4013      	ands	r3, r2
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d107      	bne.n	8006f70 <HAL_TIM_Base_Stop+0x38>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f022 0201 	bic.w	r2, r2, #1
 8006f6e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2201      	movs	r2, #1
 8006f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006f78:	2300      	movs	r3, #0
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	370c      	adds	r7, #12
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr
	...

08006f88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b085      	sub	sp, #20
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f96:	b2db      	uxtb	r3, r3
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d001      	beq.n	8006fa0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	e054      	b.n	800704a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2202      	movs	r2, #2
 8006fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	68da      	ldr	r2, [r3, #12]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f042 0201 	orr.w	r2, r2, #1
 8006fb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a26      	ldr	r2, [pc, #152]	; (8007058 <HAL_TIM_Base_Start_IT+0xd0>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d022      	beq.n	8007008 <HAL_TIM_Base_Start_IT+0x80>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fca:	d01d      	beq.n	8007008 <HAL_TIM_Base_Start_IT+0x80>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a22      	ldr	r2, [pc, #136]	; (800705c <HAL_TIM_Base_Start_IT+0xd4>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d018      	beq.n	8007008 <HAL_TIM_Base_Start_IT+0x80>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a21      	ldr	r2, [pc, #132]	; (8007060 <HAL_TIM_Base_Start_IT+0xd8>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d013      	beq.n	8007008 <HAL_TIM_Base_Start_IT+0x80>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a1f      	ldr	r2, [pc, #124]	; (8007064 <HAL_TIM_Base_Start_IT+0xdc>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d00e      	beq.n	8007008 <HAL_TIM_Base_Start_IT+0x80>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a1e      	ldr	r2, [pc, #120]	; (8007068 <HAL_TIM_Base_Start_IT+0xe0>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d009      	beq.n	8007008 <HAL_TIM_Base_Start_IT+0x80>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a1c      	ldr	r2, [pc, #112]	; (800706c <HAL_TIM_Base_Start_IT+0xe4>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d004      	beq.n	8007008 <HAL_TIM_Base_Start_IT+0x80>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a1b      	ldr	r2, [pc, #108]	; (8007070 <HAL_TIM_Base_Start_IT+0xe8>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d115      	bne.n	8007034 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	689a      	ldr	r2, [r3, #8]
 800700e:	4b19      	ldr	r3, [pc, #100]	; (8007074 <HAL_TIM_Base_Start_IT+0xec>)
 8007010:	4013      	ands	r3, r2
 8007012:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2b06      	cmp	r3, #6
 8007018:	d015      	beq.n	8007046 <HAL_TIM_Base_Start_IT+0xbe>
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007020:	d011      	beq.n	8007046 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	681a      	ldr	r2, [r3, #0]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f042 0201 	orr.w	r2, r2, #1
 8007030:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007032:	e008      	b.n	8007046 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f042 0201 	orr.w	r2, r2, #1
 8007042:	601a      	str	r2, [r3, #0]
 8007044:	e000      	b.n	8007048 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007046:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007048:	2300      	movs	r3, #0
}
 800704a:	4618      	mov	r0, r3
 800704c:	3714      	adds	r7, #20
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr
 8007056:	bf00      	nop
 8007058:	40010000 	.word	0x40010000
 800705c:	40000400 	.word	0x40000400
 8007060:	40000800 	.word	0x40000800
 8007064:	40000c00 	.word	0x40000c00
 8007068:	40010400 	.word	0x40010400
 800706c:	40014000 	.word	0x40014000
 8007070:	40001800 	.word	0x40001800
 8007074:	00010007 	.word	0x00010007

08007078 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b082      	sub	sp, #8
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d101      	bne.n	800708a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	e049      	b.n	800711e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007090:	b2db      	uxtb	r3, r3
 8007092:	2b00      	cmp	r3, #0
 8007094:	d106      	bne.n	80070a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2200      	movs	r2, #0
 800709a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f7fc fb74 	bl	800378c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2202      	movs	r2, #2
 80070a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	3304      	adds	r3, #4
 80070b4:	4619      	mov	r1, r3
 80070b6:	4610      	mov	r0, r2
 80070b8:	f000 fc60 	bl	800797c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2201      	movs	r2, #1
 80070c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2201      	movs	r2, #1
 80070c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2201      	movs	r2, #1
 80070d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2201      	movs	r2, #1
 80070e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2201      	movs	r2, #1
 80070e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2201      	movs	r2, #1
 80070f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2201      	movs	r2, #1
 80070f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2201      	movs	r2, #1
 8007100:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2201      	movs	r2, #1
 8007108:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2201      	movs	r2, #1
 8007110:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2201      	movs	r2, #1
 8007118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800711c:	2300      	movs	r3, #0
}
 800711e:	4618      	mov	r0, r3
 8007120:	3708      	adds	r7, #8
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
	...

08007128 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d109      	bne.n	800714c <HAL_TIM_PWM_Start+0x24>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800713e:	b2db      	uxtb	r3, r3
 8007140:	2b01      	cmp	r3, #1
 8007142:	bf14      	ite	ne
 8007144:	2301      	movne	r3, #1
 8007146:	2300      	moveq	r3, #0
 8007148:	b2db      	uxtb	r3, r3
 800714a:	e03c      	b.n	80071c6 <HAL_TIM_PWM_Start+0x9e>
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	2b04      	cmp	r3, #4
 8007150:	d109      	bne.n	8007166 <HAL_TIM_PWM_Start+0x3e>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007158:	b2db      	uxtb	r3, r3
 800715a:	2b01      	cmp	r3, #1
 800715c:	bf14      	ite	ne
 800715e:	2301      	movne	r3, #1
 8007160:	2300      	moveq	r3, #0
 8007162:	b2db      	uxtb	r3, r3
 8007164:	e02f      	b.n	80071c6 <HAL_TIM_PWM_Start+0x9e>
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	2b08      	cmp	r3, #8
 800716a:	d109      	bne.n	8007180 <HAL_TIM_PWM_Start+0x58>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007172:	b2db      	uxtb	r3, r3
 8007174:	2b01      	cmp	r3, #1
 8007176:	bf14      	ite	ne
 8007178:	2301      	movne	r3, #1
 800717a:	2300      	moveq	r3, #0
 800717c:	b2db      	uxtb	r3, r3
 800717e:	e022      	b.n	80071c6 <HAL_TIM_PWM_Start+0x9e>
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	2b0c      	cmp	r3, #12
 8007184:	d109      	bne.n	800719a <HAL_TIM_PWM_Start+0x72>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800718c:	b2db      	uxtb	r3, r3
 800718e:	2b01      	cmp	r3, #1
 8007190:	bf14      	ite	ne
 8007192:	2301      	movne	r3, #1
 8007194:	2300      	moveq	r3, #0
 8007196:	b2db      	uxtb	r3, r3
 8007198:	e015      	b.n	80071c6 <HAL_TIM_PWM_Start+0x9e>
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	2b10      	cmp	r3, #16
 800719e:	d109      	bne.n	80071b4 <HAL_TIM_PWM_Start+0x8c>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80071a6:	b2db      	uxtb	r3, r3
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	bf14      	ite	ne
 80071ac:	2301      	movne	r3, #1
 80071ae:	2300      	moveq	r3, #0
 80071b0:	b2db      	uxtb	r3, r3
 80071b2:	e008      	b.n	80071c6 <HAL_TIM_PWM_Start+0x9e>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80071ba:	b2db      	uxtb	r3, r3
 80071bc:	2b01      	cmp	r3, #1
 80071be:	bf14      	ite	ne
 80071c0:	2301      	movne	r3, #1
 80071c2:	2300      	moveq	r3, #0
 80071c4:	b2db      	uxtb	r3, r3
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d001      	beq.n	80071ce <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	e092      	b.n	80072f4 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d104      	bne.n	80071de <HAL_TIM_PWM_Start+0xb6>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2202      	movs	r2, #2
 80071d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071dc:	e023      	b.n	8007226 <HAL_TIM_PWM_Start+0xfe>
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	2b04      	cmp	r3, #4
 80071e2:	d104      	bne.n	80071ee <HAL_TIM_PWM_Start+0xc6>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2202      	movs	r2, #2
 80071e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071ec:	e01b      	b.n	8007226 <HAL_TIM_PWM_Start+0xfe>
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	2b08      	cmp	r3, #8
 80071f2:	d104      	bne.n	80071fe <HAL_TIM_PWM_Start+0xd6>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2202      	movs	r2, #2
 80071f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071fc:	e013      	b.n	8007226 <HAL_TIM_PWM_Start+0xfe>
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	2b0c      	cmp	r3, #12
 8007202:	d104      	bne.n	800720e <HAL_TIM_PWM_Start+0xe6>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2202      	movs	r2, #2
 8007208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800720c:	e00b      	b.n	8007226 <HAL_TIM_PWM_Start+0xfe>
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	2b10      	cmp	r3, #16
 8007212:	d104      	bne.n	800721e <HAL_TIM_PWM_Start+0xf6>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2202      	movs	r2, #2
 8007218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800721c:	e003      	b.n	8007226 <HAL_TIM_PWM_Start+0xfe>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2202      	movs	r2, #2
 8007222:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	2201      	movs	r2, #1
 800722c:	6839      	ldr	r1, [r7, #0]
 800722e:	4618      	mov	r0, r3
 8007230:	f000 ff3c 	bl	80080ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a30      	ldr	r2, [pc, #192]	; (80072fc <HAL_TIM_PWM_Start+0x1d4>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d004      	beq.n	8007248 <HAL_TIM_PWM_Start+0x120>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a2f      	ldr	r2, [pc, #188]	; (8007300 <HAL_TIM_PWM_Start+0x1d8>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d101      	bne.n	800724c <HAL_TIM_PWM_Start+0x124>
 8007248:	2301      	movs	r3, #1
 800724a:	e000      	b.n	800724e <HAL_TIM_PWM_Start+0x126>
 800724c:	2300      	movs	r3, #0
 800724e:	2b00      	cmp	r3, #0
 8007250:	d007      	beq.n	8007262 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007260:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a25      	ldr	r2, [pc, #148]	; (80072fc <HAL_TIM_PWM_Start+0x1d4>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d022      	beq.n	80072b2 <HAL_TIM_PWM_Start+0x18a>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007274:	d01d      	beq.n	80072b2 <HAL_TIM_PWM_Start+0x18a>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a22      	ldr	r2, [pc, #136]	; (8007304 <HAL_TIM_PWM_Start+0x1dc>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d018      	beq.n	80072b2 <HAL_TIM_PWM_Start+0x18a>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a20      	ldr	r2, [pc, #128]	; (8007308 <HAL_TIM_PWM_Start+0x1e0>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d013      	beq.n	80072b2 <HAL_TIM_PWM_Start+0x18a>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a1f      	ldr	r2, [pc, #124]	; (800730c <HAL_TIM_PWM_Start+0x1e4>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d00e      	beq.n	80072b2 <HAL_TIM_PWM_Start+0x18a>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a19      	ldr	r2, [pc, #100]	; (8007300 <HAL_TIM_PWM_Start+0x1d8>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d009      	beq.n	80072b2 <HAL_TIM_PWM_Start+0x18a>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a1b      	ldr	r2, [pc, #108]	; (8007310 <HAL_TIM_PWM_Start+0x1e8>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d004      	beq.n	80072b2 <HAL_TIM_PWM_Start+0x18a>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a19      	ldr	r2, [pc, #100]	; (8007314 <HAL_TIM_PWM_Start+0x1ec>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d115      	bne.n	80072de <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	689a      	ldr	r2, [r3, #8]
 80072b8:	4b17      	ldr	r3, [pc, #92]	; (8007318 <HAL_TIM_PWM_Start+0x1f0>)
 80072ba:	4013      	ands	r3, r2
 80072bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2b06      	cmp	r3, #6
 80072c2:	d015      	beq.n	80072f0 <HAL_TIM_PWM_Start+0x1c8>
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072ca:	d011      	beq.n	80072f0 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	681a      	ldr	r2, [r3, #0]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f042 0201 	orr.w	r2, r2, #1
 80072da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072dc:	e008      	b.n	80072f0 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f042 0201 	orr.w	r2, r2, #1
 80072ec:	601a      	str	r2, [r3, #0]
 80072ee:	e000      	b.n	80072f2 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072f0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80072f2:	2300      	movs	r3, #0
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3710      	adds	r7, #16
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}
 80072fc:	40010000 	.word	0x40010000
 8007300:	40010400 	.word	0x40010400
 8007304:	40000400 	.word	0x40000400
 8007308:	40000800 	.word	0x40000800
 800730c:	40000c00 	.word	0x40000c00
 8007310:	40014000 	.word	0x40014000
 8007314:	40001800 	.word	0x40001800
 8007318:	00010007 	.word	0x00010007

0800731c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b082      	sub	sp, #8
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	691b      	ldr	r3, [r3, #16]
 800732a:	f003 0302 	and.w	r3, r3, #2
 800732e:	2b02      	cmp	r3, #2
 8007330:	d122      	bne.n	8007378 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	68db      	ldr	r3, [r3, #12]
 8007338:	f003 0302 	and.w	r3, r3, #2
 800733c:	2b02      	cmp	r3, #2
 800733e:	d11b      	bne.n	8007378 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f06f 0202 	mvn.w	r2, #2
 8007348:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2201      	movs	r2, #1
 800734e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	699b      	ldr	r3, [r3, #24]
 8007356:	f003 0303 	and.w	r3, r3, #3
 800735a:	2b00      	cmp	r3, #0
 800735c:	d003      	beq.n	8007366 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 faee 	bl	8007940 <HAL_TIM_IC_CaptureCallback>
 8007364:	e005      	b.n	8007372 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 fae0 	bl	800792c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 faf1 	bl	8007954 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2200      	movs	r2, #0
 8007376:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	691b      	ldr	r3, [r3, #16]
 800737e:	f003 0304 	and.w	r3, r3, #4
 8007382:	2b04      	cmp	r3, #4
 8007384:	d122      	bne.n	80073cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	68db      	ldr	r3, [r3, #12]
 800738c:	f003 0304 	and.w	r3, r3, #4
 8007390:	2b04      	cmp	r3, #4
 8007392:	d11b      	bne.n	80073cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f06f 0204 	mvn.w	r2, #4
 800739c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2202      	movs	r2, #2
 80073a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	699b      	ldr	r3, [r3, #24]
 80073aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d003      	beq.n	80073ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 fac4 	bl	8007940 <HAL_TIM_IC_CaptureCallback>
 80073b8:	e005      	b.n	80073c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 fab6 	bl	800792c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f000 fac7 	bl	8007954 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	691b      	ldr	r3, [r3, #16]
 80073d2:	f003 0308 	and.w	r3, r3, #8
 80073d6:	2b08      	cmp	r3, #8
 80073d8:	d122      	bne.n	8007420 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	68db      	ldr	r3, [r3, #12]
 80073e0:	f003 0308 	and.w	r3, r3, #8
 80073e4:	2b08      	cmp	r3, #8
 80073e6:	d11b      	bne.n	8007420 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f06f 0208 	mvn.w	r2, #8
 80073f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2204      	movs	r2, #4
 80073f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	69db      	ldr	r3, [r3, #28]
 80073fe:	f003 0303 	and.w	r3, r3, #3
 8007402:	2b00      	cmp	r3, #0
 8007404:	d003      	beq.n	800740e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f000 fa9a 	bl	8007940 <HAL_TIM_IC_CaptureCallback>
 800740c:	e005      	b.n	800741a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 fa8c 	bl	800792c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f000 fa9d 	bl	8007954 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2200      	movs	r2, #0
 800741e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	691b      	ldr	r3, [r3, #16]
 8007426:	f003 0310 	and.w	r3, r3, #16
 800742a:	2b10      	cmp	r3, #16
 800742c:	d122      	bne.n	8007474 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	68db      	ldr	r3, [r3, #12]
 8007434:	f003 0310 	and.w	r3, r3, #16
 8007438:	2b10      	cmp	r3, #16
 800743a:	d11b      	bne.n	8007474 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f06f 0210 	mvn.w	r2, #16
 8007444:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2208      	movs	r2, #8
 800744a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	69db      	ldr	r3, [r3, #28]
 8007452:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007456:	2b00      	cmp	r3, #0
 8007458:	d003      	beq.n	8007462 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 fa70 	bl	8007940 <HAL_TIM_IC_CaptureCallback>
 8007460:	e005      	b.n	800746e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 fa62 	bl	800792c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f000 fa73 	bl	8007954 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	691b      	ldr	r3, [r3, #16]
 800747a:	f003 0301 	and.w	r3, r3, #1
 800747e:	2b01      	cmp	r3, #1
 8007480:	d10e      	bne.n	80074a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	68db      	ldr	r3, [r3, #12]
 8007488:	f003 0301 	and.w	r3, r3, #1
 800748c:	2b01      	cmp	r3, #1
 800748e:	d107      	bne.n	80074a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f06f 0201 	mvn.w	r2, #1
 8007498:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 fa3c 	bl	8007918 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	691b      	ldr	r3, [r3, #16]
 80074a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074aa:	2b80      	cmp	r3, #128	; 0x80
 80074ac:	d10e      	bne.n	80074cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	68db      	ldr	r3, [r3, #12]
 80074b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074b8:	2b80      	cmp	r3, #128	; 0x80
 80074ba:	d107      	bne.n	80074cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80074c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 feae 	bl	8008228 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	691b      	ldr	r3, [r3, #16]
 80074d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074da:	d10e      	bne.n	80074fa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	68db      	ldr	r3, [r3, #12]
 80074e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074e6:	2b80      	cmp	r3, #128	; 0x80
 80074e8:	d107      	bne.n	80074fa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80074f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f000 fea1 	bl	800823c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	691b      	ldr	r3, [r3, #16]
 8007500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007504:	2b40      	cmp	r3, #64	; 0x40
 8007506:	d10e      	bne.n	8007526 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	68db      	ldr	r3, [r3, #12]
 800750e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007512:	2b40      	cmp	r3, #64	; 0x40
 8007514:	d107      	bne.n	8007526 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800751e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f000 fa21 	bl	8007968 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	691b      	ldr	r3, [r3, #16]
 800752c:	f003 0320 	and.w	r3, r3, #32
 8007530:	2b20      	cmp	r3, #32
 8007532:	d10e      	bne.n	8007552 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	68db      	ldr	r3, [r3, #12]
 800753a:	f003 0320 	and.w	r3, r3, #32
 800753e:	2b20      	cmp	r3, #32
 8007540:	d107      	bne.n	8007552 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f06f 0220 	mvn.w	r2, #32
 800754a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f000 fe61 	bl	8008214 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007552:	bf00      	nop
 8007554:	3708      	adds	r7, #8
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}
	...

0800755c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b086      	sub	sp, #24
 8007560:	af00      	add	r7, sp, #0
 8007562:	60f8      	str	r0, [r7, #12]
 8007564:	60b9      	str	r1, [r7, #8]
 8007566:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007568:	2300      	movs	r3, #0
 800756a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007572:	2b01      	cmp	r3, #1
 8007574:	d101      	bne.n	800757a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007576:	2302      	movs	r3, #2
 8007578:	e0ff      	b.n	800777a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2201      	movs	r2, #1
 800757e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2b14      	cmp	r3, #20
 8007586:	f200 80f0 	bhi.w	800776a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800758a:	a201      	add	r2, pc, #4	; (adr r2, 8007590 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800758c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007590:	080075e5 	.word	0x080075e5
 8007594:	0800776b 	.word	0x0800776b
 8007598:	0800776b 	.word	0x0800776b
 800759c:	0800776b 	.word	0x0800776b
 80075a0:	08007625 	.word	0x08007625
 80075a4:	0800776b 	.word	0x0800776b
 80075a8:	0800776b 	.word	0x0800776b
 80075ac:	0800776b 	.word	0x0800776b
 80075b0:	08007667 	.word	0x08007667
 80075b4:	0800776b 	.word	0x0800776b
 80075b8:	0800776b 	.word	0x0800776b
 80075bc:	0800776b 	.word	0x0800776b
 80075c0:	080076a7 	.word	0x080076a7
 80075c4:	0800776b 	.word	0x0800776b
 80075c8:	0800776b 	.word	0x0800776b
 80075cc:	0800776b 	.word	0x0800776b
 80075d0:	080076e9 	.word	0x080076e9
 80075d4:	0800776b 	.word	0x0800776b
 80075d8:	0800776b 	.word	0x0800776b
 80075dc:	0800776b 	.word	0x0800776b
 80075e0:	08007729 	.word	0x08007729
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	68b9      	ldr	r1, [r7, #8]
 80075ea:	4618      	mov	r0, r3
 80075ec:	f000 fa66 	bl	8007abc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	699a      	ldr	r2, [r3, #24]
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f042 0208 	orr.w	r2, r2, #8
 80075fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	699a      	ldr	r2, [r3, #24]
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f022 0204 	bic.w	r2, r2, #4
 800760e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	6999      	ldr	r1, [r3, #24]
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	691a      	ldr	r2, [r3, #16]
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	430a      	orrs	r2, r1
 8007620:	619a      	str	r2, [r3, #24]
      break;
 8007622:	e0a5      	b.n	8007770 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	68b9      	ldr	r1, [r7, #8]
 800762a:	4618      	mov	r0, r3
 800762c:	f000 fab8 	bl	8007ba0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	699a      	ldr	r2, [r3, #24]
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800763e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	699a      	ldr	r2, [r3, #24]
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800764e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	6999      	ldr	r1, [r3, #24]
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	691b      	ldr	r3, [r3, #16]
 800765a:	021a      	lsls	r2, r3, #8
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	430a      	orrs	r2, r1
 8007662:	619a      	str	r2, [r3, #24]
      break;
 8007664:	e084      	b.n	8007770 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	68b9      	ldr	r1, [r7, #8]
 800766c:	4618      	mov	r0, r3
 800766e:	f000 fb0f 	bl	8007c90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	69da      	ldr	r2, [r3, #28]
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f042 0208 	orr.w	r2, r2, #8
 8007680:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	69da      	ldr	r2, [r3, #28]
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f022 0204 	bic.w	r2, r2, #4
 8007690:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	69d9      	ldr	r1, [r3, #28]
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	691a      	ldr	r2, [r3, #16]
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	430a      	orrs	r2, r1
 80076a2:	61da      	str	r2, [r3, #28]
      break;
 80076a4:	e064      	b.n	8007770 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	68b9      	ldr	r1, [r7, #8]
 80076ac:	4618      	mov	r0, r3
 80076ae:	f000 fb65 	bl	8007d7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	69da      	ldr	r2, [r3, #28]
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	69da      	ldr	r2, [r3, #28]
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	69d9      	ldr	r1, [r3, #28]
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	691b      	ldr	r3, [r3, #16]
 80076dc:	021a      	lsls	r2, r3, #8
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	430a      	orrs	r2, r1
 80076e4:	61da      	str	r2, [r3, #28]
      break;
 80076e6:	e043      	b.n	8007770 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	68b9      	ldr	r1, [r7, #8]
 80076ee:	4618      	mov	r0, r3
 80076f0:	f000 fb9c 	bl	8007e2c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f042 0208 	orr.w	r2, r2, #8
 8007702:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f022 0204 	bic.w	r2, r2, #4
 8007712:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	691a      	ldr	r2, [r3, #16]
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	430a      	orrs	r2, r1
 8007724:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007726:	e023      	b.n	8007770 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	68b9      	ldr	r1, [r7, #8]
 800772e:	4618      	mov	r0, r3
 8007730:	f000 fbce 	bl	8007ed0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007742:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007752:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	691b      	ldr	r3, [r3, #16]
 800775e:	021a      	lsls	r2, r3, #8
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	430a      	orrs	r2, r1
 8007766:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007768:	e002      	b.n	8007770 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	75fb      	strb	r3, [r7, #23]
      break;
 800776e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2200      	movs	r2, #0
 8007774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007778:	7dfb      	ldrb	r3, [r7, #23]
}
 800777a:	4618      	mov	r0, r3
 800777c:	3718      	adds	r7, #24
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
 8007782:	bf00      	nop

08007784 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b084      	sub	sp, #16
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800778e:	2300      	movs	r3, #0
 8007790:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007798:	2b01      	cmp	r3, #1
 800779a:	d101      	bne.n	80077a0 <HAL_TIM_ConfigClockSource+0x1c>
 800779c:	2302      	movs	r3, #2
 800779e:	e0b4      	b.n	800790a <HAL_TIM_ConfigClockSource+0x186>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2201      	movs	r2, #1
 80077a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2202      	movs	r2, #2
 80077ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80077b8:	68ba      	ldr	r2, [r7, #8]
 80077ba:	4b56      	ldr	r3, [pc, #344]	; (8007914 <HAL_TIM_ConfigClockSource+0x190>)
 80077bc:	4013      	ands	r3, r2
 80077be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80077c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	68ba      	ldr	r2, [r7, #8]
 80077ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077d8:	d03e      	beq.n	8007858 <HAL_TIM_ConfigClockSource+0xd4>
 80077da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077de:	f200 8087 	bhi.w	80078f0 <HAL_TIM_ConfigClockSource+0x16c>
 80077e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077e6:	f000 8086 	beq.w	80078f6 <HAL_TIM_ConfigClockSource+0x172>
 80077ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077ee:	d87f      	bhi.n	80078f0 <HAL_TIM_ConfigClockSource+0x16c>
 80077f0:	2b70      	cmp	r3, #112	; 0x70
 80077f2:	d01a      	beq.n	800782a <HAL_TIM_ConfigClockSource+0xa6>
 80077f4:	2b70      	cmp	r3, #112	; 0x70
 80077f6:	d87b      	bhi.n	80078f0 <HAL_TIM_ConfigClockSource+0x16c>
 80077f8:	2b60      	cmp	r3, #96	; 0x60
 80077fa:	d050      	beq.n	800789e <HAL_TIM_ConfigClockSource+0x11a>
 80077fc:	2b60      	cmp	r3, #96	; 0x60
 80077fe:	d877      	bhi.n	80078f0 <HAL_TIM_ConfigClockSource+0x16c>
 8007800:	2b50      	cmp	r3, #80	; 0x50
 8007802:	d03c      	beq.n	800787e <HAL_TIM_ConfigClockSource+0xfa>
 8007804:	2b50      	cmp	r3, #80	; 0x50
 8007806:	d873      	bhi.n	80078f0 <HAL_TIM_ConfigClockSource+0x16c>
 8007808:	2b40      	cmp	r3, #64	; 0x40
 800780a:	d058      	beq.n	80078be <HAL_TIM_ConfigClockSource+0x13a>
 800780c:	2b40      	cmp	r3, #64	; 0x40
 800780e:	d86f      	bhi.n	80078f0 <HAL_TIM_ConfigClockSource+0x16c>
 8007810:	2b30      	cmp	r3, #48	; 0x30
 8007812:	d064      	beq.n	80078de <HAL_TIM_ConfigClockSource+0x15a>
 8007814:	2b30      	cmp	r3, #48	; 0x30
 8007816:	d86b      	bhi.n	80078f0 <HAL_TIM_ConfigClockSource+0x16c>
 8007818:	2b20      	cmp	r3, #32
 800781a:	d060      	beq.n	80078de <HAL_TIM_ConfigClockSource+0x15a>
 800781c:	2b20      	cmp	r3, #32
 800781e:	d867      	bhi.n	80078f0 <HAL_TIM_ConfigClockSource+0x16c>
 8007820:	2b00      	cmp	r3, #0
 8007822:	d05c      	beq.n	80078de <HAL_TIM_ConfigClockSource+0x15a>
 8007824:	2b10      	cmp	r3, #16
 8007826:	d05a      	beq.n	80078de <HAL_TIM_ConfigClockSource+0x15a>
 8007828:	e062      	b.n	80078f0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6818      	ldr	r0, [r3, #0]
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	6899      	ldr	r1, [r3, #8]
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	685a      	ldr	r2, [r3, #4]
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	68db      	ldr	r3, [r3, #12]
 800783a:	f000 fc17 	bl	800806c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800784c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	68ba      	ldr	r2, [r7, #8]
 8007854:	609a      	str	r2, [r3, #8]
      break;
 8007856:	e04f      	b.n	80078f8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6818      	ldr	r0, [r3, #0]
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	6899      	ldr	r1, [r3, #8]
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	685a      	ldr	r2, [r3, #4]
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	68db      	ldr	r3, [r3, #12]
 8007868:	f000 fc00 	bl	800806c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	689a      	ldr	r2, [r3, #8]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800787a:	609a      	str	r2, [r3, #8]
      break;
 800787c:	e03c      	b.n	80078f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6818      	ldr	r0, [r3, #0]
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	6859      	ldr	r1, [r3, #4]
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	68db      	ldr	r3, [r3, #12]
 800788a:	461a      	mov	r2, r3
 800788c:	f000 fb74 	bl	8007f78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	2150      	movs	r1, #80	; 0x50
 8007896:	4618      	mov	r0, r3
 8007898:	f000 fbcd 	bl	8008036 <TIM_ITRx_SetConfig>
      break;
 800789c:	e02c      	b.n	80078f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6818      	ldr	r0, [r3, #0]
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	6859      	ldr	r1, [r3, #4]
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	68db      	ldr	r3, [r3, #12]
 80078aa:	461a      	mov	r2, r3
 80078ac:	f000 fb93 	bl	8007fd6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	2160      	movs	r1, #96	; 0x60
 80078b6:	4618      	mov	r0, r3
 80078b8:	f000 fbbd 	bl	8008036 <TIM_ITRx_SetConfig>
      break;
 80078bc:	e01c      	b.n	80078f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6818      	ldr	r0, [r3, #0]
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	6859      	ldr	r1, [r3, #4]
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	68db      	ldr	r3, [r3, #12]
 80078ca:	461a      	mov	r2, r3
 80078cc:	f000 fb54 	bl	8007f78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	2140      	movs	r1, #64	; 0x40
 80078d6:	4618      	mov	r0, r3
 80078d8:	f000 fbad 	bl	8008036 <TIM_ITRx_SetConfig>
      break;
 80078dc:	e00c      	b.n	80078f8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681a      	ldr	r2, [r3, #0]
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4619      	mov	r1, r3
 80078e8:	4610      	mov	r0, r2
 80078ea:	f000 fba4 	bl	8008036 <TIM_ITRx_SetConfig>
      break;
 80078ee:	e003      	b.n	80078f8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80078f0:	2301      	movs	r3, #1
 80078f2:	73fb      	strb	r3, [r7, #15]
      break;
 80078f4:	e000      	b.n	80078f8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80078f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2201      	movs	r2, #1
 80078fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2200      	movs	r2, #0
 8007904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007908:	7bfb      	ldrb	r3, [r7, #15]
}
 800790a:	4618      	mov	r0, r3
 800790c:	3710      	adds	r7, #16
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}
 8007912:	bf00      	nop
 8007914:	fffeff88 	.word	0xfffeff88

08007918 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007918:	b480      	push	{r7}
 800791a:	b083      	sub	sp, #12
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007920:	bf00      	nop
 8007922:	370c      	adds	r7, #12
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr

0800792c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800792c:	b480      	push	{r7}
 800792e:	b083      	sub	sp, #12
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007934:	bf00      	nop
 8007936:	370c      	adds	r7, #12
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr

08007940 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007940:	b480      	push	{r7}
 8007942:	b083      	sub	sp, #12
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007948:	bf00      	nop
 800794a:	370c      	adds	r7, #12
 800794c:	46bd      	mov	sp, r7
 800794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007952:	4770      	bx	lr

08007954 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007954:	b480      	push	{r7}
 8007956:	b083      	sub	sp, #12
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800795c:	bf00      	nop
 800795e:	370c      	adds	r7, #12
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr

08007968 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007968:	b480      	push	{r7}
 800796a:	b083      	sub	sp, #12
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007970:	bf00      	nop
 8007972:	370c      	adds	r7, #12
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr

0800797c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800797c:	b480      	push	{r7}
 800797e:	b085      	sub	sp, #20
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	4a40      	ldr	r2, [pc, #256]	; (8007a90 <TIM_Base_SetConfig+0x114>)
 8007990:	4293      	cmp	r3, r2
 8007992:	d013      	beq.n	80079bc <TIM_Base_SetConfig+0x40>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800799a:	d00f      	beq.n	80079bc <TIM_Base_SetConfig+0x40>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	4a3d      	ldr	r2, [pc, #244]	; (8007a94 <TIM_Base_SetConfig+0x118>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d00b      	beq.n	80079bc <TIM_Base_SetConfig+0x40>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	4a3c      	ldr	r2, [pc, #240]	; (8007a98 <TIM_Base_SetConfig+0x11c>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d007      	beq.n	80079bc <TIM_Base_SetConfig+0x40>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	4a3b      	ldr	r2, [pc, #236]	; (8007a9c <TIM_Base_SetConfig+0x120>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d003      	beq.n	80079bc <TIM_Base_SetConfig+0x40>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	4a3a      	ldr	r2, [pc, #232]	; (8007aa0 <TIM_Base_SetConfig+0x124>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d108      	bne.n	80079ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	685b      	ldr	r3, [r3, #4]
 80079c8:	68fa      	ldr	r2, [r7, #12]
 80079ca:	4313      	orrs	r3, r2
 80079cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	4a2f      	ldr	r2, [pc, #188]	; (8007a90 <TIM_Base_SetConfig+0x114>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d02b      	beq.n	8007a2e <TIM_Base_SetConfig+0xb2>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079dc:	d027      	beq.n	8007a2e <TIM_Base_SetConfig+0xb2>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	4a2c      	ldr	r2, [pc, #176]	; (8007a94 <TIM_Base_SetConfig+0x118>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d023      	beq.n	8007a2e <TIM_Base_SetConfig+0xb2>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	4a2b      	ldr	r2, [pc, #172]	; (8007a98 <TIM_Base_SetConfig+0x11c>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d01f      	beq.n	8007a2e <TIM_Base_SetConfig+0xb2>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4a2a      	ldr	r2, [pc, #168]	; (8007a9c <TIM_Base_SetConfig+0x120>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d01b      	beq.n	8007a2e <TIM_Base_SetConfig+0xb2>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	4a29      	ldr	r2, [pc, #164]	; (8007aa0 <TIM_Base_SetConfig+0x124>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d017      	beq.n	8007a2e <TIM_Base_SetConfig+0xb2>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	4a28      	ldr	r2, [pc, #160]	; (8007aa4 <TIM_Base_SetConfig+0x128>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d013      	beq.n	8007a2e <TIM_Base_SetConfig+0xb2>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	4a27      	ldr	r2, [pc, #156]	; (8007aa8 <TIM_Base_SetConfig+0x12c>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d00f      	beq.n	8007a2e <TIM_Base_SetConfig+0xb2>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	4a26      	ldr	r2, [pc, #152]	; (8007aac <TIM_Base_SetConfig+0x130>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d00b      	beq.n	8007a2e <TIM_Base_SetConfig+0xb2>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	4a25      	ldr	r2, [pc, #148]	; (8007ab0 <TIM_Base_SetConfig+0x134>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d007      	beq.n	8007a2e <TIM_Base_SetConfig+0xb2>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	4a24      	ldr	r2, [pc, #144]	; (8007ab4 <TIM_Base_SetConfig+0x138>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d003      	beq.n	8007a2e <TIM_Base_SetConfig+0xb2>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	4a23      	ldr	r2, [pc, #140]	; (8007ab8 <TIM_Base_SetConfig+0x13c>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d108      	bne.n	8007a40 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	68db      	ldr	r3, [r3, #12]
 8007a3a:	68fa      	ldr	r2, [r7, #12]
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	695b      	ldr	r3, [r3, #20]
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	68fa      	ldr	r2, [r7, #12]
 8007a52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	689a      	ldr	r2, [r3, #8]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	681a      	ldr	r2, [r3, #0]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	4a0a      	ldr	r2, [pc, #40]	; (8007a90 <TIM_Base_SetConfig+0x114>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d003      	beq.n	8007a74 <TIM_Base_SetConfig+0xf8>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	4a0c      	ldr	r2, [pc, #48]	; (8007aa0 <TIM_Base_SetConfig+0x124>)
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d103      	bne.n	8007a7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	691a      	ldr	r2, [r3, #16]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	615a      	str	r2, [r3, #20]
}
 8007a82:	bf00      	nop
 8007a84:	3714      	adds	r7, #20
 8007a86:	46bd      	mov	sp, r7
 8007a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8c:	4770      	bx	lr
 8007a8e:	bf00      	nop
 8007a90:	40010000 	.word	0x40010000
 8007a94:	40000400 	.word	0x40000400
 8007a98:	40000800 	.word	0x40000800
 8007a9c:	40000c00 	.word	0x40000c00
 8007aa0:	40010400 	.word	0x40010400
 8007aa4:	40014000 	.word	0x40014000
 8007aa8:	40014400 	.word	0x40014400
 8007aac:	40014800 	.word	0x40014800
 8007ab0:	40001800 	.word	0x40001800
 8007ab4:	40001c00 	.word	0x40001c00
 8007ab8:	40002000 	.word	0x40002000

08007abc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b087      	sub	sp, #28
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6a1b      	ldr	r3, [r3, #32]
 8007aca:	f023 0201 	bic.w	r2, r3, #1
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6a1b      	ldr	r3, [r3, #32]
 8007ad6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	699b      	ldr	r3, [r3, #24]
 8007ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007ae4:	68fa      	ldr	r2, [r7, #12]
 8007ae6:	4b2b      	ldr	r3, [pc, #172]	; (8007b94 <TIM_OC1_SetConfig+0xd8>)
 8007ae8:	4013      	ands	r3, r2
 8007aea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f023 0303 	bic.w	r3, r3, #3
 8007af2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	68fa      	ldr	r2, [r7, #12]
 8007afa:	4313      	orrs	r3, r2
 8007afc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	f023 0302 	bic.w	r3, r3, #2
 8007b04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	689b      	ldr	r3, [r3, #8]
 8007b0a:	697a      	ldr	r2, [r7, #20]
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	4a21      	ldr	r2, [pc, #132]	; (8007b98 <TIM_OC1_SetConfig+0xdc>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d003      	beq.n	8007b20 <TIM_OC1_SetConfig+0x64>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	4a20      	ldr	r2, [pc, #128]	; (8007b9c <TIM_OC1_SetConfig+0xe0>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d10c      	bne.n	8007b3a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	f023 0308 	bic.w	r3, r3, #8
 8007b26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	68db      	ldr	r3, [r3, #12]
 8007b2c:	697a      	ldr	r2, [r7, #20]
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	f023 0304 	bic.w	r3, r3, #4
 8007b38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	4a16      	ldr	r2, [pc, #88]	; (8007b98 <TIM_OC1_SetConfig+0xdc>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d003      	beq.n	8007b4a <TIM_OC1_SetConfig+0x8e>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	4a15      	ldr	r2, [pc, #84]	; (8007b9c <TIM_OC1_SetConfig+0xe0>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d111      	bne.n	8007b6e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	695b      	ldr	r3, [r3, #20]
 8007b5e:	693a      	ldr	r2, [r7, #16]
 8007b60:	4313      	orrs	r3, r2
 8007b62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	699b      	ldr	r3, [r3, #24]
 8007b68:	693a      	ldr	r2, [r7, #16]
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	693a      	ldr	r2, [r7, #16]
 8007b72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	68fa      	ldr	r2, [r7, #12]
 8007b78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	685a      	ldr	r2, [r3, #4]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	697a      	ldr	r2, [r7, #20]
 8007b86:	621a      	str	r2, [r3, #32]
}
 8007b88:	bf00      	nop
 8007b8a:	371c      	adds	r7, #28
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr
 8007b94:	fffeff8f 	.word	0xfffeff8f
 8007b98:	40010000 	.word	0x40010000
 8007b9c:	40010400 	.word	0x40010400

08007ba0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b087      	sub	sp, #28
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6a1b      	ldr	r3, [r3, #32]
 8007bae:	f023 0210 	bic.w	r2, r3, #16
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6a1b      	ldr	r3, [r3, #32]
 8007bba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	699b      	ldr	r3, [r3, #24]
 8007bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007bc8:	68fa      	ldr	r2, [r7, #12]
 8007bca:	4b2e      	ldr	r3, [pc, #184]	; (8007c84 <TIM_OC2_SetConfig+0xe4>)
 8007bcc:	4013      	ands	r3, r2
 8007bce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	021b      	lsls	r3, r3, #8
 8007bde:	68fa      	ldr	r2, [r7, #12]
 8007be0:	4313      	orrs	r3, r2
 8007be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	f023 0320 	bic.w	r3, r3, #32
 8007bea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	011b      	lsls	r3, r3, #4
 8007bf2:	697a      	ldr	r2, [r7, #20]
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	4a23      	ldr	r2, [pc, #140]	; (8007c88 <TIM_OC2_SetConfig+0xe8>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d003      	beq.n	8007c08 <TIM_OC2_SetConfig+0x68>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	4a22      	ldr	r2, [pc, #136]	; (8007c8c <TIM_OC2_SetConfig+0xec>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d10d      	bne.n	8007c24 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007c08:	697b      	ldr	r3, [r7, #20]
 8007c0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	68db      	ldr	r3, [r3, #12]
 8007c14:	011b      	lsls	r3, r3, #4
 8007c16:	697a      	ldr	r2, [r7, #20]
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c22:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	4a18      	ldr	r2, [pc, #96]	; (8007c88 <TIM_OC2_SetConfig+0xe8>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d003      	beq.n	8007c34 <TIM_OC2_SetConfig+0x94>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	4a17      	ldr	r2, [pc, #92]	; (8007c8c <TIM_OC2_SetConfig+0xec>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d113      	bne.n	8007c5c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	695b      	ldr	r3, [r3, #20]
 8007c48:	009b      	lsls	r3, r3, #2
 8007c4a:	693a      	ldr	r2, [r7, #16]
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	699b      	ldr	r3, [r3, #24]
 8007c54:	009b      	lsls	r3, r3, #2
 8007c56:	693a      	ldr	r2, [r7, #16]
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	693a      	ldr	r2, [r7, #16]
 8007c60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	68fa      	ldr	r2, [r7, #12]
 8007c66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	685a      	ldr	r2, [r3, #4]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	697a      	ldr	r2, [r7, #20]
 8007c74:	621a      	str	r2, [r3, #32]
}
 8007c76:	bf00      	nop
 8007c78:	371c      	adds	r7, #28
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c80:	4770      	bx	lr
 8007c82:	bf00      	nop
 8007c84:	feff8fff 	.word	0xfeff8fff
 8007c88:	40010000 	.word	0x40010000
 8007c8c:	40010400 	.word	0x40010400

08007c90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b087      	sub	sp, #28
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6a1b      	ldr	r3, [r3, #32]
 8007c9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6a1b      	ldr	r3, [r3, #32]
 8007caa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	69db      	ldr	r3, [r3, #28]
 8007cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007cb8:	68fa      	ldr	r2, [r7, #12]
 8007cba:	4b2d      	ldr	r3, [pc, #180]	; (8007d70 <TIM_OC3_SetConfig+0xe0>)
 8007cbc:	4013      	ands	r3, r2
 8007cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f023 0303 	bic.w	r3, r3, #3
 8007cc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	68fa      	ldr	r2, [r7, #12]
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007cd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	689b      	ldr	r3, [r3, #8]
 8007cde:	021b      	lsls	r3, r3, #8
 8007ce0:	697a      	ldr	r2, [r7, #20]
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	4a22      	ldr	r2, [pc, #136]	; (8007d74 <TIM_OC3_SetConfig+0xe4>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d003      	beq.n	8007cf6 <TIM_OC3_SetConfig+0x66>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	4a21      	ldr	r2, [pc, #132]	; (8007d78 <TIM_OC3_SetConfig+0xe8>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d10d      	bne.n	8007d12 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007cfc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	68db      	ldr	r3, [r3, #12]
 8007d02:	021b      	lsls	r3, r3, #8
 8007d04:	697a      	ldr	r2, [r7, #20]
 8007d06:	4313      	orrs	r3, r2
 8007d08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	4a17      	ldr	r2, [pc, #92]	; (8007d74 <TIM_OC3_SetConfig+0xe4>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d003      	beq.n	8007d22 <TIM_OC3_SetConfig+0x92>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	4a16      	ldr	r2, [pc, #88]	; (8007d78 <TIM_OC3_SetConfig+0xe8>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d113      	bne.n	8007d4a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	695b      	ldr	r3, [r3, #20]
 8007d36:	011b      	lsls	r3, r3, #4
 8007d38:	693a      	ldr	r2, [r7, #16]
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	699b      	ldr	r3, [r3, #24]
 8007d42:	011b      	lsls	r3, r3, #4
 8007d44:	693a      	ldr	r2, [r7, #16]
 8007d46:	4313      	orrs	r3, r2
 8007d48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	693a      	ldr	r2, [r7, #16]
 8007d4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	68fa      	ldr	r2, [r7, #12]
 8007d54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	685a      	ldr	r2, [r3, #4]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	697a      	ldr	r2, [r7, #20]
 8007d62:	621a      	str	r2, [r3, #32]
}
 8007d64:	bf00      	nop
 8007d66:	371c      	adds	r7, #28
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr
 8007d70:	fffeff8f 	.word	0xfffeff8f
 8007d74:	40010000 	.word	0x40010000
 8007d78:	40010400 	.word	0x40010400

08007d7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b087      	sub	sp, #28
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6a1b      	ldr	r3, [r3, #32]
 8007d8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6a1b      	ldr	r3, [r3, #32]
 8007d96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	685b      	ldr	r3, [r3, #4]
 8007d9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	69db      	ldr	r3, [r3, #28]
 8007da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007da4:	68fa      	ldr	r2, [r7, #12]
 8007da6:	4b1e      	ldr	r3, [pc, #120]	; (8007e20 <TIM_OC4_SetConfig+0xa4>)
 8007da8:	4013      	ands	r3, r2
 8007daa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007db2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	021b      	lsls	r3, r3, #8
 8007dba:	68fa      	ldr	r2, [r7, #12]
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007dc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	689b      	ldr	r3, [r3, #8]
 8007dcc:	031b      	lsls	r3, r3, #12
 8007dce:	693a      	ldr	r2, [r7, #16]
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	4a13      	ldr	r2, [pc, #76]	; (8007e24 <TIM_OC4_SetConfig+0xa8>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d003      	beq.n	8007de4 <TIM_OC4_SetConfig+0x68>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	4a12      	ldr	r2, [pc, #72]	; (8007e28 <TIM_OC4_SetConfig+0xac>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d109      	bne.n	8007df8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007dea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	695b      	ldr	r3, [r3, #20]
 8007df0:	019b      	lsls	r3, r3, #6
 8007df2:	697a      	ldr	r2, [r7, #20]
 8007df4:	4313      	orrs	r3, r2
 8007df6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	697a      	ldr	r2, [r7, #20]
 8007dfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	68fa      	ldr	r2, [r7, #12]
 8007e02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	685a      	ldr	r2, [r3, #4]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	693a      	ldr	r2, [r7, #16]
 8007e10:	621a      	str	r2, [r3, #32]
}
 8007e12:	bf00      	nop
 8007e14:	371c      	adds	r7, #28
 8007e16:	46bd      	mov	sp, r7
 8007e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1c:	4770      	bx	lr
 8007e1e:	bf00      	nop
 8007e20:	feff8fff 	.word	0xfeff8fff
 8007e24:	40010000 	.word	0x40010000
 8007e28:	40010400 	.word	0x40010400

08007e2c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b087      	sub	sp, #28
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
 8007e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6a1b      	ldr	r3, [r3, #32]
 8007e3a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6a1b      	ldr	r3, [r3, #32]
 8007e46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007e54:	68fa      	ldr	r2, [r7, #12]
 8007e56:	4b1b      	ldr	r3, [pc, #108]	; (8007ec4 <TIM_OC5_SetConfig+0x98>)
 8007e58:	4013      	ands	r3, r2
 8007e5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	68fa      	ldr	r2, [r7, #12]
 8007e62:	4313      	orrs	r3, r2
 8007e64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007e6c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	689b      	ldr	r3, [r3, #8]
 8007e72:	041b      	lsls	r3, r3, #16
 8007e74:	693a      	ldr	r2, [r7, #16]
 8007e76:	4313      	orrs	r3, r2
 8007e78:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	4a12      	ldr	r2, [pc, #72]	; (8007ec8 <TIM_OC5_SetConfig+0x9c>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d003      	beq.n	8007e8a <TIM_OC5_SetConfig+0x5e>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	4a11      	ldr	r2, [pc, #68]	; (8007ecc <TIM_OC5_SetConfig+0xa0>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d109      	bne.n	8007e9e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e90:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	695b      	ldr	r3, [r3, #20]
 8007e96:	021b      	lsls	r3, r3, #8
 8007e98:	697a      	ldr	r2, [r7, #20]
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	697a      	ldr	r2, [r7, #20]
 8007ea2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	68fa      	ldr	r2, [r7, #12]
 8007ea8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	685a      	ldr	r2, [r3, #4]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	693a      	ldr	r2, [r7, #16]
 8007eb6:	621a      	str	r2, [r3, #32]
}
 8007eb8:	bf00      	nop
 8007eba:	371c      	adds	r7, #28
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec2:	4770      	bx	lr
 8007ec4:	fffeff8f 	.word	0xfffeff8f
 8007ec8:	40010000 	.word	0x40010000
 8007ecc:	40010400 	.word	0x40010400

08007ed0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b087      	sub	sp, #28
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6a1b      	ldr	r3, [r3, #32]
 8007ede:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6a1b      	ldr	r3, [r3, #32]
 8007eea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007ef8:	68fa      	ldr	r2, [r7, #12]
 8007efa:	4b1c      	ldr	r3, [pc, #112]	; (8007f6c <TIM_OC6_SetConfig+0x9c>)
 8007efc:	4013      	ands	r3, r2
 8007efe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	021b      	lsls	r3, r3, #8
 8007f06:	68fa      	ldr	r2, [r7, #12]
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007f12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	051b      	lsls	r3, r3, #20
 8007f1a:	693a      	ldr	r2, [r7, #16]
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	4a13      	ldr	r2, [pc, #76]	; (8007f70 <TIM_OC6_SetConfig+0xa0>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d003      	beq.n	8007f30 <TIM_OC6_SetConfig+0x60>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	4a12      	ldr	r2, [pc, #72]	; (8007f74 <TIM_OC6_SetConfig+0xa4>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d109      	bne.n	8007f44 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f36:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	695b      	ldr	r3, [r3, #20]
 8007f3c:	029b      	lsls	r3, r3, #10
 8007f3e:	697a      	ldr	r2, [r7, #20]
 8007f40:	4313      	orrs	r3, r2
 8007f42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	697a      	ldr	r2, [r7, #20]
 8007f48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	68fa      	ldr	r2, [r7, #12]
 8007f4e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	685a      	ldr	r2, [r3, #4]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	693a      	ldr	r2, [r7, #16]
 8007f5c:	621a      	str	r2, [r3, #32]
}
 8007f5e:	bf00      	nop
 8007f60:	371c      	adds	r7, #28
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr
 8007f6a:	bf00      	nop
 8007f6c:	feff8fff 	.word	0xfeff8fff
 8007f70:	40010000 	.word	0x40010000
 8007f74:	40010400 	.word	0x40010400

08007f78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b087      	sub	sp, #28
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	60f8      	str	r0, [r7, #12]
 8007f80:	60b9      	str	r1, [r7, #8]
 8007f82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	6a1b      	ldr	r3, [r3, #32]
 8007f88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	6a1b      	ldr	r3, [r3, #32]
 8007f8e:	f023 0201 	bic.w	r2, r3, #1
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	699b      	ldr	r3, [r3, #24]
 8007f9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f9c:	693b      	ldr	r3, [r7, #16]
 8007f9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007fa2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	011b      	lsls	r3, r3, #4
 8007fa8:	693a      	ldr	r2, [r7, #16]
 8007faa:	4313      	orrs	r3, r2
 8007fac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	f023 030a 	bic.w	r3, r3, #10
 8007fb4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007fb6:	697a      	ldr	r2, [r7, #20]
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	693a      	ldr	r2, [r7, #16]
 8007fc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	697a      	ldr	r2, [r7, #20]
 8007fc8:	621a      	str	r2, [r3, #32]
}
 8007fca:	bf00      	nop
 8007fcc:	371c      	adds	r7, #28
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd4:	4770      	bx	lr

08007fd6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007fd6:	b480      	push	{r7}
 8007fd8:	b087      	sub	sp, #28
 8007fda:	af00      	add	r7, sp, #0
 8007fdc:	60f8      	str	r0, [r7, #12]
 8007fde:	60b9      	str	r1, [r7, #8]
 8007fe0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	6a1b      	ldr	r3, [r3, #32]
 8007fe6:	f023 0210 	bic.w	r2, r3, #16
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	699b      	ldr	r3, [r3, #24]
 8007ff2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	6a1b      	ldr	r3, [r3, #32]
 8007ff8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008000:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	031b      	lsls	r3, r3, #12
 8008006:	697a      	ldr	r2, [r7, #20]
 8008008:	4313      	orrs	r3, r2
 800800a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008012:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	011b      	lsls	r3, r3, #4
 8008018:	693a      	ldr	r2, [r7, #16]
 800801a:	4313      	orrs	r3, r2
 800801c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	697a      	ldr	r2, [r7, #20]
 8008022:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	693a      	ldr	r2, [r7, #16]
 8008028:	621a      	str	r2, [r3, #32]
}
 800802a:	bf00      	nop
 800802c:	371c      	adds	r7, #28
 800802e:	46bd      	mov	sp, r7
 8008030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008034:	4770      	bx	lr

08008036 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008036:	b480      	push	{r7}
 8008038:	b085      	sub	sp, #20
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
 800803e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	689b      	ldr	r3, [r3, #8]
 8008044:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800804c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800804e:	683a      	ldr	r2, [r7, #0]
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	4313      	orrs	r3, r2
 8008054:	f043 0307 	orr.w	r3, r3, #7
 8008058:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	68fa      	ldr	r2, [r7, #12]
 800805e:	609a      	str	r2, [r3, #8]
}
 8008060:	bf00      	nop
 8008062:	3714      	adds	r7, #20
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr

0800806c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800806c:	b480      	push	{r7}
 800806e:	b087      	sub	sp, #28
 8008070:	af00      	add	r7, sp, #0
 8008072:	60f8      	str	r0, [r7, #12]
 8008074:	60b9      	str	r1, [r7, #8]
 8008076:	607a      	str	r2, [r7, #4]
 8008078:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	689b      	ldr	r3, [r3, #8]
 800807e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008086:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	021a      	lsls	r2, r3, #8
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	431a      	orrs	r2, r3
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	4313      	orrs	r3, r2
 8008094:	697a      	ldr	r2, [r7, #20]
 8008096:	4313      	orrs	r3, r2
 8008098:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	697a      	ldr	r2, [r7, #20]
 800809e:	609a      	str	r2, [r3, #8]
}
 80080a0:	bf00      	nop
 80080a2:	371c      	adds	r7, #28
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr

080080ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b087      	sub	sp, #28
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	60f8      	str	r0, [r7, #12]
 80080b4:	60b9      	str	r1, [r7, #8]
 80080b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	f003 031f 	and.w	r3, r3, #31
 80080be:	2201      	movs	r2, #1
 80080c0:	fa02 f303 	lsl.w	r3, r2, r3
 80080c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	6a1a      	ldr	r2, [r3, #32]
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	43db      	mvns	r3, r3
 80080ce:	401a      	ands	r2, r3
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	6a1a      	ldr	r2, [r3, #32]
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	f003 031f 	and.w	r3, r3, #31
 80080de:	6879      	ldr	r1, [r7, #4]
 80080e0:	fa01 f303 	lsl.w	r3, r1, r3
 80080e4:	431a      	orrs	r2, r3
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	621a      	str	r2, [r3, #32]
}
 80080ea:	bf00      	nop
 80080ec:	371c      	adds	r7, #28
 80080ee:	46bd      	mov	sp, r7
 80080f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f4:	4770      	bx	lr
	...

080080f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80080f8:	b480      	push	{r7}
 80080fa:	b085      	sub	sp, #20
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
 8008100:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008108:	2b01      	cmp	r3, #1
 800810a:	d101      	bne.n	8008110 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800810c:	2302      	movs	r3, #2
 800810e:	e06d      	b.n	80081ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2201      	movs	r2, #1
 8008114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2202      	movs	r2, #2
 800811c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	689b      	ldr	r3, [r3, #8]
 800812e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a30      	ldr	r2, [pc, #192]	; (80081f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d004      	beq.n	8008144 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4a2f      	ldr	r2, [pc, #188]	; (80081fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d108      	bne.n	8008156 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800814a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	68fa      	ldr	r2, [r7, #12]
 8008152:	4313      	orrs	r3, r2
 8008154:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800815c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	68fa      	ldr	r2, [r7, #12]
 8008164:	4313      	orrs	r3, r2
 8008166:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	68fa      	ldr	r2, [r7, #12]
 800816e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a20      	ldr	r2, [pc, #128]	; (80081f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d022      	beq.n	80081c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008182:	d01d      	beq.n	80081c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a1d      	ldr	r2, [pc, #116]	; (8008200 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d018      	beq.n	80081c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a1c      	ldr	r2, [pc, #112]	; (8008204 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d013      	beq.n	80081c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a1a      	ldr	r2, [pc, #104]	; (8008208 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d00e      	beq.n	80081c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a15      	ldr	r2, [pc, #84]	; (80081fc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d009      	beq.n	80081c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a16      	ldr	r2, [pc, #88]	; (800820c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d004      	beq.n	80081c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4a15      	ldr	r2, [pc, #84]	; (8008210 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d10c      	bne.n	80081da <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081c6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	68ba      	ldr	r2, [r7, #8]
 80081ce:	4313      	orrs	r3, r2
 80081d0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	68ba      	ldr	r2, [r7, #8]
 80081d8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2201      	movs	r2, #1
 80081de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2200      	movs	r2, #0
 80081e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80081ea:	2300      	movs	r3, #0
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3714      	adds	r7, #20
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr
 80081f8:	40010000 	.word	0x40010000
 80081fc:	40010400 	.word	0x40010400
 8008200:	40000400 	.word	0x40000400
 8008204:	40000800 	.word	0x40000800
 8008208:	40000c00 	.word	0x40000c00
 800820c:	40014000 	.word	0x40014000
 8008210:	40001800 	.word	0x40001800

08008214 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008214:	b480      	push	{r7}
 8008216:	b083      	sub	sp, #12
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800821c:	bf00      	nop
 800821e:	370c      	adds	r7, #12
 8008220:	46bd      	mov	sp, r7
 8008222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008226:	4770      	bx	lr

08008228 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008228:	b480      	push	{r7}
 800822a:	b083      	sub	sp, #12
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008230:	bf00      	nop
 8008232:	370c      	adds	r7, #12
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr

0800823c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800823c:	b480      	push	{r7}
 800823e:	b083      	sub	sp, #12
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008244:	bf00      	nop
 8008246:	370c      	adds	r7, #12
 8008248:	46bd      	mov	sp, r7
 800824a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824e:	4770      	bx	lr

08008250 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b082      	sub	sp, #8
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d101      	bne.n	8008262 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800825e:	2301      	movs	r3, #1
 8008260:	e040      	b.n	80082e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008266:	2b00      	cmp	r3, #0
 8008268:	d106      	bne.n	8008278 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2200      	movs	r2, #0
 800826e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f7fb fae2 	bl	800383c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2224      	movs	r2, #36	; 0x24
 800827c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	681a      	ldr	r2, [r3, #0]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f022 0201 	bic.w	r2, r2, #1
 800828c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 f8c0 	bl	8008414 <UART_SetConfig>
 8008294:	4603      	mov	r3, r0
 8008296:	2b01      	cmp	r3, #1
 8008298:	d101      	bne.n	800829e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800829a:	2301      	movs	r3, #1
 800829c:	e022      	b.n	80082e4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d002      	beq.n	80082ac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f000 fb18 	bl	80088dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	685a      	ldr	r2, [r3, #4]
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80082ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	689a      	ldr	r2, [r3, #8]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80082ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	681a      	ldr	r2, [r3, #0]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f042 0201 	orr.w	r2, r2, #1
 80082da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f000 fb9f 	bl	8008a20 <UART_CheckIdleState>
 80082e2:	4603      	mov	r3, r0
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3708      	adds	r7, #8
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b08a      	sub	sp, #40	; 0x28
 80082f0:	af02      	add	r7, sp, #8
 80082f2:	60f8      	str	r0, [r7, #12]
 80082f4:	60b9      	str	r1, [r7, #8]
 80082f6:	603b      	str	r3, [r7, #0]
 80082f8:	4613      	mov	r3, r2
 80082fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008300:	2b20      	cmp	r3, #32
 8008302:	f040 8081 	bne.w	8008408 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008306:	68bb      	ldr	r3, [r7, #8]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d002      	beq.n	8008312 <HAL_UART_Transmit+0x26>
 800830c:	88fb      	ldrh	r3, [r7, #6]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d101      	bne.n	8008316 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008312:	2301      	movs	r3, #1
 8008314:	e079      	b.n	800840a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800831c:	2b01      	cmp	r3, #1
 800831e:	d101      	bne.n	8008324 <HAL_UART_Transmit+0x38>
 8008320:	2302      	movs	r3, #2
 8008322:	e072      	b.n	800840a <HAL_UART_Transmit+0x11e>
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2201      	movs	r2, #1
 8008328:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2200      	movs	r2, #0
 8008330:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	2221      	movs	r2, #33	; 0x21
 8008338:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800833a:	f7fb fddd 	bl	8003ef8 <HAL_GetTick>
 800833e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	88fa      	ldrh	r2, [r7, #6]
 8008344:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	88fa      	ldrh	r2, [r7, #6]
 800834c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	689b      	ldr	r3, [r3, #8]
 8008354:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008358:	d108      	bne.n	800836c <HAL_UART_Transmit+0x80>
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	691b      	ldr	r3, [r3, #16]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d104      	bne.n	800836c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8008362:	2300      	movs	r3, #0
 8008364:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	61bb      	str	r3, [r7, #24]
 800836a:	e003      	b.n	8008374 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008370:	2300      	movs	r3, #0
 8008372:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2200      	movs	r2, #0
 8008378:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800837c:	e02c      	b.n	80083d8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	9300      	str	r3, [sp, #0]
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	2200      	movs	r2, #0
 8008386:	2180      	movs	r1, #128	; 0x80
 8008388:	68f8      	ldr	r0, [r7, #12]
 800838a:	f000 fb7c 	bl	8008a86 <UART_WaitOnFlagUntilTimeout>
 800838e:	4603      	mov	r3, r0
 8008390:	2b00      	cmp	r3, #0
 8008392:	d001      	beq.n	8008398 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8008394:	2303      	movs	r3, #3
 8008396:	e038      	b.n	800840a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8008398:	69fb      	ldr	r3, [r7, #28]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d10b      	bne.n	80083b6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800839e:	69bb      	ldr	r3, [r7, #24]
 80083a0:	881b      	ldrh	r3, [r3, #0]
 80083a2:	461a      	mov	r2, r3
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80083ac:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80083ae:	69bb      	ldr	r3, [r7, #24]
 80083b0:	3302      	adds	r3, #2
 80083b2:	61bb      	str	r3, [r7, #24]
 80083b4:	e007      	b.n	80083c6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80083b6:	69fb      	ldr	r3, [r7, #28]
 80083b8:	781a      	ldrb	r2, [r3, #0]
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80083c0:	69fb      	ldr	r3, [r7, #28]
 80083c2:	3301      	adds	r3, #1
 80083c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80083cc:	b29b      	uxth	r3, r3
 80083ce:	3b01      	subs	r3, #1
 80083d0:	b29a      	uxth	r2, r3
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80083de:	b29b      	uxth	r3, r3
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d1cc      	bne.n	800837e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	9300      	str	r3, [sp, #0]
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	2200      	movs	r2, #0
 80083ec:	2140      	movs	r1, #64	; 0x40
 80083ee:	68f8      	ldr	r0, [r7, #12]
 80083f0:	f000 fb49 	bl	8008a86 <UART_WaitOnFlagUntilTimeout>
 80083f4:	4603      	mov	r3, r0
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d001      	beq.n	80083fe <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80083fa:	2303      	movs	r3, #3
 80083fc:	e005      	b.n	800840a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2220      	movs	r2, #32
 8008402:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8008404:	2300      	movs	r3, #0
 8008406:	e000      	b.n	800840a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8008408:	2302      	movs	r3, #2
  }
}
 800840a:	4618      	mov	r0, r3
 800840c:	3720      	adds	r7, #32
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}
	...

08008414 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b088      	sub	sp, #32
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800841c:	2300      	movs	r3, #0
 800841e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	689a      	ldr	r2, [r3, #8]
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	691b      	ldr	r3, [r3, #16]
 8008428:	431a      	orrs	r2, r3
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	695b      	ldr	r3, [r3, #20]
 800842e:	431a      	orrs	r2, r3
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	69db      	ldr	r3, [r3, #28]
 8008434:	4313      	orrs	r3, r2
 8008436:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	4ba6      	ldr	r3, [pc, #664]	; (80086d8 <UART_SetConfig+0x2c4>)
 8008440:	4013      	ands	r3, r2
 8008442:	687a      	ldr	r2, [r7, #4]
 8008444:	6812      	ldr	r2, [r2, #0]
 8008446:	6979      	ldr	r1, [r7, #20]
 8008448:	430b      	orrs	r3, r1
 800844a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	685b      	ldr	r3, [r3, #4]
 8008452:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	68da      	ldr	r2, [r3, #12]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	430a      	orrs	r2, r1
 8008460:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	699b      	ldr	r3, [r3, #24]
 8008466:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6a1b      	ldr	r3, [r3, #32]
 800846c:	697a      	ldr	r2, [r7, #20]
 800846e:	4313      	orrs	r3, r2
 8008470:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	689b      	ldr	r3, [r3, #8]
 8008478:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	697a      	ldr	r2, [r7, #20]
 8008482:	430a      	orrs	r2, r1
 8008484:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a94      	ldr	r2, [pc, #592]	; (80086dc <UART_SetConfig+0x2c8>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d120      	bne.n	80084d2 <UART_SetConfig+0xbe>
 8008490:	4b93      	ldr	r3, [pc, #588]	; (80086e0 <UART_SetConfig+0x2cc>)
 8008492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008496:	f003 0303 	and.w	r3, r3, #3
 800849a:	2b03      	cmp	r3, #3
 800849c:	d816      	bhi.n	80084cc <UART_SetConfig+0xb8>
 800849e:	a201      	add	r2, pc, #4	; (adr r2, 80084a4 <UART_SetConfig+0x90>)
 80084a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084a4:	080084b5 	.word	0x080084b5
 80084a8:	080084c1 	.word	0x080084c1
 80084ac:	080084bb 	.word	0x080084bb
 80084b0:	080084c7 	.word	0x080084c7
 80084b4:	2301      	movs	r3, #1
 80084b6:	77fb      	strb	r3, [r7, #31]
 80084b8:	e150      	b.n	800875c <UART_SetConfig+0x348>
 80084ba:	2302      	movs	r3, #2
 80084bc:	77fb      	strb	r3, [r7, #31]
 80084be:	e14d      	b.n	800875c <UART_SetConfig+0x348>
 80084c0:	2304      	movs	r3, #4
 80084c2:	77fb      	strb	r3, [r7, #31]
 80084c4:	e14a      	b.n	800875c <UART_SetConfig+0x348>
 80084c6:	2308      	movs	r3, #8
 80084c8:	77fb      	strb	r3, [r7, #31]
 80084ca:	e147      	b.n	800875c <UART_SetConfig+0x348>
 80084cc:	2310      	movs	r3, #16
 80084ce:	77fb      	strb	r3, [r7, #31]
 80084d0:	e144      	b.n	800875c <UART_SetConfig+0x348>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a83      	ldr	r2, [pc, #524]	; (80086e4 <UART_SetConfig+0x2d0>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d132      	bne.n	8008542 <UART_SetConfig+0x12e>
 80084dc:	4b80      	ldr	r3, [pc, #512]	; (80086e0 <UART_SetConfig+0x2cc>)
 80084de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084e2:	f003 030c 	and.w	r3, r3, #12
 80084e6:	2b0c      	cmp	r3, #12
 80084e8:	d828      	bhi.n	800853c <UART_SetConfig+0x128>
 80084ea:	a201      	add	r2, pc, #4	; (adr r2, 80084f0 <UART_SetConfig+0xdc>)
 80084ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084f0:	08008525 	.word	0x08008525
 80084f4:	0800853d 	.word	0x0800853d
 80084f8:	0800853d 	.word	0x0800853d
 80084fc:	0800853d 	.word	0x0800853d
 8008500:	08008531 	.word	0x08008531
 8008504:	0800853d 	.word	0x0800853d
 8008508:	0800853d 	.word	0x0800853d
 800850c:	0800853d 	.word	0x0800853d
 8008510:	0800852b 	.word	0x0800852b
 8008514:	0800853d 	.word	0x0800853d
 8008518:	0800853d 	.word	0x0800853d
 800851c:	0800853d 	.word	0x0800853d
 8008520:	08008537 	.word	0x08008537
 8008524:	2300      	movs	r3, #0
 8008526:	77fb      	strb	r3, [r7, #31]
 8008528:	e118      	b.n	800875c <UART_SetConfig+0x348>
 800852a:	2302      	movs	r3, #2
 800852c:	77fb      	strb	r3, [r7, #31]
 800852e:	e115      	b.n	800875c <UART_SetConfig+0x348>
 8008530:	2304      	movs	r3, #4
 8008532:	77fb      	strb	r3, [r7, #31]
 8008534:	e112      	b.n	800875c <UART_SetConfig+0x348>
 8008536:	2308      	movs	r3, #8
 8008538:	77fb      	strb	r3, [r7, #31]
 800853a:	e10f      	b.n	800875c <UART_SetConfig+0x348>
 800853c:	2310      	movs	r3, #16
 800853e:	77fb      	strb	r3, [r7, #31]
 8008540:	e10c      	b.n	800875c <UART_SetConfig+0x348>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4a68      	ldr	r2, [pc, #416]	; (80086e8 <UART_SetConfig+0x2d4>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d120      	bne.n	800858e <UART_SetConfig+0x17a>
 800854c:	4b64      	ldr	r3, [pc, #400]	; (80086e0 <UART_SetConfig+0x2cc>)
 800854e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008552:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008556:	2b30      	cmp	r3, #48	; 0x30
 8008558:	d013      	beq.n	8008582 <UART_SetConfig+0x16e>
 800855a:	2b30      	cmp	r3, #48	; 0x30
 800855c:	d814      	bhi.n	8008588 <UART_SetConfig+0x174>
 800855e:	2b20      	cmp	r3, #32
 8008560:	d009      	beq.n	8008576 <UART_SetConfig+0x162>
 8008562:	2b20      	cmp	r3, #32
 8008564:	d810      	bhi.n	8008588 <UART_SetConfig+0x174>
 8008566:	2b00      	cmp	r3, #0
 8008568:	d002      	beq.n	8008570 <UART_SetConfig+0x15c>
 800856a:	2b10      	cmp	r3, #16
 800856c:	d006      	beq.n	800857c <UART_SetConfig+0x168>
 800856e:	e00b      	b.n	8008588 <UART_SetConfig+0x174>
 8008570:	2300      	movs	r3, #0
 8008572:	77fb      	strb	r3, [r7, #31]
 8008574:	e0f2      	b.n	800875c <UART_SetConfig+0x348>
 8008576:	2302      	movs	r3, #2
 8008578:	77fb      	strb	r3, [r7, #31]
 800857a:	e0ef      	b.n	800875c <UART_SetConfig+0x348>
 800857c:	2304      	movs	r3, #4
 800857e:	77fb      	strb	r3, [r7, #31]
 8008580:	e0ec      	b.n	800875c <UART_SetConfig+0x348>
 8008582:	2308      	movs	r3, #8
 8008584:	77fb      	strb	r3, [r7, #31]
 8008586:	e0e9      	b.n	800875c <UART_SetConfig+0x348>
 8008588:	2310      	movs	r3, #16
 800858a:	77fb      	strb	r3, [r7, #31]
 800858c:	e0e6      	b.n	800875c <UART_SetConfig+0x348>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4a56      	ldr	r2, [pc, #344]	; (80086ec <UART_SetConfig+0x2d8>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d120      	bne.n	80085da <UART_SetConfig+0x1c6>
 8008598:	4b51      	ldr	r3, [pc, #324]	; (80086e0 <UART_SetConfig+0x2cc>)
 800859a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800859e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80085a2:	2bc0      	cmp	r3, #192	; 0xc0
 80085a4:	d013      	beq.n	80085ce <UART_SetConfig+0x1ba>
 80085a6:	2bc0      	cmp	r3, #192	; 0xc0
 80085a8:	d814      	bhi.n	80085d4 <UART_SetConfig+0x1c0>
 80085aa:	2b80      	cmp	r3, #128	; 0x80
 80085ac:	d009      	beq.n	80085c2 <UART_SetConfig+0x1ae>
 80085ae:	2b80      	cmp	r3, #128	; 0x80
 80085b0:	d810      	bhi.n	80085d4 <UART_SetConfig+0x1c0>
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d002      	beq.n	80085bc <UART_SetConfig+0x1a8>
 80085b6:	2b40      	cmp	r3, #64	; 0x40
 80085b8:	d006      	beq.n	80085c8 <UART_SetConfig+0x1b4>
 80085ba:	e00b      	b.n	80085d4 <UART_SetConfig+0x1c0>
 80085bc:	2300      	movs	r3, #0
 80085be:	77fb      	strb	r3, [r7, #31]
 80085c0:	e0cc      	b.n	800875c <UART_SetConfig+0x348>
 80085c2:	2302      	movs	r3, #2
 80085c4:	77fb      	strb	r3, [r7, #31]
 80085c6:	e0c9      	b.n	800875c <UART_SetConfig+0x348>
 80085c8:	2304      	movs	r3, #4
 80085ca:	77fb      	strb	r3, [r7, #31]
 80085cc:	e0c6      	b.n	800875c <UART_SetConfig+0x348>
 80085ce:	2308      	movs	r3, #8
 80085d0:	77fb      	strb	r3, [r7, #31]
 80085d2:	e0c3      	b.n	800875c <UART_SetConfig+0x348>
 80085d4:	2310      	movs	r3, #16
 80085d6:	77fb      	strb	r3, [r7, #31]
 80085d8:	e0c0      	b.n	800875c <UART_SetConfig+0x348>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	4a44      	ldr	r2, [pc, #272]	; (80086f0 <UART_SetConfig+0x2dc>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d125      	bne.n	8008630 <UART_SetConfig+0x21c>
 80085e4:	4b3e      	ldr	r3, [pc, #248]	; (80086e0 <UART_SetConfig+0x2cc>)
 80085e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80085f2:	d017      	beq.n	8008624 <UART_SetConfig+0x210>
 80085f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80085f8:	d817      	bhi.n	800862a <UART_SetConfig+0x216>
 80085fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085fe:	d00b      	beq.n	8008618 <UART_SetConfig+0x204>
 8008600:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008604:	d811      	bhi.n	800862a <UART_SetConfig+0x216>
 8008606:	2b00      	cmp	r3, #0
 8008608:	d003      	beq.n	8008612 <UART_SetConfig+0x1fe>
 800860a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800860e:	d006      	beq.n	800861e <UART_SetConfig+0x20a>
 8008610:	e00b      	b.n	800862a <UART_SetConfig+0x216>
 8008612:	2300      	movs	r3, #0
 8008614:	77fb      	strb	r3, [r7, #31]
 8008616:	e0a1      	b.n	800875c <UART_SetConfig+0x348>
 8008618:	2302      	movs	r3, #2
 800861a:	77fb      	strb	r3, [r7, #31]
 800861c:	e09e      	b.n	800875c <UART_SetConfig+0x348>
 800861e:	2304      	movs	r3, #4
 8008620:	77fb      	strb	r3, [r7, #31]
 8008622:	e09b      	b.n	800875c <UART_SetConfig+0x348>
 8008624:	2308      	movs	r3, #8
 8008626:	77fb      	strb	r3, [r7, #31]
 8008628:	e098      	b.n	800875c <UART_SetConfig+0x348>
 800862a:	2310      	movs	r3, #16
 800862c:	77fb      	strb	r3, [r7, #31]
 800862e:	e095      	b.n	800875c <UART_SetConfig+0x348>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a2f      	ldr	r2, [pc, #188]	; (80086f4 <UART_SetConfig+0x2e0>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d125      	bne.n	8008686 <UART_SetConfig+0x272>
 800863a:	4b29      	ldr	r3, [pc, #164]	; (80086e0 <UART_SetConfig+0x2cc>)
 800863c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008640:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008644:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008648:	d017      	beq.n	800867a <UART_SetConfig+0x266>
 800864a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800864e:	d817      	bhi.n	8008680 <UART_SetConfig+0x26c>
 8008650:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008654:	d00b      	beq.n	800866e <UART_SetConfig+0x25a>
 8008656:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800865a:	d811      	bhi.n	8008680 <UART_SetConfig+0x26c>
 800865c:	2b00      	cmp	r3, #0
 800865e:	d003      	beq.n	8008668 <UART_SetConfig+0x254>
 8008660:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008664:	d006      	beq.n	8008674 <UART_SetConfig+0x260>
 8008666:	e00b      	b.n	8008680 <UART_SetConfig+0x26c>
 8008668:	2301      	movs	r3, #1
 800866a:	77fb      	strb	r3, [r7, #31]
 800866c:	e076      	b.n	800875c <UART_SetConfig+0x348>
 800866e:	2302      	movs	r3, #2
 8008670:	77fb      	strb	r3, [r7, #31]
 8008672:	e073      	b.n	800875c <UART_SetConfig+0x348>
 8008674:	2304      	movs	r3, #4
 8008676:	77fb      	strb	r3, [r7, #31]
 8008678:	e070      	b.n	800875c <UART_SetConfig+0x348>
 800867a:	2308      	movs	r3, #8
 800867c:	77fb      	strb	r3, [r7, #31]
 800867e:	e06d      	b.n	800875c <UART_SetConfig+0x348>
 8008680:	2310      	movs	r3, #16
 8008682:	77fb      	strb	r3, [r7, #31]
 8008684:	e06a      	b.n	800875c <UART_SetConfig+0x348>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a1b      	ldr	r2, [pc, #108]	; (80086f8 <UART_SetConfig+0x2e4>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d138      	bne.n	8008702 <UART_SetConfig+0x2ee>
 8008690:	4b13      	ldr	r3, [pc, #76]	; (80086e0 <UART_SetConfig+0x2cc>)
 8008692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008696:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800869a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800869e:	d017      	beq.n	80086d0 <UART_SetConfig+0x2bc>
 80086a0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80086a4:	d82a      	bhi.n	80086fc <UART_SetConfig+0x2e8>
 80086a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086aa:	d00b      	beq.n	80086c4 <UART_SetConfig+0x2b0>
 80086ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086b0:	d824      	bhi.n	80086fc <UART_SetConfig+0x2e8>
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d003      	beq.n	80086be <UART_SetConfig+0x2aa>
 80086b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086ba:	d006      	beq.n	80086ca <UART_SetConfig+0x2b6>
 80086bc:	e01e      	b.n	80086fc <UART_SetConfig+0x2e8>
 80086be:	2300      	movs	r3, #0
 80086c0:	77fb      	strb	r3, [r7, #31]
 80086c2:	e04b      	b.n	800875c <UART_SetConfig+0x348>
 80086c4:	2302      	movs	r3, #2
 80086c6:	77fb      	strb	r3, [r7, #31]
 80086c8:	e048      	b.n	800875c <UART_SetConfig+0x348>
 80086ca:	2304      	movs	r3, #4
 80086cc:	77fb      	strb	r3, [r7, #31]
 80086ce:	e045      	b.n	800875c <UART_SetConfig+0x348>
 80086d0:	2308      	movs	r3, #8
 80086d2:	77fb      	strb	r3, [r7, #31]
 80086d4:	e042      	b.n	800875c <UART_SetConfig+0x348>
 80086d6:	bf00      	nop
 80086d8:	efff69f3 	.word	0xefff69f3
 80086dc:	40011000 	.word	0x40011000
 80086e0:	40023800 	.word	0x40023800
 80086e4:	40004400 	.word	0x40004400
 80086e8:	40004800 	.word	0x40004800
 80086ec:	40004c00 	.word	0x40004c00
 80086f0:	40005000 	.word	0x40005000
 80086f4:	40011400 	.word	0x40011400
 80086f8:	40007800 	.word	0x40007800
 80086fc:	2310      	movs	r3, #16
 80086fe:	77fb      	strb	r3, [r7, #31]
 8008700:	e02c      	b.n	800875c <UART_SetConfig+0x348>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4a72      	ldr	r2, [pc, #456]	; (80088d0 <UART_SetConfig+0x4bc>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d125      	bne.n	8008758 <UART_SetConfig+0x344>
 800870c:	4b71      	ldr	r3, [pc, #452]	; (80088d4 <UART_SetConfig+0x4c0>)
 800870e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008712:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008716:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800871a:	d017      	beq.n	800874c <UART_SetConfig+0x338>
 800871c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008720:	d817      	bhi.n	8008752 <UART_SetConfig+0x33e>
 8008722:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008726:	d00b      	beq.n	8008740 <UART_SetConfig+0x32c>
 8008728:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800872c:	d811      	bhi.n	8008752 <UART_SetConfig+0x33e>
 800872e:	2b00      	cmp	r3, #0
 8008730:	d003      	beq.n	800873a <UART_SetConfig+0x326>
 8008732:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008736:	d006      	beq.n	8008746 <UART_SetConfig+0x332>
 8008738:	e00b      	b.n	8008752 <UART_SetConfig+0x33e>
 800873a:	2300      	movs	r3, #0
 800873c:	77fb      	strb	r3, [r7, #31]
 800873e:	e00d      	b.n	800875c <UART_SetConfig+0x348>
 8008740:	2302      	movs	r3, #2
 8008742:	77fb      	strb	r3, [r7, #31]
 8008744:	e00a      	b.n	800875c <UART_SetConfig+0x348>
 8008746:	2304      	movs	r3, #4
 8008748:	77fb      	strb	r3, [r7, #31]
 800874a:	e007      	b.n	800875c <UART_SetConfig+0x348>
 800874c:	2308      	movs	r3, #8
 800874e:	77fb      	strb	r3, [r7, #31]
 8008750:	e004      	b.n	800875c <UART_SetConfig+0x348>
 8008752:	2310      	movs	r3, #16
 8008754:	77fb      	strb	r3, [r7, #31]
 8008756:	e001      	b.n	800875c <UART_SetConfig+0x348>
 8008758:	2310      	movs	r3, #16
 800875a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	69db      	ldr	r3, [r3, #28]
 8008760:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008764:	d15b      	bne.n	800881e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8008766:	7ffb      	ldrb	r3, [r7, #31]
 8008768:	2b08      	cmp	r3, #8
 800876a:	d828      	bhi.n	80087be <UART_SetConfig+0x3aa>
 800876c:	a201      	add	r2, pc, #4	; (adr r2, 8008774 <UART_SetConfig+0x360>)
 800876e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008772:	bf00      	nop
 8008774:	08008799 	.word	0x08008799
 8008778:	080087a1 	.word	0x080087a1
 800877c:	080087a9 	.word	0x080087a9
 8008780:	080087bf 	.word	0x080087bf
 8008784:	080087af 	.word	0x080087af
 8008788:	080087bf 	.word	0x080087bf
 800878c:	080087bf 	.word	0x080087bf
 8008790:	080087bf 	.word	0x080087bf
 8008794:	080087b7 	.word	0x080087b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008798:	f7fd fe08 	bl	80063ac <HAL_RCC_GetPCLK1Freq>
 800879c:	61b8      	str	r0, [r7, #24]
        break;
 800879e:	e013      	b.n	80087c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80087a0:	f7fd fe18 	bl	80063d4 <HAL_RCC_GetPCLK2Freq>
 80087a4:	61b8      	str	r0, [r7, #24]
        break;
 80087a6:	e00f      	b.n	80087c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80087a8:	4b4b      	ldr	r3, [pc, #300]	; (80088d8 <UART_SetConfig+0x4c4>)
 80087aa:	61bb      	str	r3, [r7, #24]
        break;
 80087ac:	e00c      	b.n	80087c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80087ae:	f7fd fceb 	bl	8006188 <HAL_RCC_GetSysClockFreq>
 80087b2:	61b8      	str	r0, [r7, #24]
        break;
 80087b4:	e008      	b.n	80087c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80087b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087ba:	61bb      	str	r3, [r7, #24]
        break;
 80087bc:	e004      	b.n	80087c8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80087be:	2300      	movs	r3, #0
 80087c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80087c2:	2301      	movs	r3, #1
 80087c4:	77bb      	strb	r3, [r7, #30]
        break;
 80087c6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80087c8:	69bb      	ldr	r3, [r7, #24]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d074      	beq.n	80088b8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80087ce:	69bb      	ldr	r3, [r7, #24]
 80087d0:	005a      	lsls	r2, r3, #1
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	685b      	ldr	r3, [r3, #4]
 80087d6:	085b      	lsrs	r3, r3, #1
 80087d8:	441a      	add	r2, r3
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	685b      	ldr	r3, [r3, #4]
 80087de:	fbb2 f3f3 	udiv	r3, r2, r3
 80087e2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	2b0f      	cmp	r3, #15
 80087e8:	d916      	bls.n	8008818 <UART_SetConfig+0x404>
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087f0:	d212      	bcs.n	8008818 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	b29b      	uxth	r3, r3
 80087f6:	f023 030f 	bic.w	r3, r3, #15
 80087fa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	085b      	lsrs	r3, r3, #1
 8008800:	b29b      	uxth	r3, r3
 8008802:	f003 0307 	and.w	r3, r3, #7
 8008806:	b29a      	uxth	r2, r3
 8008808:	89fb      	ldrh	r3, [r7, #14]
 800880a:	4313      	orrs	r3, r2
 800880c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	89fa      	ldrh	r2, [r7, #14]
 8008814:	60da      	str	r2, [r3, #12]
 8008816:	e04f      	b.n	80088b8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008818:	2301      	movs	r3, #1
 800881a:	77bb      	strb	r3, [r7, #30]
 800881c:	e04c      	b.n	80088b8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800881e:	7ffb      	ldrb	r3, [r7, #31]
 8008820:	2b08      	cmp	r3, #8
 8008822:	d828      	bhi.n	8008876 <UART_SetConfig+0x462>
 8008824:	a201      	add	r2, pc, #4	; (adr r2, 800882c <UART_SetConfig+0x418>)
 8008826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800882a:	bf00      	nop
 800882c:	08008851 	.word	0x08008851
 8008830:	08008859 	.word	0x08008859
 8008834:	08008861 	.word	0x08008861
 8008838:	08008877 	.word	0x08008877
 800883c:	08008867 	.word	0x08008867
 8008840:	08008877 	.word	0x08008877
 8008844:	08008877 	.word	0x08008877
 8008848:	08008877 	.word	0x08008877
 800884c:	0800886f 	.word	0x0800886f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008850:	f7fd fdac 	bl	80063ac <HAL_RCC_GetPCLK1Freq>
 8008854:	61b8      	str	r0, [r7, #24]
        break;
 8008856:	e013      	b.n	8008880 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008858:	f7fd fdbc 	bl	80063d4 <HAL_RCC_GetPCLK2Freq>
 800885c:	61b8      	str	r0, [r7, #24]
        break;
 800885e:	e00f      	b.n	8008880 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008860:	4b1d      	ldr	r3, [pc, #116]	; (80088d8 <UART_SetConfig+0x4c4>)
 8008862:	61bb      	str	r3, [r7, #24]
        break;
 8008864:	e00c      	b.n	8008880 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008866:	f7fd fc8f 	bl	8006188 <HAL_RCC_GetSysClockFreq>
 800886a:	61b8      	str	r0, [r7, #24]
        break;
 800886c:	e008      	b.n	8008880 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800886e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008872:	61bb      	str	r3, [r7, #24]
        break;
 8008874:	e004      	b.n	8008880 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8008876:	2300      	movs	r3, #0
 8008878:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800887a:	2301      	movs	r3, #1
 800887c:	77bb      	strb	r3, [r7, #30]
        break;
 800887e:	bf00      	nop
    }

    if (pclk != 0U)
 8008880:	69bb      	ldr	r3, [r7, #24]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d018      	beq.n	80088b8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	685b      	ldr	r3, [r3, #4]
 800888a:	085a      	lsrs	r2, r3, #1
 800888c:	69bb      	ldr	r3, [r7, #24]
 800888e:	441a      	add	r2, r3
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	685b      	ldr	r3, [r3, #4]
 8008894:	fbb2 f3f3 	udiv	r3, r2, r3
 8008898:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	2b0f      	cmp	r3, #15
 800889e:	d909      	bls.n	80088b4 <UART_SetConfig+0x4a0>
 80088a0:	693b      	ldr	r3, [r7, #16]
 80088a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088a6:	d205      	bcs.n	80088b4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	b29a      	uxth	r2, r3
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	60da      	str	r2, [r3, #12]
 80088b2:	e001      	b.n	80088b8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80088b4:	2301      	movs	r3, #1
 80088b6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2200      	movs	r2, #0
 80088bc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2200      	movs	r2, #0
 80088c2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80088c4:	7fbb      	ldrb	r3, [r7, #30]
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3720      	adds	r7, #32
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}
 80088ce:	bf00      	nop
 80088d0:	40007c00 	.word	0x40007c00
 80088d4:	40023800 	.word	0x40023800
 80088d8:	00f42400 	.word	0x00f42400

080088dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80088dc:	b480      	push	{r7}
 80088de:	b083      	sub	sp, #12
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e8:	f003 0301 	and.w	r3, r3, #1
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d00a      	beq.n	8008906 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	685b      	ldr	r3, [r3, #4]
 80088f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	430a      	orrs	r2, r1
 8008904:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800890a:	f003 0302 	and.w	r3, r3, #2
 800890e:	2b00      	cmp	r3, #0
 8008910:	d00a      	beq.n	8008928 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	430a      	orrs	r2, r1
 8008926:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800892c:	f003 0304 	and.w	r3, r3, #4
 8008930:	2b00      	cmp	r3, #0
 8008932:	d00a      	beq.n	800894a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	685b      	ldr	r3, [r3, #4]
 800893a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	430a      	orrs	r2, r1
 8008948:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800894e:	f003 0308 	and.w	r3, r3, #8
 8008952:	2b00      	cmp	r3, #0
 8008954:	d00a      	beq.n	800896c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	430a      	orrs	r2, r1
 800896a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008970:	f003 0310 	and.w	r3, r3, #16
 8008974:	2b00      	cmp	r3, #0
 8008976:	d00a      	beq.n	800898e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	689b      	ldr	r3, [r3, #8]
 800897e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	430a      	orrs	r2, r1
 800898c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008992:	f003 0320 	and.w	r3, r3, #32
 8008996:	2b00      	cmp	r3, #0
 8008998:	d00a      	beq.n	80089b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	689b      	ldr	r3, [r3, #8]
 80089a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	430a      	orrs	r2, r1
 80089ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d01a      	beq.n	80089f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	430a      	orrs	r2, r1
 80089d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089da:	d10a      	bne.n	80089f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	430a      	orrs	r2, r1
 80089f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d00a      	beq.n	8008a14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	430a      	orrs	r2, r1
 8008a12:	605a      	str	r2, [r3, #4]
  }
}
 8008a14:	bf00      	nop
 8008a16:	370c      	adds	r7, #12
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1e:	4770      	bx	lr

08008a20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b086      	sub	sp, #24
 8008a24:	af02      	add	r7, sp, #8
 8008a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008a30:	f7fb fa62 	bl	8003ef8 <HAL_GetTick>
 8008a34:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f003 0308 	and.w	r3, r3, #8
 8008a40:	2b08      	cmp	r3, #8
 8008a42:	d10e      	bne.n	8008a62 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a48:	9300      	str	r3, [sp, #0]
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f000 f817 	bl	8008a86 <UART_WaitOnFlagUntilTimeout>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d001      	beq.n	8008a62 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a5e:	2303      	movs	r3, #3
 8008a60:	e00d      	b.n	8008a7e <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2220      	movs	r2, #32
 8008a66:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2220      	movs	r2, #32
 8008a6c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2200      	movs	r2, #0
 8008a72:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2200      	movs	r2, #0
 8008a78:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008a7c:	2300      	movs	r3, #0
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3710      	adds	r7, #16
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}

08008a86 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008a86:	b580      	push	{r7, lr}
 8008a88:	b09c      	sub	sp, #112	; 0x70
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	60f8      	str	r0, [r7, #12]
 8008a8e:	60b9      	str	r1, [r7, #8]
 8008a90:	603b      	str	r3, [r7, #0]
 8008a92:	4613      	mov	r3, r2
 8008a94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a96:	e0a5      	b.n	8008be4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a9e:	f000 80a1 	beq.w	8008be4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008aa2:	f7fb fa29 	bl	8003ef8 <HAL_GetTick>
 8008aa6:	4602      	mov	r2, r0
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	1ad3      	subs	r3, r2, r3
 8008aac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	d302      	bcc.n	8008ab8 <UART_WaitOnFlagUntilTimeout+0x32>
 8008ab2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d13e      	bne.n	8008b36 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008abe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ac0:	e853 3f00 	ldrex	r3, [r3]
 8008ac4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008ac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ac8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008acc:	667b      	str	r3, [r7, #100]	; 0x64
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	461a      	mov	r2, r3
 8008ad4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ad6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ad8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ada:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008adc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008ade:	e841 2300 	strex	r3, r2, [r1]
 8008ae2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008ae4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d1e6      	bne.n	8008ab8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	3308      	adds	r3, #8
 8008af0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008af4:	e853 3f00 	ldrex	r3, [r3]
 8008af8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008afc:	f023 0301 	bic.w	r3, r3, #1
 8008b00:	663b      	str	r3, [r7, #96]	; 0x60
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	3308      	adds	r3, #8
 8008b08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008b0a:	64ba      	str	r2, [r7, #72]	; 0x48
 8008b0c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b0e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008b10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b12:	e841 2300 	strex	r3, r2, [r1]
 8008b16:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008b18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d1e5      	bne.n	8008aea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	2220      	movs	r2, #32
 8008b22:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	2220      	movs	r2, #32
 8008b28:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008b32:	2303      	movs	r3, #3
 8008b34:	e067      	b.n	8008c06 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f003 0304 	and.w	r3, r3, #4
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d04f      	beq.n	8008be4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	69db      	ldr	r3, [r3, #28]
 8008b4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b52:	d147      	bne.n	8008be4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008b5c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b66:	e853 3f00 	ldrex	r3, [r3]
 8008b6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b6e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008b72:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	461a      	mov	r2, r3
 8008b7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b7c:	637b      	str	r3, [r7, #52]	; 0x34
 8008b7e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008b82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b84:	e841 2300 	strex	r3, r2, [r1]
 8008b88:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d1e6      	bne.n	8008b5e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	3308      	adds	r3, #8
 8008b96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	e853 3f00 	ldrex	r3, [r3]
 8008b9e:	613b      	str	r3, [r7, #16]
   return(result);
 8008ba0:	693b      	ldr	r3, [r7, #16]
 8008ba2:	f023 0301 	bic.w	r3, r3, #1
 8008ba6:	66bb      	str	r3, [r7, #104]	; 0x68
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	3308      	adds	r3, #8
 8008bae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008bb0:	623a      	str	r2, [r7, #32]
 8008bb2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bb4:	69f9      	ldr	r1, [r7, #28]
 8008bb6:	6a3a      	ldr	r2, [r7, #32]
 8008bb8:	e841 2300 	strex	r3, r2, [r1]
 8008bbc:	61bb      	str	r3, [r7, #24]
   return(result);
 8008bbe:	69bb      	ldr	r3, [r7, #24]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d1e5      	bne.n	8008b90 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2220      	movs	r2, #32
 8008bc8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	2220      	movs	r2, #32
 8008bce:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	2220      	movs	r2, #32
 8008bd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008be0:	2303      	movs	r3, #3
 8008be2:	e010      	b.n	8008c06 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	69da      	ldr	r2, [r3, #28]
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	4013      	ands	r3, r2
 8008bee:	68ba      	ldr	r2, [r7, #8]
 8008bf0:	429a      	cmp	r2, r3
 8008bf2:	bf0c      	ite	eq
 8008bf4:	2301      	moveq	r3, #1
 8008bf6:	2300      	movne	r3, #0
 8008bf8:	b2db      	uxtb	r3, r3
 8008bfa:	461a      	mov	r2, r3
 8008bfc:	79fb      	ldrb	r3, [r7, #7]
 8008bfe:	429a      	cmp	r2, r3
 8008c00:	f43f af4a 	beq.w	8008a98 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008c04:	2300      	movs	r3, #0
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3770      	adds	r7, #112	; 0x70
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}
	...

08008c10 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008c10:	b084      	sub	sp, #16
 8008c12:	b580      	push	{r7, lr}
 8008c14:	b084      	sub	sp, #16
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	6078      	str	r0, [r7, #4]
 8008c1a:	f107 001c 	add.w	r0, r7, #28
 8008c1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c24:	2b01      	cmp	r3, #1
 8008c26:	d126      	bne.n	8008c76 <USB_CoreInit+0x66>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c2c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	68da      	ldr	r2, [r3, #12]
 8008c38:	4b38      	ldr	r3, [pc, #224]	; (8008d1c <USB_CoreInit+0x10c>)
 8008c3a:	4013      	ands	r3, r2
 8008c3c:	687a      	ldr	r2, [r7, #4]
 8008c3e:	60d3      	str	r3, [r2, #12]

#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	68db      	ldr	r3, [r3, #12]
 8008c44:	f043 0210 	orr.w	r2, r3, #16
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	60da      	str	r2, [r3, #12]
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	68db      	ldr	r3, [r3, #12]
 8008c50:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008c58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c5a:	2b01      	cmp	r3, #1
 8008c5c:	d105      	bne.n	8008c6a <USB_CoreInit+0x5a>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	68db      	ldr	r3, [r3, #12]
 8008c62:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f000 facc 	bl	8009208 <USB_CoreReset>
 8008c70:	4603      	mov	r3, r0
 8008c72:	73fb      	strb	r3, [r7, #15]
 8008c74:	e03a      	b.n	8008cec <USB_CoreInit+0xdc>
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8008c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c78:	2b03      	cmp	r3, #3
 8008c7a:	d126      	bne.n	8008cca <USB_CoreInit+0xba>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c80:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	68da      	ldr	r2, [r3, #12]
 8008c8c:	4b23      	ldr	r3, [pc, #140]	; (8008d1c <USB_CoreInit+0x10c>)
 8008c8e:	4013      	ands	r3, r2
 8008c90:	687a      	ldr	r2, [r7, #4]
 8008c92:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	68db      	ldr	r3, [r3, #12]
 8008c98:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	60da      	str	r2, [r3, #12]

    /* Select UTMI Interface */
    USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	68db      	ldr	r3, [r3, #12]
 8008ca4:	f023 0210 	bic.w	r2, r3, #16
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	60da      	str	r2, [r3, #12]
    {
      return HAL_ERROR;
    }
#endif /* USBPHYC */

    if (cfg.use_external_vbus == 1U)
 8008cac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cae:	2b01      	cmp	r3, #1
 8008cb0:	d105      	bne.n	8008cbe <USB_CoreInit+0xae>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	68db      	ldr	r3, [r3, #12]
 8008cb6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f000 faa2 	bl	8009208 <USB_CoreReset>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	73fb      	strb	r3, [r7, #15]
 8008cc8:	e010      	b.n	8008cec <USB_CoreInit+0xdc>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	68db      	ldr	r3, [r3, #12]
 8008cce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f000 fa96 	bl	8009208 <USB_CoreReset>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ce4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8008cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cee:	2b01      	cmp	r3, #1
 8008cf0:	d10b      	bne.n	8008d0a <USB_CoreInit+0xfa>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	689b      	ldr	r3, [r3, #8]
 8008cf6:	f043 0206 	orr.w	r2, r3, #6
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	689b      	ldr	r3, [r3, #8]
 8008d02:	f043 0220 	orr.w	r2, r3, #32
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3710      	adds	r7, #16
 8008d10:	46bd      	mov	sp, r7
 8008d12:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008d16:	b004      	add	sp, #16
 8008d18:	4770      	bx	lr
 8008d1a:	bf00      	nop
 8008d1c:	ffbdffbf 	.word	0xffbdffbf

08008d20 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b083      	sub	sp, #12
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	689b      	ldr	r3, [r3, #8]
 8008d2c:	f023 0201 	bic.w	r2, r3, #1
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008d34:	2300      	movs	r3, #0
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	370c      	adds	r7, #12
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d40:	4770      	bx	lr

08008d42 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008d42:	b580      	push	{r7, lr}
 8008d44:	b084      	sub	sp, #16
 8008d46:	af00      	add	r7, sp, #0
 8008d48:	6078      	str	r0, [r7, #4]
 8008d4a:	460b      	mov	r3, r1
 8008d4c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	68db      	ldr	r3, [r3, #12]
 8008d56:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008d5e:	78fb      	ldrb	r3, [r7, #3]
 8008d60:	2b01      	cmp	r3, #1
 8008d62:	d115      	bne.n	8008d90 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	68db      	ldr	r3, [r3, #12]
 8008d68:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008d70:	2001      	movs	r0, #1
 8008d72:	f7fb f8cd 	bl	8003f10 <HAL_Delay>
      ms++;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	3301      	adds	r3, #1
 8008d7a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f000 fa35 	bl	80091ec <USB_GetMode>
 8008d82:	4603      	mov	r3, r0
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	d01e      	beq.n	8008dc6 <USB_SetCurrentMode+0x84>
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	2b31      	cmp	r3, #49	; 0x31
 8008d8c:	d9f0      	bls.n	8008d70 <USB_SetCurrentMode+0x2e>
 8008d8e:	e01a      	b.n	8008dc6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008d90:	78fb      	ldrb	r3, [r7, #3]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d115      	bne.n	8008dc2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	68db      	ldr	r3, [r3, #12]
 8008d9a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008da2:	2001      	movs	r0, #1
 8008da4:	f7fb f8b4 	bl	8003f10 <HAL_Delay>
      ms++;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	3301      	adds	r3, #1
 8008dac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f000 fa1c 	bl	80091ec <USB_GetMode>
 8008db4:	4603      	mov	r3, r0
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d005      	beq.n	8008dc6 <USB_SetCurrentMode+0x84>
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	2b31      	cmp	r3, #49	; 0x31
 8008dbe:	d9f0      	bls.n	8008da2 <USB_SetCurrentMode+0x60>
 8008dc0:	e001      	b.n	8008dc6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	e005      	b.n	8008dd2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	2b32      	cmp	r3, #50	; 0x32
 8008dca:	d101      	bne.n	8008dd0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008dcc:	2301      	movs	r3, #1
 8008dce:	e000      	b.n	8008dd2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008dd0:	2300      	movs	r3, #0
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3710      	adds	r7, #16
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}
	...

08008ddc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008ddc:	b084      	sub	sp, #16
 8008dde:	b580      	push	{r7, lr}
 8008de0:	b086      	sub	sp, #24
 8008de2:	af00      	add	r7, sp, #0
 8008de4:	6078      	str	r0, [r7, #4]
 8008de6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008dea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008dee:	2300      	movs	r3, #0
 8008df0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008df6:	2300      	movs	r3, #0
 8008df8:	613b      	str	r3, [r7, #16]
 8008dfa:	e009      	b.n	8008e10 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008dfc:	687a      	ldr	r2, [r7, #4]
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	3340      	adds	r3, #64	; 0x40
 8008e02:	009b      	lsls	r3, r3, #2
 8008e04:	4413      	add	r3, r2
 8008e06:	2200      	movs	r2, #0
 8008e08:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	3301      	adds	r3, #1
 8008e0e:	613b      	str	r3, [r7, #16]
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	2b0e      	cmp	r3, #14
 8008e14:	d9f2      	bls.n	8008dfc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008e16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d11c      	bne.n	8008e56 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	68fa      	ldr	r2, [r7, #12]
 8008e26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e2a:	f043 0302 	orr.w	r3, r3, #2
 8008e2e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e34:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	601a      	str	r2, [r3, #0]
 8008e54:	e005      	b.n	8008e62 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e5a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008e68:	461a      	mov	r2, r3
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e74:	4619      	mov	r1, r3
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e7c:	461a      	mov	r2, r3
 8008e7e:	680b      	ldr	r3, [r1, #0]
 8008e80:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e84:	2b01      	cmp	r3, #1
 8008e86:	d10c      	bne.n	8008ea2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d104      	bne.n	8008e98 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008e8e:	2100      	movs	r1, #0
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f000 f971 	bl	8009178 <USB_SetDevSpeed>
 8008e96:	e018      	b.n	8008eca <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008e98:	2101      	movs	r1, #1
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f000 f96c 	bl	8009178 <USB_SetDevSpeed>
 8008ea0:	e013      	b.n	8008eca <USB_DevInit+0xee>
    }
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8008ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ea4:	2b03      	cmp	r3, #3
 8008ea6:	d10c      	bne.n	8008ec2 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d104      	bne.n	8008eb8 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008eae:	2100      	movs	r1, #0
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f000 f961 	bl	8009178 <USB_SetDevSpeed>
 8008eb6:	e008      	b.n	8008eca <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008eb8:	2101      	movs	r1, #1
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f000 f95c 	bl	8009178 <USB_SetDevSpeed>
 8008ec0:	e003      	b.n	8008eca <USB_DevInit+0xee>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008ec2:	2103      	movs	r1, #3
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f000 f957 	bl	8009178 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008eca:	2110      	movs	r1, #16
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f000 f8f3 	bl	80090b8 <USB_FlushTxFifo>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d001      	beq.n	8008edc <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8008ed8:	2301      	movs	r3, #1
 8008eda:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f000 f91d 	bl	800911c <USB_FlushRxFifo>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d001      	beq.n	8008eec <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8008ee8:	2301      	movs	r3, #1
 8008eea:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ef2:	461a      	mov	r2, r3
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008efe:	461a      	mov	r2, r3
 8008f00:	2300      	movs	r3, #0
 8008f02:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f10:	2300      	movs	r3, #0
 8008f12:	613b      	str	r3, [r7, #16]
 8008f14:	e043      	b.n	8008f9e <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	015a      	lsls	r2, r3, #5
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	4413      	add	r3, r2
 8008f1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f2c:	d118      	bne.n	8008f60 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d10a      	bne.n	8008f4a <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	015a      	lsls	r2, r3, #5
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	4413      	add	r3, r2
 8008f3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f40:	461a      	mov	r2, r3
 8008f42:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008f46:	6013      	str	r3, [r2, #0]
 8008f48:	e013      	b.n	8008f72 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	015a      	lsls	r2, r3, #5
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	4413      	add	r3, r2
 8008f52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f56:	461a      	mov	r2, r3
 8008f58:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008f5c:	6013      	str	r3, [r2, #0]
 8008f5e:	e008      	b.n	8008f72 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	015a      	lsls	r2, r3, #5
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	4413      	add	r3, r2
 8008f68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f6c:	461a      	mov	r2, r3
 8008f6e:	2300      	movs	r3, #0
 8008f70:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	015a      	lsls	r2, r3, #5
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	4413      	add	r3, r2
 8008f7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f7e:	461a      	mov	r2, r3
 8008f80:	2300      	movs	r3, #0
 8008f82:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	015a      	lsls	r2, r3, #5
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	4413      	add	r3, r2
 8008f8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f90:	461a      	mov	r2, r3
 8008f92:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008f96:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	3301      	adds	r3, #1
 8008f9c:	613b      	str	r3, [r7, #16]
 8008f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa0:	693a      	ldr	r2, [r7, #16]
 8008fa2:	429a      	cmp	r2, r3
 8008fa4:	d3b7      	bcc.n	8008f16 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	613b      	str	r3, [r7, #16]
 8008faa:	e043      	b.n	8009034 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008fac:	693b      	ldr	r3, [r7, #16]
 8008fae:	015a      	lsls	r2, r3, #5
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	4413      	add	r3, r2
 8008fb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008fbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008fc2:	d118      	bne.n	8008ff6 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d10a      	bne.n	8008fe0 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	015a      	lsls	r2, r3, #5
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	4413      	add	r3, r2
 8008fd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008fdc:	6013      	str	r3, [r2, #0]
 8008fde:	e013      	b.n	8009008 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	015a      	lsls	r2, r3, #5
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	4413      	add	r3, r2
 8008fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fec:	461a      	mov	r2, r3
 8008fee:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008ff2:	6013      	str	r3, [r2, #0]
 8008ff4:	e008      	b.n	8009008 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	015a      	lsls	r2, r3, #5
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	4413      	add	r3, r2
 8008ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009002:	461a      	mov	r2, r3
 8009004:	2300      	movs	r3, #0
 8009006:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	015a      	lsls	r2, r3, #5
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	4413      	add	r3, r2
 8009010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009014:	461a      	mov	r2, r3
 8009016:	2300      	movs	r3, #0
 8009018:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	015a      	lsls	r2, r3, #5
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	4413      	add	r3, r2
 8009022:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009026:	461a      	mov	r2, r3
 8009028:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800902c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	3301      	adds	r3, #1
 8009032:	613b      	str	r3, [r7, #16]
 8009034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009036:	693a      	ldr	r2, [r7, #16]
 8009038:	429a      	cmp	r2, r3
 800903a:	d3b7      	bcc.n	8008fac <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009042:	691b      	ldr	r3, [r3, #16]
 8009044:	68fa      	ldr	r2, [r7, #12]
 8009046:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800904a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800904e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2200      	movs	r2, #0
 8009054:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800905c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800905e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009060:	2b00      	cmp	r3, #0
 8009062:	d105      	bne.n	8009070 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	699b      	ldr	r3, [r3, #24]
 8009068:	f043 0210 	orr.w	r2, r3, #16
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	699a      	ldr	r2, [r3, #24]
 8009074:	4b0e      	ldr	r3, [pc, #56]	; (80090b0 <USB_DevInit+0x2d4>)
 8009076:	4313      	orrs	r3, r2
 8009078:	687a      	ldr	r2, [r7, #4]
 800907a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800907c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800907e:	2b00      	cmp	r3, #0
 8009080:	d005      	beq.n	800908e <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	699b      	ldr	r3, [r3, #24]
 8009086:	f043 0208 	orr.w	r2, r3, #8
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800908e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009090:	2b01      	cmp	r3, #1
 8009092:	d105      	bne.n	80090a0 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	699a      	ldr	r2, [r3, #24]
 8009098:	4b06      	ldr	r3, [pc, #24]	; (80090b4 <USB_DevInit+0x2d8>)
 800909a:	4313      	orrs	r3, r2
 800909c:	687a      	ldr	r2, [r7, #4]
 800909e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80090a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3718      	adds	r7, #24
 80090a6:	46bd      	mov	sp, r7
 80090a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80090ac:	b004      	add	sp, #16
 80090ae:	4770      	bx	lr
 80090b0:	803c3800 	.word	0x803c3800
 80090b4:	40000004 	.word	0x40000004

080090b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80090b8:	b480      	push	{r7}
 80090ba:	b085      	sub	sp, #20
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
 80090c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80090c2:	2300      	movs	r3, #0
 80090c4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	3301      	adds	r3, #1
 80090ca:	60fb      	str	r3, [r7, #12]
 80090cc:	4a12      	ldr	r2, [pc, #72]	; (8009118 <USB_FlushTxFifo+0x60>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d901      	bls.n	80090d6 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80090d2:	2303      	movs	r3, #3
 80090d4:	e01a      	b.n	800910c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	691b      	ldr	r3, [r3, #16]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	daf3      	bge.n	80090c6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80090de:	2300      	movs	r3, #0
 80090e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	019b      	lsls	r3, r3, #6
 80090e6:	f043 0220 	orr.w	r2, r3, #32
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	3301      	adds	r3, #1
 80090f2:	60fb      	str	r3, [r7, #12]
 80090f4:	4a08      	ldr	r2, [pc, #32]	; (8009118 <USB_FlushTxFifo+0x60>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d901      	bls.n	80090fe <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 80090fa:	2303      	movs	r3, #3
 80090fc:	e006      	b.n	800910c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	691b      	ldr	r3, [r3, #16]
 8009102:	f003 0320 	and.w	r3, r3, #32
 8009106:	2b20      	cmp	r3, #32
 8009108:	d0f1      	beq.n	80090ee <USB_FlushTxFifo+0x36>

  return HAL_OK;
 800910a:	2300      	movs	r3, #0
}
 800910c:	4618      	mov	r0, r3
 800910e:	3714      	adds	r7, #20
 8009110:	46bd      	mov	sp, r7
 8009112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009116:	4770      	bx	lr
 8009118:	00030d40 	.word	0x00030d40

0800911c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800911c:	b480      	push	{r7}
 800911e:	b085      	sub	sp, #20
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009124:	2300      	movs	r3, #0
 8009126:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	3301      	adds	r3, #1
 800912c:	60fb      	str	r3, [r7, #12]
 800912e:	4a11      	ldr	r2, [pc, #68]	; (8009174 <USB_FlushRxFifo+0x58>)
 8009130:	4293      	cmp	r3, r2
 8009132:	d901      	bls.n	8009138 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8009134:	2303      	movs	r3, #3
 8009136:	e017      	b.n	8009168 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	691b      	ldr	r3, [r3, #16]
 800913c:	2b00      	cmp	r3, #0
 800913e:	daf3      	bge.n	8009128 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009140:	2300      	movs	r3, #0
 8009142:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2210      	movs	r2, #16
 8009148:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	3301      	adds	r3, #1
 800914e:	60fb      	str	r3, [r7, #12]
 8009150:	4a08      	ldr	r2, [pc, #32]	; (8009174 <USB_FlushRxFifo+0x58>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d901      	bls.n	800915a <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8009156:	2303      	movs	r3, #3
 8009158:	e006      	b.n	8009168 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	691b      	ldr	r3, [r3, #16]
 800915e:	f003 0310 	and.w	r3, r3, #16
 8009162:	2b10      	cmp	r3, #16
 8009164:	d0f1      	beq.n	800914a <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8009166:	2300      	movs	r3, #0
}
 8009168:	4618      	mov	r0, r3
 800916a:	3714      	adds	r7, #20
 800916c:	46bd      	mov	sp, r7
 800916e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009172:	4770      	bx	lr
 8009174:	00030d40 	.word	0x00030d40

08009178 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009178:	b480      	push	{r7}
 800917a:	b085      	sub	sp, #20
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
 8009180:	460b      	mov	r3, r1
 8009182:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800918e:	681a      	ldr	r2, [r3, #0]
 8009190:	78fb      	ldrb	r3, [r7, #3]
 8009192:	68f9      	ldr	r1, [r7, #12]
 8009194:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009198:	4313      	orrs	r3, r2
 800919a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800919c:	2300      	movs	r3, #0
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3714      	adds	r7, #20
 80091a2:	46bd      	mov	sp, r7
 80091a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a8:	4770      	bx	lr

080091aa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80091aa:	b480      	push	{r7}
 80091ac:	b085      	sub	sp, #20
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	68fa      	ldr	r2, [r7, #12]
 80091c0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80091c4:	f023 0303 	bic.w	r3, r3, #3
 80091c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091d0:	685b      	ldr	r3, [r3, #4]
 80091d2:	68fa      	ldr	r2, [r7, #12]
 80091d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80091d8:	f043 0302 	orr.w	r3, r3, #2
 80091dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80091de:	2300      	movs	r3, #0
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	3714      	adds	r7, #20
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr

080091ec <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80091ec:	b480      	push	{r7}
 80091ee:	b083      	sub	sp, #12
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	695b      	ldr	r3, [r3, #20]
 80091f8:	f003 0301 	and.w	r3, r3, #1
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	370c      	adds	r7, #12
 8009200:	46bd      	mov	sp, r7
 8009202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009206:	4770      	bx	lr

08009208 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009208:	b480      	push	{r7}
 800920a:	b085      	sub	sp, #20
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009210:	2300      	movs	r3, #0
 8009212:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	3301      	adds	r3, #1
 8009218:	60fb      	str	r3, [r7, #12]
 800921a:	4a13      	ldr	r2, [pc, #76]	; (8009268 <USB_CoreReset+0x60>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d901      	bls.n	8009224 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8009220:	2303      	movs	r3, #3
 8009222:	e01a      	b.n	800925a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	691b      	ldr	r3, [r3, #16]
 8009228:	2b00      	cmp	r3, #0
 800922a:	daf3      	bge.n	8009214 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800922c:	2300      	movs	r3, #0
 800922e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	691b      	ldr	r3, [r3, #16]
 8009234:	f043 0201 	orr.w	r2, r3, #1
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	3301      	adds	r3, #1
 8009240:	60fb      	str	r3, [r7, #12]
 8009242:	4a09      	ldr	r2, [pc, #36]	; (8009268 <USB_CoreReset+0x60>)
 8009244:	4293      	cmp	r3, r2
 8009246:	d901      	bls.n	800924c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8009248:	2303      	movs	r3, #3
 800924a:	e006      	b.n	800925a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	691b      	ldr	r3, [r3, #16]
 8009250:	f003 0301 	and.w	r3, r3, #1
 8009254:	2b01      	cmp	r3, #1
 8009256:	d0f1      	beq.n	800923c <USB_CoreReset+0x34>

  return HAL_OK;
 8009258:	2300      	movs	r3, #0
}
 800925a:	4618      	mov	r0, r3
 800925c:	3714      	adds	r7, #20
 800925e:	46bd      	mov	sp, r7
 8009260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009264:	4770      	bx	lr
 8009266:	bf00      	nop
 8009268:	00030d40 	.word	0x00030d40

0800926c <__errno>:
 800926c:	4b01      	ldr	r3, [pc, #4]	; (8009274 <__errno+0x8>)
 800926e:	6818      	ldr	r0, [r3, #0]
 8009270:	4770      	bx	lr
 8009272:	bf00      	nop
 8009274:	200000c8 	.word	0x200000c8

08009278 <__libc_init_array>:
 8009278:	b570      	push	{r4, r5, r6, lr}
 800927a:	4d0d      	ldr	r5, [pc, #52]	; (80092b0 <__libc_init_array+0x38>)
 800927c:	4c0d      	ldr	r4, [pc, #52]	; (80092b4 <__libc_init_array+0x3c>)
 800927e:	1b64      	subs	r4, r4, r5
 8009280:	10a4      	asrs	r4, r4, #2
 8009282:	2600      	movs	r6, #0
 8009284:	42a6      	cmp	r6, r4
 8009286:	d109      	bne.n	800929c <__libc_init_array+0x24>
 8009288:	4d0b      	ldr	r5, [pc, #44]	; (80092b8 <__libc_init_array+0x40>)
 800928a:	4c0c      	ldr	r4, [pc, #48]	; (80092bc <__libc_init_array+0x44>)
 800928c:	f002 fdec 	bl	800be68 <_init>
 8009290:	1b64      	subs	r4, r4, r5
 8009292:	10a4      	asrs	r4, r4, #2
 8009294:	2600      	movs	r6, #0
 8009296:	42a6      	cmp	r6, r4
 8009298:	d105      	bne.n	80092a6 <__libc_init_array+0x2e>
 800929a:	bd70      	pop	{r4, r5, r6, pc}
 800929c:	f855 3b04 	ldr.w	r3, [r5], #4
 80092a0:	4798      	blx	r3
 80092a2:	3601      	adds	r6, #1
 80092a4:	e7ee      	b.n	8009284 <__libc_init_array+0xc>
 80092a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80092aa:	4798      	blx	r3
 80092ac:	3601      	adds	r6, #1
 80092ae:	e7f2      	b.n	8009296 <__libc_init_array+0x1e>
 80092b0:	0800d8f4 	.word	0x0800d8f4
 80092b4:	0800d8f4 	.word	0x0800d8f4
 80092b8:	0800d8f4 	.word	0x0800d8f4
 80092bc:	0800d8f8 	.word	0x0800d8f8

080092c0 <localtime>:
 80092c0:	b538      	push	{r3, r4, r5, lr}
 80092c2:	4b0b      	ldr	r3, [pc, #44]	; (80092f0 <localtime+0x30>)
 80092c4:	681d      	ldr	r5, [r3, #0]
 80092c6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80092c8:	4604      	mov	r4, r0
 80092ca:	b953      	cbnz	r3, 80092e2 <localtime+0x22>
 80092cc:	2024      	movs	r0, #36	; 0x24
 80092ce:	f000 f909 	bl	80094e4 <malloc>
 80092d2:	4602      	mov	r2, r0
 80092d4:	63e8      	str	r0, [r5, #60]	; 0x3c
 80092d6:	b920      	cbnz	r0, 80092e2 <localtime+0x22>
 80092d8:	4b06      	ldr	r3, [pc, #24]	; (80092f4 <localtime+0x34>)
 80092da:	4807      	ldr	r0, [pc, #28]	; (80092f8 <localtime+0x38>)
 80092dc:	2132      	movs	r1, #50	; 0x32
 80092de:	f000 ff0b 	bl	800a0f8 <__assert_func>
 80092e2:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 80092e4:	4620      	mov	r0, r4
 80092e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092ea:	f000 b807 	b.w	80092fc <localtime_r>
 80092ee:	bf00      	nop
 80092f0:	200000c8 	.word	0x200000c8
 80092f4:	0800d590 	.word	0x0800d590
 80092f8:	0800d5a7 	.word	0x0800d5a7

080092fc <localtime_r>:
 80092fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009300:	4680      	mov	r8, r0
 8009302:	9101      	str	r1, [sp, #4]
 8009304:	f000 ff80 	bl	800a208 <__gettzinfo>
 8009308:	9901      	ldr	r1, [sp, #4]
 800930a:	4605      	mov	r5, r0
 800930c:	4640      	mov	r0, r8
 800930e:	f000 ff7f 	bl	800a210 <gmtime_r>
 8009312:	6943      	ldr	r3, [r0, #20]
 8009314:	0799      	lsls	r1, r3, #30
 8009316:	4604      	mov	r4, r0
 8009318:	f203 776c 	addw	r7, r3, #1900	; 0x76c
 800931c:	d105      	bne.n	800932a <localtime_r+0x2e>
 800931e:	2264      	movs	r2, #100	; 0x64
 8009320:	fb97 f3f2 	sdiv	r3, r7, r2
 8009324:	fb02 7313 	mls	r3, r2, r3, r7
 8009328:	bb73      	cbnz	r3, 8009388 <localtime_r+0x8c>
 800932a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800932e:	fb97 f6f3 	sdiv	r6, r7, r3
 8009332:	fb03 7616 	mls	r6, r3, r6, r7
 8009336:	fab6 f386 	clz	r3, r6
 800933a:	095b      	lsrs	r3, r3, #5
 800933c:	4e67      	ldr	r6, [pc, #412]	; (80094dc <localtime_r+0x1e0>)
 800933e:	2230      	movs	r2, #48	; 0x30
 8009340:	fb02 6603 	mla	r6, r2, r3, r6
 8009344:	f000 fd46 	bl	8009dd4 <__tz_lock>
 8009348:	f000 fd50 	bl	8009dec <_tzset_unlocked>
 800934c:	4b64      	ldr	r3, [pc, #400]	; (80094e0 <localtime_r+0x1e4>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	b34b      	cbz	r3, 80093a6 <localtime_r+0xaa>
 8009352:	686b      	ldr	r3, [r5, #4]
 8009354:	42bb      	cmp	r3, r7
 8009356:	d119      	bne.n	800938c <localtime_r+0x90>
 8009358:	682f      	ldr	r7, [r5, #0]
 800935a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800935e:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8009362:	b9df      	cbnz	r7, 800939c <localtime_r+0xa0>
 8009364:	4282      	cmp	r2, r0
 8009366:	eb73 0101 	sbcs.w	r1, r3, r1
 800936a:	da23      	bge.n	80093b4 <localtime_r+0xb8>
 800936c:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 8009370:	4282      	cmp	r2, r0
 8009372:	eb73 0701 	sbcs.w	r7, r3, r1
 8009376:	bfb4      	ite	lt
 8009378:	2701      	movlt	r7, #1
 800937a:	2700      	movge	r7, #0
 800937c:	4282      	cmp	r2, r0
 800937e:	418b      	sbcs	r3, r1
 8009380:	6227      	str	r7, [r4, #32]
 8009382:	db19      	blt.n	80093b8 <localtime_r+0xbc>
 8009384:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8009386:	e018      	b.n	80093ba <localtime_r+0xbe>
 8009388:	2301      	movs	r3, #1
 800938a:	e7d7      	b.n	800933c <localtime_r+0x40>
 800938c:	4638      	mov	r0, r7
 800938e:	f000 fc77 	bl	8009c80 <__tzcalc_limits>
 8009392:	2800      	cmp	r0, #0
 8009394:	d1e0      	bne.n	8009358 <localtime_r+0x5c>
 8009396:	f04f 33ff 	mov.w	r3, #4294967295
 800939a:	e004      	b.n	80093a6 <localtime_r+0xaa>
 800939c:	4282      	cmp	r2, r0
 800939e:	eb73 0101 	sbcs.w	r1, r3, r1
 80093a2:	da02      	bge.n	80093aa <localtime_r+0xae>
 80093a4:	2300      	movs	r3, #0
 80093a6:	6223      	str	r3, [r4, #32]
 80093a8:	e7ec      	b.n	8009384 <localtime_r+0x88>
 80093aa:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 80093ae:	4282      	cmp	r2, r0
 80093b0:	418b      	sbcs	r3, r1
 80093b2:	daf7      	bge.n	80093a4 <localtime_r+0xa8>
 80093b4:	2301      	movs	r3, #1
 80093b6:	6223      	str	r3, [r4, #32]
 80093b8:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80093ba:	6861      	ldr	r1, [r4, #4]
 80093bc:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80093c0:	203c      	movs	r0, #60	; 0x3c
 80093c2:	fb93 f5f2 	sdiv	r5, r3, r2
 80093c6:	fb02 3315 	mls	r3, r2, r5, r3
 80093ca:	fb93 f2f0 	sdiv	r2, r3, r0
 80093ce:	fb00 3012 	mls	r0, r0, r2, r3
 80093d2:	6823      	ldr	r3, [r4, #0]
 80093d4:	1a89      	subs	r1, r1, r2
 80093d6:	68a2      	ldr	r2, [r4, #8]
 80093d8:	6061      	str	r1, [r4, #4]
 80093da:	1a1b      	subs	r3, r3, r0
 80093dc:	1b52      	subs	r2, r2, r5
 80093de:	2b3b      	cmp	r3, #59	; 0x3b
 80093e0:	6023      	str	r3, [r4, #0]
 80093e2:	60a2      	str	r2, [r4, #8]
 80093e4:	dd35      	ble.n	8009452 <localtime_r+0x156>
 80093e6:	3101      	adds	r1, #1
 80093e8:	6061      	str	r1, [r4, #4]
 80093ea:	3b3c      	subs	r3, #60	; 0x3c
 80093ec:	6023      	str	r3, [r4, #0]
 80093ee:	6863      	ldr	r3, [r4, #4]
 80093f0:	2b3b      	cmp	r3, #59	; 0x3b
 80093f2:	dd34      	ble.n	800945e <localtime_r+0x162>
 80093f4:	3201      	adds	r2, #1
 80093f6:	60a2      	str	r2, [r4, #8]
 80093f8:	3b3c      	subs	r3, #60	; 0x3c
 80093fa:	6063      	str	r3, [r4, #4]
 80093fc:	68a3      	ldr	r3, [r4, #8]
 80093fe:	2b17      	cmp	r3, #23
 8009400:	dd33      	ble.n	800946a <localtime_r+0x16e>
 8009402:	69e2      	ldr	r2, [r4, #28]
 8009404:	3201      	adds	r2, #1
 8009406:	61e2      	str	r2, [r4, #28]
 8009408:	69a2      	ldr	r2, [r4, #24]
 800940a:	3201      	adds	r2, #1
 800940c:	2a06      	cmp	r2, #6
 800940e:	bfc8      	it	gt
 8009410:	2200      	movgt	r2, #0
 8009412:	61a2      	str	r2, [r4, #24]
 8009414:	68e2      	ldr	r2, [r4, #12]
 8009416:	3b18      	subs	r3, #24
 8009418:	3201      	adds	r2, #1
 800941a:	60a3      	str	r3, [r4, #8]
 800941c:	6923      	ldr	r3, [r4, #16]
 800941e:	60e2      	str	r2, [r4, #12]
 8009420:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8009424:	428a      	cmp	r2, r1
 8009426:	dd0e      	ble.n	8009446 <localtime_r+0x14a>
 8009428:	2b0b      	cmp	r3, #11
 800942a:	eba2 0201 	sub.w	r2, r2, r1
 800942e:	60e2      	str	r2, [r4, #12]
 8009430:	f103 0201 	add.w	r2, r3, #1
 8009434:	bf09      	itett	eq
 8009436:	6963      	ldreq	r3, [r4, #20]
 8009438:	6122      	strne	r2, [r4, #16]
 800943a:	2200      	moveq	r2, #0
 800943c:	3301      	addeq	r3, #1
 800943e:	bf02      	ittt	eq
 8009440:	6122      	streq	r2, [r4, #16]
 8009442:	6163      	streq	r3, [r4, #20]
 8009444:	61e2      	streq	r2, [r4, #28]
 8009446:	f000 fccb 	bl	8009de0 <__tz_unlock>
 800944a:	4620      	mov	r0, r4
 800944c:	b002      	add	sp, #8
 800944e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009452:	2b00      	cmp	r3, #0
 8009454:	dacb      	bge.n	80093ee <localtime_r+0xf2>
 8009456:	3901      	subs	r1, #1
 8009458:	6061      	str	r1, [r4, #4]
 800945a:	333c      	adds	r3, #60	; 0x3c
 800945c:	e7c6      	b.n	80093ec <localtime_r+0xf0>
 800945e:	2b00      	cmp	r3, #0
 8009460:	dacc      	bge.n	80093fc <localtime_r+0x100>
 8009462:	3a01      	subs	r2, #1
 8009464:	60a2      	str	r2, [r4, #8]
 8009466:	333c      	adds	r3, #60	; 0x3c
 8009468:	e7c7      	b.n	80093fa <localtime_r+0xfe>
 800946a:	2b00      	cmp	r3, #0
 800946c:	daeb      	bge.n	8009446 <localtime_r+0x14a>
 800946e:	69e2      	ldr	r2, [r4, #28]
 8009470:	3a01      	subs	r2, #1
 8009472:	61e2      	str	r2, [r4, #28]
 8009474:	69a2      	ldr	r2, [r4, #24]
 8009476:	3a01      	subs	r2, #1
 8009478:	bf48      	it	mi
 800947a:	2206      	movmi	r2, #6
 800947c:	61a2      	str	r2, [r4, #24]
 800947e:	68e2      	ldr	r2, [r4, #12]
 8009480:	3318      	adds	r3, #24
 8009482:	3a01      	subs	r2, #1
 8009484:	60e2      	str	r2, [r4, #12]
 8009486:	60a3      	str	r3, [r4, #8]
 8009488:	2a00      	cmp	r2, #0
 800948a:	d1dc      	bne.n	8009446 <localtime_r+0x14a>
 800948c:	6923      	ldr	r3, [r4, #16]
 800948e:	3b01      	subs	r3, #1
 8009490:	d405      	bmi.n	800949e <localtime_r+0x1a2>
 8009492:	6123      	str	r3, [r4, #16]
 8009494:	6923      	ldr	r3, [r4, #16]
 8009496:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800949a:	60e3      	str	r3, [r4, #12]
 800949c:	e7d3      	b.n	8009446 <localtime_r+0x14a>
 800949e:	230b      	movs	r3, #11
 80094a0:	6123      	str	r3, [r4, #16]
 80094a2:	6963      	ldr	r3, [r4, #20]
 80094a4:	1e5a      	subs	r2, r3, #1
 80094a6:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80094aa:	6162      	str	r2, [r4, #20]
 80094ac:	079a      	lsls	r2, r3, #30
 80094ae:	d105      	bne.n	80094bc <localtime_r+0x1c0>
 80094b0:	2164      	movs	r1, #100	; 0x64
 80094b2:	fb93 f2f1 	sdiv	r2, r3, r1
 80094b6:	fb01 3212 	mls	r2, r1, r2, r3
 80094ba:	b962      	cbnz	r2, 80094d6 <localtime_r+0x1da>
 80094bc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80094c0:	fb93 f1f2 	sdiv	r1, r3, r2
 80094c4:	fb02 3311 	mls	r3, r2, r1, r3
 80094c8:	fab3 f383 	clz	r3, r3
 80094cc:	095b      	lsrs	r3, r3, #5
 80094ce:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80094d2:	61e3      	str	r3, [r4, #28]
 80094d4:	e7de      	b.n	8009494 <localtime_r+0x198>
 80094d6:	2301      	movs	r3, #1
 80094d8:	e7f9      	b.n	80094ce <localtime_r+0x1d2>
 80094da:	bf00      	nop
 80094dc:	0800d664 	.word	0x0800d664
 80094e0:	20000e58 	.word	0x20000e58

080094e4 <malloc>:
 80094e4:	4b02      	ldr	r3, [pc, #8]	; (80094f0 <malloc+0xc>)
 80094e6:	4601      	mov	r1, r0
 80094e8:	6818      	ldr	r0, [r3, #0]
 80094ea:	f000 baf1 	b.w	8009ad0 <_malloc_r>
 80094ee:	bf00      	nop
 80094f0:	200000c8 	.word	0x200000c8

080094f4 <free>:
 80094f4:	4b02      	ldr	r3, [pc, #8]	; (8009500 <free+0xc>)
 80094f6:	4601      	mov	r1, r0
 80094f8:	6818      	ldr	r0, [r3, #0]
 80094fa:	f000 ba7d 	b.w	80099f8 <_free_r>
 80094fe:	bf00      	nop
 8009500:	200000c8 	.word	0x200000c8

08009504 <memset>:
 8009504:	4402      	add	r2, r0
 8009506:	4603      	mov	r3, r0
 8009508:	4293      	cmp	r3, r2
 800950a:	d100      	bne.n	800950e <memset+0xa>
 800950c:	4770      	bx	lr
 800950e:	f803 1b01 	strb.w	r1, [r3], #1
 8009512:	e7f9      	b.n	8009508 <memset+0x4>

08009514 <validate_structure>:
 8009514:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009516:	6801      	ldr	r1, [r0, #0]
 8009518:	293b      	cmp	r1, #59	; 0x3b
 800951a:	4604      	mov	r4, r0
 800951c:	d911      	bls.n	8009542 <validate_structure+0x2e>
 800951e:	223c      	movs	r2, #60	; 0x3c
 8009520:	4668      	mov	r0, sp
 8009522:	f000 fe07 	bl	800a134 <div>
 8009526:	9a01      	ldr	r2, [sp, #4]
 8009528:	6863      	ldr	r3, [r4, #4]
 800952a:	9900      	ldr	r1, [sp, #0]
 800952c:	2a00      	cmp	r2, #0
 800952e:	440b      	add	r3, r1
 8009530:	6063      	str	r3, [r4, #4]
 8009532:	bfbb      	ittet	lt
 8009534:	323c      	addlt	r2, #60	; 0x3c
 8009536:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800953a:	6022      	strge	r2, [r4, #0]
 800953c:	6022      	strlt	r2, [r4, #0]
 800953e:	bfb8      	it	lt
 8009540:	6063      	strlt	r3, [r4, #4]
 8009542:	6861      	ldr	r1, [r4, #4]
 8009544:	293b      	cmp	r1, #59	; 0x3b
 8009546:	d911      	bls.n	800956c <validate_structure+0x58>
 8009548:	223c      	movs	r2, #60	; 0x3c
 800954a:	4668      	mov	r0, sp
 800954c:	f000 fdf2 	bl	800a134 <div>
 8009550:	9a01      	ldr	r2, [sp, #4]
 8009552:	68a3      	ldr	r3, [r4, #8]
 8009554:	9900      	ldr	r1, [sp, #0]
 8009556:	2a00      	cmp	r2, #0
 8009558:	440b      	add	r3, r1
 800955a:	60a3      	str	r3, [r4, #8]
 800955c:	bfbb      	ittet	lt
 800955e:	323c      	addlt	r2, #60	; 0x3c
 8009560:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8009564:	6062      	strge	r2, [r4, #4]
 8009566:	6062      	strlt	r2, [r4, #4]
 8009568:	bfb8      	it	lt
 800956a:	60a3      	strlt	r3, [r4, #8]
 800956c:	68a1      	ldr	r1, [r4, #8]
 800956e:	2917      	cmp	r1, #23
 8009570:	d911      	bls.n	8009596 <validate_structure+0x82>
 8009572:	2218      	movs	r2, #24
 8009574:	4668      	mov	r0, sp
 8009576:	f000 fddd 	bl	800a134 <div>
 800957a:	9a01      	ldr	r2, [sp, #4]
 800957c:	68e3      	ldr	r3, [r4, #12]
 800957e:	9900      	ldr	r1, [sp, #0]
 8009580:	2a00      	cmp	r2, #0
 8009582:	440b      	add	r3, r1
 8009584:	60e3      	str	r3, [r4, #12]
 8009586:	bfbb      	ittet	lt
 8009588:	3218      	addlt	r2, #24
 800958a:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800958e:	60a2      	strge	r2, [r4, #8]
 8009590:	60a2      	strlt	r2, [r4, #8]
 8009592:	bfb8      	it	lt
 8009594:	60e3      	strlt	r3, [r4, #12]
 8009596:	6921      	ldr	r1, [r4, #16]
 8009598:	290b      	cmp	r1, #11
 800959a:	d911      	bls.n	80095c0 <validate_structure+0xac>
 800959c:	220c      	movs	r2, #12
 800959e:	4668      	mov	r0, sp
 80095a0:	f000 fdc8 	bl	800a134 <div>
 80095a4:	9a01      	ldr	r2, [sp, #4]
 80095a6:	6963      	ldr	r3, [r4, #20]
 80095a8:	9900      	ldr	r1, [sp, #0]
 80095aa:	2a00      	cmp	r2, #0
 80095ac:	440b      	add	r3, r1
 80095ae:	6163      	str	r3, [r4, #20]
 80095b0:	bfbb      	ittet	lt
 80095b2:	320c      	addlt	r2, #12
 80095b4:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80095b8:	6122      	strge	r2, [r4, #16]
 80095ba:	6122      	strlt	r2, [r4, #16]
 80095bc:	bfb8      	it	lt
 80095be:	6163      	strlt	r3, [r4, #20]
 80095c0:	6963      	ldr	r3, [r4, #20]
 80095c2:	0798      	lsls	r0, r3, #30
 80095c4:	d120      	bne.n	8009608 <validate_structure+0xf4>
 80095c6:	2164      	movs	r1, #100	; 0x64
 80095c8:	fb93 f2f1 	sdiv	r2, r3, r1
 80095cc:	fb01 3212 	mls	r2, r1, r2, r3
 80095d0:	b9e2      	cbnz	r2, 800960c <validate_structure+0xf8>
 80095d2:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80095d6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80095da:	fb93 f1f2 	sdiv	r1, r3, r2
 80095de:	fb02 3311 	mls	r3, r2, r1, r3
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	bf14      	ite	ne
 80095e6:	231c      	movne	r3, #28
 80095e8:	231d      	moveq	r3, #29
 80095ea:	68e2      	ldr	r2, [r4, #12]
 80095ec:	2a00      	cmp	r2, #0
 80095ee:	dc0f      	bgt.n	8009610 <validate_structure+0xfc>
 80095f0:	4f33      	ldr	r7, [pc, #204]	; (80096c0 <validate_structure+0x1ac>)
 80095f2:	260b      	movs	r6, #11
 80095f4:	2064      	movs	r0, #100	; 0x64
 80095f6:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80095fa:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 80095fe:	f1bc 0f00 	cmp.w	ip, #0
 8009602:	dd31      	ble.n	8009668 <validate_structure+0x154>
 8009604:	b003      	add	sp, #12
 8009606:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009608:	231c      	movs	r3, #28
 800960a:	e7ee      	b.n	80095ea <validate_structure+0xd6>
 800960c:	231d      	movs	r3, #29
 800960e:	e7ec      	b.n	80095ea <validate_structure+0xd6>
 8009610:	4e2b      	ldr	r6, [pc, #172]	; (80096c0 <validate_structure+0x1ac>)
 8009612:	2700      	movs	r7, #0
 8009614:	2064      	movs	r0, #100	; 0x64
 8009616:	f44f 75c8 	mov.w	r5, #400	; 0x190
 800961a:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800961e:	2a01      	cmp	r2, #1
 8009620:	bf14      	ite	ne
 8009622:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 8009626:	469c      	moveq	ip, r3
 8009628:	4561      	cmp	r1, ip
 800962a:	ddeb      	ble.n	8009604 <validate_structure+0xf0>
 800962c:	3201      	adds	r2, #1
 800962e:	eba1 010c 	sub.w	r1, r1, ip
 8009632:	2a0c      	cmp	r2, #12
 8009634:	60e1      	str	r1, [r4, #12]
 8009636:	6122      	str	r2, [r4, #16]
 8009638:	d1ef      	bne.n	800961a <validate_structure+0x106>
 800963a:	6963      	ldr	r3, [r4, #20]
 800963c:	1c5a      	adds	r2, r3, #1
 800963e:	0791      	lsls	r1, r2, #30
 8009640:	e9c4 7204 	strd	r7, r2, [r4, #16]
 8009644:	d137      	bne.n	80096b6 <validate_structure+0x1a2>
 8009646:	fb92 f1f0 	sdiv	r1, r2, r0
 800964a:	fb00 2211 	mls	r2, r0, r1, r2
 800964e:	2a00      	cmp	r2, #0
 8009650:	d133      	bne.n	80096ba <validate_structure+0x1a6>
 8009652:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 8009656:	fb93 f2f5 	sdiv	r2, r3, r5
 800965a:	fb05 3312 	mls	r3, r5, r2, r3
 800965e:	2b00      	cmp	r3, #0
 8009660:	bf14      	ite	ne
 8009662:	231c      	movne	r3, #28
 8009664:	231d      	moveq	r3, #29
 8009666:	e7d8      	b.n	800961a <validate_structure+0x106>
 8009668:	6921      	ldr	r1, [r4, #16]
 800966a:	3901      	subs	r1, #1
 800966c:	6121      	str	r1, [r4, #16]
 800966e:	3101      	adds	r1, #1
 8009670:	d114      	bne.n	800969c <validate_structure+0x188>
 8009672:	6963      	ldr	r3, [r4, #20]
 8009674:	1e5a      	subs	r2, r3, #1
 8009676:	0791      	lsls	r1, r2, #30
 8009678:	e9c4 6204 	strd	r6, r2, [r4, #16]
 800967c:	d117      	bne.n	80096ae <validate_structure+0x19a>
 800967e:	fb92 f1f0 	sdiv	r1, r2, r0
 8009682:	fb00 2211 	mls	r2, r0, r1, r2
 8009686:	b9a2      	cbnz	r2, 80096b2 <validate_structure+0x19e>
 8009688:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 800968c:	fb93 f2f5 	sdiv	r2, r3, r5
 8009690:	fb05 3312 	mls	r3, r5, r2, r3
 8009694:	2b00      	cmp	r3, #0
 8009696:	bf14      	ite	ne
 8009698:	231c      	movne	r3, #28
 800969a:	231d      	moveq	r3, #29
 800969c:	6922      	ldr	r2, [r4, #16]
 800969e:	2a01      	cmp	r2, #1
 80096a0:	bf14      	ite	ne
 80096a2:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 80096a6:	461a      	moveq	r2, r3
 80096a8:	4462      	add	r2, ip
 80096aa:	60e2      	str	r2, [r4, #12]
 80096ac:	e7a5      	b.n	80095fa <validate_structure+0xe6>
 80096ae:	231c      	movs	r3, #28
 80096b0:	e7f4      	b.n	800969c <validate_structure+0x188>
 80096b2:	231d      	movs	r3, #29
 80096b4:	e7f2      	b.n	800969c <validate_structure+0x188>
 80096b6:	231c      	movs	r3, #28
 80096b8:	e7af      	b.n	800961a <validate_structure+0x106>
 80096ba:	231d      	movs	r3, #29
 80096bc:	e7ad      	b.n	800961a <validate_structure+0x106>
 80096be:	bf00      	nop
 80096c0:	0800d604 	.word	0x0800d604

080096c4 <mktime>:
 80096c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096c8:	b085      	sub	sp, #20
 80096ca:	4607      	mov	r7, r0
 80096cc:	f000 fd9c 	bl	800a208 <__gettzinfo>
 80096d0:	4681      	mov	r9, r0
 80096d2:	4638      	mov	r0, r7
 80096d4:	f7ff ff1e 	bl	8009514 <validate_structure>
 80096d8:	e9d7 4000 	ldrd	r4, r0, [r7]
 80096dc:	233c      	movs	r3, #60	; 0x3c
 80096de:	fb03 4400 	mla	r4, r3, r0, r4
 80096e2:	68b8      	ldr	r0, [r7, #8]
 80096e4:	4abc      	ldr	r2, [pc, #752]	; (80099d8 <mktime+0x314>)
 80096e6:	697e      	ldr	r6, [r7, #20]
 80096e8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80096ec:	fb03 4400 	mla	r4, r3, r0, r4
 80096f0:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 80096f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80096f8:	3d01      	subs	r5, #1
 80096fa:	2b01      	cmp	r3, #1
 80096fc:	4415      	add	r5, r2
 80096fe:	dd11      	ble.n	8009724 <mktime+0x60>
 8009700:	07b1      	lsls	r1, r6, #30
 8009702:	d10f      	bne.n	8009724 <mktime+0x60>
 8009704:	2264      	movs	r2, #100	; 0x64
 8009706:	fb96 f3f2 	sdiv	r3, r6, r2
 800970a:	fb02 6313 	mls	r3, r2, r3, r6
 800970e:	b943      	cbnz	r3, 8009722 <mktime+0x5e>
 8009710:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8009714:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009718:	fb93 f1f2 	sdiv	r1, r3, r2
 800971c:	fb02 3311 	mls	r3, r2, r1, r3
 8009720:	b903      	cbnz	r3, 8009724 <mktime+0x60>
 8009722:	3501      	adds	r5, #1
 8009724:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 8009728:	3310      	adds	r3, #16
 800972a:	f644 6220 	movw	r2, #20000	; 0x4e20
 800972e:	4293      	cmp	r3, r2
 8009730:	61fd      	str	r5, [r7, #28]
 8009732:	f200 815d 	bhi.w	80099f0 <mktime+0x32c>
 8009736:	2e46      	cmp	r6, #70	; 0x46
 8009738:	dd71      	ble.n	800981e <mktime+0x15a>
 800973a:	2346      	movs	r3, #70	; 0x46
 800973c:	f240 1c6d 	movw	ip, #365	; 0x16d
 8009740:	2164      	movs	r1, #100	; 0x64
 8009742:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8009746:	079a      	lsls	r2, r3, #30
 8009748:	d163      	bne.n	8009812 <mktime+0x14e>
 800974a:	fb93 f2f1 	sdiv	r2, r3, r1
 800974e:	fb01 3212 	mls	r2, r1, r2, r3
 8009752:	2a00      	cmp	r2, #0
 8009754:	d160      	bne.n	8009818 <mktime+0x154>
 8009756:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 800975a:	fb92 fef0 	sdiv	lr, r2, r0
 800975e:	fb00 221e 	mls	r2, r0, lr, r2
 8009762:	2a00      	cmp	r2, #0
 8009764:	bf14      	ite	ne
 8009766:	4662      	movne	r2, ip
 8009768:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800976c:	3301      	adds	r3, #1
 800976e:	429e      	cmp	r6, r3
 8009770:	4415      	add	r5, r2
 8009772:	d1e8      	bne.n	8009746 <mktime+0x82>
 8009774:	4b99      	ldr	r3, [pc, #612]	; (80099dc <mktime+0x318>)
 8009776:	ea4f 78e4 	mov.w	r8, r4, asr #31
 800977a:	fbc5 4803 	smlal	r4, r8, r5, r3
 800977e:	f000 fb29 	bl	8009dd4 <__tz_lock>
 8009782:	f000 fb33 	bl	8009dec <_tzset_unlocked>
 8009786:	4b96      	ldr	r3, [pc, #600]	; (80099e0 <mktime+0x31c>)
 8009788:	f8d3 b000 	ldr.w	fp, [r3]
 800978c:	f1bb 0f00 	cmp.w	fp, #0
 8009790:	d039      	beq.n	8009806 <mktime+0x142>
 8009792:	f8d7 b020 	ldr.w	fp, [r7, #32]
 8009796:	6978      	ldr	r0, [r7, #20]
 8009798:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800979c:	f1bb 0f01 	cmp.w	fp, #1
 80097a0:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80097a4:	46da      	mov	sl, fp
 80097a6:	bfa8      	it	ge
 80097a8:	f04f 0a01 	movge.w	sl, #1
 80097ac:	4283      	cmp	r3, r0
 80097ae:	d178      	bne.n	80098a2 <mktime+0x1de>
 80097b0:	e9d9 3208 	ldrd	r3, r2, [r9, #32]
 80097b4:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 80097b8:	f8d9 e04c 	ldr.w	lr, [r9, #76]	; 0x4c
 80097bc:	1a5b      	subs	r3, r3, r1
 80097be:	9302      	str	r3, [sp, #8]
 80097c0:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
 80097c4:	9303      	str	r3, [sp, #12]
 80097c6:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 80097ca:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 80097ce:	9301      	str	r3, [sp, #4]
 80097d0:	ebb3 0c02 	subs.w	ip, r3, r2
 80097d4:	eb6e 70e2 	sbc.w	r0, lr, r2, asr #31
 80097d8:	4564      	cmp	r4, ip
 80097da:	eb78 0300 	sbcs.w	r3, r8, r0
 80097de:	da66      	bge.n	80098ae <mktime+0x1ea>
 80097e0:	f8d9 3000 	ldr.w	r3, [r9]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d06f      	beq.n	80098c8 <mktime+0x204>
 80097e8:	9b02      	ldr	r3, [sp, #8]
 80097ea:	429c      	cmp	r4, r3
 80097ec:	9b03      	ldr	r3, [sp, #12]
 80097ee:	eb78 0303 	sbcs.w	r3, r8, r3
 80097f2:	db03      	blt.n	80097fc <mktime+0x138>
 80097f4:	4564      	cmp	r4, ip
 80097f6:	eb78 0300 	sbcs.w	r3, r8, r0
 80097fa:	db6b      	blt.n	80098d4 <mktime+0x210>
 80097fc:	f1bb 0f00 	cmp.w	fp, #0
 8009800:	f04f 0b00 	mov.w	fp, #0
 8009804:	da6b      	bge.n	80098de <mktime+0x21a>
 8009806:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 800980a:	190c      	adds	r4, r1, r4
 800980c:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 8009810:	e0a9      	b.n	8009966 <mktime+0x2a2>
 8009812:	f240 126d 	movw	r2, #365	; 0x16d
 8009816:	e7a9      	b.n	800976c <mktime+0xa8>
 8009818:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 800981c:	e7a6      	b.n	800976c <mktime+0xa8>
 800981e:	d0a9      	beq.n	8009774 <mktime+0xb0>
 8009820:	2345      	movs	r3, #69	; 0x45
 8009822:	f240 1c6d 	movw	ip, #365	; 0x16d
 8009826:	2164      	movs	r1, #100	; 0x64
 8009828:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800982c:	e012      	b.n	8009854 <mktime+0x190>
 800982e:	bb62      	cbnz	r2, 800988a <mktime+0x1c6>
 8009830:	fb93 f2f1 	sdiv	r2, r3, r1
 8009834:	fb01 3212 	mls	r2, r1, r2, r3
 8009838:	bb52      	cbnz	r2, 8009890 <mktime+0x1cc>
 800983a:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 800983e:	fb92 fef0 	sdiv	lr, r2, r0
 8009842:	fb00 221e 	mls	r2, r0, lr, r2
 8009846:	2a00      	cmp	r2, #0
 8009848:	bf14      	ite	ne
 800984a:	4662      	movne	r2, ip
 800984c:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8009850:	1aad      	subs	r5, r5, r2
 8009852:	3b01      	subs	r3, #1
 8009854:	429e      	cmp	r6, r3
 8009856:	f003 0203 	and.w	r2, r3, #3
 800985a:	dbe8      	blt.n	800982e <mktime+0x16a>
 800985c:	b9da      	cbnz	r2, 8009896 <mktime+0x1d2>
 800985e:	2264      	movs	r2, #100	; 0x64
 8009860:	fb96 f3f2 	sdiv	r3, r6, r2
 8009864:	fb02 6313 	mls	r3, r2, r3, r6
 8009868:	b9c3      	cbnz	r3, 800989c <mktime+0x1d8>
 800986a:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 800986e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009872:	fb93 f1f2 	sdiv	r1, r3, r2
 8009876:	fb02 3311 	mls	r3, r2, r1, r3
 800987a:	2b00      	cmp	r3, #0
 800987c:	f240 136d 	movw	r3, #365	; 0x16d
 8009880:	bf08      	it	eq
 8009882:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8009886:	1aed      	subs	r5, r5, r3
 8009888:	e774      	b.n	8009774 <mktime+0xb0>
 800988a:	f240 126d 	movw	r2, #365	; 0x16d
 800988e:	e7df      	b.n	8009850 <mktime+0x18c>
 8009890:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8009894:	e7dc      	b.n	8009850 <mktime+0x18c>
 8009896:	f240 136d 	movw	r3, #365	; 0x16d
 800989a:	e7f4      	b.n	8009886 <mktime+0x1c2>
 800989c:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 80098a0:	e7f1      	b.n	8009886 <mktime+0x1c2>
 80098a2:	f000 f9ed 	bl	8009c80 <__tzcalc_limits>
 80098a6:	2800      	cmp	r0, #0
 80098a8:	d182      	bne.n	80097b0 <mktime+0xec>
 80098aa:	46d3      	mov	fp, sl
 80098ac:	e050      	b.n	8009950 <mktime+0x28c>
 80098ae:	9b01      	ldr	r3, [sp, #4]
 80098b0:	1a5b      	subs	r3, r3, r1
 80098b2:	9301      	str	r3, [sp, #4]
 80098b4:	ea4f 73e1 	mov.w	r3, r1, asr #31
 80098b8:	eb6e 0e03 	sbc.w	lr, lr, r3
 80098bc:	9b01      	ldr	r3, [sp, #4]
 80098be:	429c      	cmp	r4, r3
 80098c0:	eb78 030e 	sbcs.w	r3, r8, lr
 80098c4:	dbf1      	blt.n	80098aa <mktime+0x1e6>
 80098c6:	e78b      	b.n	80097e0 <mktime+0x11c>
 80098c8:	9b02      	ldr	r3, [sp, #8]
 80098ca:	429c      	cmp	r4, r3
 80098cc:	9b03      	ldr	r3, [sp, #12]
 80098ce:	eb78 0303 	sbcs.w	r3, r8, r3
 80098d2:	db8f      	blt.n	80097f4 <mktime+0x130>
 80098d4:	f1bb 0f00 	cmp.w	fp, #0
 80098d8:	db3e      	blt.n	8009958 <mktime+0x294>
 80098da:	f04f 0b01 	mov.w	fp, #1
 80098de:	ea8a 0a0b 	eor.w	sl, sl, fp
 80098e2:	f1ba 0f01 	cmp.w	sl, #1
 80098e6:	d133      	bne.n	8009950 <mktime+0x28c>
 80098e8:	f1bb 0f00 	cmp.w	fp, #0
 80098ec:	d04e      	beq.n	800998c <mktime+0x2c8>
 80098ee:	1a52      	subs	r2, r2, r1
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 80098f6:	4413      	add	r3, r2
 80098f8:	1914      	adds	r4, r2, r4
 80098fa:	603b      	str	r3, [r7, #0]
 80098fc:	4638      	mov	r0, r7
 80098fe:	eb48 78e2 	adc.w	r8, r8, r2, asr #31
 8009902:	f7ff fe07 	bl	8009514 <validate_structure>
 8009906:	68fa      	ldr	r2, [r7, #12]
 8009908:	ebb2 020a 	subs.w	r2, r2, sl
 800990c:	d020      	beq.n	8009950 <mktime+0x28c>
 800990e:	2a01      	cmp	r2, #1
 8009910:	dc3e      	bgt.n	8009990 <mktime+0x2cc>
 8009912:	1c90      	adds	r0, r2, #2
 8009914:	bfd8      	it	le
 8009916:	2201      	movle	r2, #1
 8009918:	69fb      	ldr	r3, [r7, #28]
 800991a:	18d3      	adds	r3, r2, r3
 800991c:	4415      	add	r5, r2
 800991e:	d540      	bpl.n	80099a2 <mktime+0x2de>
 8009920:	1e73      	subs	r3, r6, #1
 8009922:	0799      	lsls	r1, r3, #30
 8009924:	d137      	bne.n	8009996 <mktime+0x2d2>
 8009926:	2264      	movs	r2, #100	; 0x64
 8009928:	fb93 f1f2 	sdiv	r1, r3, r2
 800992c:	fb02 3311 	mls	r3, r2, r1, r3
 8009930:	bba3      	cbnz	r3, 800999c <mktime+0x2d8>
 8009932:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8009936:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 800993a:	fb96 f2f3 	sdiv	r2, r6, r3
 800993e:	fb03 6612 	mls	r6, r3, r2, r6
 8009942:	2e00      	cmp	r6, #0
 8009944:	f240 136d 	movw	r3, #365	; 0x16d
 8009948:	bf18      	it	ne
 800994a:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 800994e:	61fb      	str	r3, [r7, #28]
 8009950:	f1bb 0f01 	cmp.w	fp, #1
 8009954:	f47f af57 	bne.w	8009806 <mktime+0x142>
 8009958:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 800995c:	190c      	adds	r4, r1, r4
 800995e:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 8009962:	f04f 0b01 	mov.w	fp, #1
 8009966:	f000 fa3b 	bl	8009de0 <__tz_unlock>
 800996a:	3504      	adds	r5, #4
 800996c:	2307      	movs	r3, #7
 800996e:	fb95 f3f3 	sdiv	r3, r5, r3
 8009972:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8009976:	1aed      	subs	r5, r5, r3
 8009978:	bf48      	it	mi
 800997a:	3507      	addmi	r5, #7
 800997c:	f8c7 b020 	str.w	fp, [r7, #32]
 8009980:	61bd      	str	r5, [r7, #24]
 8009982:	4620      	mov	r0, r4
 8009984:	4641      	mov	r1, r8
 8009986:	b005      	add	sp, #20
 8009988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800998c:	1a8a      	subs	r2, r1, r2
 800998e:	e7af      	b.n	80098f0 <mktime+0x22c>
 8009990:	f04f 32ff 	mov.w	r2, #4294967295
 8009994:	e7c0      	b.n	8009918 <mktime+0x254>
 8009996:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 800999a:	e7d8      	b.n	800994e <mktime+0x28a>
 800999c:	f240 136d 	movw	r3, #365	; 0x16d
 80099a0:	e7d5      	b.n	800994e <mktime+0x28a>
 80099a2:	07b2      	lsls	r2, r6, #30
 80099a4:	d11e      	bne.n	80099e4 <mktime+0x320>
 80099a6:	2164      	movs	r1, #100	; 0x64
 80099a8:	fb96 f2f1 	sdiv	r2, r6, r1
 80099ac:	fb01 6212 	mls	r2, r1, r2, r6
 80099b0:	b9da      	cbnz	r2, 80099ea <mktime+0x326>
 80099b2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80099b6:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 80099ba:	fb96 f1f2 	sdiv	r1, r6, r2
 80099be:	fb02 6611 	mls	r6, r2, r1, r6
 80099c2:	2e00      	cmp	r6, #0
 80099c4:	f240 126d 	movw	r2, #365	; 0x16d
 80099c8:	bf08      	it	eq
 80099ca:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80099ce:	4293      	cmp	r3, r2
 80099d0:	bfa8      	it	ge
 80099d2:	1a9b      	subge	r3, r3, r2
 80099d4:	e7bb      	b.n	800994e <mktime+0x28a>
 80099d6:	bf00      	nop
 80099d8:	0800d634 	.word	0x0800d634
 80099dc:	00015180 	.word	0x00015180
 80099e0:	20000e58 	.word	0x20000e58
 80099e4:	f240 126d 	movw	r2, #365	; 0x16d
 80099e8:	e7f1      	b.n	80099ce <mktime+0x30a>
 80099ea:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80099ee:	e7ee      	b.n	80099ce <mktime+0x30a>
 80099f0:	f04f 34ff 	mov.w	r4, #4294967295
 80099f4:	46a0      	mov	r8, r4
 80099f6:	e7c4      	b.n	8009982 <mktime+0x2be>

080099f8 <_free_r>:
 80099f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80099fa:	2900      	cmp	r1, #0
 80099fc:	d044      	beq.n	8009a88 <_free_r+0x90>
 80099fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a02:	9001      	str	r0, [sp, #4]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	f1a1 0404 	sub.w	r4, r1, #4
 8009a0a:	bfb8      	it	lt
 8009a0c:	18e4      	addlt	r4, r4, r3
 8009a0e:	f000 fcb1 	bl	800a374 <__malloc_lock>
 8009a12:	4a1e      	ldr	r2, [pc, #120]	; (8009a8c <_free_r+0x94>)
 8009a14:	9801      	ldr	r0, [sp, #4]
 8009a16:	6813      	ldr	r3, [r2, #0]
 8009a18:	b933      	cbnz	r3, 8009a28 <_free_r+0x30>
 8009a1a:	6063      	str	r3, [r4, #4]
 8009a1c:	6014      	str	r4, [r2, #0]
 8009a1e:	b003      	add	sp, #12
 8009a20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009a24:	f000 bcac 	b.w	800a380 <__malloc_unlock>
 8009a28:	42a3      	cmp	r3, r4
 8009a2a:	d908      	bls.n	8009a3e <_free_r+0x46>
 8009a2c:	6825      	ldr	r5, [r4, #0]
 8009a2e:	1961      	adds	r1, r4, r5
 8009a30:	428b      	cmp	r3, r1
 8009a32:	bf01      	itttt	eq
 8009a34:	6819      	ldreq	r1, [r3, #0]
 8009a36:	685b      	ldreq	r3, [r3, #4]
 8009a38:	1949      	addeq	r1, r1, r5
 8009a3a:	6021      	streq	r1, [r4, #0]
 8009a3c:	e7ed      	b.n	8009a1a <_free_r+0x22>
 8009a3e:	461a      	mov	r2, r3
 8009a40:	685b      	ldr	r3, [r3, #4]
 8009a42:	b10b      	cbz	r3, 8009a48 <_free_r+0x50>
 8009a44:	42a3      	cmp	r3, r4
 8009a46:	d9fa      	bls.n	8009a3e <_free_r+0x46>
 8009a48:	6811      	ldr	r1, [r2, #0]
 8009a4a:	1855      	adds	r5, r2, r1
 8009a4c:	42a5      	cmp	r5, r4
 8009a4e:	d10b      	bne.n	8009a68 <_free_r+0x70>
 8009a50:	6824      	ldr	r4, [r4, #0]
 8009a52:	4421      	add	r1, r4
 8009a54:	1854      	adds	r4, r2, r1
 8009a56:	42a3      	cmp	r3, r4
 8009a58:	6011      	str	r1, [r2, #0]
 8009a5a:	d1e0      	bne.n	8009a1e <_free_r+0x26>
 8009a5c:	681c      	ldr	r4, [r3, #0]
 8009a5e:	685b      	ldr	r3, [r3, #4]
 8009a60:	6053      	str	r3, [r2, #4]
 8009a62:	4421      	add	r1, r4
 8009a64:	6011      	str	r1, [r2, #0]
 8009a66:	e7da      	b.n	8009a1e <_free_r+0x26>
 8009a68:	d902      	bls.n	8009a70 <_free_r+0x78>
 8009a6a:	230c      	movs	r3, #12
 8009a6c:	6003      	str	r3, [r0, #0]
 8009a6e:	e7d6      	b.n	8009a1e <_free_r+0x26>
 8009a70:	6825      	ldr	r5, [r4, #0]
 8009a72:	1961      	adds	r1, r4, r5
 8009a74:	428b      	cmp	r3, r1
 8009a76:	bf04      	itt	eq
 8009a78:	6819      	ldreq	r1, [r3, #0]
 8009a7a:	685b      	ldreq	r3, [r3, #4]
 8009a7c:	6063      	str	r3, [r4, #4]
 8009a7e:	bf04      	itt	eq
 8009a80:	1949      	addeq	r1, r1, r5
 8009a82:	6021      	streq	r1, [r4, #0]
 8009a84:	6054      	str	r4, [r2, #4]
 8009a86:	e7ca      	b.n	8009a1e <_free_r+0x26>
 8009a88:	b003      	add	sp, #12
 8009a8a:	bd30      	pop	{r4, r5, pc}
 8009a8c:	20000e34 	.word	0x20000e34

08009a90 <sbrk_aligned>:
 8009a90:	b570      	push	{r4, r5, r6, lr}
 8009a92:	4e0e      	ldr	r6, [pc, #56]	; (8009acc <sbrk_aligned+0x3c>)
 8009a94:	460c      	mov	r4, r1
 8009a96:	6831      	ldr	r1, [r6, #0]
 8009a98:	4605      	mov	r5, r0
 8009a9a:	b911      	cbnz	r1, 8009aa2 <sbrk_aligned+0x12>
 8009a9c:	f000 f88c 	bl	8009bb8 <_sbrk_r>
 8009aa0:	6030      	str	r0, [r6, #0]
 8009aa2:	4621      	mov	r1, r4
 8009aa4:	4628      	mov	r0, r5
 8009aa6:	f000 f887 	bl	8009bb8 <_sbrk_r>
 8009aaa:	1c43      	adds	r3, r0, #1
 8009aac:	d00a      	beq.n	8009ac4 <sbrk_aligned+0x34>
 8009aae:	1cc4      	adds	r4, r0, #3
 8009ab0:	f024 0403 	bic.w	r4, r4, #3
 8009ab4:	42a0      	cmp	r0, r4
 8009ab6:	d007      	beq.n	8009ac8 <sbrk_aligned+0x38>
 8009ab8:	1a21      	subs	r1, r4, r0
 8009aba:	4628      	mov	r0, r5
 8009abc:	f000 f87c 	bl	8009bb8 <_sbrk_r>
 8009ac0:	3001      	adds	r0, #1
 8009ac2:	d101      	bne.n	8009ac8 <sbrk_aligned+0x38>
 8009ac4:	f04f 34ff 	mov.w	r4, #4294967295
 8009ac8:	4620      	mov	r0, r4
 8009aca:	bd70      	pop	{r4, r5, r6, pc}
 8009acc:	20000e38 	.word	0x20000e38

08009ad0 <_malloc_r>:
 8009ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ad4:	1ccd      	adds	r5, r1, #3
 8009ad6:	f025 0503 	bic.w	r5, r5, #3
 8009ada:	3508      	adds	r5, #8
 8009adc:	2d0c      	cmp	r5, #12
 8009ade:	bf38      	it	cc
 8009ae0:	250c      	movcc	r5, #12
 8009ae2:	2d00      	cmp	r5, #0
 8009ae4:	4607      	mov	r7, r0
 8009ae6:	db01      	blt.n	8009aec <_malloc_r+0x1c>
 8009ae8:	42a9      	cmp	r1, r5
 8009aea:	d905      	bls.n	8009af8 <_malloc_r+0x28>
 8009aec:	230c      	movs	r3, #12
 8009aee:	603b      	str	r3, [r7, #0]
 8009af0:	2600      	movs	r6, #0
 8009af2:	4630      	mov	r0, r6
 8009af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009af8:	4e2e      	ldr	r6, [pc, #184]	; (8009bb4 <_malloc_r+0xe4>)
 8009afa:	f000 fc3b 	bl	800a374 <__malloc_lock>
 8009afe:	6833      	ldr	r3, [r6, #0]
 8009b00:	461c      	mov	r4, r3
 8009b02:	bb34      	cbnz	r4, 8009b52 <_malloc_r+0x82>
 8009b04:	4629      	mov	r1, r5
 8009b06:	4638      	mov	r0, r7
 8009b08:	f7ff ffc2 	bl	8009a90 <sbrk_aligned>
 8009b0c:	1c43      	adds	r3, r0, #1
 8009b0e:	4604      	mov	r4, r0
 8009b10:	d14d      	bne.n	8009bae <_malloc_r+0xde>
 8009b12:	6834      	ldr	r4, [r6, #0]
 8009b14:	4626      	mov	r6, r4
 8009b16:	2e00      	cmp	r6, #0
 8009b18:	d140      	bne.n	8009b9c <_malloc_r+0xcc>
 8009b1a:	6823      	ldr	r3, [r4, #0]
 8009b1c:	4631      	mov	r1, r6
 8009b1e:	4638      	mov	r0, r7
 8009b20:	eb04 0803 	add.w	r8, r4, r3
 8009b24:	f000 f848 	bl	8009bb8 <_sbrk_r>
 8009b28:	4580      	cmp	r8, r0
 8009b2a:	d13a      	bne.n	8009ba2 <_malloc_r+0xd2>
 8009b2c:	6821      	ldr	r1, [r4, #0]
 8009b2e:	3503      	adds	r5, #3
 8009b30:	1a6d      	subs	r5, r5, r1
 8009b32:	f025 0503 	bic.w	r5, r5, #3
 8009b36:	3508      	adds	r5, #8
 8009b38:	2d0c      	cmp	r5, #12
 8009b3a:	bf38      	it	cc
 8009b3c:	250c      	movcc	r5, #12
 8009b3e:	4629      	mov	r1, r5
 8009b40:	4638      	mov	r0, r7
 8009b42:	f7ff ffa5 	bl	8009a90 <sbrk_aligned>
 8009b46:	3001      	adds	r0, #1
 8009b48:	d02b      	beq.n	8009ba2 <_malloc_r+0xd2>
 8009b4a:	6823      	ldr	r3, [r4, #0]
 8009b4c:	442b      	add	r3, r5
 8009b4e:	6023      	str	r3, [r4, #0]
 8009b50:	e00e      	b.n	8009b70 <_malloc_r+0xa0>
 8009b52:	6822      	ldr	r2, [r4, #0]
 8009b54:	1b52      	subs	r2, r2, r5
 8009b56:	d41e      	bmi.n	8009b96 <_malloc_r+0xc6>
 8009b58:	2a0b      	cmp	r2, #11
 8009b5a:	d916      	bls.n	8009b8a <_malloc_r+0xba>
 8009b5c:	1961      	adds	r1, r4, r5
 8009b5e:	42a3      	cmp	r3, r4
 8009b60:	6025      	str	r5, [r4, #0]
 8009b62:	bf18      	it	ne
 8009b64:	6059      	strne	r1, [r3, #4]
 8009b66:	6863      	ldr	r3, [r4, #4]
 8009b68:	bf08      	it	eq
 8009b6a:	6031      	streq	r1, [r6, #0]
 8009b6c:	5162      	str	r2, [r4, r5]
 8009b6e:	604b      	str	r3, [r1, #4]
 8009b70:	4638      	mov	r0, r7
 8009b72:	f104 060b 	add.w	r6, r4, #11
 8009b76:	f000 fc03 	bl	800a380 <__malloc_unlock>
 8009b7a:	f026 0607 	bic.w	r6, r6, #7
 8009b7e:	1d23      	adds	r3, r4, #4
 8009b80:	1af2      	subs	r2, r6, r3
 8009b82:	d0b6      	beq.n	8009af2 <_malloc_r+0x22>
 8009b84:	1b9b      	subs	r3, r3, r6
 8009b86:	50a3      	str	r3, [r4, r2]
 8009b88:	e7b3      	b.n	8009af2 <_malloc_r+0x22>
 8009b8a:	6862      	ldr	r2, [r4, #4]
 8009b8c:	42a3      	cmp	r3, r4
 8009b8e:	bf0c      	ite	eq
 8009b90:	6032      	streq	r2, [r6, #0]
 8009b92:	605a      	strne	r2, [r3, #4]
 8009b94:	e7ec      	b.n	8009b70 <_malloc_r+0xa0>
 8009b96:	4623      	mov	r3, r4
 8009b98:	6864      	ldr	r4, [r4, #4]
 8009b9a:	e7b2      	b.n	8009b02 <_malloc_r+0x32>
 8009b9c:	4634      	mov	r4, r6
 8009b9e:	6876      	ldr	r6, [r6, #4]
 8009ba0:	e7b9      	b.n	8009b16 <_malloc_r+0x46>
 8009ba2:	230c      	movs	r3, #12
 8009ba4:	603b      	str	r3, [r7, #0]
 8009ba6:	4638      	mov	r0, r7
 8009ba8:	f000 fbea 	bl	800a380 <__malloc_unlock>
 8009bac:	e7a1      	b.n	8009af2 <_malloc_r+0x22>
 8009bae:	6025      	str	r5, [r4, #0]
 8009bb0:	e7de      	b.n	8009b70 <_malloc_r+0xa0>
 8009bb2:	bf00      	nop
 8009bb4:	20000e34 	.word	0x20000e34

08009bb8 <_sbrk_r>:
 8009bb8:	b538      	push	{r3, r4, r5, lr}
 8009bba:	4d06      	ldr	r5, [pc, #24]	; (8009bd4 <_sbrk_r+0x1c>)
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	4604      	mov	r4, r0
 8009bc0:	4608      	mov	r0, r1
 8009bc2:	602b      	str	r3, [r5, #0]
 8009bc4:	f7fa f8d6 	bl	8003d74 <_sbrk>
 8009bc8:	1c43      	adds	r3, r0, #1
 8009bca:	d102      	bne.n	8009bd2 <_sbrk_r+0x1a>
 8009bcc:	682b      	ldr	r3, [r5, #0]
 8009bce:	b103      	cbz	r3, 8009bd2 <_sbrk_r+0x1a>
 8009bd0:	6023      	str	r3, [r4, #0]
 8009bd2:	bd38      	pop	{r3, r4, r5, pc}
 8009bd4:	20000e68 	.word	0x20000e68

08009bd8 <sniprintf>:
 8009bd8:	b40c      	push	{r2, r3}
 8009bda:	b530      	push	{r4, r5, lr}
 8009bdc:	4b17      	ldr	r3, [pc, #92]	; (8009c3c <sniprintf+0x64>)
 8009bde:	1e0c      	subs	r4, r1, #0
 8009be0:	681d      	ldr	r5, [r3, #0]
 8009be2:	b09d      	sub	sp, #116	; 0x74
 8009be4:	da08      	bge.n	8009bf8 <sniprintf+0x20>
 8009be6:	238b      	movs	r3, #139	; 0x8b
 8009be8:	602b      	str	r3, [r5, #0]
 8009bea:	f04f 30ff 	mov.w	r0, #4294967295
 8009bee:	b01d      	add	sp, #116	; 0x74
 8009bf0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009bf4:	b002      	add	sp, #8
 8009bf6:	4770      	bx	lr
 8009bf8:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009bfc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009c00:	bf14      	ite	ne
 8009c02:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009c06:	4623      	moveq	r3, r4
 8009c08:	9304      	str	r3, [sp, #16]
 8009c0a:	9307      	str	r3, [sp, #28]
 8009c0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009c10:	9002      	str	r0, [sp, #8]
 8009c12:	9006      	str	r0, [sp, #24]
 8009c14:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009c18:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009c1a:	ab21      	add	r3, sp, #132	; 0x84
 8009c1c:	a902      	add	r1, sp, #8
 8009c1e:	4628      	mov	r0, r5
 8009c20:	9301      	str	r3, [sp, #4]
 8009c22:	f000 fc0f 	bl	800a444 <_svfiprintf_r>
 8009c26:	1c43      	adds	r3, r0, #1
 8009c28:	bfbc      	itt	lt
 8009c2a:	238b      	movlt	r3, #139	; 0x8b
 8009c2c:	602b      	strlt	r3, [r5, #0]
 8009c2e:	2c00      	cmp	r4, #0
 8009c30:	d0dd      	beq.n	8009bee <sniprintf+0x16>
 8009c32:	9b02      	ldr	r3, [sp, #8]
 8009c34:	2200      	movs	r2, #0
 8009c36:	701a      	strb	r2, [r3, #0]
 8009c38:	e7d9      	b.n	8009bee <sniprintf+0x16>
 8009c3a:	bf00      	nop
 8009c3c:	200000c8 	.word	0x200000c8

08009c40 <siprintf>:
 8009c40:	b40e      	push	{r1, r2, r3}
 8009c42:	b500      	push	{lr}
 8009c44:	b09c      	sub	sp, #112	; 0x70
 8009c46:	ab1d      	add	r3, sp, #116	; 0x74
 8009c48:	9002      	str	r0, [sp, #8]
 8009c4a:	9006      	str	r0, [sp, #24]
 8009c4c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009c50:	4809      	ldr	r0, [pc, #36]	; (8009c78 <siprintf+0x38>)
 8009c52:	9107      	str	r1, [sp, #28]
 8009c54:	9104      	str	r1, [sp, #16]
 8009c56:	4909      	ldr	r1, [pc, #36]	; (8009c7c <siprintf+0x3c>)
 8009c58:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c5c:	9105      	str	r1, [sp, #20]
 8009c5e:	6800      	ldr	r0, [r0, #0]
 8009c60:	9301      	str	r3, [sp, #4]
 8009c62:	a902      	add	r1, sp, #8
 8009c64:	f000 fbee 	bl	800a444 <_svfiprintf_r>
 8009c68:	9b02      	ldr	r3, [sp, #8]
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	701a      	strb	r2, [r3, #0]
 8009c6e:	b01c      	add	sp, #112	; 0x70
 8009c70:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c74:	b003      	add	sp, #12
 8009c76:	4770      	bx	lr
 8009c78:	200000c8 	.word	0x200000c8
 8009c7c:	ffff0208 	.word	0xffff0208

08009c80 <__tzcalc_limits>:
 8009c80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c84:	4605      	mov	r5, r0
 8009c86:	f000 fabf 	bl	800a208 <__gettzinfo>
 8009c8a:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8009c8e:	429d      	cmp	r5, r3
 8009c90:	f340 8099 	ble.w	8009dc6 <__tzcalc_limits+0x146>
 8009c94:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 8009c98:	18ac      	adds	r4, r5, r2
 8009c9a:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 8009c9e:	f240 126d 	movw	r2, #365	; 0x16d
 8009ca2:	10a4      	asrs	r4, r4, #2
 8009ca4:	fb02 4403 	mla	r4, r2, r3, r4
 8009ca8:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8009cac:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 8009cb0:	fb93 f3f2 	sdiv	r3, r3, r2
 8009cb4:	441c      	add	r4, r3
 8009cb6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8009cba:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 8009cbe:	fb95 fcf3 	sdiv	ip, r5, r3
 8009cc2:	fb03 5c1c 	mls	ip, r3, ip, r5
 8009cc6:	186a      	adds	r2, r5, r1
 8009cc8:	fabc f68c 	clz	r6, ip
 8009ccc:	fbb2 f2f3 	udiv	r2, r2, r3
 8009cd0:	f005 0303 	and.w	r3, r5, #3
 8009cd4:	4414      	add	r4, r2
 8009cd6:	2264      	movs	r2, #100	; 0x64
 8009cd8:	6045      	str	r5, [r0, #4]
 8009cda:	fb95 f7f2 	sdiv	r7, r5, r2
 8009cde:	0976      	lsrs	r6, r6, #5
 8009ce0:	fb02 5717 	mls	r7, r2, r7, r5
 8009ce4:	4601      	mov	r1, r0
 8009ce6:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8009cea:	9300      	str	r3, [sp, #0]
 8009cec:	f04f 0a07 	mov.w	sl, #7
 8009cf0:	7a0d      	ldrb	r5, [r1, #8]
 8009cf2:	694b      	ldr	r3, [r1, #20]
 8009cf4:	2d4a      	cmp	r5, #74	; 0x4a
 8009cf6:	d12d      	bne.n	8009d54 <__tzcalc_limits+0xd4>
 8009cf8:	9a00      	ldr	r2, [sp, #0]
 8009cfa:	eb04 0e03 	add.w	lr, r4, r3
 8009cfe:	b902      	cbnz	r2, 8009d02 <__tzcalc_limits+0x82>
 8009d00:	b917      	cbnz	r7, 8009d08 <__tzcalc_limits+0x88>
 8009d02:	f1bc 0f00 	cmp.w	ip, #0
 8009d06:	d123      	bne.n	8009d50 <__tzcalc_limits+0xd0>
 8009d08:	2b3b      	cmp	r3, #59	; 0x3b
 8009d0a:	bfd4      	ite	le
 8009d0c:	2300      	movle	r3, #0
 8009d0e:	2301      	movgt	r3, #1
 8009d10:	4473      	add	r3, lr
 8009d12:	3b01      	subs	r3, #1
 8009d14:	698d      	ldr	r5, [r1, #24]
 8009d16:	4a2d      	ldr	r2, [pc, #180]	; (8009dcc <__tzcalc_limits+0x14c>)
 8009d18:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 8009d1c:	fbc3 5e02 	smlal	r5, lr, r3, r2
 8009d20:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8009d22:	18ed      	adds	r5, r5, r3
 8009d24:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 8009d28:	e9c1 5308 	strd	r5, r3, [r1, #32]
 8009d2c:	3128      	adds	r1, #40	; 0x28
 8009d2e:	458b      	cmp	fp, r1
 8009d30:	d1de      	bne.n	8009cf0 <__tzcalc_limits+0x70>
 8009d32:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 8009d36:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 8009d3a:	428c      	cmp	r4, r1
 8009d3c:	eb72 0303 	sbcs.w	r3, r2, r3
 8009d40:	bfb4      	ite	lt
 8009d42:	2301      	movlt	r3, #1
 8009d44:	2300      	movge	r3, #0
 8009d46:	6003      	str	r3, [r0, #0]
 8009d48:	2001      	movs	r0, #1
 8009d4a:	b003      	add	sp, #12
 8009d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d50:	2300      	movs	r3, #0
 8009d52:	e7dd      	b.n	8009d10 <__tzcalc_limits+0x90>
 8009d54:	2d44      	cmp	r5, #68	; 0x44
 8009d56:	d101      	bne.n	8009d5c <__tzcalc_limits+0xdc>
 8009d58:	4423      	add	r3, r4
 8009d5a:	e7db      	b.n	8009d14 <__tzcalc_limits+0x94>
 8009d5c:	9a00      	ldr	r2, [sp, #0]
 8009d5e:	bb62      	cbnz	r2, 8009dba <__tzcalc_limits+0x13a>
 8009d60:	2f00      	cmp	r7, #0
 8009d62:	bf0c      	ite	eq
 8009d64:	4635      	moveq	r5, r6
 8009d66:	2501      	movne	r5, #1
 8009d68:	68ca      	ldr	r2, [r1, #12]
 8009d6a:	9201      	str	r2, [sp, #4]
 8009d6c:	4a18      	ldr	r2, [pc, #96]	; (8009dd0 <__tzcalc_limits+0x150>)
 8009d6e:	f04f 0930 	mov.w	r9, #48	; 0x30
 8009d72:	fb09 2505 	mla	r5, r9, r5, r2
 8009d76:	46a6      	mov	lr, r4
 8009d78:	f04f 0800 	mov.w	r8, #0
 8009d7c:	3d04      	subs	r5, #4
 8009d7e:	9a01      	ldr	r2, [sp, #4]
 8009d80:	f108 0801 	add.w	r8, r8, #1
 8009d84:	4542      	cmp	r2, r8
 8009d86:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 8009d8a:	dc18      	bgt.n	8009dbe <__tzcalc_limits+0x13e>
 8009d8c:	f10e 0504 	add.w	r5, lr, #4
 8009d90:	fb95 f8fa 	sdiv	r8, r5, sl
 8009d94:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 8009d98:	eba5 0808 	sub.w	r8, r5, r8
 8009d9c:	ebb3 0808 	subs.w	r8, r3, r8
 8009da0:	690b      	ldr	r3, [r1, #16]
 8009da2:	f103 33ff 	add.w	r3, r3, #4294967295
 8009da6:	bf48      	it	mi
 8009da8:	f108 0807 	addmi.w	r8, r8, #7
 8009dac:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8009db0:	4443      	add	r3, r8
 8009db2:	454b      	cmp	r3, r9
 8009db4:	da05      	bge.n	8009dc2 <__tzcalc_limits+0x142>
 8009db6:	4473      	add	r3, lr
 8009db8:	e7ac      	b.n	8009d14 <__tzcalc_limits+0x94>
 8009dba:	4635      	mov	r5, r6
 8009dbc:	e7d4      	b.n	8009d68 <__tzcalc_limits+0xe8>
 8009dbe:	44ce      	add	lr, r9
 8009dc0:	e7dd      	b.n	8009d7e <__tzcalc_limits+0xfe>
 8009dc2:	3b07      	subs	r3, #7
 8009dc4:	e7f5      	b.n	8009db2 <__tzcalc_limits+0x132>
 8009dc6:	2000      	movs	r0, #0
 8009dc8:	e7bf      	b.n	8009d4a <__tzcalc_limits+0xca>
 8009dca:	bf00      	nop
 8009dcc:	00015180 	.word	0x00015180
 8009dd0:	0800d664 	.word	0x0800d664

08009dd4 <__tz_lock>:
 8009dd4:	4801      	ldr	r0, [pc, #4]	; (8009ddc <__tz_lock+0x8>)
 8009dd6:	f000 bac8 	b.w	800a36a <__retarget_lock_acquire>
 8009dda:	bf00      	nop
 8009ddc:	20000e64 	.word	0x20000e64

08009de0 <__tz_unlock>:
 8009de0:	4801      	ldr	r0, [pc, #4]	; (8009de8 <__tz_unlock+0x8>)
 8009de2:	f000 bac4 	b.w	800a36e <__retarget_lock_release>
 8009de6:	bf00      	nop
 8009de8:	20000e64 	.word	0x20000e64

08009dec <_tzset_unlocked>:
 8009dec:	4b01      	ldr	r3, [pc, #4]	; (8009df4 <_tzset_unlocked+0x8>)
 8009dee:	6818      	ldr	r0, [r3, #0]
 8009df0:	f000 b802 	b.w	8009df8 <_tzset_unlocked_r>
 8009df4:	200000c8 	.word	0x200000c8

08009df8 <_tzset_unlocked_r>:
 8009df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dfc:	b08d      	sub	sp, #52	; 0x34
 8009dfe:	4607      	mov	r7, r0
 8009e00:	f000 fa02 	bl	800a208 <__gettzinfo>
 8009e04:	49b0      	ldr	r1, [pc, #704]	; (800a0c8 <_tzset_unlocked_r+0x2d0>)
 8009e06:	4eb1      	ldr	r6, [pc, #708]	; (800a0cc <_tzset_unlocked_r+0x2d4>)
 8009e08:	4605      	mov	r5, r0
 8009e0a:	4638      	mov	r0, r7
 8009e0c:	f000 f9f4 	bl	800a1f8 <_getenv_r>
 8009e10:	4604      	mov	r4, r0
 8009e12:	b970      	cbnz	r0, 8009e32 <_tzset_unlocked_r+0x3a>
 8009e14:	4bae      	ldr	r3, [pc, #696]	; (800a0d0 <_tzset_unlocked_r+0x2d8>)
 8009e16:	4aaf      	ldr	r2, [pc, #700]	; (800a0d4 <_tzset_unlocked_r+0x2dc>)
 8009e18:	6018      	str	r0, [r3, #0]
 8009e1a:	4baf      	ldr	r3, [pc, #700]	; (800a0d8 <_tzset_unlocked_r+0x2e0>)
 8009e1c:	6018      	str	r0, [r3, #0]
 8009e1e:	4baf      	ldr	r3, [pc, #700]	; (800a0dc <_tzset_unlocked_r+0x2e4>)
 8009e20:	6830      	ldr	r0, [r6, #0]
 8009e22:	e9c3 2200 	strd	r2, r2, [r3]
 8009e26:	f7ff fb65 	bl	80094f4 <free>
 8009e2a:	6034      	str	r4, [r6, #0]
 8009e2c:	b00d      	add	sp, #52	; 0x34
 8009e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e32:	6831      	ldr	r1, [r6, #0]
 8009e34:	2900      	cmp	r1, #0
 8009e36:	d162      	bne.n	8009efe <_tzset_unlocked_r+0x106>
 8009e38:	6830      	ldr	r0, [r6, #0]
 8009e3a:	f7ff fb5b 	bl	80094f4 <free>
 8009e3e:	4620      	mov	r0, r4
 8009e40:	f7f6 f9ee 	bl	8000220 <strlen>
 8009e44:	1c41      	adds	r1, r0, #1
 8009e46:	4638      	mov	r0, r7
 8009e48:	f7ff fe42 	bl	8009ad0 <_malloc_r>
 8009e4c:	6030      	str	r0, [r6, #0]
 8009e4e:	2800      	cmp	r0, #0
 8009e50:	d15a      	bne.n	8009f08 <_tzset_unlocked_r+0x110>
 8009e52:	7823      	ldrb	r3, [r4, #0]
 8009e54:	4aa2      	ldr	r2, [pc, #648]	; (800a0e0 <_tzset_unlocked_r+0x2e8>)
 8009e56:	49a3      	ldr	r1, [pc, #652]	; (800a0e4 <_tzset_unlocked_r+0x2ec>)
 8009e58:	2b3a      	cmp	r3, #58	; 0x3a
 8009e5a:	bf08      	it	eq
 8009e5c:	3401      	addeq	r4, #1
 8009e5e:	ae0a      	add	r6, sp, #40	; 0x28
 8009e60:	4633      	mov	r3, r6
 8009e62:	4620      	mov	r0, r4
 8009e64:	f000 fedc 	bl	800ac20 <siscanf>
 8009e68:	2800      	cmp	r0, #0
 8009e6a:	dddf      	ble.n	8009e2c <_tzset_unlocked_r+0x34>
 8009e6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e6e:	18e7      	adds	r7, r4, r3
 8009e70:	5ce3      	ldrb	r3, [r4, r3]
 8009e72:	2b2d      	cmp	r3, #45	; 0x2d
 8009e74:	d14c      	bne.n	8009f10 <_tzset_unlocked_r+0x118>
 8009e76:	3701      	adds	r7, #1
 8009e78:	f04f 38ff 	mov.w	r8, #4294967295
 8009e7c:	f10d 0a20 	add.w	sl, sp, #32
 8009e80:	f10d 0b1e 	add.w	fp, sp, #30
 8009e84:	2400      	movs	r4, #0
 8009e86:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8009e8a:	4997      	ldr	r1, [pc, #604]	; (800a0e8 <_tzset_unlocked_r+0x2f0>)
 8009e8c:	9603      	str	r6, [sp, #12]
 8009e8e:	f8cd b000 	str.w	fp, [sp]
 8009e92:	4633      	mov	r3, r6
 8009e94:	aa07      	add	r2, sp, #28
 8009e96:	4638      	mov	r0, r7
 8009e98:	f8ad 401e 	strh.w	r4, [sp, #30]
 8009e9c:	f8ad 4020 	strh.w	r4, [sp, #32]
 8009ea0:	f000 febe 	bl	800ac20 <siscanf>
 8009ea4:	42a0      	cmp	r0, r4
 8009ea6:	ddc1      	ble.n	8009e2c <_tzset_unlocked_r+0x34>
 8009ea8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8009eac:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8009eb0:	f8df 9240 	ldr.w	r9, [pc, #576]	; 800a0f4 <_tzset_unlocked_r+0x2fc>
 8009eb4:	213c      	movs	r1, #60	; 0x3c
 8009eb6:	fb01 3302 	mla	r3, r1, r2, r3
 8009eba:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8009ebe:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8009ec2:	fb01 3302 	mla	r3, r1, r2, r3
 8009ec6:	fb08 f303 	mul.w	r3, r8, r3
 8009eca:	f8df 8210 	ldr.w	r8, [pc, #528]	; 800a0dc <_tzset_unlocked_r+0x2e4>
 8009ece:	62ab      	str	r3, [r5, #40]	; 0x28
 8009ed0:	4b83      	ldr	r3, [pc, #524]	; (800a0e0 <_tzset_unlocked_r+0x2e8>)
 8009ed2:	f8c8 3000 	str.w	r3, [r8]
 8009ed6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ed8:	4982      	ldr	r1, [pc, #520]	; (800a0e4 <_tzset_unlocked_r+0x2ec>)
 8009eda:	441f      	add	r7, r3
 8009edc:	464a      	mov	r2, r9
 8009ede:	4633      	mov	r3, r6
 8009ee0:	4638      	mov	r0, r7
 8009ee2:	f000 fe9d 	bl	800ac20 <siscanf>
 8009ee6:	42a0      	cmp	r0, r4
 8009ee8:	dc18      	bgt.n	8009f1c <_tzset_unlocked_r+0x124>
 8009eea:	f8d8 3000 	ldr.w	r3, [r8]
 8009eee:	f8c8 3004 	str.w	r3, [r8, #4]
 8009ef2:	4b77      	ldr	r3, [pc, #476]	; (800a0d0 <_tzset_unlocked_r+0x2d8>)
 8009ef4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8009ef6:	601a      	str	r2, [r3, #0]
 8009ef8:	4b77      	ldr	r3, [pc, #476]	; (800a0d8 <_tzset_unlocked_r+0x2e0>)
 8009efa:	601c      	str	r4, [r3, #0]
 8009efc:	e796      	b.n	8009e2c <_tzset_unlocked_r+0x34>
 8009efe:	f7f6 f997 	bl	8000230 <strcmp>
 8009f02:	2800      	cmp	r0, #0
 8009f04:	d198      	bne.n	8009e38 <_tzset_unlocked_r+0x40>
 8009f06:	e791      	b.n	8009e2c <_tzset_unlocked_r+0x34>
 8009f08:	4621      	mov	r1, r4
 8009f0a:	f000 fefa 	bl	800ad02 <strcpy>
 8009f0e:	e7a0      	b.n	8009e52 <_tzset_unlocked_r+0x5a>
 8009f10:	2b2b      	cmp	r3, #43	; 0x2b
 8009f12:	bf08      	it	eq
 8009f14:	3701      	addeq	r7, #1
 8009f16:	f04f 0801 	mov.w	r8, #1
 8009f1a:	e7af      	b.n	8009e7c <_tzset_unlocked_r+0x84>
 8009f1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f1e:	f8c8 9004 	str.w	r9, [r8, #4]
 8009f22:	18fc      	adds	r4, r7, r3
 8009f24:	5cfb      	ldrb	r3, [r7, r3]
 8009f26:	2b2d      	cmp	r3, #45	; 0x2d
 8009f28:	f040 808b 	bne.w	800a042 <_tzset_unlocked_r+0x24a>
 8009f2c:	3401      	adds	r4, #1
 8009f2e:	f04f 37ff 	mov.w	r7, #4294967295
 8009f32:	2300      	movs	r3, #0
 8009f34:	f8ad 301c 	strh.w	r3, [sp, #28]
 8009f38:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009f3c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8009f40:	930a      	str	r3, [sp, #40]	; 0x28
 8009f42:	e9cd a602 	strd	sl, r6, [sp, #8]
 8009f46:	e9cd b600 	strd	fp, r6, [sp]
 8009f4a:	4967      	ldr	r1, [pc, #412]	; (800a0e8 <_tzset_unlocked_r+0x2f0>)
 8009f4c:	4633      	mov	r3, r6
 8009f4e:	aa07      	add	r2, sp, #28
 8009f50:	4620      	mov	r0, r4
 8009f52:	f000 fe65 	bl	800ac20 <siscanf>
 8009f56:	2800      	cmp	r0, #0
 8009f58:	dc78      	bgt.n	800a04c <_tzset_unlocked_r+0x254>
 8009f5a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8009f5c:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8009f60:	652b      	str	r3, [r5, #80]	; 0x50
 8009f62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f64:	462f      	mov	r7, r5
 8009f66:	441c      	add	r4, r3
 8009f68:	f04f 0900 	mov.w	r9, #0
 8009f6c:	7823      	ldrb	r3, [r4, #0]
 8009f6e:	2b2c      	cmp	r3, #44	; 0x2c
 8009f70:	bf08      	it	eq
 8009f72:	3401      	addeq	r4, #1
 8009f74:	f894 8000 	ldrb.w	r8, [r4]
 8009f78:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8009f7c:	d178      	bne.n	800a070 <_tzset_unlocked_r+0x278>
 8009f7e:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8009f82:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8009f86:	ab09      	add	r3, sp, #36	; 0x24
 8009f88:	9300      	str	r3, [sp, #0]
 8009f8a:	4958      	ldr	r1, [pc, #352]	; (800a0ec <_tzset_unlocked_r+0x2f4>)
 8009f8c:	9603      	str	r6, [sp, #12]
 8009f8e:	4633      	mov	r3, r6
 8009f90:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8009f94:	4620      	mov	r0, r4
 8009f96:	f000 fe43 	bl	800ac20 <siscanf>
 8009f9a:	2803      	cmp	r0, #3
 8009f9c:	f47f af46 	bne.w	8009e2c <_tzset_unlocked_r+0x34>
 8009fa0:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8009fa4:	1e4b      	subs	r3, r1, #1
 8009fa6:	2b0b      	cmp	r3, #11
 8009fa8:	f63f af40 	bhi.w	8009e2c <_tzset_unlocked_r+0x34>
 8009fac:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8009fb0:	1e53      	subs	r3, r2, #1
 8009fb2:	2b04      	cmp	r3, #4
 8009fb4:	f63f af3a 	bhi.w	8009e2c <_tzset_unlocked_r+0x34>
 8009fb8:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8009fbc:	2b06      	cmp	r3, #6
 8009fbe:	f63f af35 	bhi.w	8009e2c <_tzset_unlocked_r+0x34>
 8009fc2:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8009fc6:	f887 8008 	strb.w	r8, [r7, #8]
 8009fca:	617b      	str	r3, [r7, #20]
 8009fcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fce:	eb04 0803 	add.w	r8, r4, r3
 8009fd2:	2302      	movs	r3, #2
 8009fd4:	f8ad 301c 	strh.w	r3, [sp, #28]
 8009fd8:	2300      	movs	r3, #0
 8009fda:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009fde:	f8ad 3020 	strh.w	r3, [sp, #32]
 8009fe2:	930a      	str	r3, [sp, #40]	; 0x28
 8009fe4:	f898 3000 	ldrb.w	r3, [r8]
 8009fe8:	2b2f      	cmp	r3, #47	; 0x2f
 8009fea:	d109      	bne.n	800a000 <_tzset_unlocked_r+0x208>
 8009fec:	e9cd a602 	strd	sl, r6, [sp, #8]
 8009ff0:	e9cd b600 	strd	fp, r6, [sp]
 8009ff4:	493e      	ldr	r1, [pc, #248]	; (800a0f0 <_tzset_unlocked_r+0x2f8>)
 8009ff6:	4633      	mov	r3, r6
 8009ff8:	aa07      	add	r2, sp, #28
 8009ffa:	4640      	mov	r0, r8
 8009ffc:	f000 fe10 	bl	800ac20 <siscanf>
 800a000:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800a004:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800a008:	213c      	movs	r1, #60	; 0x3c
 800a00a:	fb01 3302 	mla	r3, r1, r2, r3
 800a00e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800a012:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800a016:	fb01 3302 	mla	r3, r1, r2, r3
 800a01a:	61bb      	str	r3, [r7, #24]
 800a01c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a01e:	3728      	adds	r7, #40	; 0x28
 800a020:	4444      	add	r4, r8
 800a022:	f1b9 0f00 	cmp.w	r9, #0
 800a026:	d020      	beq.n	800a06a <_tzset_unlocked_r+0x272>
 800a028:	6868      	ldr	r0, [r5, #4]
 800a02a:	f7ff fe29 	bl	8009c80 <__tzcalc_limits>
 800a02e:	4b28      	ldr	r3, [pc, #160]	; (800a0d0 <_tzset_unlocked_r+0x2d8>)
 800a030:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800a032:	601a      	str	r2, [r3, #0]
 800a034:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800a036:	1a9b      	subs	r3, r3, r2
 800a038:	4a27      	ldr	r2, [pc, #156]	; (800a0d8 <_tzset_unlocked_r+0x2e0>)
 800a03a:	bf18      	it	ne
 800a03c:	2301      	movne	r3, #1
 800a03e:	6013      	str	r3, [r2, #0]
 800a040:	e6f4      	b.n	8009e2c <_tzset_unlocked_r+0x34>
 800a042:	2b2b      	cmp	r3, #43	; 0x2b
 800a044:	bf08      	it	eq
 800a046:	3401      	addeq	r4, #1
 800a048:	2701      	movs	r7, #1
 800a04a:	e772      	b.n	8009f32 <_tzset_unlocked_r+0x13a>
 800a04c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800a050:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800a054:	213c      	movs	r1, #60	; 0x3c
 800a056:	fb01 3302 	mla	r3, r1, r2, r3
 800a05a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800a05e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800a062:	fb01 3302 	mla	r3, r1, r2, r3
 800a066:	437b      	muls	r3, r7
 800a068:	e77a      	b.n	8009f60 <_tzset_unlocked_r+0x168>
 800a06a:	f04f 0901 	mov.w	r9, #1
 800a06e:	e77d      	b.n	8009f6c <_tzset_unlocked_r+0x174>
 800a070:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 800a074:	bf06      	itte	eq
 800a076:	3401      	addeq	r4, #1
 800a078:	4643      	moveq	r3, r8
 800a07a:	2344      	movne	r3, #68	; 0x44
 800a07c:	220a      	movs	r2, #10
 800a07e:	a90b      	add	r1, sp, #44	; 0x2c
 800a080:	4620      	mov	r0, r4
 800a082:	9305      	str	r3, [sp, #20]
 800a084:	f000 fece 	bl	800ae24 <strtoul>
 800a088:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800a08c:	9b05      	ldr	r3, [sp, #20]
 800a08e:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 800a092:	45a0      	cmp	r8, r4
 800a094:	d114      	bne.n	800a0c0 <_tzset_unlocked_r+0x2c8>
 800a096:	234d      	movs	r3, #77	; 0x4d
 800a098:	f1b9 0f00 	cmp.w	r9, #0
 800a09c:	d107      	bne.n	800a0ae <_tzset_unlocked_r+0x2b6>
 800a09e:	722b      	strb	r3, [r5, #8]
 800a0a0:	2103      	movs	r1, #3
 800a0a2:	2302      	movs	r3, #2
 800a0a4:	e9c5 1303 	strd	r1, r3, [r5, #12]
 800a0a8:	f8c5 9014 	str.w	r9, [r5, #20]
 800a0ac:	e791      	b.n	8009fd2 <_tzset_unlocked_r+0x1da>
 800a0ae:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 800a0b2:	220b      	movs	r2, #11
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	63eb      	str	r3, [r5, #60]	; 0x3c
 800a0be:	e788      	b.n	8009fd2 <_tzset_unlocked_r+0x1da>
 800a0c0:	b280      	uxth	r0, r0
 800a0c2:	723b      	strb	r3, [r7, #8]
 800a0c4:	6178      	str	r0, [r7, #20]
 800a0c6:	e784      	b.n	8009fd2 <_tzset_unlocked_r+0x1da>
 800a0c8:	0800d6c4 	.word	0x0800d6c4
 800a0cc:	20000e54 	.word	0x20000e54
 800a0d0:	20000e5c 	.word	0x20000e5c
 800a0d4:	0800d6c7 	.word	0x0800d6c7
 800a0d8:	20000e58 	.word	0x20000e58
 800a0dc:	2000012c 	.word	0x2000012c
 800a0e0:	20000e47 	.word	0x20000e47
 800a0e4:	0800d6cb 	.word	0x0800d6cb
 800a0e8:	0800d6ee 	.word	0x0800d6ee
 800a0ec:	0800d6da 	.word	0x0800d6da
 800a0f0:	0800d6ed 	.word	0x0800d6ed
 800a0f4:	20000e3c 	.word	0x20000e3c

0800a0f8 <__assert_func>:
 800a0f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a0fa:	4614      	mov	r4, r2
 800a0fc:	461a      	mov	r2, r3
 800a0fe:	4b09      	ldr	r3, [pc, #36]	; (800a124 <__assert_func+0x2c>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	4605      	mov	r5, r0
 800a104:	68d8      	ldr	r0, [r3, #12]
 800a106:	b14c      	cbz	r4, 800a11c <__assert_func+0x24>
 800a108:	4b07      	ldr	r3, [pc, #28]	; (800a128 <__assert_func+0x30>)
 800a10a:	9100      	str	r1, [sp, #0]
 800a10c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a110:	4906      	ldr	r1, [pc, #24]	; (800a12c <__assert_func+0x34>)
 800a112:	462b      	mov	r3, r5
 800a114:	f000 f822 	bl	800a15c <fiprintf>
 800a118:	f000 ff60 	bl	800afdc <abort>
 800a11c:	4b04      	ldr	r3, [pc, #16]	; (800a130 <__assert_func+0x38>)
 800a11e:	461c      	mov	r4, r3
 800a120:	e7f3      	b.n	800a10a <__assert_func+0x12>
 800a122:	bf00      	nop
 800a124:	200000c8 	.word	0x200000c8
 800a128:	0800d700 	.word	0x0800d700
 800a12c:	0800d70d 	.word	0x0800d70d
 800a130:	0800d73b 	.word	0x0800d73b

0800a134 <div>:
 800a134:	2900      	cmp	r1, #0
 800a136:	b510      	push	{r4, lr}
 800a138:	fb91 f4f2 	sdiv	r4, r1, r2
 800a13c:	fb02 1314 	mls	r3, r2, r4, r1
 800a140:	db06      	blt.n	800a150 <div+0x1c>
 800a142:	2b00      	cmp	r3, #0
 800a144:	da01      	bge.n	800a14a <div+0x16>
 800a146:	3401      	adds	r4, #1
 800a148:	1a9b      	subs	r3, r3, r2
 800a14a:	e9c0 4300 	strd	r4, r3, [r0]
 800a14e:	bd10      	pop	{r4, pc}
 800a150:	2b00      	cmp	r3, #0
 800a152:	bfc4      	itt	gt
 800a154:	f104 34ff 	addgt.w	r4, r4, #4294967295
 800a158:	189b      	addgt	r3, r3, r2
 800a15a:	e7f6      	b.n	800a14a <div+0x16>

0800a15c <fiprintf>:
 800a15c:	b40e      	push	{r1, r2, r3}
 800a15e:	b503      	push	{r0, r1, lr}
 800a160:	4601      	mov	r1, r0
 800a162:	ab03      	add	r3, sp, #12
 800a164:	4805      	ldr	r0, [pc, #20]	; (800a17c <fiprintf+0x20>)
 800a166:	f853 2b04 	ldr.w	r2, [r3], #4
 800a16a:	6800      	ldr	r0, [r0, #0]
 800a16c:	9301      	str	r3, [sp, #4]
 800a16e:	f000 fa93 	bl	800a698 <_vfiprintf_r>
 800a172:	b002      	add	sp, #8
 800a174:	f85d eb04 	ldr.w	lr, [sp], #4
 800a178:	b003      	add	sp, #12
 800a17a:	4770      	bx	lr
 800a17c:	200000c8 	.word	0x200000c8

0800a180 <_findenv_r>:
 800a180:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a184:	f8df a06c 	ldr.w	sl, [pc, #108]	; 800a1f4 <_findenv_r+0x74>
 800a188:	4607      	mov	r7, r0
 800a18a:	4689      	mov	r9, r1
 800a18c:	4616      	mov	r6, r2
 800a18e:	f000 ff3d 	bl	800b00c <__env_lock>
 800a192:	f8da 4000 	ldr.w	r4, [sl]
 800a196:	b134      	cbz	r4, 800a1a6 <_findenv_r+0x26>
 800a198:	464b      	mov	r3, r9
 800a19a:	4698      	mov	r8, r3
 800a19c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1a0:	b13a      	cbz	r2, 800a1b2 <_findenv_r+0x32>
 800a1a2:	2a3d      	cmp	r2, #61	; 0x3d
 800a1a4:	d1f9      	bne.n	800a19a <_findenv_r+0x1a>
 800a1a6:	4638      	mov	r0, r7
 800a1a8:	f000 ff36 	bl	800b018 <__env_unlock>
 800a1ac:	2000      	movs	r0, #0
 800a1ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1b2:	eba8 0809 	sub.w	r8, r8, r9
 800a1b6:	46a3      	mov	fp, r4
 800a1b8:	f854 0b04 	ldr.w	r0, [r4], #4
 800a1bc:	2800      	cmp	r0, #0
 800a1be:	d0f2      	beq.n	800a1a6 <_findenv_r+0x26>
 800a1c0:	4642      	mov	r2, r8
 800a1c2:	4649      	mov	r1, r9
 800a1c4:	f000 fda5 	bl	800ad12 <strncmp>
 800a1c8:	2800      	cmp	r0, #0
 800a1ca:	d1f4      	bne.n	800a1b6 <_findenv_r+0x36>
 800a1cc:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a1d0:	eb03 0508 	add.w	r5, r3, r8
 800a1d4:	f813 3008 	ldrb.w	r3, [r3, r8]
 800a1d8:	2b3d      	cmp	r3, #61	; 0x3d
 800a1da:	d1ec      	bne.n	800a1b6 <_findenv_r+0x36>
 800a1dc:	f8da 3000 	ldr.w	r3, [sl]
 800a1e0:	ebab 0303 	sub.w	r3, fp, r3
 800a1e4:	109b      	asrs	r3, r3, #2
 800a1e6:	4638      	mov	r0, r7
 800a1e8:	6033      	str	r3, [r6, #0]
 800a1ea:	f000 ff15 	bl	800b018 <__env_unlock>
 800a1ee:	1c68      	adds	r0, r5, #1
 800a1f0:	e7dd      	b.n	800a1ae <_findenv_r+0x2e>
 800a1f2:	bf00      	nop
 800a1f4:	200000b8 	.word	0x200000b8

0800a1f8 <_getenv_r>:
 800a1f8:	b507      	push	{r0, r1, r2, lr}
 800a1fa:	aa01      	add	r2, sp, #4
 800a1fc:	f7ff ffc0 	bl	800a180 <_findenv_r>
 800a200:	b003      	add	sp, #12
 800a202:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800a208 <__gettzinfo>:
 800a208:	4800      	ldr	r0, [pc, #0]	; (800a20c <__gettzinfo+0x4>)
 800a20a:	4770      	bx	lr
 800a20c:	20000138 	.word	0x20000138

0800a210 <gmtime_r>:
 800a210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a214:	e9d0 6700 	ldrd	r6, r7, [r0]
 800a218:	460c      	mov	r4, r1
 800a21a:	4a4f      	ldr	r2, [pc, #316]	; (800a358 <gmtime_r+0x148>)
 800a21c:	2300      	movs	r3, #0
 800a21e:	4630      	mov	r0, r6
 800a220:	4639      	mov	r1, r7
 800a222:	f7f6 f865 	bl	80002f0 <__aeabi_ldivmod>
 800a226:	4639      	mov	r1, r7
 800a228:	4605      	mov	r5, r0
 800a22a:	4a4b      	ldr	r2, [pc, #300]	; (800a358 <gmtime_r+0x148>)
 800a22c:	4630      	mov	r0, r6
 800a22e:	2300      	movs	r3, #0
 800a230:	f7f6 f85e 	bl	80002f0 <__aeabi_ldivmod>
 800a234:	2a00      	cmp	r2, #0
 800a236:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 800a23a:	bfb7      	itett	lt
 800a23c:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 800a240:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 800a244:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 800a248:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 800a24c:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 800a250:	fbb2 f1f0 	udiv	r1, r2, r0
 800a254:	fb00 2211 	mls	r2, r0, r1, r2
 800a258:	203c      	movs	r0, #60	; 0x3c
 800a25a:	60a1      	str	r1, [r4, #8]
 800a25c:	fbb2 f1f0 	udiv	r1, r2, r0
 800a260:	fb00 2211 	mls	r2, r0, r1, r2
 800a264:	6061      	str	r1, [r4, #4]
 800a266:	6022      	str	r2, [r4, #0]
 800a268:	2107      	movs	r1, #7
 800a26a:	1cda      	adds	r2, r3, #3
 800a26c:	fb92 f1f1 	sdiv	r1, r2, r1
 800a270:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800a274:	1a52      	subs	r2, r2, r1
 800a276:	bf48      	it	mi
 800a278:	3207      	addmi	r2, #7
 800a27a:	4d38      	ldr	r5, [pc, #224]	; (800a35c <gmtime_r+0x14c>)
 800a27c:	4838      	ldr	r0, [pc, #224]	; (800a360 <gmtime_r+0x150>)
 800a27e:	61a2      	str	r2, [r4, #24]
 800a280:	2b00      	cmp	r3, #0
 800a282:	bfb7      	itett	lt
 800a284:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 800a288:	fb93 f5f5 	sdivge	r5, r3, r5
 800a28c:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 800a290:	fb92 f5f5 	sdivlt	r5, r2, r5
 800a294:	fb00 3005 	mla	r0, r0, r5, r3
 800a298:	f648 62ac 	movw	r2, #36524	; 0x8eac
 800a29c:	fbb0 f2f2 	udiv	r2, r0, r2
 800a2a0:	4402      	add	r2, r0
 800a2a2:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800a2a6:	fbb0 f1f3 	udiv	r1, r0, r3
 800a2aa:	1a52      	subs	r2, r2, r1
 800a2ac:	f240 1c6d 	movw	ip, #365	; 0x16d
 800a2b0:	492c      	ldr	r1, [pc, #176]	; (800a364 <gmtime_r+0x154>)
 800a2b2:	fbb0 f1f1 	udiv	r1, r0, r1
 800a2b6:	2764      	movs	r7, #100	; 0x64
 800a2b8:	1a52      	subs	r2, r2, r1
 800a2ba:	fbb2 f1fc 	udiv	r1, r2, ip
 800a2be:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2c2:	fbb1 f6f7 	udiv	r6, r1, r7
 800a2c6:	1af3      	subs	r3, r6, r3
 800a2c8:	4403      	add	r3, r0
 800a2ca:	fb0c 3311 	mls	r3, ip, r1, r3
 800a2ce:	2299      	movs	r2, #153	; 0x99
 800a2d0:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 800a2d4:	f10e 0e02 	add.w	lr, lr, #2
 800a2d8:	f103 0c01 	add.w	ip, r3, #1
 800a2dc:	fbbe f0f2 	udiv	r0, lr, r2
 800a2e0:	4342      	muls	r2, r0
 800a2e2:	3202      	adds	r2, #2
 800a2e4:	f04f 0805 	mov.w	r8, #5
 800a2e8:	fbb2 f2f8 	udiv	r2, r2, r8
 800a2ec:	ebac 0c02 	sub.w	ip, ip, r2
 800a2f0:	f240 52f9 	movw	r2, #1529	; 0x5f9
 800a2f4:	4596      	cmp	lr, r2
 800a2f6:	bf94      	ite	ls
 800a2f8:	2202      	movls	r2, #2
 800a2fa:	f06f 0209 	mvnhi.w	r2, #9
 800a2fe:	4410      	add	r0, r2
 800a300:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800a304:	fb02 1505 	mla	r5, r2, r5, r1
 800a308:	2801      	cmp	r0, #1
 800a30a:	bf98      	it	ls
 800a30c:	3501      	addls	r5, #1
 800a30e:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800a312:	d30d      	bcc.n	800a330 <gmtime_r+0x120>
 800a314:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800a318:	61e3      	str	r3, [r4, #28]
 800a31a:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 800a31e:	2300      	movs	r3, #0
 800a320:	e9c4 0504 	strd	r0, r5, [r4, #16]
 800a324:	f8c4 c00c 	str.w	ip, [r4, #12]
 800a328:	6223      	str	r3, [r4, #32]
 800a32a:	4620      	mov	r0, r4
 800a32c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a330:	078a      	lsls	r2, r1, #30
 800a332:	d102      	bne.n	800a33a <gmtime_r+0x12a>
 800a334:	fb07 1616 	mls	r6, r7, r6, r1
 800a338:	b95e      	cbnz	r6, 800a352 <gmtime_r+0x142>
 800a33a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800a33e:	fbb1 f6f2 	udiv	r6, r1, r2
 800a342:	fb02 1216 	mls	r2, r2, r6, r1
 800a346:	fab2 f282 	clz	r2, r2
 800a34a:	0952      	lsrs	r2, r2, #5
 800a34c:	333b      	adds	r3, #59	; 0x3b
 800a34e:	4413      	add	r3, r2
 800a350:	e7e2      	b.n	800a318 <gmtime_r+0x108>
 800a352:	2201      	movs	r2, #1
 800a354:	e7fa      	b.n	800a34c <gmtime_r+0x13c>
 800a356:	bf00      	nop
 800a358:	00015180 	.word	0x00015180
 800a35c:	00023ab1 	.word	0x00023ab1
 800a360:	fffdc54f 	.word	0xfffdc54f
 800a364:	00023ab0 	.word	0x00023ab0

0800a368 <__retarget_lock_init_recursive>:
 800a368:	4770      	bx	lr

0800a36a <__retarget_lock_acquire>:
 800a36a:	4770      	bx	lr

0800a36c <__retarget_lock_acquire_recursive>:
 800a36c:	4770      	bx	lr

0800a36e <__retarget_lock_release>:
 800a36e:	4770      	bx	lr

0800a370 <__retarget_lock_release_recursive>:
 800a370:	4770      	bx	lr
	...

0800a374 <__malloc_lock>:
 800a374:	4801      	ldr	r0, [pc, #4]	; (800a37c <__malloc_lock+0x8>)
 800a376:	f7ff bff9 	b.w	800a36c <__retarget_lock_acquire_recursive>
 800a37a:	bf00      	nop
 800a37c:	20000e61 	.word	0x20000e61

0800a380 <__malloc_unlock>:
 800a380:	4801      	ldr	r0, [pc, #4]	; (800a388 <__malloc_unlock+0x8>)
 800a382:	f7ff bff5 	b.w	800a370 <__retarget_lock_release_recursive>
 800a386:	bf00      	nop
 800a388:	20000e61 	.word	0x20000e61

0800a38c <__ssputs_r>:
 800a38c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a390:	688e      	ldr	r6, [r1, #8]
 800a392:	429e      	cmp	r6, r3
 800a394:	4682      	mov	sl, r0
 800a396:	460c      	mov	r4, r1
 800a398:	4690      	mov	r8, r2
 800a39a:	461f      	mov	r7, r3
 800a39c:	d838      	bhi.n	800a410 <__ssputs_r+0x84>
 800a39e:	898a      	ldrh	r2, [r1, #12]
 800a3a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a3a4:	d032      	beq.n	800a40c <__ssputs_r+0x80>
 800a3a6:	6825      	ldr	r5, [r4, #0]
 800a3a8:	6909      	ldr	r1, [r1, #16]
 800a3aa:	eba5 0901 	sub.w	r9, r5, r1
 800a3ae:	6965      	ldr	r5, [r4, #20]
 800a3b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a3b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a3b8:	3301      	adds	r3, #1
 800a3ba:	444b      	add	r3, r9
 800a3bc:	106d      	asrs	r5, r5, #1
 800a3be:	429d      	cmp	r5, r3
 800a3c0:	bf38      	it	cc
 800a3c2:	461d      	movcc	r5, r3
 800a3c4:	0553      	lsls	r3, r2, #21
 800a3c6:	d531      	bpl.n	800a42c <__ssputs_r+0xa0>
 800a3c8:	4629      	mov	r1, r5
 800a3ca:	f7ff fb81 	bl	8009ad0 <_malloc_r>
 800a3ce:	4606      	mov	r6, r0
 800a3d0:	b950      	cbnz	r0, 800a3e8 <__ssputs_r+0x5c>
 800a3d2:	230c      	movs	r3, #12
 800a3d4:	f8ca 3000 	str.w	r3, [sl]
 800a3d8:	89a3      	ldrh	r3, [r4, #12]
 800a3da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3de:	81a3      	strh	r3, [r4, #12]
 800a3e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a3e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3e8:	6921      	ldr	r1, [r4, #16]
 800a3ea:	464a      	mov	r2, r9
 800a3ec:	f001 f84a 	bl	800b484 <memcpy>
 800a3f0:	89a3      	ldrh	r3, [r4, #12]
 800a3f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a3f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3fa:	81a3      	strh	r3, [r4, #12]
 800a3fc:	6126      	str	r6, [r4, #16]
 800a3fe:	6165      	str	r5, [r4, #20]
 800a400:	444e      	add	r6, r9
 800a402:	eba5 0509 	sub.w	r5, r5, r9
 800a406:	6026      	str	r6, [r4, #0]
 800a408:	60a5      	str	r5, [r4, #8]
 800a40a:	463e      	mov	r6, r7
 800a40c:	42be      	cmp	r6, r7
 800a40e:	d900      	bls.n	800a412 <__ssputs_r+0x86>
 800a410:	463e      	mov	r6, r7
 800a412:	6820      	ldr	r0, [r4, #0]
 800a414:	4632      	mov	r2, r6
 800a416:	4641      	mov	r1, r8
 800a418:	f001 f842 	bl	800b4a0 <memmove>
 800a41c:	68a3      	ldr	r3, [r4, #8]
 800a41e:	1b9b      	subs	r3, r3, r6
 800a420:	60a3      	str	r3, [r4, #8]
 800a422:	6823      	ldr	r3, [r4, #0]
 800a424:	4433      	add	r3, r6
 800a426:	6023      	str	r3, [r4, #0]
 800a428:	2000      	movs	r0, #0
 800a42a:	e7db      	b.n	800a3e4 <__ssputs_r+0x58>
 800a42c:	462a      	mov	r2, r5
 800a42e:	f001 f851 	bl	800b4d4 <_realloc_r>
 800a432:	4606      	mov	r6, r0
 800a434:	2800      	cmp	r0, #0
 800a436:	d1e1      	bne.n	800a3fc <__ssputs_r+0x70>
 800a438:	6921      	ldr	r1, [r4, #16]
 800a43a:	4650      	mov	r0, sl
 800a43c:	f7ff fadc 	bl	80099f8 <_free_r>
 800a440:	e7c7      	b.n	800a3d2 <__ssputs_r+0x46>
	...

0800a444 <_svfiprintf_r>:
 800a444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a448:	4698      	mov	r8, r3
 800a44a:	898b      	ldrh	r3, [r1, #12]
 800a44c:	061b      	lsls	r3, r3, #24
 800a44e:	b09d      	sub	sp, #116	; 0x74
 800a450:	4607      	mov	r7, r0
 800a452:	460d      	mov	r5, r1
 800a454:	4614      	mov	r4, r2
 800a456:	d50e      	bpl.n	800a476 <_svfiprintf_r+0x32>
 800a458:	690b      	ldr	r3, [r1, #16]
 800a45a:	b963      	cbnz	r3, 800a476 <_svfiprintf_r+0x32>
 800a45c:	2140      	movs	r1, #64	; 0x40
 800a45e:	f7ff fb37 	bl	8009ad0 <_malloc_r>
 800a462:	6028      	str	r0, [r5, #0]
 800a464:	6128      	str	r0, [r5, #16]
 800a466:	b920      	cbnz	r0, 800a472 <_svfiprintf_r+0x2e>
 800a468:	230c      	movs	r3, #12
 800a46a:	603b      	str	r3, [r7, #0]
 800a46c:	f04f 30ff 	mov.w	r0, #4294967295
 800a470:	e0d1      	b.n	800a616 <_svfiprintf_r+0x1d2>
 800a472:	2340      	movs	r3, #64	; 0x40
 800a474:	616b      	str	r3, [r5, #20]
 800a476:	2300      	movs	r3, #0
 800a478:	9309      	str	r3, [sp, #36]	; 0x24
 800a47a:	2320      	movs	r3, #32
 800a47c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a480:	f8cd 800c 	str.w	r8, [sp, #12]
 800a484:	2330      	movs	r3, #48	; 0x30
 800a486:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a630 <_svfiprintf_r+0x1ec>
 800a48a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a48e:	f04f 0901 	mov.w	r9, #1
 800a492:	4623      	mov	r3, r4
 800a494:	469a      	mov	sl, r3
 800a496:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a49a:	b10a      	cbz	r2, 800a4a0 <_svfiprintf_r+0x5c>
 800a49c:	2a25      	cmp	r2, #37	; 0x25
 800a49e:	d1f9      	bne.n	800a494 <_svfiprintf_r+0x50>
 800a4a0:	ebba 0b04 	subs.w	fp, sl, r4
 800a4a4:	d00b      	beq.n	800a4be <_svfiprintf_r+0x7a>
 800a4a6:	465b      	mov	r3, fp
 800a4a8:	4622      	mov	r2, r4
 800a4aa:	4629      	mov	r1, r5
 800a4ac:	4638      	mov	r0, r7
 800a4ae:	f7ff ff6d 	bl	800a38c <__ssputs_r>
 800a4b2:	3001      	adds	r0, #1
 800a4b4:	f000 80aa 	beq.w	800a60c <_svfiprintf_r+0x1c8>
 800a4b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4ba:	445a      	add	r2, fp
 800a4bc:	9209      	str	r2, [sp, #36]	; 0x24
 800a4be:	f89a 3000 	ldrb.w	r3, [sl]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	f000 80a2 	beq.w	800a60c <_svfiprintf_r+0x1c8>
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	f04f 32ff 	mov.w	r2, #4294967295
 800a4ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4d2:	f10a 0a01 	add.w	sl, sl, #1
 800a4d6:	9304      	str	r3, [sp, #16]
 800a4d8:	9307      	str	r3, [sp, #28]
 800a4da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a4de:	931a      	str	r3, [sp, #104]	; 0x68
 800a4e0:	4654      	mov	r4, sl
 800a4e2:	2205      	movs	r2, #5
 800a4e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4e8:	4851      	ldr	r0, [pc, #324]	; (800a630 <_svfiprintf_r+0x1ec>)
 800a4ea:	f7f5 feb1 	bl	8000250 <memchr>
 800a4ee:	9a04      	ldr	r2, [sp, #16]
 800a4f0:	b9d8      	cbnz	r0, 800a52a <_svfiprintf_r+0xe6>
 800a4f2:	06d0      	lsls	r0, r2, #27
 800a4f4:	bf44      	itt	mi
 800a4f6:	2320      	movmi	r3, #32
 800a4f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4fc:	0711      	lsls	r1, r2, #28
 800a4fe:	bf44      	itt	mi
 800a500:	232b      	movmi	r3, #43	; 0x2b
 800a502:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a506:	f89a 3000 	ldrb.w	r3, [sl]
 800a50a:	2b2a      	cmp	r3, #42	; 0x2a
 800a50c:	d015      	beq.n	800a53a <_svfiprintf_r+0xf6>
 800a50e:	9a07      	ldr	r2, [sp, #28]
 800a510:	4654      	mov	r4, sl
 800a512:	2000      	movs	r0, #0
 800a514:	f04f 0c0a 	mov.w	ip, #10
 800a518:	4621      	mov	r1, r4
 800a51a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a51e:	3b30      	subs	r3, #48	; 0x30
 800a520:	2b09      	cmp	r3, #9
 800a522:	d94e      	bls.n	800a5c2 <_svfiprintf_r+0x17e>
 800a524:	b1b0      	cbz	r0, 800a554 <_svfiprintf_r+0x110>
 800a526:	9207      	str	r2, [sp, #28]
 800a528:	e014      	b.n	800a554 <_svfiprintf_r+0x110>
 800a52a:	eba0 0308 	sub.w	r3, r0, r8
 800a52e:	fa09 f303 	lsl.w	r3, r9, r3
 800a532:	4313      	orrs	r3, r2
 800a534:	9304      	str	r3, [sp, #16]
 800a536:	46a2      	mov	sl, r4
 800a538:	e7d2      	b.n	800a4e0 <_svfiprintf_r+0x9c>
 800a53a:	9b03      	ldr	r3, [sp, #12]
 800a53c:	1d19      	adds	r1, r3, #4
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	9103      	str	r1, [sp, #12]
 800a542:	2b00      	cmp	r3, #0
 800a544:	bfbb      	ittet	lt
 800a546:	425b      	neglt	r3, r3
 800a548:	f042 0202 	orrlt.w	r2, r2, #2
 800a54c:	9307      	strge	r3, [sp, #28]
 800a54e:	9307      	strlt	r3, [sp, #28]
 800a550:	bfb8      	it	lt
 800a552:	9204      	strlt	r2, [sp, #16]
 800a554:	7823      	ldrb	r3, [r4, #0]
 800a556:	2b2e      	cmp	r3, #46	; 0x2e
 800a558:	d10c      	bne.n	800a574 <_svfiprintf_r+0x130>
 800a55a:	7863      	ldrb	r3, [r4, #1]
 800a55c:	2b2a      	cmp	r3, #42	; 0x2a
 800a55e:	d135      	bne.n	800a5cc <_svfiprintf_r+0x188>
 800a560:	9b03      	ldr	r3, [sp, #12]
 800a562:	1d1a      	adds	r2, r3, #4
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	9203      	str	r2, [sp, #12]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	bfb8      	it	lt
 800a56c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a570:	3402      	adds	r4, #2
 800a572:	9305      	str	r3, [sp, #20]
 800a574:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a640 <_svfiprintf_r+0x1fc>
 800a578:	7821      	ldrb	r1, [r4, #0]
 800a57a:	2203      	movs	r2, #3
 800a57c:	4650      	mov	r0, sl
 800a57e:	f7f5 fe67 	bl	8000250 <memchr>
 800a582:	b140      	cbz	r0, 800a596 <_svfiprintf_r+0x152>
 800a584:	2340      	movs	r3, #64	; 0x40
 800a586:	eba0 000a 	sub.w	r0, r0, sl
 800a58a:	fa03 f000 	lsl.w	r0, r3, r0
 800a58e:	9b04      	ldr	r3, [sp, #16]
 800a590:	4303      	orrs	r3, r0
 800a592:	3401      	adds	r4, #1
 800a594:	9304      	str	r3, [sp, #16]
 800a596:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a59a:	4826      	ldr	r0, [pc, #152]	; (800a634 <_svfiprintf_r+0x1f0>)
 800a59c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a5a0:	2206      	movs	r2, #6
 800a5a2:	f7f5 fe55 	bl	8000250 <memchr>
 800a5a6:	2800      	cmp	r0, #0
 800a5a8:	d038      	beq.n	800a61c <_svfiprintf_r+0x1d8>
 800a5aa:	4b23      	ldr	r3, [pc, #140]	; (800a638 <_svfiprintf_r+0x1f4>)
 800a5ac:	bb1b      	cbnz	r3, 800a5f6 <_svfiprintf_r+0x1b2>
 800a5ae:	9b03      	ldr	r3, [sp, #12]
 800a5b0:	3307      	adds	r3, #7
 800a5b2:	f023 0307 	bic.w	r3, r3, #7
 800a5b6:	3308      	adds	r3, #8
 800a5b8:	9303      	str	r3, [sp, #12]
 800a5ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5bc:	4433      	add	r3, r6
 800a5be:	9309      	str	r3, [sp, #36]	; 0x24
 800a5c0:	e767      	b.n	800a492 <_svfiprintf_r+0x4e>
 800a5c2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5c6:	460c      	mov	r4, r1
 800a5c8:	2001      	movs	r0, #1
 800a5ca:	e7a5      	b.n	800a518 <_svfiprintf_r+0xd4>
 800a5cc:	2300      	movs	r3, #0
 800a5ce:	3401      	adds	r4, #1
 800a5d0:	9305      	str	r3, [sp, #20]
 800a5d2:	4619      	mov	r1, r3
 800a5d4:	f04f 0c0a 	mov.w	ip, #10
 800a5d8:	4620      	mov	r0, r4
 800a5da:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5de:	3a30      	subs	r2, #48	; 0x30
 800a5e0:	2a09      	cmp	r2, #9
 800a5e2:	d903      	bls.n	800a5ec <_svfiprintf_r+0x1a8>
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d0c5      	beq.n	800a574 <_svfiprintf_r+0x130>
 800a5e8:	9105      	str	r1, [sp, #20]
 800a5ea:	e7c3      	b.n	800a574 <_svfiprintf_r+0x130>
 800a5ec:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5f0:	4604      	mov	r4, r0
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	e7f0      	b.n	800a5d8 <_svfiprintf_r+0x194>
 800a5f6:	ab03      	add	r3, sp, #12
 800a5f8:	9300      	str	r3, [sp, #0]
 800a5fa:	462a      	mov	r2, r5
 800a5fc:	4b0f      	ldr	r3, [pc, #60]	; (800a63c <_svfiprintf_r+0x1f8>)
 800a5fe:	a904      	add	r1, sp, #16
 800a600:	4638      	mov	r0, r7
 800a602:	f3af 8000 	nop.w
 800a606:	1c42      	adds	r2, r0, #1
 800a608:	4606      	mov	r6, r0
 800a60a:	d1d6      	bne.n	800a5ba <_svfiprintf_r+0x176>
 800a60c:	89ab      	ldrh	r3, [r5, #12]
 800a60e:	065b      	lsls	r3, r3, #25
 800a610:	f53f af2c 	bmi.w	800a46c <_svfiprintf_r+0x28>
 800a614:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a616:	b01d      	add	sp, #116	; 0x74
 800a618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a61c:	ab03      	add	r3, sp, #12
 800a61e:	9300      	str	r3, [sp, #0]
 800a620:	462a      	mov	r2, r5
 800a622:	4b06      	ldr	r3, [pc, #24]	; (800a63c <_svfiprintf_r+0x1f8>)
 800a624:	a904      	add	r1, sp, #16
 800a626:	4638      	mov	r0, r7
 800a628:	f000 f9d4 	bl	800a9d4 <_printf_i>
 800a62c:	e7eb      	b.n	800a606 <_svfiprintf_r+0x1c2>
 800a62e:	bf00      	nop
 800a630:	0800d73c 	.word	0x0800d73c
 800a634:	0800d746 	.word	0x0800d746
 800a638:	00000000 	.word	0x00000000
 800a63c:	0800a38d 	.word	0x0800a38d
 800a640:	0800d742 	.word	0x0800d742

0800a644 <__sfputc_r>:
 800a644:	6893      	ldr	r3, [r2, #8]
 800a646:	3b01      	subs	r3, #1
 800a648:	2b00      	cmp	r3, #0
 800a64a:	b410      	push	{r4}
 800a64c:	6093      	str	r3, [r2, #8]
 800a64e:	da08      	bge.n	800a662 <__sfputc_r+0x1e>
 800a650:	6994      	ldr	r4, [r2, #24]
 800a652:	42a3      	cmp	r3, r4
 800a654:	db01      	blt.n	800a65a <__sfputc_r+0x16>
 800a656:	290a      	cmp	r1, #10
 800a658:	d103      	bne.n	800a662 <__sfputc_r+0x1e>
 800a65a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a65e:	f000 bbeb 	b.w	800ae38 <__swbuf_r>
 800a662:	6813      	ldr	r3, [r2, #0]
 800a664:	1c58      	adds	r0, r3, #1
 800a666:	6010      	str	r0, [r2, #0]
 800a668:	7019      	strb	r1, [r3, #0]
 800a66a:	4608      	mov	r0, r1
 800a66c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a670:	4770      	bx	lr

0800a672 <__sfputs_r>:
 800a672:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a674:	4606      	mov	r6, r0
 800a676:	460f      	mov	r7, r1
 800a678:	4614      	mov	r4, r2
 800a67a:	18d5      	adds	r5, r2, r3
 800a67c:	42ac      	cmp	r4, r5
 800a67e:	d101      	bne.n	800a684 <__sfputs_r+0x12>
 800a680:	2000      	movs	r0, #0
 800a682:	e007      	b.n	800a694 <__sfputs_r+0x22>
 800a684:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a688:	463a      	mov	r2, r7
 800a68a:	4630      	mov	r0, r6
 800a68c:	f7ff ffda 	bl	800a644 <__sfputc_r>
 800a690:	1c43      	adds	r3, r0, #1
 800a692:	d1f3      	bne.n	800a67c <__sfputs_r+0xa>
 800a694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a698 <_vfiprintf_r>:
 800a698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a69c:	460d      	mov	r5, r1
 800a69e:	b09d      	sub	sp, #116	; 0x74
 800a6a0:	4614      	mov	r4, r2
 800a6a2:	4698      	mov	r8, r3
 800a6a4:	4606      	mov	r6, r0
 800a6a6:	b118      	cbz	r0, 800a6b0 <_vfiprintf_r+0x18>
 800a6a8:	6983      	ldr	r3, [r0, #24]
 800a6aa:	b90b      	cbnz	r3, 800a6b0 <_vfiprintf_r+0x18>
 800a6ac:	f000 fdd4 	bl	800b258 <__sinit>
 800a6b0:	4b89      	ldr	r3, [pc, #548]	; (800a8d8 <_vfiprintf_r+0x240>)
 800a6b2:	429d      	cmp	r5, r3
 800a6b4:	d11b      	bne.n	800a6ee <_vfiprintf_r+0x56>
 800a6b6:	6875      	ldr	r5, [r6, #4]
 800a6b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6ba:	07d9      	lsls	r1, r3, #31
 800a6bc:	d405      	bmi.n	800a6ca <_vfiprintf_r+0x32>
 800a6be:	89ab      	ldrh	r3, [r5, #12]
 800a6c0:	059a      	lsls	r2, r3, #22
 800a6c2:	d402      	bmi.n	800a6ca <_vfiprintf_r+0x32>
 800a6c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a6c6:	f7ff fe51 	bl	800a36c <__retarget_lock_acquire_recursive>
 800a6ca:	89ab      	ldrh	r3, [r5, #12]
 800a6cc:	071b      	lsls	r3, r3, #28
 800a6ce:	d501      	bpl.n	800a6d4 <_vfiprintf_r+0x3c>
 800a6d0:	692b      	ldr	r3, [r5, #16]
 800a6d2:	b9eb      	cbnz	r3, 800a710 <_vfiprintf_r+0x78>
 800a6d4:	4629      	mov	r1, r5
 800a6d6:	4630      	mov	r0, r6
 800a6d8:	f000 fc12 	bl	800af00 <__swsetup_r>
 800a6dc:	b1c0      	cbz	r0, 800a710 <_vfiprintf_r+0x78>
 800a6de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6e0:	07dc      	lsls	r4, r3, #31
 800a6e2:	d50e      	bpl.n	800a702 <_vfiprintf_r+0x6a>
 800a6e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a6e8:	b01d      	add	sp, #116	; 0x74
 800a6ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6ee:	4b7b      	ldr	r3, [pc, #492]	; (800a8dc <_vfiprintf_r+0x244>)
 800a6f0:	429d      	cmp	r5, r3
 800a6f2:	d101      	bne.n	800a6f8 <_vfiprintf_r+0x60>
 800a6f4:	68b5      	ldr	r5, [r6, #8]
 800a6f6:	e7df      	b.n	800a6b8 <_vfiprintf_r+0x20>
 800a6f8:	4b79      	ldr	r3, [pc, #484]	; (800a8e0 <_vfiprintf_r+0x248>)
 800a6fa:	429d      	cmp	r5, r3
 800a6fc:	bf08      	it	eq
 800a6fe:	68f5      	ldreq	r5, [r6, #12]
 800a700:	e7da      	b.n	800a6b8 <_vfiprintf_r+0x20>
 800a702:	89ab      	ldrh	r3, [r5, #12]
 800a704:	0598      	lsls	r0, r3, #22
 800a706:	d4ed      	bmi.n	800a6e4 <_vfiprintf_r+0x4c>
 800a708:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a70a:	f7ff fe31 	bl	800a370 <__retarget_lock_release_recursive>
 800a70e:	e7e9      	b.n	800a6e4 <_vfiprintf_r+0x4c>
 800a710:	2300      	movs	r3, #0
 800a712:	9309      	str	r3, [sp, #36]	; 0x24
 800a714:	2320      	movs	r3, #32
 800a716:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a71a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a71e:	2330      	movs	r3, #48	; 0x30
 800a720:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a8e4 <_vfiprintf_r+0x24c>
 800a724:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a728:	f04f 0901 	mov.w	r9, #1
 800a72c:	4623      	mov	r3, r4
 800a72e:	469a      	mov	sl, r3
 800a730:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a734:	b10a      	cbz	r2, 800a73a <_vfiprintf_r+0xa2>
 800a736:	2a25      	cmp	r2, #37	; 0x25
 800a738:	d1f9      	bne.n	800a72e <_vfiprintf_r+0x96>
 800a73a:	ebba 0b04 	subs.w	fp, sl, r4
 800a73e:	d00b      	beq.n	800a758 <_vfiprintf_r+0xc0>
 800a740:	465b      	mov	r3, fp
 800a742:	4622      	mov	r2, r4
 800a744:	4629      	mov	r1, r5
 800a746:	4630      	mov	r0, r6
 800a748:	f7ff ff93 	bl	800a672 <__sfputs_r>
 800a74c:	3001      	adds	r0, #1
 800a74e:	f000 80aa 	beq.w	800a8a6 <_vfiprintf_r+0x20e>
 800a752:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a754:	445a      	add	r2, fp
 800a756:	9209      	str	r2, [sp, #36]	; 0x24
 800a758:	f89a 3000 	ldrb.w	r3, [sl]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	f000 80a2 	beq.w	800a8a6 <_vfiprintf_r+0x20e>
 800a762:	2300      	movs	r3, #0
 800a764:	f04f 32ff 	mov.w	r2, #4294967295
 800a768:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a76c:	f10a 0a01 	add.w	sl, sl, #1
 800a770:	9304      	str	r3, [sp, #16]
 800a772:	9307      	str	r3, [sp, #28]
 800a774:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a778:	931a      	str	r3, [sp, #104]	; 0x68
 800a77a:	4654      	mov	r4, sl
 800a77c:	2205      	movs	r2, #5
 800a77e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a782:	4858      	ldr	r0, [pc, #352]	; (800a8e4 <_vfiprintf_r+0x24c>)
 800a784:	f7f5 fd64 	bl	8000250 <memchr>
 800a788:	9a04      	ldr	r2, [sp, #16]
 800a78a:	b9d8      	cbnz	r0, 800a7c4 <_vfiprintf_r+0x12c>
 800a78c:	06d1      	lsls	r1, r2, #27
 800a78e:	bf44      	itt	mi
 800a790:	2320      	movmi	r3, #32
 800a792:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a796:	0713      	lsls	r3, r2, #28
 800a798:	bf44      	itt	mi
 800a79a:	232b      	movmi	r3, #43	; 0x2b
 800a79c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7a0:	f89a 3000 	ldrb.w	r3, [sl]
 800a7a4:	2b2a      	cmp	r3, #42	; 0x2a
 800a7a6:	d015      	beq.n	800a7d4 <_vfiprintf_r+0x13c>
 800a7a8:	9a07      	ldr	r2, [sp, #28]
 800a7aa:	4654      	mov	r4, sl
 800a7ac:	2000      	movs	r0, #0
 800a7ae:	f04f 0c0a 	mov.w	ip, #10
 800a7b2:	4621      	mov	r1, r4
 800a7b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7b8:	3b30      	subs	r3, #48	; 0x30
 800a7ba:	2b09      	cmp	r3, #9
 800a7bc:	d94e      	bls.n	800a85c <_vfiprintf_r+0x1c4>
 800a7be:	b1b0      	cbz	r0, 800a7ee <_vfiprintf_r+0x156>
 800a7c0:	9207      	str	r2, [sp, #28]
 800a7c2:	e014      	b.n	800a7ee <_vfiprintf_r+0x156>
 800a7c4:	eba0 0308 	sub.w	r3, r0, r8
 800a7c8:	fa09 f303 	lsl.w	r3, r9, r3
 800a7cc:	4313      	orrs	r3, r2
 800a7ce:	9304      	str	r3, [sp, #16]
 800a7d0:	46a2      	mov	sl, r4
 800a7d2:	e7d2      	b.n	800a77a <_vfiprintf_r+0xe2>
 800a7d4:	9b03      	ldr	r3, [sp, #12]
 800a7d6:	1d19      	adds	r1, r3, #4
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	9103      	str	r1, [sp, #12]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	bfbb      	ittet	lt
 800a7e0:	425b      	neglt	r3, r3
 800a7e2:	f042 0202 	orrlt.w	r2, r2, #2
 800a7e6:	9307      	strge	r3, [sp, #28]
 800a7e8:	9307      	strlt	r3, [sp, #28]
 800a7ea:	bfb8      	it	lt
 800a7ec:	9204      	strlt	r2, [sp, #16]
 800a7ee:	7823      	ldrb	r3, [r4, #0]
 800a7f0:	2b2e      	cmp	r3, #46	; 0x2e
 800a7f2:	d10c      	bne.n	800a80e <_vfiprintf_r+0x176>
 800a7f4:	7863      	ldrb	r3, [r4, #1]
 800a7f6:	2b2a      	cmp	r3, #42	; 0x2a
 800a7f8:	d135      	bne.n	800a866 <_vfiprintf_r+0x1ce>
 800a7fa:	9b03      	ldr	r3, [sp, #12]
 800a7fc:	1d1a      	adds	r2, r3, #4
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	9203      	str	r2, [sp, #12]
 800a802:	2b00      	cmp	r3, #0
 800a804:	bfb8      	it	lt
 800a806:	f04f 33ff 	movlt.w	r3, #4294967295
 800a80a:	3402      	adds	r4, #2
 800a80c:	9305      	str	r3, [sp, #20]
 800a80e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a8f4 <_vfiprintf_r+0x25c>
 800a812:	7821      	ldrb	r1, [r4, #0]
 800a814:	2203      	movs	r2, #3
 800a816:	4650      	mov	r0, sl
 800a818:	f7f5 fd1a 	bl	8000250 <memchr>
 800a81c:	b140      	cbz	r0, 800a830 <_vfiprintf_r+0x198>
 800a81e:	2340      	movs	r3, #64	; 0x40
 800a820:	eba0 000a 	sub.w	r0, r0, sl
 800a824:	fa03 f000 	lsl.w	r0, r3, r0
 800a828:	9b04      	ldr	r3, [sp, #16]
 800a82a:	4303      	orrs	r3, r0
 800a82c:	3401      	adds	r4, #1
 800a82e:	9304      	str	r3, [sp, #16]
 800a830:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a834:	482c      	ldr	r0, [pc, #176]	; (800a8e8 <_vfiprintf_r+0x250>)
 800a836:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a83a:	2206      	movs	r2, #6
 800a83c:	f7f5 fd08 	bl	8000250 <memchr>
 800a840:	2800      	cmp	r0, #0
 800a842:	d03f      	beq.n	800a8c4 <_vfiprintf_r+0x22c>
 800a844:	4b29      	ldr	r3, [pc, #164]	; (800a8ec <_vfiprintf_r+0x254>)
 800a846:	bb1b      	cbnz	r3, 800a890 <_vfiprintf_r+0x1f8>
 800a848:	9b03      	ldr	r3, [sp, #12]
 800a84a:	3307      	adds	r3, #7
 800a84c:	f023 0307 	bic.w	r3, r3, #7
 800a850:	3308      	adds	r3, #8
 800a852:	9303      	str	r3, [sp, #12]
 800a854:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a856:	443b      	add	r3, r7
 800a858:	9309      	str	r3, [sp, #36]	; 0x24
 800a85a:	e767      	b.n	800a72c <_vfiprintf_r+0x94>
 800a85c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a860:	460c      	mov	r4, r1
 800a862:	2001      	movs	r0, #1
 800a864:	e7a5      	b.n	800a7b2 <_vfiprintf_r+0x11a>
 800a866:	2300      	movs	r3, #0
 800a868:	3401      	adds	r4, #1
 800a86a:	9305      	str	r3, [sp, #20]
 800a86c:	4619      	mov	r1, r3
 800a86e:	f04f 0c0a 	mov.w	ip, #10
 800a872:	4620      	mov	r0, r4
 800a874:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a878:	3a30      	subs	r2, #48	; 0x30
 800a87a:	2a09      	cmp	r2, #9
 800a87c:	d903      	bls.n	800a886 <_vfiprintf_r+0x1ee>
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d0c5      	beq.n	800a80e <_vfiprintf_r+0x176>
 800a882:	9105      	str	r1, [sp, #20]
 800a884:	e7c3      	b.n	800a80e <_vfiprintf_r+0x176>
 800a886:	fb0c 2101 	mla	r1, ip, r1, r2
 800a88a:	4604      	mov	r4, r0
 800a88c:	2301      	movs	r3, #1
 800a88e:	e7f0      	b.n	800a872 <_vfiprintf_r+0x1da>
 800a890:	ab03      	add	r3, sp, #12
 800a892:	9300      	str	r3, [sp, #0]
 800a894:	462a      	mov	r2, r5
 800a896:	4b16      	ldr	r3, [pc, #88]	; (800a8f0 <_vfiprintf_r+0x258>)
 800a898:	a904      	add	r1, sp, #16
 800a89a:	4630      	mov	r0, r6
 800a89c:	f3af 8000 	nop.w
 800a8a0:	4607      	mov	r7, r0
 800a8a2:	1c78      	adds	r0, r7, #1
 800a8a4:	d1d6      	bne.n	800a854 <_vfiprintf_r+0x1bc>
 800a8a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8a8:	07d9      	lsls	r1, r3, #31
 800a8aa:	d405      	bmi.n	800a8b8 <_vfiprintf_r+0x220>
 800a8ac:	89ab      	ldrh	r3, [r5, #12]
 800a8ae:	059a      	lsls	r2, r3, #22
 800a8b0:	d402      	bmi.n	800a8b8 <_vfiprintf_r+0x220>
 800a8b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8b4:	f7ff fd5c 	bl	800a370 <__retarget_lock_release_recursive>
 800a8b8:	89ab      	ldrh	r3, [r5, #12]
 800a8ba:	065b      	lsls	r3, r3, #25
 800a8bc:	f53f af12 	bmi.w	800a6e4 <_vfiprintf_r+0x4c>
 800a8c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a8c2:	e711      	b.n	800a6e8 <_vfiprintf_r+0x50>
 800a8c4:	ab03      	add	r3, sp, #12
 800a8c6:	9300      	str	r3, [sp, #0]
 800a8c8:	462a      	mov	r2, r5
 800a8ca:	4b09      	ldr	r3, [pc, #36]	; (800a8f0 <_vfiprintf_r+0x258>)
 800a8cc:	a904      	add	r1, sp, #16
 800a8ce:	4630      	mov	r0, r6
 800a8d0:	f000 f880 	bl	800a9d4 <_printf_i>
 800a8d4:	e7e4      	b.n	800a8a0 <_vfiprintf_r+0x208>
 800a8d6:	bf00      	nop
 800a8d8:	0800d890 	.word	0x0800d890
 800a8dc:	0800d8b0 	.word	0x0800d8b0
 800a8e0:	0800d870 	.word	0x0800d870
 800a8e4:	0800d73c 	.word	0x0800d73c
 800a8e8:	0800d746 	.word	0x0800d746
 800a8ec:	00000000 	.word	0x00000000
 800a8f0:	0800a673 	.word	0x0800a673
 800a8f4:	0800d742 	.word	0x0800d742

0800a8f8 <_printf_common>:
 800a8f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8fc:	4616      	mov	r6, r2
 800a8fe:	4699      	mov	r9, r3
 800a900:	688a      	ldr	r2, [r1, #8]
 800a902:	690b      	ldr	r3, [r1, #16]
 800a904:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a908:	4293      	cmp	r3, r2
 800a90a:	bfb8      	it	lt
 800a90c:	4613      	movlt	r3, r2
 800a90e:	6033      	str	r3, [r6, #0]
 800a910:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a914:	4607      	mov	r7, r0
 800a916:	460c      	mov	r4, r1
 800a918:	b10a      	cbz	r2, 800a91e <_printf_common+0x26>
 800a91a:	3301      	adds	r3, #1
 800a91c:	6033      	str	r3, [r6, #0]
 800a91e:	6823      	ldr	r3, [r4, #0]
 800a920:	0699      	lsls	r1, r3, #26
 800a922:	bf42      	ittt	mi
 800a924:	6833      	ldrmi	r3, [r6, #0]
 800a926:	3302      	addmi	r3, #2
 800a928:	6033      	strmi	r3, [r6, #0]
 800a92a:	6825      	ldr	r5, [r4, #0]
 800a92c:	f015 0506 	ands.w	r5, r5, #6
 800a930:	d106      	bne.n	800a940 <_printf_common+0x48>
 800a932:	f104 0a19 	add.w	sl, r4, #25
 800a936:	68e3      	ldr	r3, [r4, #12]
 800a938:	6832      	ldr	r2, [r6, #0]
 800a93a:	1a9b      	subs	r3, r3, r2
 800a93c:	42ab      	cmp	r3, r5
 800a93e:	dc26      	bgt.n	800a98e <_printf_common+0x96>
 800a940:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a944:	1e13      	subs	r3, r2, #0
 800a946:	6822      	ldr	r2, [r4, #0]
 800a948:	bf18      	it	ne
 800a94a:	2301      	movne	r3, #1
 800a94c:	0692      	lsls	r2, r2, #26
 800a94e:	d42b      	bmi.n	800a9a8 <_printf_common+0xb0>
 800a950:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a954:	4649      	mov	r1, r9
 800a956:	4638      	mov	r0, r7
 800a958:	47c0      	blx	r8
 800a95a:	3001      	adds	r0, #1
 800a95c:	d01e      	beq.n	800a99c <_printf_common+0xa4>
 800a95e:	6823      	ldr	r3, [r4, #0]
 800a960:	68e5      	ldr	r5, [r4, #12]
 800a962:	6832      	ldr	r2, [r6, #0]
 800a964:	f003 0306 	and.w	r3, r3, #6
 800a968:	2b04      	cmp	r3, #4
 800a96a:	bf08      	it	eq
 800a96c:	1aad      	subeq	r5, r5, r2
 800a96e:	68a3      	ldr	r3, [r4, #8]
 800a970:	6922      	ldr	r2, [r4, #16]
 800a972:	bf0c      	ite	eq
 800a974:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a978:	2500      	movne	r5, #0
 800a97a:	4293      	cmp	r3, r2
 800a97c:	bfc4      	itt	gt
 800a97e:	1a9b      	subgt	r3, r3, r2
 800a980:	18ed      	addgt	r5, r5, r3
 800a982:	2600      	movs	r6, #0
 800a984:	341a      	adds	r4, #26
 800a986:	42b5      	cmp	r5, r6
 800a988:	d11a      	bne.n	800a9c0 <_printf_common+0xc8>
 800a98a:	2000      	movs	r0, #0
 800a98c:	e008      	b.n	800a9a0 <_printf_common+0xa8>
 800a98e:	2301      	movs	r3, #1
 800a990:	4652      	mov	r2, sl
 800a992:	4649      	mov	r1, r9
 800a994:	4638      	mov	r0, r7
 800a996:	47c0      	blx	r8
 800a998:	3001      	adds	r0, #1
 800a99a:	d103      	bne.n	800a9a4 <_printf_common+0xac>
 800a99c:	f04f 30ff 	mov.w	r0, #4294967295
 800a9a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9a4:	3501      	adds	r5, #1
 800a9a6:	e7c6      	b.n	800a936 <_printf_common+0x3e>
 800a9a8:	18e1      	adds	r1, r4, r3
 800a9aa:	1c5a      	adds	r2, r3, #1
 800a9ac:	2030      	movs	r0, #48	; 0x30
 800a9ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a9b2:	4422      	add	r2, r4
 800a9b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a9b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a9bc:	3302      	adds	r3, #2
 800a9be:	e7c7      	b.n	800a950 <_printf_common+0x58>
 800a9c0:	2301      	movs	r3, #1
 800a9c2:	4622      	mov	r2, r4
 800a9c4:	4649      	mov	r1, r9
 800a9c6:	4638      	mov	r0, r7
 800a9c8:	47c0      	blx	r8
 800a9ca:	3001      	adds	r0, #1
 800a9cc:	d0e6      	beq.n	800a99c <_printf_common+0xa4>
 800a9ce:	3601      	adds	r6, #1
 800a9d0:	e7d9      	b.n	800a986 <_printf_common+0x8e>
	...

0800a9d4 <_printf_i>:
 800a9d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a9d8:	7e0f      	ldrb	r7, [r1, #24]
 800a9da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a9dc:	2f78      	cmp	r7, #120	; 0x78
 800a9de:	4691      	mov	r9, r2
 800a9e0:	4680      	mov	r8, r0
 800a9e2:	460c      	mov	r4, r1
 800a9e4:	469a      	mov	sl, r3
 800a9e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a9ea:	d807      	bhi.n	800a9fc <_printf_i+0x28>
 800a9ec:	2f62      	cmp	r7, #98	; 0x62
 800a9ee:	d80a      	bhi.n	800aa06 <_printf_i+0x32>
 800a9f0:	2f00      	cmp	r7, #0
 800a9f2:	f000 80d8 	beq.w	800aba6 <_printf_i+0x1d2>
 800a9f6:	2f58      	cmp	r7, #88	; 0x58
 800a9f8:	f000 80a3 	beq.w	800ab42 <_printf_i+0x16e>
 800a9fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aa04:	e03a      	b.n	800aa7c <_printf_i+0xa8>
 800aa06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aa0a:	2b15      	cmp	r3, #21
 800aa0c:	d8f6      	bhi.n	800a9fc <_printf_i+0x28>
 800aa0e:	a101      	add	r1, pc, #4	; (adr r1, 800aa14 <_printf_i+0x40>)
 800aa10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aa14:	0800aa6d 	.word	0x0800aa6d
 800aa18:	0800aa81 	.word	0x0800aa81
 800aa1c:	0800a9fd 	.word	0x0800a9fd
 800aa20:	0800a9fd 	.word	0x0800a9fd
 800aa24:	0800a9fd 	.word	0x0800a9fd
 800aa28:	0800a9fd 	.word	0x0800a9fd
 800aa2c:	0800aa81 	.word	0x0800aa81
 800aa30:	0800a9fd 	.word	0x0800a9fd
 800aa34:	0800a9fd 	.word	0x0800a9fd
 800aa38:	0800a9fd 	.word	0x0800a9fd
 800aa3c:	0800a9fd 	.word	0x0800a9fd
 800aa40:	0800ab8d 	.word	0x0800ab8d
 800aa44:	0800aab1 	.word	0x0800aab1
 800aa48:	0800ab6f 	.word	0x0800ab6f
 800aa4c:	0800a9fd 	.word	0x0800a9fd
 800aa50:	0800a9fd 	.word	0x0800a9fd
 800aa54:	0800abaf 	.word	0x0800abaf
 800aa58:	0800a9fd 	.word	0x0800a9fd
 800aa5c:	0800aab1 	.word	0x0800aab1
 800aa60:	0800a9fd 	.word	0x0800a9fd
 800aa64:	0800a9fd 	.word	0x0800a9fd
 800aa68:	0800ab77 	.word	0x0800ab77
 800aa6c:	682b      	ldr	r3, [r5, #0]
 800aa6e:	1d1a      	adds	r2, r3, #4
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	602a      	str	r2, [r5, #0]
 800aa74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	e0a3      	b.n	800abc8 <_printf_i+0x1f4>
 800aa80:	6820      	ldr	r0, [r4, #0]
 800aa82:	6829      	ldr	r1, [r5, #0]
 800aa84:	0606      	lsls	r6, r0, #24
 800aa86:	f101 0304 	add.w	r3, r1, #4
 800aa8a:	d50a      	bpl.n	800aaa2 <_printf_i+0xce>
 800aa8c:	680e      	ldr	r6, [r1, #0]
 800aa8e:	602b      	str	r3, [r5, #0]
 800aa90:	2e00      	cmp	r6, #0
 800aa92:	da03      	bge.n	800aa9c <_printf_i+0xc8>
 800aa94:	232d      	movs	r3, #45	; 0x2d
 800aa96:	4276      	negs	r6, r6
 800aa98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa9c:	485e      	ldr	r0, [pc, #376]	; (800ac18 <_printf_i+0x244>)
 800aa9e:	230a      	movs	r3, #10
 800aaa0:	e019      	b.n	800aad6 <_printf_i+0x102>
 800aaa2:	680e      	ldr	r6, [r1, #0]
 800aaa4:	602b      	str	r3, [r5, #0]
 800aaa6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800aaaa:	bf18      	it	ne
 800aaac:	b236      	sxthne	r6, r6
 800aaae:	e7ef      	b.n	800aa90 <_printf_i+0xbc>
 800aab0:	682b      	ldr	r3, [r5, #0]
 800aab2:	6820      	ldr	r0, [r4, #0]
 800aab4:	1d19      	adds	r1, r3, #4
 800aab6:	6029      	str	r1, [r5, #0]
 800aab8:	0601      	lsls	r1, r0, #24
 800aaba:	d501      	bpl.n	800aac0 <_printf_i+0xec>
 800aabc:	681e      	ldr	r6, [r3, #0]
 800aabe:	e002      	b.n	800aac6 <_printf_i+0xf2>
 800aac0:	0646      	lsls	r6, r0, #25
 800aac2:	d5fb      	bpl.n	800aabc <_printf_i+0xe8>
 800aac4:	881e      	ldrh	r6, [r3, #0]
 800aac6:	4854      	ldr	r0, [pc, #336]	; (800ac18 <_printf_i+0x244>)
 800aac8:	2f6f      	cmp	r7, #111	; 0x6f
 800aaca:	bf0c      	ite	eq
 800aacc:	2308      	moveq	r3, #8
 800aace:	230a      	movne	r3, #10
 800aad0:	2100      	movs	r1, #0
 800aad2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aad6:	6865      	ldr	r5, [r4, #4]
 800aad8:	60a5      	str	r5, [r4, #8]
 800aada:	2d00      	cmp	r5, #0
 800aadc:	bfa2      	ittt	ge
 800aade:	6821      	ldrge	r1, [r4, #0]
 800aae0:	f021 0104 	bicge.w	r1, r1, #4
 800aae4:	6021      	strge	r1, [r4, #0]
 800aae6:	b90e      	cbnz	r6, 800aaec <_printf_i+0x118>
 800aae8:	2d00      	cmp	r5, #0
 800aaea:	d04d      	beq.n	800ab88 <_printf_i+0x1b4>
 800aaec:	4615      	mov	r5, r2
 800aaee:	fbb6 f1f3 	udiv	r1, r6, r3
 800aaf2:	fb03 6711 	mls	r7, r3, r1, r6
 800aaf6:	5dc7      	ldrb	r7, [r0, r7]
 800aaf8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800aafc:	4637      	mov	r7, r6
 800aafe:	42bb      	cmp	r3, r7
 800ab00:	460e      	mov	r6, r1
 800ab02:	d9f4      	bls.n	800aaee <_printf_i+0x11a>
 800ab04:	2b08      	cmp	r3, #8
 800ab06:	d10b      	bne.n	800ab20 <_printf_i+0x14c>
 800ab08:	6823      	ldr	r3, [r4, #0]
 800ab0a:	07de      	lsls	r6, r3, #31
 800ab0c:	d508      	bpl.n	800ab20 <_printf_i+0x14c>
 800ab0e:	6923      	ldr	r3, [r4, #16]
 800ab10:	6861      	ldr	r1, [r4, #4]
 800ab12:	4299      	cmp	r1, r3
 800ab14:	bfde      	ittt	le
 800ab16:	2330      	movle	r3, #48	; 0x30
 800ab18:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ab1c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ab20:	1b52      	subs	r2, r2, r5
 800ab22:	6122      	str	r2, [r4, #16]
 800ab24:	f8cd a000 	str.w	sl, [sp]
 800ab28:	464b      	mov	r3, r9
 800ab2a:	aa03      	add	r2, sp, #12
 800ab2c:	4621      	mov	r1, r4
 800ab2e:	4640      	mov	r0, r8
 800ab30:	f7ff fee2 	bl	800a8f8 <_printf_common>
 800ab34:	3001      	adds	r0, #1
 800ab36:	d14c      	bne.n	800abd2 <_printf_i+0x1fe>
 800ab38:	f04f 30ff 	mov.w	r0, #4294967295
 800ab3c:	b004      	add	sp, #16
 800ab3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab42:	4835      	ldr	r0, [pc, #212]	; (800ac18 <_printf_i+0x244>)
 800ab44:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ab48:	6829      	ldr	r1, [r5, #0]
 800ab4a:	6823      	ldr	r3, [r4, #0]
 800ab4c:	f851 6b04 	ldr.w	r6, [r1], #4
 800ab50:	6029      	str	r1, [r5, #0]
 800ab52:	061d      	lsls	r5, r3, #24
 800ab54:	d514      	bpl.n	800ab80 <_printf_i+0x1ac>
 800ab56:	07df      	lsls	r7, r3, #31
 800ab58:	bf44      	itt	mi
 800ab5a:	f043 0320 	orrmi.w	r3, r3, #32
 800ab5e:	6023      	strmi	r3, [r4, #0]
 800ab60:	b91e      	cbnz	r6, 800ab6a <_printf_i+0x196>
 800ab62:	6823      	ldr	r3, [r4, #0]
 800ab64:	f023 0320 	bic.w	r3, r3, #32
 800ab68:	6023      	str	r3, [r4, #0]
 800ab6a:	2310      	movs	r3, #16
 800ab6c:	e7b0      	b.n	800aad0 <_printf_i+0xfc>
 800ab6e:	6823      	ldr	r3, [r4, #0]
 800ab70:	f043 0320 	orr.w	r3, r3, #32
 800ab74:	6023      	str	r3, [r4, #0]
 800ab76:	2378      	movs	r3, #120	; 0x78
 800ab78:	4828      	ldr	r0, [pc, #160]	; (800ac1c <_printf_i+0x248>)
 800ab7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ab7e:	e7e3      	b.n	800ab48 <_printf_i+0x174>
 800ab80:	0659      	lsls	r1, r3, #25
 800ab82:	bf48      	it	mi
 800ab84:	b2b6      	uxthmi	r6, r6
 800ab86:	e7e6      	b.n	800ab56 <_printf_i+0x182>
 800ab88:	4615      	mov	r5, r2
 800ab8a:	e7bb      	b.n	800ab04 <_printf_i+0x130>
 800ab8c:	682b      	ldr	r3, [r5, #0]
 800ab8e:	6826      	ldr	r6, [r4, #0]
 800ab90:	6961      	ldr	r1, [r4, #20]
 800ab92:	1d18      	adds	r0, r3, #4
 800ab94:	6028      	str	r0, [r5, #0]
 800ab96:	0635      	lsls	r5, r6, #24
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	d501      	bpl.n	800aba0 <_printf_i+0x1cc>
 800ab9c:	6019      	str	r1, [r3, #0]
 800ab9e:	e002      	b.n	800aba6 <_printf_i+0x1d2>
 800aba0:	0670      	lsls	r0, r6, #25
 800aba2:	d5fb      	bpl.n	800ab9c <_printf_i+0x1c8>
 800aba4:	8019      	strh	r1, [r3, #0]
 800aba6:	2300      	movs	r3, #0
 800aba8:	6123      	str	r3, [r4, #16]
 800abaa:	4615      	mov	r5, r2
 800abac:	e7ba      	b.n	800ab24 <_printf_i+0x150>
 800abae:	682b      	ldr	r3, [r5, #0]
 800abb0:	1d1a      	adds	r2, r3, #4
 800abb2:	602a      	str	r2, [r5, #0]
 800abb4:	681d      	ldr	r5, [r3, #0]
 800abb6:	6862      	ldr	r2, [r4, #4]
 800abb8:	2100      	movs	r1, #0
 800abba:	4628      	mov	r0, r5
 800abbc:	f7f5 fb48 	bl	8000250 <memchr>
 800abc0:	b108      	cbz	r0, 800abc6 <_printf_i+0x1f2>
 800abc2:	1b40      	subs	r0, r0, r5
 800abc4:	6060      	str	r0, [r4, #4]
 800abc6:	6863      	ldr	r3, [r4, #4]
 800abc8:	6123      	str	r3, [r4, #16]
 800abca:	2300      	movs	r3, #0
 800abcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800abd0:	e7a8      	b.n	800ab24 <_printf_i+0x150>
 800abd2:	6923      	ldr	r3, [r4, #16]
 800abd4:	462a      	mov	r2, r5
 800abd6:	4649      	mov	r1, r9
 800abd8:	4640      	mov	r0, r8
 800abda:	47d0      	blx	sl
 800abdc:	3001      	adds	r0, #1
 800abde:	d0ab      	beq.n	800ab38 <_printf_i+0x164>
 800abe0:	6823      	ldr	r3, [r4, #0]
 800abe2:	079b      	lsls	r3, r3, #30
 800abe4:	d413      	bmi.n	800ac0e <_printf_i+0x23a>
 800abe6:	68e0      	ldr	r0, [r4, #12]
 800abe8:	9b03      	ldr	r3, [sp, #12]
 800abea:	4298      	cmp	r0, r3
 800abec:	bfb8      	it	lt
 800abee:	4618      	movlt	r0, r3
 800abf0:	e7a4      	b.n	800ab3c <_printf_i+0x168>
 800abf2:	2301      	movs	r3, #1
 800abf4:	4632      	mov	r2, r6
 800abf6:	4649      	mov	r1, r9
 800abf8:	4640      	mov	r0, r8
 800abfa:	47d0      	blx	sl
 800abfc:	3001      	adds	r0, #1
 800abfe:	d09b      	beq.n	800ab38 <_printf_i+0x164>
 800ac00:	3501      	adds	r5, #1
 800ac02:	68e3      	ldr	r3, [r4, #12]
 800ac04:	9903      	ldr	r1, [sp, #12]
 800ac06:	1a5b      	subs	r3, r3, r1
 800ac08:	42ab      	cmp	r3, r5
 800ac0a:	dcf2      	bgt.n	800abf2 <_printf_i+0x21e>
 800ac0c:	e7eb      	b.n	800abe6 <_printf_i+0x212>
 800ac0e:	2500      	movs	r5, #0
 800ac10:	f104 0619 	add.w	r6, r4, #25
 800ac14:	e7f5      	b.n	800ac02 <_printf_i+0x22e>
 800ac16:	bf00      	nop
 800ac18:	0800d74d 	.word	0x0800d74d
 800ac1c:	0800d75e 	.word	0x0800d75e

0800ac20 <siscanf>:
 800ac20:	b40e      	push	{r1, r2, r3}
 800ac22:	b510      	push	{r4, lr}
 800ac24:	b09f      	sub	sp, #124	; 0x7c
 800ac26:	ac21      	add	r4, sp, #132	; 0x84
 800ac28:	f44f 7101 	mov.w	r1, #516	; 0x204
 800ac2c:	f854 2b04 	ldr.w	r2, [r4], #4
 800ac30:	9201      	str	r2, [sp, #4]
 800ac32:	f8ad 101c 	strh.w	r1, [sp, #28]
 800ac36:	9004      	str	r0, [sp, #16]
 800ac38:	9008      	str	r0, [sp, #32]
 800ac3a:	f7f5 faf1 	bl	8000220 <strlen>
 800ac3e:	4b0c      	ldr	r3, [pc, #48]	; (800ac70 <siscanf+0x50>)
 800ac40:	9005      	str	r0, [sp, #20]
 800ac42:	9009      	str	r0, [sp, #36]	; 0x24
 800ac44:	930d      	str	r3, [sp, #52]	; 0x34
 800ac46:	480b      	ldr	r0, [pc, #44]	; (800ac74 <siscanf+0x54>)
 800ac48:	9a01      	ldr	r2, [sp, #4]
 800ac4a:	6800      	ldr	r0, [r0, #0]
 800ac4c:	9403      	str	r4, [sp, #12]
 800ac4e:	2300      	movs	r3, #0
 800ac50:	9311      	str	r3, [sp, #68]	; 0x44
 800ac52:	9316      	str	r3, [sp, #88]	; 0x58
 800ac54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ac58:	f8ad 301e 	strh.w	r3, [sp, #30]
 800ac5c:	a904      	add	r1, sp, #16
 800ac5e:	4623      	mov	r3, r4
 800ac60:	f000 fcc2 	bl	800b5e8 <__ssvfiscanf_r>
 800ac64:	b01f      	add	sp, #124	; 0x7c
 800ac66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac6a:	b003      	add	sp, #12
 800ac6c:	4770      	bx	lr
 800ac6e:	bf00      	nop
 800ac70:	0800ac9b 	.word	0x0800ac9b
 800ac74:	200000c8 	.word	0x200000c8

0800ac78 <__sread>:
 800ac78:	b510      	push	{r4, lr}
 800ac7a:	460c      	mov	r4, r1
 800ac7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac80:	f000 ff7c 	bl	800bb7c <_read_r>
 800ac84:	2800      	cmp	r0, #0
 800ac86:	bfab      	itete	ge
 800ac88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ac8a:	89a3      	ldrhlt	r3, [r4, #12]
 800ac8c:	181b      	addge	r3, r3, r0
 800ac8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ac92:	bfac      	ite	ge
 800ac94:	6563      	strge	r3, [r4, #84]	; 0x54
 800ac96:	81a3      	strhlt	r3, [r4, #12]
 800ac98:	bd10      	pop	{r4, pc}

0800ac9a <__seofread>:
 800ac9a:	2000      	movs	r0, #0
 800ac9c:	4770      	bx	lr

0800ac9e <__swrite>:
 800ac9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aca2:	461f      	mov	r7, r3
 800aca4:	898b      	ldrh	r3, [r1, #12]
 800aca6:	05db      	lsls	r3, r3, #23
 800aca8:	4605      	mov	r5, r0
 800acaa:	460c      	mov	r4, r1
 800acac:	4616      	mov	r6, r2
 800acae:	d505      	bpl.n	800acbc <__swrite+0x1e>
 800acb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acb4:	2302      	movs	r3, #2
 800acb6:	2200      	movs	r2, #0
 800acb8:	f000 fb6c 	bl	800b394 <_lseek_r>
 800acbc:	89a3      	ldrh	r3, [r4, #12]
 800acbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800acc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800acc6:	81a3      	strh	r3, [r4, #12]
 800acc8:	4632      	mov	r2, r6
 800acca:	463b      	mov	r3, r7
 800accc:	4628      	mov	r0, r5
 800acce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800acd2:	f000 b903 	b.w	800aedc <_write_r>

0800acd6 <__sseek>:
 800acd6:	b510      	push	{r4, lr}
 800acd8:	460c      	mov	r4, r1
 800acda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acde:	f000 fb59 	bl	800b394 <_lseek_r>
 800ace2:	1c43      	adds	r3, r0, #1
 800ace4:	89a3      	ldrh	r3, [r4, #12]
 800ace6:	bf15      	itete	ne
 800ace8:	6560      	strne	r0, [r4, #84]	; 0x54
 800acea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800acee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800acf2:	81a3      	strheq	r3, [r4, #12]
 800acf4:	bf18      	it	ne
 800acf6:	81a3      	strhne	r3, [r4, #12]
 800acf8:	bd10      	pop	{r4, pc}

0800acfa <__sclose>:
 800acfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acfe:	f000 b975 	b.w	800afec <_close_r>

0800ad02 <strcpy>:
 800ad02:	4603      	mov	r3, r0
 800ad04:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ad08:	f803 2b01 	strb.w	r2, [r3], #1
 800ad0c:	2a00      	cmp	r2, #0
 800ad0e:	d1f9      	bne.n	800ad04 <strcpy+0x2>
 800ad10:	4770      	bx	lr

0800ad12 <strncmp>:
 800ad12:	b510      	push	{r4, lr}
 800ad14:	b17a      	cbz	r2, 800ad36 <strncmp+0x24>
 800ad16:	4603      	mov	r3, r0
 800ad18:	3901      	subs	r1, #1
 800ad1a:	1884      	adds	r4, r0, r2
 800ad1c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ad20:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ad24:	4290      	cmp	r0, r2
 800ad26:	d101      	bne.n	800ad2c <strncmp+0x1a>
 800ad28:	42a3      	cmp	r3, r4
 800ad2a:	d101      	bne.n	800ad30 <strncmp+0x1e>
 800ad2c:	1a80      	subs	r0, r0, r2
 800ad2e:	bd10      	pop	{r4, pc}
 800ad30:	2800      	cmp	r0, #0
 800ad32:	d1f3      	bne.n	800ad1c <strncmp+0xa>
 800ad34:	e7fa      	b.n	800ad2c <strncmp+0x1a>
 800ad36:	4610      	mov	r0, r2
 800ad38:	e7f9      	b.n	800ad2e <strncmp+0x1c>
	...

0800ad3c <_strtoul_l.constprop.0>:
 800ad3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ad40:	4f36      	ldr	r7, [pc, #216]	; (800ae1c <_strtoul_l.constprop.0+0xe0>)
 800ad42:	4686      	mov	lr, r0
 800ad44:	460d      	mov	r5, r1
 800ad46:	4628      	mov	r0, r5
 800ad48:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ad4c:	5de6      	ldrb	r6, [r4, r7]
 800ad4e:	f016 0608 	ands.w	r6, r6, #8
 800ad52:	d1f8      	bne.n	800ad46 <_strtoul_l.constprop.0+0xa>
 800ad54:	2c2d      	cmp	r4, #45	; 0x2d
 800ad56:	d12f      	bne.n	800adb8 <_strtoul_l.constprop.0+0x7c>
 800ad58:	782c      	ldrb	r4, [r5, #0]
 800ad5a:	2601      	movs	r6, #1
 800ad5c:	1c85      	adds	r5, r0, #2
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d057      	beq.n	800ae12 <_strtoul_l.constprop.0+0xd6>
 800ad62:	2b10      	cmp	r3, #16
 800ad64:	d109      	bne.n	800ad7a <_strtoul_l.constprop.0+0x3e>
 800ad66:	2c30      	cmp	r4, #48	; 0x30
 800ad68:	d107      	bne.n	800ad7a <_strtoul_l.constprop.0+0x3e>
 800ad6a:	7828      	ldrb	r0, [r5, #0]
 800ad6c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ad70:	2858      	cmp	r0, #88	; 0x58
 800ad72:	d149      	bne.n	800ae08 <_strtoul_l.constprop.0+0xcc>
 800ad74:	786c      	ldrb	r4, [r5, #1]
 800ad76:	2310      	movs	r3, #16
 800ad78:	3502      	adds	r5, #2
 800ad7a:	f04f 38ff 	mov.w	r8, #4294967295
 800ad7e:	2700      	movs	r7, #0
 800ad80:	fbb8 f8f3 	udiv	r8, r8, r3
 800ad84:	fb03 f908 	mul.w	r9, r3, r8
 800ad88:	ea6f 0909 	mvn.w	r9, r9
 800ad8c:	4638      	mov	r0, r7
 800ad8e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800ad92:	f1bc 0f09 	cmp.w	ip, #9
 800ad96:	d814      	bhi.n	800adc2 <_strtoul_l.constprop.0+0x86>
 800ad98:	4664      	mov	r4, ip
 800ad9a:	42a3      	cmp	r3, r4
 800ad9c:	dd22      	ble.n	800ade4 <_strtoul_l.constprop.0+0xa8>
 800ad9e:	2f00      	cmp	r7, #0
 800ada0:	db1d      	blt.n	800adde <_strtoul_l.constprop.0+0xa2>
 800ada2:	4580      	cmp	r8, r0
 800ada4:	d31b      	bcc.n	800adde <_strtoul_l.constprop.0+0xa2>
 800ada6:	d101      	bne.n	800adac <_strtoul_l.constprop.0+0x70>
 800ada8:	45a1      	cmp	r9, r4
 800adaa:	db18      	blt.n	800adde <_strtoul_l.constprop.0+0xa2>
 800adac:	fb00 4003 	mla	r0, r0, r3, r4
 800adb0:	2701      	movs	r7, #1
 800adb2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800adb6:	e7ea      	b.n	800ad8e <_strtoul_l.constprop.0+0x52>
 800adb8:	2c2b      	cmp	r4, #43	; 0x2b
 800adba:	bf04      	itt	eq
 800adbc:	782c      	ldrbeq	r4, [r5, #0]
 800adbe:	1c85      	addeq	r5, r0, #2
 800adc0:	e7cd      	b.n	800ad5e <_strtoul_l.constprop.0+0x22>
 800adc2:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800adc6:	f1bc 0f19 	cmp.w	ip, #25
 800adca:	d801      	bhi.n	800add0 <_strtoul_l.constprop.0+0x94>
 800adcc:	3c37      	subs	r4, #55	; 0x37
 800adce:	e7e4      	b.n	800ad9a <_strtoul_l.constprop.0+0x5e>
 800add0:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800add4:	f1bc 0f19 	cmp.w	ip, #25
 800add8:	d804      	bhi.n	800ade4 <_strtoul_l.constprop.0+0xa8>
 800adda:	3c57      	subs	r4, #87	; 0x57
 800addc:	e7dd      	b.n	800ad9a <_strtoul_l.constprop.0+0x5e>
 800adde:	f04f 37ff 	mov.w	r7, #4294967295
 800ade2:	e7e6      	b.n	800adb2 <_strtoul_l.constprop.0+0x76>
 800ade4:	2f00      	cmp	r7, #0
 800ade6:	da07      	bge.n	800adf8 <_strtoul_l.constprop.0+0xbc>
 800ade8:	2322      	movs	r3, #34	; 0x22
 800adea:	f8ce 3000 	str.w	r3, [lr]
 800adee:	f04f 30ff 	mov.w	r0, #4294967295
 800adf2:	b932      	cbnz	r2, 800ae02 <_strtoul_l.constprop.0+0xc6>
 800adf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800adf8:	b106      	cbz	r6, 800adfc <_strtoul_l.constprop.0+0xc0>
 800adfa:	4240      	negs	r0, r0
 800adfc:	2a00      	cmp	r2, #0
 800adfe:	d0f9      	beq.n	800adf4 <_strtoul_l.constprop.0+0xb8>
 800ae00:	b107      	cbz	r7, 800ae04 <_strtoul_l.constprop.0+0xc8>
 800ae02:	1e69      	subs	r1, r5, #1
 800ae04:	6011      	str	r1, [r2, #0]
 800ae06:	e7f5      	b.n	800adf4 <_strtoul_l.constprop.0+0xb8>
 800ae08:	2430      	movs	r4, #48	; 0x30
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d1b5      	bne.n	800ad7a <_strtoul_l.constprop.0+0x3e>
 800ae0e:	2308      	movs	r3, #8
 800ae10:	e7b3      	b.n	800ad7a <_strtoul_l.constprop.0+0x3e>
 800ae12:	2c30      	cmp	r4, #48	; 0x30
 800ae14:	d0a9      	beq.n	800ad6a <_strtoul_l.constprop.0+0x2e>
 800ae16:	230a      	movs	r3, #10
 800ae18:	e7af      	b.n	800ad7a <_strtoul_l.constprop.0+0x3e>
 800ae1a:	bf00      	nop
 800ae1c:	0800d770 	.word	0x0800d770

0800ae20 <_strtoul_r>:
 800ae20:	f7ff bf8c 	b.w	800ad3c <_strtoul_l.constprop.0>

0800ae24 <strtoul>:
 800ae24:	4613      	mov	r3, r2
 800ae26:	460a      	mov	r2, r1
 800ae28:	4601      	mov	r1, r0
 800ae2a:	4802      	ldr	r0, [pc, #8]	; (800ae34 <strtoul+0x10>)
 800ae2c:	6800      	ldr	r0, [r0, #0]
 800ae2e:	f7ff bf85 	b.w	800ad3c <_strtoul_l.constprop.0>
 800ae32:	bf00      	nop
 800ae34:	200000c8 	.word	0x200000c8

0800ae38 <__swbuf_r>:
 800ae38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae3a:	460e      	mov	r6, r1
 800ae3c:	4614      	mov	r4, r2
 800ae3e:	4605      	mov	r5, r0
 800ae40:	b118      	cbz	r0, 800ae4a <__swbuf_r+0x12>
 800ae42:	6983      	ldr	r3, [r0, #24]
 800ae44:	b90b      	cbnz	r3, 800ae4a <__swbuf_r+0x12>
 800ae46:	f000 fa07 	bl	800b258 <__sinit>
 800ae4a:	4b21      	ldr	r3, [pc, #132]	; (800aed0 <__swbuf_r+0x98>)
 800ae4c:	429c      	cmp	r4, r3
 800ae4e:	d12b      	bne.n	800aea8 <__swbuf_r+0x70>
 800ae50:	686c      	ldr	r4, [r5, #4]
 800ae52:	69a3      	ldr	r3, [r4, #24]
 800ae54:	60a3      	str	r3, [r4, #8]
 800ae56:	89a3      	ldrh	r3, [r4, #12]
 800ae58:	071a      	lsls	r2, r3, #28
 800ae5a:	d52f      	bpl.n	800aebc <__swbuf_r+0x84>
 800ae5c:	6923      	ldr	r3, [r4, #16]
 800ae5e:	b36b      	cbz	r3, 800aebc <__swbuf_r+0x84>
 800ae60:	6923      	ldr	r3, [r4, #16]
 800ae62:	6820      	ldr	r0, [r4, #0]
 800ae64:	1ac0      	subs	r0, r0, r3
 800ae66:	6963      	ldr	r3, [r4, #20]
 800ae68:	b2f6      	uxtb	r6, r6
 800ae6a:	4283      	cmp	r3, r0
 800ae6c:	4637      	mov	r7, r6
 800ae6e:	dc04      	bgt.n	800ae7a <__swbuf_r+0x42>
 800ae70:	4621      	mov	r1, r4
 800ae72:	4628      	mov	r0, r5
 800ae74:	f000 f95c 	bl	800b130 <_fflush_r>
 800ae78:	bb30      	cbnz	r0, 800aec8 <__swbuf_r+0x90>
 800ae7a:	68a3      	ldr	r3, [r4, #8]
 800ae7c:	3b01      	subs	r3, #1
 800ae7e:	60a3      	str	r3, [r4, #8]
 800ae80:	6823      	ldr	r3, [r4, #0]
 800ae82:	1c5a      	adds	r2, r3, #1
 800ae84:	6022      	str	r2, [r4, #0]
 800ae86:	701e      	strb	r6, [r3, #0]
 800ae88:	6963      	ldr	r3, [r4, #20]
 800ae8a:	3001      	adds	r0, #1
 800ae8c:	4283      	cmp	r3, r0
 800ae8e:	d004      	beq.n	800ae9a <__swbuf_r+0x62>
 800ae90:	89a3      	ldrh	r3, [r4, #12]
 800ae92:	07db      	lsls	r3, r3, #31
 800ae94:	d506      	bpl.n	800aea4 <__swbuf_r+0x6c>
 800ae96:	2e0a      	cmp	r6, #10
 800ae98:	d104      	bne.n	800aea4 <__swbuf_r+0x6c>
 800ae9a:	4621      	mov	r1, r4
 800ae9c:	4628      	mov	r0, r5
 800ae9e:	f000 f947 	bl	800b130 <_fflush_r>
 800aea2:	b988      	cbnz	r0, 800aec8 <__swbuf_r+0x90>
 800aea4:	4638      	mov	r0, r7
 800aea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aea8:	4b0a      	ldr	r3, [pc, #40]	; (800aed4 <__swbuf_r+0x9c>)
 800aeaa:	429c      	cmp	r4, r3
 800aeac:	d101      	bne.n	800aeb2 <__swbuf_r+0x7a>
 800aeae:	68ac      	ldr	r4, [r5, #8]
 800aeb0:	e7cf      	b.n	800ae52 <__swbuf_r+0x1a>
 800aeb2:	4b09      	ldr	r3, [pc, #36]	; (800aed8 <__swbuf_r+0xa0>)
 800aeb4:	429c      	cmp	r4, r3
 800aeb6:	bf08      	it	eq
 800aeb8:	68ec      	ldreq	r4, [r5, #12]
 800aeba:	e7ca      	b.n	800ae52 <__swbuf_r+0x1a>
 800aebc:	4621      	mov	r1, r4
 800aebe:	4628      	mov	r0, r5
 800aec0:	f000 f81e 	bl	800af00 <__swsetup_r>
 800aec4:	2800      	cmp	r0, #0
 800aec6:	d0cb      	beq.n	800ae60 <__swbuf_r+0x28>
 800aec8:	f04f 37ff 	mov.w	r7, #4294967295
 800aecc:	e7ea      	b.n	800aea4 <__swbuf_r+0x6c>
 800aece:	bf00      	nop
 800aed0:	0800d890 	.word	0x0800d890
 800aed4:	0800d8b0 	.word	0x0800d8b0
 800aed8:	0800d870 	.word	0x0800d870

0800aedc <_write_r>:
 800aedc:	b538      	push	{r3, r4, r5, lr}
 800aede:	4d07      	ldr	r5, [pc, #28]	; (800aefc <_write_r+0x20>)
 800aee0:	4604      	mov	r4, r0
 800aee2:	4608      	mov	r0, r1
 800aee4:	4611      	mov	r1, r2
 800aee6:	2200      	movs	r2, #0
 800aee8:	602a      	str	r2, [r5, #0]
 800aeea:	461a      	mov	r2, r3
 800aeec:	f7f8 fef1 	bl	8003cd2 <_write>
 800aef0:	1c43      	adds	r3, r0, #1
 800aef2:	d102      	bne.n	800aefa <_write_r+0x1e>
 800aef4:	682b      	ldr	r3, [r5, #0]
 800aef6:	b103      	cbz	r3, 800aefa <_write_r+0x1e>
 800aef8:	6023      	str	r3, [r4, #0]
 800aefa:	bd38      	pop	{r3, r4, r5, pc}
 800aefc:	20000e68 	.word	0x20000e68

0800af00 <__swsetup_r>:
 800af00:	4b32      	ldr	r3, [pc, #200]	; (800afcc <__swsetup_r+0xcc>)
 800af02:	b570      	push	{r4, r5, r6, lr}
 800af04:	681d      	ldr	r5, [r3, #0]
 800af06:	4606      	mov	r6, r0
 800af08:	460c      	mov	r4, r1
 800af0a:	b125      	cbz	r5, 800af16 <__swsetup_r+0x16>
 800af0c:	69ab      	ldr	r3, [r5, #24]
 800af0e:	b913      	cbnz	r3, 800af16 <__swsetup_r+0x16>
 800af10:	4628      	mov	r0, r5
 800af12:	f000 f9a1 	bl	800b258 <__sinit>
 800af16:	4b2e      	ldr	r3, [pc, #184]	; (800afd0 <__swsetup_r+0xd0>)
 800af18:	429c      	cmp	r4, r3
 800af1a:	d10f      	bne.n	800af3c <__swsetup_r+0x3c>
 800af1c:	686c      	ldr	r4, [r5, #4]
 800af1e:	89a3      	ldrh	r3, [r4, #12]
 800af20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800af24:	0719      	lsls	r1, r3, #28
 800af26:	d42c      	bmi.n	800af82 <__swsetup_r+0x82>
 800af28:	06dd      	lsls	r5, r3, #27
 800af2a:	d411      	bmi.n	800af50 <__swsetup_r+0x50>
 800af2c:	2309      	movs	r3, #9
 800af2e:	6033      	str	r3, [r6, #0]
 800af30:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800af34:	81a3      	strh	r3, [r4, #12]
 800af36:	f04f 30ff 	mov.w	r0, #4294967295
 800af3a:	e03e      	b.n	800afba <__swsetup_r+0xba>
 800af3c:	4b25      	ldr	r3, [pc, #148]	; (800afd4 <__swsetup_r+0xd4>)
 800af3e:	429c      	cmp	r4, r3
 800af40:	d101      	bne.n	800af46 <__swsetup_r+0x46>
 800af42:	68ac      	ldr	r4, [r5, #8]
 800af44:	e7eb      	b.n	800af1e <__swsetup_r+0x1e>
 800af46:	4b24      	ldr	r3, [pc, #144]	; (800afd8 <__swsetup_r+0xd8>)
 800af48:	429c      	cmp	r4, r3
 800af4a:	bf08      	it	eq
 800af4c:	68ec      	ldreq	r4, [r5, #12]
 800af4e:	e7e6      	b.n	800af1e <__swsetup_r+0x1e>
 800af50:	0758      	lsls	r0, r3, #29
 800af52:	d512      	bpl.n	800af7a <__swsetup_r+0x7a>
 800af54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af56:	b141      	cbz	r1, 800af6a <__swsetup_r+0x6a>
 800af58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af5c:	4299      	cmp	r1, r3
 800af5e:	d002      	beq.n	800af66 <__swsetup_r+0x66>
 800af60:	4630      	mov	r0, r6
 800af62:	f7fe fd49 	bl	80099f8 <_free_r>
 800af66:	2300      	movs	r3, #0
 800af68:	6363      	str	r3, [r4, #52]	; 0x34
 800af6a:	89a3      	ldrh	r3, [r4, #12]
 800af6c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800af70:	81a3      	strh	r3, [r4, #12]
 800af72:	2300      	movs	r3, #0
 800af74:	6063      	str	r3, [r4, #4]
 800af76:	6923      	ldr	r3, [r4, #16]
 800af78:	6023      	str	r3, [r4, #0]
 800af7a:	89a3      	ldrh	r3, [r4, #12]
 800af7c:	f043 0308 	orr.w	r3, r3, #8
 800af80:	81a3      	strh	r3, [r4, #12]
 800af82:	6923      	ldr	r3, [r4, #16]
 800af84:	b94b      	cbnz	r3, 800af9a <__swsetup_r+0x9a>
 800af86:	89a3      	ldrh	r3, [r4, #12]
 800af88:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800af8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af90:	d003      	beq.n	800af9a <__swsetup_r+0x9a>
 800af92:	4621      	mov	r1, r4
 800af94:	4630      	mov	r0, r6
 800af96:	f000 fa35 	bl	800b404 <__smakebuf_r>
 800af9a:	89a0      	ldrh	r0, [r4, #12]
 800af9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800afa0:	f010 0301 	ands.w	r3, r0, #1
 800afa4:	d00a      	beq.n	800afbc <__swsetup_r+0xbc>
 800afa6:	2300      	movs	r3, #0
 800afa8:	60a3      	str	r3, [r4, #8]
 800afaa:	6963      	ldr	r3, [r4, #20]
 800afac:	425b      	negs	r3, r3
 800afae:	61a3      	str	r3, [r4, #24]
 800afb0:	6923      	ldr	r3, [r4, #16]
 800afb2:	b943      	cbnz	r3, 800afc6 <__swsetup_r+0xc6>
 800afb4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800afb8:	d1ba      	bne.n	800af30 <__swsetup_r+0x30>
 800afba:	bd70      	pop	{r4, r5, r6, pc}
 800afbc:	0781      	lsls	r1, r0, #30
 800afbe:	bf58      	it	pl
 800afc0:	6963      	ldrpl	r3, [r4, #20]
 800afc2:	60a3      	str	r3, [r4, #8]
 800afc4:	e7f4      	b.n	800afb0 <__swsetup_r+0xb0>
 800afc6:	2000      	movs	r0, #0
 800afc8:	e7f7      	b.n	800afba <__swsetup_r+0xba>
 800afca:	bf00      	nop
 800afcc:	200000c8 	.word	0x200000c8
 800afd0:	0800d890 	.word	0x0800d890
 800afd4:	0800d8b0 	.word	0x0800d8b0
 800afd8:	0800d870 	.word	0x0800d870

0800afdc <abort>:
 800afdc:	b508      	push	{r3, lr}
 800afde:	2006      	movs	r0, #6
 800afe0:	f000 fe3e 	bl	800bc60 <raise>
 800afe4:	2001      	movs	r0, #1
 800afe6:	f7f8 fe4d 	bl	8003c84 <_exit>
	...

0800afec <_close_r>:
 800afec:	b538      	push	{r3, r4, r5, lr}
 800afee:	4d06      	ldr	r5, [pc, #24]	; (800b008 <_close_r+0x1c>)
 800aff0:	2300      	movs	r3, #0
 800aff2:	4604      	mov	r4, r0
 800aff4:	4608      	mov	r0, r1
 800aff6:	602b      	str	r3, [r5, #0]
 800aff8:	f7f8 fe87 	bl	8003d0a <_close>
 800affc:	1c43      	adds	r3, r0, #1
 800affe:	d102      	bne.n	800b006 <_close_r+0x1a>
 800b000:	682b      	ldr	r3, [r5, #0]
 800b002:	b103      	cbz	r3, 800b006 <_close_r+0x1a>
 800b004:	6023      	str	r3, [r4, #0]
 800b006:	bd38      	pop	{r3, r4, r5, pc}
 800b008:	20000e68 	.word	0x20000e68

0800b00c <__env_lock>:
 800b00c:	4801      	ldr	r0, [pc, #4]	; (800b014 <__env_lock+0x8>)
 800b00e:	f7ff b9ad 	b.w	800a36c <__retarget_lock_acquire_recursive>
 800b012:	bf00      	nop
 800b014:	20000e60 	.word	0x20000e60

0800b018 <__env_unlock>:
 800b018:	4801      	ldr	r0, [pc, #4]	; (800b020 <__env_unlock+0x8>)
 800b01a:	f7ff b9a9 	b.w	800a370 <__retarget_lock_release_recursive>
 800b01e:	bf00      	nop
 800b020:	20000e60 	.word	0x20000e60

0800b024 <__sflush_r>:
 800b024:	898a      	ldrh	r2, [r1, #12]
 800b026:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b02a:	4605      	mov	r5, r0
 800b02c:	0710      	lsls	r0, r2, #28
 800b02e:	460c      	mov	r4, r1
 800b030:	d458      	bmi.n	800b0e4 <__sflush_r+0xc0>
 800b032:	684b      	ldr	r3, [r1, #4]
 800b034:	2b00      	cmp	r3, #0
 800b036:	dc05      	bgt.n	800b044 <__sflush_r+0x20>
 800b038:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	dc02      	bgt.n	800b044 <__sflush_r+0x20>
 800b03e:	2000      	movs	r0, #0
 800b040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b044:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b046:	2e00      	cmp	r6, #0
 800b048:	d0f9      	beq.n	800b03e <__sflush_r+0x1a>
 800b04a:	2300      	movs	r3, #0
 800b04c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b050:	682f      	ldr	r7, [r5, #0]
 800b052:	602b      	str	r3, [r5, #0]
 800b054:	d032      	beq.n	800b0bc <__sflush_r+0x98>
 800b056:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b058:	89a3      	ldrh	r3, [r4, #12]
 800b05a:	075a      	lsls	r2, r3, #29
 800b05c:	d505      	bpl.n	800b06a <__sflush_r+0x46>
 800b05e:	6863      	ldr	r3, [r4, #4]
 800b060:	1ac0      	subs	r0, r0, r3
 800b062:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b064:	b10b      	cbz	r3, 800b06a <__sflush_r+0x46>
 800b066:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b068:	1ac0      	subs	r0, r0, r3
 800b06a:	2300      	movs	r3, #0
 800b06c:	4602      	mov	r2, r0
 800b06e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b070:	6a21      	ldr	r1, [r4, #32]
 800b072:	4628      	mov	r0, r5
 800b074:	47b0      	blx	r6
 800b076:	1c43      	adds	r3, r0, #1
 800b078:	89a3      	ldrh	r3, [r4, #12]
 800b07a:	d106      	bne.n	800b08a <__sflush_r+0x66>
 800b07c:	6829      	ldr	r1, [r5, #0]
 800b07e:	291d      	cmp	r1, #29
 800b080:	d82c      	bhi.n	800b0dc <__sflush_r+0xb8>
 800b082:	4a2a      	ldr	r2, [pc, #168]	; (800b12c <__sflush_r+0x108>)
 800b084:	40ca      	lsrs	r2, r1
 800b086:	07d6      	lsls	r6, r2, #31
 800b088:	d528      	bpl.n	800b0dc <__sflush_r+0xb8>
 800b08a:	2200      	movs	r2, #0
 800b08c:	6062      	str	r2, [r4, #4]
 800b08e:	04d9      	lsls	r1, r3, #19
 800b090:	6922      	ldr	r2, [r4, #16]
 800b092:	6022      	str	r2, [r4, #0]
 800b094:	d504      	bpl.n	800b0a0 <__sflush_r+0x7c>
 800b096:	1c42      	adds	r2, r0, #1
 800b098:	d101      	bne.n	800b09e <__sflush_r+0x7a>
 800b09a:	682b      	ldr	r3, [r5, #0]
 800b09c:	b903      	cbnz	r3, 800b0a0 <__sflush_r+0x7c>
 800b09e:	6560      	str	r0, [r4, #84]	; 0x54
 800b0a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b0a2:	602f      	str	r7, [r5, #0]
 800b0a4:	2900      	cmp	r1, #0
 800b0a6:	d0ca      	beq.n	800b03e <__sflush_r+0x1a>
 800b0a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b0ac:	4299      	cmp	r1, r3
 800b0ae:	d002      	beq.n	800b0b6 <__sflush_r+0x92>
 800b0b0:	4628      	mov	r0, r5
 800b0b2:	f7fe fca1 	bl	80099f8 <_free_r>
 800b0b6:	2000      	movs	r0, #0
 800b0b8:	6360      	str	r0, [r4, #52]	; 0x34
 800b0ba:	e7c1      	b.n	800b040 <__sflush_r+0x1c>
 800b0bc:	6a21      	ldr	r1, [r4, #32]
 800b0be:	2301      	movs	r3, #1
 800b0c0:	4628      	mov	r0, r5
 800b0c2:	47b0      	blx	r6
 800b0c4:	1c41      	adds	r1, r0, #1
 800b0c6:	d1c7      	bne.n	800b058 <__sflush_r+0x34>
 800b0c8:	682b      	ldr	r3, [r5, #0]
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d0c4      	beq.n	800b058 <__sflush_r+0x34>
 800b0ce:	2b1d      	cmp	r3, #29
 800b0d0:	d001      	beq.n	800b0d6 <__sflush_r+0xb2>
 800b0d2:	2b16      	cmp	r3, #22
 800b0d4:	d101      	bne.n	800b0da <__sflush_r+0xb6>
 800b0d6:	602f      	str	r7, [r5, #0]
 800b0d8:	e7b1      	b.n	800b03e <__sflush_r+0x1a>
 800b0da:	89a3      	ldrh	r3, [r4, #12]
 800b0dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0e0:	81a3      	strh	r3, [r4, #12]
 800b0e2:	e7ad      	b.n	800b040 <__sflush_r+0x1c>
 800b0e4:	690f      	ldr	r7, [r1, #16]
 800b0e6:	2f00      	cmp	r7, #0
 800b0e8:	d0a9      	beq.n	800b03e <__sflush_r+0x1a>
 800b0ea:	0793      	lsls	r3, r2, #30
 800b0ec:	680e      	ldr	r6, [r1, #0]
 800b0ee:	bf08      	it	eq
 800b0f0:	694b      	ldreq	r3, [r1, #20]
 800b0f2:	600f      	str	r7, [r1, #0]
 800b0f4:	bf18      	it	ne
 800b0f6:	2300      	movne	r3, #0
 800b0f8:	eba6 0807 	sub.w	r8, r6, r7
 800b0fc:	608b      	str	r3, [r1, #8]
 800b0fe:	f1b8 0f00 	cmp.w	r8, #0
 800b102:	dd9c      	ble.n	800b03e <__sflush_r+0x1a>
 800b104:	6a21      	ldr	r1, [r4, #32]
 800b106:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b108:	4643      	mov	r3, r8
 800b10a:	463a      	mov	r2, r7
 800b10c:	4628      	mov	r0, r5
 800b10e:	47b0      	blx	r6
 800b110:	2800      	cmp	r0, #0
 800b112:	dc06      	bgt.n	800b122 <__sflush_r+0xfe>
 800b114:	89a3      	ldrh	r3, [r4, #12]
 800b116:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b11a:	81a3      	strh	r3, [r4, #12]
 800b11c:	f04f 30ff 	mov.w	r0, #4294967295
 800b120:	e78e      	b.n	800b040 <__sflush_r+0x1c>
 800b122:	4407      	add	r7, r0
 800b124:	eba8 0800 	sub.w	r8, r8, r0
 800b128:	e7e9      	b.n	800b0fe <__sflush_r+0xda>
 800b12a:	bf00      	nop
 800b12c:	20400001 	.word	0x20400001

0800b130 <_fflush_r>:
 800b130:	b538      	push	{r3, r4, r5, lr}
 800b132:	690b      	ldr	r3, [r1, #16]
 800b134:	4605      	mov	r5, r0
 800b136:	460c      	mov	r4, r1
 800b138:	b913      	cbnz	r3, 800b140 <_fflush_r+0x10>
 800b13a:	2500      	movs	r5, #0
 800b13c:	4628      	mov	r0, r5
 800b13e:	bd38      	pop	{r3, r4, r5, pc}
 800b140:	b118      	cbz	r0, 800b14a <_fflush_r+0x1a>
 800b142:	6983      	ldr	r3, [r0, #24]
 800b144:	b90b      	cbnz	r3, 800b14a <_fflush_r+0x1a>
 800b146:	f000 f887 	bl	800b258 <__sinit>
 800b14a:	4b14      	ldr	r3, [pc, #80]	; (800b19c <_fflush_r+0x6c>)
 800b14c:	429c      	cmp	r4, r3
 800b14e:	d11b      	bne.n	800b188 <_fflush_r+0x58>
 800b150:	686c      	ldr	r4, [r5, #4]
 800b152:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d0ef      	beq.n	800b13a <_fflush_r+0xa>
 800b15a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b15c:	07d0      	lsls	r0, r2, #31
 800b15e:	d404      	bmi.n	800b16a <_fflush_r+0x3a>
 800b160:	0599      	lsls	r1, r3, #22
 800b162:	d402      	bmi.n	800b16a <_fflush_r+0x3a>
 800b164:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b166:	f7ff f901 	bl	800a36c <__retarget_lock_acquire_recursive>
 800b16a:	4628      	mov	r0, r5
 800b16c:	4621      	mov	r1, r4
 800b16e:	f7ff ff59 	bl	800b024 <__sflush_r>
 800b172:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b174:	07da      	lsls	r2, r3, #31
 800b176:	4605      	mov	r5, r0
 800b178:	d4e0      	bmi.n	800b13c <_fflush_r+0xc>
 800b17a:	89a3      	ldrh	r3, [r4, #12]
 800b17c:	059b      	lsls	r3, r3, #22
 800b17e:	d4dd      	bmi.n	800b13c <_fflush_r+0xc>
 800b180:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b182:	f7ff f8f5 	bl	800a370 <__retarget_lock_release_recursive>
 800b186:	e7d9      	b.n	800b13c <_fflush_r+0xc>
 800b188:	4b05      	ldr	r3, [pc, #20]	; (800b1a0 <_fflush_r+0x70>)
 800b18a:	429c      	cmp	r4, r3
 800b18c:	d101      	bne.n	800b192 <_fflush_r+0x62>
 800b18e:	68ac      	ldr	r4, [r5, #8]
 800b190:	e7df      	b.n	800b152 <_fflush_r+0x22>
 800b192:	4b04      	ldr	r3, [pc, #16]	; (800b1a4 <_fflush_r+0x74>)
 800b194:	429c      	cmp	r4, r3
 800b196:	bf08      	it	eq
 800b198:	68ec      	ldreq	r4, [r5, #12]
 800b19a:	e7da      	b.n	800b152 <_fflush_r+0x22>
 800b19c:	0800d890 	.word	0x0800d890
 800b1a0:	0800d8b0 	.word	0x0800d8b0
 800b1a4:	0800d870 	.word	0x0800d870

0800b1a8 <std>:
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	b510      	push	{r4, lr}
 800b1ac:	4604      	mov	r4, r0
 800b1ae:	e9c0 3300 	strd	r3, r3, [r0]
 800b1b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b1b6:	6083      	str	r3, [r0, #8]
 800b1b8:	8181      	strh	r1, [r0, #12]
 800b1ba:	6643      	str	r3, [r0, #100]	; 0x64
 800b1bc:	81c2      	strh	r2, [r0, #14]
 800b1be:	6183      	str	r3, [r0, #24]
 800b1c0:	4619      	mov	r1, r3
 800b1c2:	2208      	movs	r2, #8
 800b1c4:	305c      	adds	r0, #92	; 0x5c
 800b1c6:	f7fe f99d 	bl	8009504 <memset>
 800b1ca:	4b05      	ldr	r3, [pc, #20]	; (800b1e0 <std+0x38>)
 800b1cc:	6263      	str	r3, [r4, #36]	; 0x24
 800b1ce:	4b05      	ldr	r3, [pc, #20]	; (800b1e4 <std+0x3c>)
 800b1d0:	62a3      	str	r3, [r4, #40]	; 0x28
 800b1d2:	4b05      	ldr	r3, [pc, #20]	; (800b1e8 <std+0x40>)
 800b1d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b1d6:	4b05      	ldr	r3, [pc, #20]	; (800b1ec <std+0x44>)
 800b1d8:	6224      	str	r4, [r4, #32]
 800b1da:	6323      	str	r3, [r4, #48]	; 0x30
 800b1dc:	bd10      	pop	{r4, pc}
 800b1de:	bf00      	nop
 800b1e0:	0800ac79 	.word	0x0800ac79
 800b1e4:	0800ac9f 	.word	0x0800ac9f
 800b1e8:	0800acd7 	.word	0x0800acd7
 800b1ec:	0800acfb 	.word	0x0800acfb

0800b1f0 <_cleanup_r>:
 800b1f0:	4901      	ldr	r1, [pc, #4]	; (800b1f8 <_cleanup_r+0x8>)
 800b1f2:	f000 b8af 	b.w	800b354 <_fwalk_reent>
 800b1f6:	bf00      	nop
 800b1f8:	0800b131 	.word	0x0800b131

0800b1fc <__sfmoreglue>:
 800b1fc:	b570      	push	{r4, r5, r6, lr}
 800b1fe:	2268      	movs	r2, #104	; 0x68
 800b200:	1e4d      	subs	r5, r1, #1
 800b202:	4355      	muls	r5, r2
 800b204:	460e      	mov	r6, r1
 800b206:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b20a:	f7fe fc61 	bl	8009ad0 <_malloc_r>
 800b20e:	4604      	mov	r4, r0
 800b210:	b140      	cbz	r0, 800b224 <__sfmoreglue+0x28>
 800b212:	2100      	movs	r1, #0
 800b214:	e9c0 1600 	strd	r1, r6, [r0]
 800b218:	300c      	adds	r0, #12
 800b21a:	60a0      	str	r0, [r4, #8]
 800b21c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b220:	f7fe f970 	bl	8009504 <memset>
 800b224:	4620      	mov	r0, r4
 800b226:	bd70      	pop	{r4, r5, r6, pc}

0800b228 <__sfp_lock_acquire>:
 800b228:	4801      	ldr	r0, [pc, #4]	; (800b230 <__sfp_lock_acquire+0x8>)
 800b22a:	f7ff b89f 	b.w	800a36c <__retarget_lock_acquire_recursive>
 800b22e:	bf00      	nop
 800b230:	20000e62 	.word	0x20000e62

0800b234 <__sfp_lock_release>:
 800b234:	4801      	ldr	r0, [pc, #4]	; (800b23c <__sfp_lock_release+0x8>)
 800b236:	f7ff b89b 	b.w	800a370 <__retarget_lock_release_recursive>
 800b23a:	bf00      	nop
 800b23c:	20000e62 	.word	0x20000e62

0800b240 <__sinit_lock_acquire>:
 800b240:	4801      	ldr	r0, [pc, #4]	; (800b248 <__sinit_lock_acquire+0x8>)
 800b242:	f7ff b893 	b.w	800a36c <__retarget_lock_acquire_recursive>
 800b246:	bf00      	nop
 800b248:	20000e63 	.word	0x20000e63

0800b24c <__sinit_lock_release>:
 800b24c:	4801      	ldr	r0, [pc, #4]	; (800b254 <__sinit_lock_release+0x8>)
 800b24e:	f7ff b88f 	b.w	800a370 <__retarget_lock_release_recursive>
 800b252:	bf00      	nop
 800b254:	20000e63 	.word	0x20000e63

0800b258 <__sinit>:
 800b258:	b510      	push	{r4, lr}
 800b25a:	4604      	mov	r4, r0
 800b25c:	f7ff fff0 	bl	800b240 <__sinit_lock_acquire>
 800b260:	69a3      	ldr	r3, [r4, #24]
 800b262:	b11b      	cbz	r3, 800b26c <__sinit+0x14>
 800b264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b268:	f7ff bff0 	b.w	800b24c <__sinit_lock_release>
 800b26c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b270:	6523      	str	r3, [r4, #80]	; 0x50
 800b272:	4b13      	ldr	r3, [pc, #76]	; (800b2c0 <__sinit+0x68>)
 800b274:	4a13      	ldr	r2, [pc, #76]	; (800b2c4 <__sinit+0x6c>)
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	62a2      	str	r2, [r4, #40]	; 0x28
 800b27a:	42a3      	cmp	r3, r4
 800b27c:	bf04      	itt	eq
 800b27e:	2301      	moveq	r3, #1
 800b280:	61a3      	streq	r3, [r4, #24]
 800b282:	4620      	mov	r0, r4
 800b284:	f000 f820 	bl	800b2c8 <__sfp>
 800b288:	6060      	str	r0, [r4, #4]
 800b28a:	4620      	mov	r0, r4
 800b28c:	f000 f81c 	bl	800b2c8 <__sfp>
 800b290:	60a0      	str	r0, [r4, #8]
 800b292:	4620      	mov	r0, r4
 800b294:	f000 f818 	bl	800b2c8 <__sfp>
 800b298:	2200      	movs	r2, #0
 800b29a:	60e0      	str	r0, [r4, #12]
 800b29c:	2104      	movs	r1, #4
 800b29e:	6860      	ldr	r0, [r4, #4]
 800b2a0:	f7ff ff82 	bl	800b1a8 <std>
 800b2a4:	68a0      	ldr	r0, [r4, #8]
 800b2a6:	2201      	movs	r2, #1
 800b2a8:	2109      	movs	r1, #9
 800b2aa:	f7ff ff7d 	bl	800b1a8 <std>
 800b2ae:	68e0      	ldr	r0, [r4, #12]
 800b2b0:	2202      	movs	r2, #2
 800b2b2:	2112      	movs	r1, #18
 800b2b4:	f7ff ff78 	bl	800b1a8 <std>
 800b2b8:	2301      	movs	r3, #1
 800b2ba:	61a3      	str	r3, [r4, #24]
 800b2bc:	e7d2      	b.n	800b264 <__sinit+0xc>
 800b2be:	bf00      	nop
 800b2c0:	0800d58c 	.word	0x0800d58c
 800b2c4:	0800b1f1 	.word	0x0800b1f1

0800b2c8 <__sfp>:
 800b2c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2ca:	4607      	mov	r7, r0
 800b2cc:	f7ff ffac 	bl	800b228 <__sfp_lock_acquire>
 800b2d0:	4b1e      	ldr	r3, [pc, #120]	; (800b34c <__sfp+0x84>)
 800b2d2:	681e      	ldr	r6, [r3, #0]
 800b2d4:	69b3      	ldr	r3, [r6, #24]
 800b2d6:	b913      	cbnz	r3, 800b2de <__sfp+0x16>
 800b2d8:	4630      	mov	r0, r6
 800b2da:	f7ff ffbd 	bl	800b258 <__sinit>
 800b2de:	3648      	adds	r6, #72	; 0x48
 800b2e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b2e4:	3b01      	subs	r3, #1
 800b2e6:	d503      	bpl.n	800b2f0 <__sfp+0x28>
 800b2e8:	6833      	ldr	r3, [r6, #0]
 800b2ea:	b30b      	cbz	r3, 800b330 <__sfp+0x68>
 800b2ec:	6836      	ldr	r6, [r6, #0]
 800b2ee:	e7f7      	b.n	800b2e0 <__sfp+0x18>
 800b2f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b2f4:	b9d5      	cbnz	r5, 800b32c <__sfp+0x64>
 800b2f6:	4b16      	ldr	r3, [pc, #88]	; (800b350 <__sfp+0x88>)
 800b2f8:	60e3      	str	r3, [r4, #12]
 800b2fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b2fe:	6665      	str	r5, [r4, #100]	; 0x64
 800b300:	f7ff f832 	bl	800a368 <__retarget_lock_init_recursive>
 800b304:	f7ff ff96 	bl	800b234 <__sfp_lock_release>
 800b308:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b30c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b310:	6025      	str	r5, [r4, #0]
 800b312:	61a5      	str	r5, [r4, #24]
 800b314:	2208      	movs	r2, #8
 800b316:	4629      	mov	r1, r5
 800b318:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b31c:	f7fe f8f2 	bl	8009504 <memset>
 800b320:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b324:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b328:	4620      	mov	r0, r4
 800b32a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b32c:	3468      	adds	r4, #104	; 0x68
 800b32e:	e7d9      	b.n	800b2e4 <__sfp+0x1c>
 800b330:	2104      	movs	r1, #4
 800b332:	4638      	mov	r0, r7
 800b334:	f7ff ff62 	bl	800b1fc <__sfmoreglue>
 800b338:	4604      	mov	r4, r0
 800b33a:	6030      	str	r0, [r6, #0]
 800b33c:	2800      	cmp	r0, #0
 800b33e:	d1d5      	bne.n	800b2ec <__sfp+0x24>
 800b340:	f7ff ff78 	bl	800b234 <__sfp_lock_release>
 800b344:	230c      	movs	r3, #12
 800b346:	603b      	str	r3, [r7, #0]
 800b348:	e7ee      	b.n	800b328 <__sfp+0x60>
 800b34a:	bf00      	nop
 800b34c:	0800d58c 	.word	0x0800d58c
 800b350:	ffff0001 	.word	0xffff0001

0800b354 <_fwalk_reent>:
 800b354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b358:	4606      	mov	r6, r0
 800b35a:	4688      	mov	r8, r1
 800b35c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b360:	2700      	movs	r7, #0
 800b362:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b366:	f1b9 0901 	subs.w	r9, r9, #1
 800b36a:	d505      	bpl.n	800b378 <_fwalk_reent+0x24>
 800b36c:	6824      	ldr	r4, [r4, #0]
 800b36e:	2c00      	cmp	r4, #0
 800b370:	d1f7      	bne.n	800b362 <_fwalk_reent+0xe>
 800b372:	4638      	mov	r0, r7
 800b374:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b378:	89ab      	ldrh	r3, [r5, #12]
 800b37a:	2b01      	cmp	r3, #1
 800b37c:	d907      	bls.n	800b38e <_fwalk_reent+0x3a>
 800b37e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b382:	3301      	adds	r3, #1
 800b384:	d003      	beq.n	800b38e <_fwalk_reent+0x3a>
 800b386:	4629      	mov	r1, r5
 800b388:	4630      	mov	r0, r6
 800b38a:	47c0      	blx	r8
 800b38c:	4307      	orrs	r7, r0
 800b38e:	3568      	adds	r5, #104	; 0x68
 800b390:	e7e9      	b.n	800b366 <_fwalk_reent+0x12>
	...

0800b394 <_lseek_r>:
 800b394:	b538      	push	{r3, r4, r5, lr}
 800b396:	4d07      	ldr	r5, [pc, #28]	; (800b3b4 <_lseek_r+0x20>)
 800b398:	4604      	mov	r4, r0
 800b39a:	4608      	mov	r0, r1
 800b39c:	4611      	mov	r1, r2
 800b39e:	2200      	movs	r2, #0
 800b3a0:	602a      	str	r2, [r5, #0]
 800b3a2:	461a      	mov	r2, r3
 800b3a4:	f7f8 fcd8 	bl	8003d58 <_lseek>
 800b3a8:	1c43      	adds	r3, r0, #1
 800b3aa:	d102      	bne.n	800b3b2 <_lseek_r+0x1e>
 800b3ac:	682b      	ldr	r3, [r5, #0]
 800b3ae:	b103      	cbz	r3, 800b3b2 <_lseek_r+0x1e>
 800b3b0:	6023      	str	r3, [r4, #0]
 800b3b2:	bd38      	pop	{r3, r4, r5, pc}
 800b3b4:	20000e68 	.word	0x20000e68

0800b3b8 <__swhatbuf_r>:
 800b3b8:	b570      	push	{r4, r5, r6, lr}
 800b3ba:	460e      	mov	r6, r1
 800b3bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3c0:	2900      	cmp	r1, #0
 800b3c2:	b096      	sub	sp, #88	; 0x58
 800b3c4:	4614      	mov	r4, r2
 800b3c6:	461d      	mov	r5, r3
 800b3c8:	da08      	bge.n	800b3dc <__swhatbuf_r+0x24>
 800b3ca:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	602a      	str	r2, [r5, #0]
 800b3d2:	061a      	lsls	r2, r3, #24
 800b3d4:	d410      	bmi.n	800b3f8 <__swhatbuf_r+0x40>
 800b3d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3da:	e00e      	b.n	800b3fa <__swhatbuf_r+0x42>
 800b3dc:	466a      	mov	r2, sp
 800b3de:	f000 fd19 	bl	800be14 <_fstat_r>
 800b3e2:	2800      	cmp	r0, #0
 800b3e4:	dbf1      	blt.n	800b3ca <__swhatbuf_r+0x12>
 800b3e6:	9a01      	ldr	r2, [sp, #4]
 800b3e8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b3ec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b3f0:	425a      	negs	r2, r3
 800b3f2:	415a      	adcs	r2, r3
 800b3f4:	602a      	str	r2, [r5, #0]
 800b3f6:	e7ee      	b.n	800b3d6 <__swhatbuf_r+0x1e>
 800b3f8:	2340      	movs	r3, #64	; 0x40
 800b3fa:	2000      	movs	r0, #0
 800b3fc:	6023      	str	r3, [r4, #0]
 800b3fe:	b016      	add	sp, #88	; 0x58
 800b400:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b404 <__smakebuf_r>:
 800b404:	898b      	ldrh	r3, [r1, #12]
 800b406:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b408:	079d      	lsls	r5, r3, #30
 800b40a:	4606      	mov	r6, r0
 800b40c:	460c      	mov	r4, r1
 800b40e:	d507      	bpl.n	800b420 <__smakebuf_r+0x1c>
 800b410:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b414:	6023      	str	r3, [r4, #0]
 800b416:	6123      	str	r3, [r4, #16]
 800b418:	2301      	movs	r3, #1
 800b41a:	6163      	str	r3, [r4, #20]
 800b41c:	b002      	add	sp, #8
 800b41e:	bd70      	pop	{r4, r5, r6, pc}
 800b420:	ab01      	add	r3, sp, #4
 800b422:	466a      	mov	r2, sp
 800b424:	f7ff ffc8 	bl	800b3b8 <__swhatbuf_r>
 800b428:	9900      	ldr	r1, [sp, #0]
 800b42a:	4605      	mov	r5, r0
 800b42c:	4630      	mov	r0, r6
 800b42e:	f7fe fb4f 	bl	8009ad0 <_malloc_r>
 800b432:	b948      	cbnz	r0, 800b448 <__smakebuf_r+0x44>
 800b434:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b438:	059a      	lsls	r2, r3, #22
 800b43a:	d4ef      	bmi.n	800b41c <__smakebuf_r+0x18>
 800b43c:	f023 0303 	bic.w	r3, r3, #3
 800b440:	f043 0302 	orr.w	r3, r3, #2
 800b444:	81a3      	strh	r3, [r4, #12]
 800b446:	e7e3      	b.n	800b410 <__smakebuf_r+0xc>
 800b448:	4b0d      	ldr	r3, [pc, #52]	; (800b480 <__smakebuf_r+0x7c>)
 800b44a:	62b3      	str	r3, [r6, #40]	; 0x28
 800b44c:	89a3      	ldrh	r3, [r4, #12]
 800b44e:	6020      	str	r0, [r4, #0]
 800b450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b454:	81a3      	strh	r3, [r4, #12]
 800b456:	9b00      	ldr	r3, [sp, #0]
 800b458:	6163      	str	r3, [r4, #20]
 800b45a:	9b01      	ldr	r3, [sp, #4]
 800b45c:	6120      	str	r0, [r4, #16]
 800b45e:	b15b      	cbz	r3, 800b478 <__smakebuf_r+0x74>
 800b460:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b464:	4630      	mov	r0, r6
 800b466:	f000 fce7 	bl	800be38 <_isatty_r>
 800b46a:	b128      	cbz	r0, 800b478 <__smakebuf_r+0x74>
 800b46c:	89a3      	ldrh	r3, [r4, #12]
 800b46e:	f023 0303 	bic.w	r3, r3, #3
 800b472:	f043 0301 	orr.w	r3, r3, #1
 800b476:	81a3      	strh	r3, [r4, #12]
 800b478:	89a0      	ldrh	r0, [r4, #12]
 800b47a:	4305      	orrs	r5, r0
 800b47c:	81a5      	strh	r5, [r4, #12]
 800b47e:	e7cd      	b.n	800b41c <__smakebuf_r+0x18>
 800b480:	0800b1f1 	.word	0x0800b1f1

0800b484 <memcpy>:
 800b484:	440a      	add	r2, r1
 800b486:	4291      	cmp	r1, r2
 800b488:	f100 33ff 	add.w	r3, r0, #4294967295
 800b48c:	d100      	bne.n	800b490 <memcpy+0xc>
 800b48e:	4770      	bx	lr
 800b490:	b510      	push	{r4, lr}
 800b492:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b496:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b49a:	4291      	cmp	r1, r2
 800b49c:	d1f9      	bne.n	800b492 <memcpy+0xe>
 800b49e:	bd10      	pop	{r4, pc}

0800b4a0 <memmove>:
 800b4a0:	4288      	cmp	r0, r1
 800b4a2:	b510      	push	{r4, lr}
 800b4a4:	eb01 0402 	add.w	r4, r1, r2
 800b4a8:	d902      	bls.n	800b4b0 <memmove+0x10>
 800b4aa:	4284      	cmp	r4, r0
 800b4ac:	4623      	mov	r3, r4
 800b4ae:	d807      	bhi.n	800b4c0 <memmove+0x20>
 800b4b0:	1e43      	subs	r3, r0, #1
 800b4b2:	42a1      	cmp	r1, r4
 800b4b4:	d008      	beq.n	800b4c8 <memmove+0x28>
 800b4b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b4ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b4be:	e7f8      	b.n	800b4b2 <memmove+0x12>
 800b4c0:	4402      	add	r2, r0
 800b4c2:	4601      	mov	r1, r0
 800b4c4:	428a      	cmp	r2, r1
 800b4c6:	d100      	bne.n	800b4ca <memmove+0x2a>
 800b4c8:	bd10      	pop	{r4, pc}
 800b4ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b4ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b4d2:	e7f7      	b.n	800b4c4 <memmove+0x24>

0800b4d4 <_realloc_r>:
 800b4d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4d8:	4680      	mov	r8, r0
 800b4da:	4614      	mov	r4, r2
 800b4dc:	460e      	mov	r6, r1
 800b4de:	b921      	cbnz	r1, 800b4ea <_realloc_r+0x16>
 800b4e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b4e4:	4611      	mov	r1, r2
 800b4e6:	f7fe baf3 	b.w	8009ad0 <_malloc_r>
 800b4ea:	b92a      	cbnz	r2, 800b4f8 <_realloc_r+0x24>
 800b4ec:	f7fe fa84 	bl	80099f8 <_free_r>
 800b4f0:	4625      	mov	r5, r4
 800b4f2:	4628      	mov	r0, r5
 800b4f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4f8:	f000 fcae 	bl	800be58 <_malloc_usable_size_r>
 800b4fc:	4284      	cmp	r4, r0
 800b4fe:	4607      	mov	r7, r0
 800b500:	d802      	bhi.n	800b508 <_realloc_r+0x34>
 800b502:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b506:	d812      	bhi.n	800b52e <_realloc_r+0x5a>
 800b508:	4621      	mov	r1, r4
 800b50a:	4640      	mov	r0, r8
 800b50c:	f7fe fae0 	bl	8009ad0 <_malloc_r>
 800b510:	4605      	mov	r5, r0
 800b512:	2800      	cmp	r0, #0
 800b514:	d0ed      	beq.n	800b4f2 <_realloc_r+0x1e>
 800b516:	42bc      	cmp	r4, r7
 800b518:	4622      	mov	r2, r4
 800b51a:	4631      	mov	r1, r6
 800b51c:	bf28      	it	cs
 800b51e:	463a      	movcs	r2, r7
 800b520:	f7ff ffb0 	bl	800b484 <memcpy>
 800b524:	4631      	mov	r1, r6
 800b526:	4640      	mov	r0, r8
 800b528:	f7fe fa66 	bl	80099f8 <_free_r>
 800b52c:	e7e1      	b.n	800b4f2 <_realloc_r+0x1e>
 800b52e:	4635      	mov	r5, r6
 800b530:	e7df      	b.n	800b4f2 <_realloc_r+0x1e>

0800b532 <_sungetc_r>:
 800b532:	b538      	push	{r3, r4, r5, lr}
 800b534:	1c4b      	adds	r3, r1, #1
 800b536:	4614      	mov	r4, r2
 800b538:	d103      	bne.n	800b542 <_sungetc_r+0x10>
 800b53a:	f04f 35ff 	mov.w	r5, #4294967295
 800b53e:	4628      	mov	r0, r5
 800b540:	bd38      	pop	{r3, r4, r5, pc}
 800b542:	8993      	ldrh	r3, [r2, #12]
 800b544:	f023 0320 	bic.w	r3, r3, #32
 800b548:	8193      	strh	r3, [r2, #12]
 800b54a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b54c:	6852      	ldr	r2, [r2, #4]
 800b54e:	b2cd      	uxtb	r5, r1
 800b550:	b18b      	cbz	r3, 800b576 <_sungetc_r+0x44>
 800b552:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b554:	4293      	cmp	r3, r2
 800b556:	dd08      	ble.n	800b56a <_sungetc_r+0x38>
 800b558:	6823      	ldr	r3, [r4, #0]
 800b55a:	1e5a      	subs	r2, r3, #1
 800b55c:	6022      	str	r2, [r4, #0]
 800b55e:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b562:	6863      	ldr	r3, [r4, #4]
 800b564:	3301      	adds	r3, #1
 800b566:	6063      	str	r3, [r4, #4]
 800b568:	e7e9      	b.n	800b53e <_sungetc_r+0xc>
 800b56a:	4621      	mov	r1, r4
 800b56c:	f000 fc18 	bl	800bda0 <__submore>
 800b570:	2800      	cmp	r0, #0
 800b572:	d0f1      	beq.n	800b558 <_sungetc_r+0x26>
 800b574:	e7e1      	b.n	800b53a <_sungetc_r+0x8>
 800b576:	6921      	ldr	r1, [r4, #16]
 800b578:	6823      	ldr	r3, [r4, #0]
 800b57a:	b151      	cbz	r1, 800b592 <_sungetc_r+0x60>
 800b57c:	4299      	cmp	r1, r3
 800b57e:	d208      	bcs.n	800b592 <_sungetc_r+0x60>
 800b580:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800b584:	42a9      	cmp	r1, r5
 800b586:	d104      	bne.n	800b592 <_sungetc_r+0x60>
 800b588:	3b01      	subs	r3, #1
 800b58a:	3201      	adds	r2, #1
 800b58c:	6023      	str	r3, [r4, #0]
 800b58e:	6062      	str	r2, [r4, #4]
 800b590:	e7d5      	b.n	800b53e <_sungetc_r+0xc>
 800b592:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800b596:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b59a:	6363      	str	r3, [r4, #52]	; 0x34
 800b59c:	2303      	movs	r3, #3
 800b59e:	63a3      	str	r3, [r4, #56]	; 0x38
 800b5a0:	4623      	mov	r3, r4
 800b5a2:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b5a6:	6023      	str	r3, [r4, #0]
 800b5a8:	2301      	movs	r3, #1
 800b5aa:	e7dc      	b.n	800b566 <_sungetc_r+0x34>

0800b5ac <__ssrefill_r>:
 800b5ac:	b510      	push	{r4, lr}
 800b5ae:	460c      	mov	r4, r1
 800b5b0:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b5b2:	b169      	cbz	r1, 800b5d0 <__ssrefill_r+0x24>
 800b5b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b5b8:	4299      	cmp	r1, r3
 800b5ba:	d001      	beq.n	800b5c0 <__ssrefill_r+0x14>
 800b5bc:	f7fe fa1c 	bl	80099f8 <_free_r>
 800b5c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b5c2:	6063      	str	r3, [r4, #4]
 800b5c4:	2000      	movs	r0, #0
 800b5c6:	6360      	str	r0, [r4, #52]	; 0x34
 800b5c8:	b113      	cbz	r3, 800b5d0 <__ssrefill_r+0x24>
 800b5ca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b5cc:	6023      	str	r3, [r4, #0]
 800b5ce:	bd10      	pop	{r4, pc}
 800b5d0:	6923      	ldr	r3, [r4, #16]
 800b5d2:	6023      	str	r3, [r4, #0]
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	6063      	str	r3, [r4, #4]
 800b5d8:	89a3      	ldrh	r3, [r4, #12]
 800b5da:	f043 0320 	orr.w	r3, r3, #32
 800b5de:	81a3      	strh	r3, [r4, #12]
 800b5e0:	f04f 30ff 	mov.w	r0, #4294967295
 800b5e4:	e7f3      	b.n	800b5ce <__ssrefill_r+0x22>
	...

0800b5e8 <__ssvfiscanf_r>:
 800b5e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5ec:	460c      	mov	r4, r1
 800b5ee:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800b5f2:	2100      	movs	r1, #0
 800b5f4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800b5f8:	49a6      	ldr	r1, [pc, #664]	; (800b894 <__ssvfiscanf_r+0x2ac>)
 800b5fa:	91a0      	str	r1, [sp, #640]	; 0x280
 800b5fc:	f10d 0804 	add.w	r8, sp, #4
 800b600:	49a5      	ldr	r1, [pc, #660]	; (800b898 <__ssvfiscanf_r+0x2b0>)
 800b602:	4fa6      	ldr	r7, [pc, #664]	; (800b89c <__ssvfiscanf_r+0x2b4>)
 800b604:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800b8a0 <__ssvfiscanf_r+0x2b8>
 800b608:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800b60c:	4606      	mov	r6, r0
 800b60e:	91a1      	str	r1, [sp, #644]	; 0x284
 800b610:	9300      	str	r3, [sp, #0]
 800b612:	7813      	ldrb	r3, [r2, #0]
 800b614:	2b00      	cmp	r3, #0
 800b616:	f000 815a 	beq.w	800b8ce <__ssvfiscanf_r+0x2e6>
 800b61a:	5dd9      	ldrb	r1, [r3, r7]
 800b61c:	f011 0108 	ands.w	r1, r1, #8
 800b620:	f102 0501 	add.w	r5, r2, #1
 800b624:	d019      	beq.n	800b65a <__ssvfiscanf_r+0x72>
 800b626:	6863      	ldr	r3, [r4, #4]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	dd0f      	ble.n	800b64c <__ssvfiscanf_r+0x64>
 800b62c:	6823      	ldr	r3, [r4, #0]
 800b62e:	781a      	ldrb	r2, [r3, #0]
 800b630:	5cba      	ldrb	r2, [r7, r2]
 800b632:	0712      	lsls	r2, r2, #28
 800b634:	d401      	bmi.n	800b63a <__ssvfiscanf_r+0x52>
 800b636:	462a      	mov	r2, r5
 800b638:	e7eb      	b.n	800b612 <__ssvfiscanf_r+0x2a>
 800b63a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b63c:	3201      	adds	r2, #1
 800b63e:	9245      	str	r2, [sp, #276]	; 0x114
 800b640:	6862      	ldr	r2, [r4, #4]
 800b642:	3301      	adds	r3, #1
 800b644:	3a01      	subs	r2, #1
 800b646:	6062      	str	r2, [r4, #4]
 800b648:	6023      	str	r3, [r4, #0]
 800b64a:	e7ec      	b.n	800b626 <__ssvfiscanf_r+0x3e>
 800b64c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b64e:	4621      	mov	r1, r4
 800b650:	4630      	mov	r0, r6
 800b652:	4798      	blx	r3
 800b654:	2800      	cmp	r0, #0
 800b656:	d0e9      	beq.n	800b62c <__ssvfiscanf_r+0x44>
 800b658:	e7ed      	b.n	800b636 <__ssvfiscanf_r+0x4e>
 800b65a:	2b25      	cmp	r3, #37	; 0x25
 800b65c:	d012      	beq.n	800b684 <__ssvfiscanf_r+0x9c>
 800b65e:	469a      	mov	sl, r3
 800b660:	6863      	ldr	r3, [r4, #4]
 800b662:	2b00      	cmp	r3, #0
 800b664:	f340 8091 	ble.w	800b78a <__ssvfiscanf_r+0x1a2>
 800b668:	6822      	ldr	r2, [r4, #0]
 800b66a:	7813      	ldrb	r3, [r2, #0]
 800b66c:	4553      	cmp	r3, sl
 800b66e:	f040 812e 	bne.w	800b8ce <__ssvfiscanf_r+0x2e6>
 800b672:	6863      	ldr	r3, [r4, #4]
 800b674:	3b01      	subs	r3, #1
 800b676:	6063      	str	r3, [r4, #4]
 800b678:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800b67a:	3201      	adds	r2, #1
 800b67c:	3301      	adds	r3, #1
 800b67e:	6022      	str	r2, [r4, #0]
 800b680:	9345      	str	r3, [sp, #276]	; 0x114
 800b682:	e7d8      	b.n	800b636 <__ssvfiscanf_r+0x4e>
 800b684:	9141      	str	r1, [sp, #260]	; 0x104
 800b686:	9143      	str	r1, [sp, #268]	; 0x10c
 800b688:	7853      	ldrb	r3, [r2, #1]
 800b68a:	2b2a      	cmp	r3, #42	; 0x2a
 800b68c:	bf02      	ittt	eq
 800b68e:	2310      	moveq	r3, #16
 800b690:	1c95      	addeq	r5, r2, #2
 800b692:	9341      	streq	r3, [sp, #260]	; 0x104
 800b694:	220a      	movs	r2, #10
 800b696:	46aa      	mov	sl, r5
 800b698:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800b69c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800b6a0:	2b09      	cmp	r3, #9
 800b6a2:	d91d      	bls.n	800b6e0 <__ssvfiscanf_r+0xf8>
 800b6a4:	487e      	ldr	r0, [pc, #504]	; (800b8a0 <__ssvfiscanf_r+0x2b8>)
 800b6a6:	2203      	movs	r2, #3
 800b6a8:	f7f4 fdd2 	bl	8000250 <memchr>
 800b6ac:	b140      	cbz	r0, 800b6c0 <__ssvfiscanf_r+0xd8>
 800b6ae:	2301      	movs	r3, #1
 800b6b0:	eba0 0009 	sub.w	r0, r0, r9
 800b6b4:	fa03 f000 	lsl.w	r0, r3, r0
 800b6b8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b6ba:	4318      	orrs	r0, r3
 800b6bc:	9041      	str	r0, [sp, #260]	; 0x104
 800b6be:	4655      	mov	r5, sl
 800b6c0:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b6c4:	2b78      	cmp	r3, #120	; 0x78
 800b6c6:	d806      	bhi.n	800b6d6 <__ssvfiscanf_r+0xee>
 800b6c8:	2b57      	cmp	r3, #87	; 0x57
 800b6ca:	d810      	bhi.n	800b6ee <__ssvfiscanf_r+0x106>
 800b6cc:	2b25      	cmp	r3, #37	; 0x25
 800b6ce:	d0c6      	beq.n	800b65e <__ssvfiscanf_r+0x76>
 800b6d0:	d856      	bhi.n	800b780 <__ssvfiscanf_r+0x198>
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d064      	beq.n	800b7a0 <__ssvfiscanf_r+0x1b8>
 800b6d6:	2303      	movs	r3, #3
 800b6d8:	9347      	str	r3, [sp, #284]	; 0x11c
 800b6da:	230a      	movs	r3, #10
 800b6dc:	9342      	str	r3, [sp, #264]	; 0x108
 800b6de:	e071      	b.n	800b7c4 <__ssvfiscanf_r+0x1dc>
 800b6e0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800b6e2:	fb02 1103 	mla	r1, r2, r3, r1
 800b6e6:	3930      	subs	r1, #48	; 0x30
 800b6e8:	9143      	str	r1, [sp, #268]	; 0x10c
 800b6ea:	4655      	mov	r5, sl
 800b6ec:	e7d3      	b.n	800b696 <__ssvfiscanf_r+0xae>
 800b6ee:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800b6f2:	2a20      	cmp	r2, #32
 800b6f4:	d8ef      	bhi.n	800b6d6 <__ssvfiscanf_r+0xee>
 800b6f6:	a101      	add	r1, pc, #4	; (adr r1, 800b6fc <__ssvfiscanf_r+0x114>)
 800b6f8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b6fc:	0800b7af 	.word	0x0800b7af
 800b700:	0800b6d7 	.word	0x0800b6d7
 800b704:	0800b6d7 	.word	0x0800b6d7
 800b708:	0800b80d 	.word	0x0800b80d
 800b70c:	0800b6d7 	.word	0x0800b6d7
 800b710:	0800b6d7 	.word	0x0800b6d7
 800b714:	0800b6d7 	.word	0x0800b6d7
 800b718:	0800b6d7 	.word	0x0800b6d7
 800b71c:	0800b6d7 	.word	0x0800b6d7
 800b720:	0800b6d7 	.word	0x0800b6d7
 800b724:	0800b6d7 	.word	0x0800b6d7
 800b728:	0800b823 	.word	0x0800b823
 800b72c:	0800b7f9 	.word	0x0800b7f9
 800b730:	0800b787 	.word	0x0800b787
 800b734:	0800b787 	.word	0x0800b787
 800b738:	0800b787 	.word	0x0800b787
 800b73c:	0800b6d7 	.word	0x0800b6d7
 800b740:	0800b7fd 	.word	0x0800b7fd
 800b744:	0800b6d7 	.word	0x0800b6d7
 800b748:	0800b6d7 	.word	0x0800b6d7
 800b74c:	0800b6d7 	.word	0x0800b6d7
 800b750:	0800b6d7 	.word	0x0800b6d7
 800b754:	0800b833 	.word	0x0800b833
 800b758:	0800b805 	.word	0x0800b805
 800b75c:	0800b7a7 	.word	0x0800b7a7
 800b760:	0800b6d7 	.word	0x0800b6d7
 800b764:	0800b6d7 	.word	0x0800b6d7
 800b768:	0800b82f 	.word	0x0800b82f
 800b76c:	0800b6d7 	.word	0x0800b6d7
 800b770:	0800b7f9 	.word	0x0800b7f9
 800b774:	0800b6d7 	.word	0x0800b6d7
 800b778:	0800b6d7 	.word	0x0800b6d7
 800b77c:	0800b7af 	.word	0x0800b7af
 800b780:	3b45      	subs	r3, #69	; 0x45
 800b782:	2b02      	cmp	r3, #2
 800b784:	d8a7      	bhi.n	800b6d6 <__ssvfiscanf_r+0xee>
 800b786:	2305      	movs	r3, #5
 800b788:	e01b      	b.n	800b7c2 <__ssvfiscanf_r+0x1da>
 800b78a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b78c:	4621      	mov	r1, r4
 800b78e:	4630      	mov	r0, r6
 800b790:	4798      	blx	r3
 800b792:	2800      	cmp	r0, #0
 800b794:	f43f af68 	beq.w	800b668 <__ssvfiscanf_r+0x80>
 800b798:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b79a:	2800      	cmp	r0, #0
 800b79c:	f040 808d 	bne.w	800b8ba <__ssvfiscanf_r+0x2d2>
 800b7a0:	f04f 30ff 	mov.w	r0, #4294967295
 800b7a4:	e08f      	b.n	800b8c6 <__ssvfiscanf_r+0x2de>
 800b7a6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b7a8:	f042 0220 	orr.w	r2, r2, #32
 800b7ac:	9241      	str	r2, [sp, #260]	; 0x104
 800b7ae:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b7b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b7b4:	9241      	str	r2, [sp, #260]	; 0x104
 800b7b6:	2210      	movs	r2, #16
 800b7b8:	2b6f      	cmp	r3, #111	; 0x6f
 800b7ba:	9242      	str	r2, [sp, #264]	; 0x108
 800b7bc:	bf34      	ite	cc
 800b7be:	2303      	movcc	r3, #3
 800b7c0:	2304      	movcs	r3, #4
 800b7c2:	9347      	str	r3, [sp, #284]	; 0x11c
 800b7c4:	6863      	ldr	r3, [r4, #4]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	dd42      	ble.n	800b850 <__ssvfiscanf_r+0x268>
 800b7ca:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b7cc:	0659      	lsls	r1, r3, #25
 800b7ce:	d404      	bmi.n	800b7da <__ssvfiscanf_r+0x1f2>
 800b7d0:	6823      	ldr	r3, [r4, #0]
 800b7d2:	781a      	ldrb	r2, [r3, #0]
 800b7d4:	5cba      	ldrb	r2, [r7, r2]
 800b7d6:	0712      	lsls	r2, r2, #28
 800b7d8:	d441      	bmi.n	800b85e <__ssvfiscanf_r+0x276>
 800b7da:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800b7dc:	2b02      	cmp	r3, #2
 800b7de:	dc50      	bgt.n	800b882 <__ssvfiscanf_r+0x29a>
 800b7e0:	466b      	mov	r3, sp
 800b7e2:	4622      	mov	r2, r4
 800b7e4:	a941      	add	r1, sp, #260	; 0x104
 800b7e6:	4630      	mov	r0, r6
 800b7e8:	f000 f876 	bl	800b8d8 <_scanf_chars>
 800b7ec:	2801      	cmp	r0, #1
 800b7ee:	d06e      	beq.n	800b8ce <__ssvfiscanf_r+0x2e6>
 800b7f0:	2802      	cmp	r0, #2
 800b7f2:	f47f af20 	bne.w	800b636 <__ssvfiscanf_r+0x4e>
 800b7f6:	e7cf      	b.n	800b798 <__ssvfiscanf_r+0x1b0>
 800b7f8:	220a      	movs	r2, #10
 800b7fa:	e7dd      	b.n	800b7b8 <__ssvfiscanf_r+0x1d0>
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	9342      	str	r3, [sp, #264]	; 0x108
 800b800:	2303      	movs	r3, #3
 800b802:	e7de      	b.n	800b7c2 <__ssvfiscanf_r+0x1da>
 800b804:	2308      	movs	r3, #8
 800b806:	9342      	str	r3, [sp, #264]	; 0x108
 800b808:	2304      	movs	r3, #4
 800b80a:	e7da      	b.n	800b7c2 <__ssvfiscanf_r+0x1da>
 800b80c:	4629      	mov	r1, r5
 800b80e:	4640      	mov	r0, r8
 800b810:	f000 f9c6 	bl	800bba0 <__sccl>
 800b814:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b816:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b81a:	9341      	str	r3, [sp, #260]	; 0x104
 800b81c:	4605      	mov	r5, r0
 800b81e:	2301      	movs	r3, #1
 800b820:	e7cf      	b.n	800b7c2 <__ssvfiscanf_r+0x1da>
 800b822:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b824:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b828:	9341      	str	r3, [sp, #260]	; 0x104
 800b82a:	2300      	movs	r3, #0
 800b82c:	e7c9      	b.n	800b7c2 <__ssvfiscanf_r+0x1da>
 800b82e:	2302      	movs	r3, #2
 800b830:	e7c7      	b.n	800b7c2 <__ssvfiscanf_r+0x1da>
 800b832:	9841      	ldr	r0, [sp, #260]	; 0x104
 800b834:	06c3      	lsls	r3, r0, #27
 800b836:	f53f aefe 	bmi.w	800b636 <__ssvfiscanf_r+0x4e>
 800b83a:	9b00      	ldr	r3, [sp, #0]
 800b83c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b83e:	1d19      	adds	r1, r3, #4
 800b840:	9100      	str	r1, [sp, #0]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	f010 0f01 	tst.w	r0, #1
 800b848:	bf14      	ite	ne
 800b84a:	801a      	strhne	r2, [r3, #0]
 800b84c:	601a      	streq	r2, [r3, #0]
 800b84e:	e6f2      	b.n	800b636 <__ssvfiscanf_r+0x4e>
 800b850:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b852:	4621      	mov	r1, r4
 800b854:	4630      	mov	r0, r6
 800b856:	4798      	blx	r3
 800b858:	2800      	cmp	r0, #0
 800b85a:	d0b6      	beq.n	800b7ca <__ssvfiscanf_r+0x1e2>
 800b85c:	e79c      	b.n	800b798 <__ssvfiscanf_r+0x1b0>
 800b85e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b860:	3201      	adds	r2, #1
 800b862:	9245      	str	r2, [sp, #276]	; 0x114
 800b864:	6862      	ldr	r2, [r4, #4]
 800b866:	3a01      	subs	r2, #1
 800b868:	2a00      	cmp	r2, #0
 800b86a:	6062      	str	r2, [r4, #4]
 800b86c:	dd02      	ble.n	800b874 <__ssvfiscanf_r+0x28c>
 800b86e:	3301      	adds	r3, #1
 800b870:	6023      	str	r3, [r4, #0]
 800b872:	e7ad      	b.n	800b7d0 <__ssvfiscanf_r+0x1e8>
 800b874:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b876:	4621      	mov	r1, r4
 800b878:	4630      	mov	r0, r6
 800b87a:	4798      	blx	r3
 800b87c:	2800      	cmp	r0, #0
 800b87e:	d0a7      	beq.n	800b7d0 <__ssvfiscanf_r+0x1e8>
 800b880:	e78a      	b.n	800b798 <__ssvfiscanf_r+0x1b0>
 800b882:	2b04      	cmp	r3, #4
 800b884:	dc0e      	bgt.n	800b8a4 <__ssvfiscanf_r+0x2bc>
 800b886:	466b      	mov	r3, sp
 800b888:	4622      	mov	r2, r4
 800b88a:	a941      	add	r1, sp, #260	; 0x104
 800b88c:	4630      	mov	r0, r6
 800b88e:	f000 f87d 	bl	800b98c <_scanf_i>
 800b892:	e7ab      	b.n	800b7ec <__ssvfiscanf_r+0x204>
 800b894:	0800b533 	.word	0x0800b533
 800b898:	0800b5ad 	.word	0x0800b5ad
 800b89c:	0800d770 	.word	0x0800d770
 800b8a0:	0800d742 	.word	0x0800d742
 800b8a4:	4b0b      	ldr	r3, [pc, #44]	; (800b8d4 <__ssvfiscanf_r+0x2ec>)
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	f43f aec5 	beq.w	800b636 <__ssvfiscanf_r+0x4e>
 800b8ac:	466b      	mov	r3, sp
 800b8ae:	4622      	mov	r2, r4
 800b8b0:	a941      	add	r1, sp, #260	; 0x104
 800b8b2:	4630      	mov	r0, r6
 800b8b4:	f3af 8000 	nop.w
 800b8b8:	e798      	b.n	800b7ec <__ssvfiscanf_r+0x204>
 800b8ba:	89a3      	ldrh	r3, [r4, #12]
 800b8bc:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b8c0:	bf18      	it	ne
 800b8c2:	f04f 30ff 	movne.w	r0, #4294967295
 800b8c6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800b8ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8ce:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b8d0:	e7f9      	b.n	800b8c6 <__ssvfiscanf_r+0x2de>
 800b8d2:	bf00      	nop
 800b8d4:	00000000 	.word	0x00000000

0800b8d8 <_scanf_chars>:
 800b8d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8dc:	4615      	mov	r5, r2
 800b8de:	688a      	ldr	r2, [r1, #8]
 800b8e0:	4680      	mov	r8, r0
 800b8e2:	460c      	mov	r4, r1
 800b8e4:	b932      	cbnz	r2, 800b8f4 <_scanf_chars+0x1c>
 800b8e6:	698a      	ldr	r2, [r1, #24]
 800b8e8:	2a00      	cmp	r2, #0
 800b8ea:	bf0c      	ite	eq
 800b8ec:	2201      	moveq	r2, #1
 800b8ee:	f04f 32ff 	movne.w	r2, #4294967295
 800b8f2:	608a      	str	r2, [r1, #8]
 800b8f4:	6822      	ldr	r2, [r4, #0]
 800b8f6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800b988 <_scanf_chars+0xb0>
 800b8fa:	06d1      	lsls	r1, r2, #27
 800b8fc:	bf5f      	itttt	pl
 800b8fe:	681a      	ldrpl	r2, [r3, #0]
 800b900:	1d11      	addpl	r1, r2, #4
 800b902:	6019      	strpl	r1, [r3, #0]
 800b904:	6816      	ldrpl	r6, [r2, #0]
 800b906:	2700      	movs	r7, #0
 800b908:	69a0      	ldr	r0, [r4, #24]
 800b90a:	b188      	cbz	r0, 800b930 <_scanf_chars+0x58>
 800b90c:	2801      	cmp	r0, #1
 800b90e:	d107      	bne.n	800b920 <_scanf_chars+0x48>
 800b910:	682a      	ldr	r2, [r5, #0]
 800b912:	7811      	ldrb	r1, [r2, #0]
 800b914:	6962      	ldr	r2, [r4, #20]
 800b916:	5c52      	ldrb	r2, [r2, r1]
 800b918:	b952      	cbnz	r2, 800b930 <_scanf_chars+0x58>
 800b91a:	2f00      	cmp	r7, #0
 800b91c:	d031      	beq.n	800b982 <_scanf_chars+0xaa>
 800b91e:	e022      	b.n	800b966 <_scanf_chars+0x8e>
 800b920:	2802      	cmp	r0, #2
 800b922:	d120      	bne.n	800b966 <_scanf_chars+0x8e>
 800b924:	682b      	ldr	r3, [r5, #0]
 800b926:	781b      	ldrb	r3, [r3, #0]
 800b928:	f813 3009 	ldrb.w	r3, [r3, r9]
 800b92c:	071b      	lsls	r3, r3, #28
 800b92e:	d41a      	bmi.n	800b966 <_scanf_chars+0x8e>
 800b930:	6823      	ldr	r3, [r4, #0]
 800b932:	06da      	lsls	r2, r3, #27
 800b934:	bf5e      	ittt	pl
 800b936:	682b      	ldrpl	r3, [r5, #0]
 800b938:	781b      	ldrbpl	r3, [r3, #0]
 800b93a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800b93e:	682a      	ldr	r2, [r5, #0]
 800b940:	686b      	ldr	r3, [r5, #4]
 800b942:	3201      	adds	r2, #1
 800b944:	602a      	str	r2, [r5, #0]
 800b946:	68a2      	ldr	r2, [r4, #8]
 800b948:	3b01      	subs	r3, #1
 800b94a:	3a01      	subs	r2, #1
 800b94c:	606b      	str	r3, [r5, #4]
 800b94e:	3701      	adds	r7, #1
 800b950:	60a2      	str	r2, [r4, #8]
 800b952:	b142      	cbz	r2, 800b966 <_scanf_chars+0x8e>
 800b954:	2b00      	cmp	r3, #0
 800b956:	dcd7      	bgt.n	800b908 <_scanf_chars+0x30>
 800b958:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b95c:	4629      	mov	r1, r5
 800b95e:	4640      	mov	r0, r8
 800b960:	4798      	blx	r3
 800b962:	2800      	cmp	r0, #0
 800b964:	d0d0      	beq.n	800b908 <_scanf_chars+0x30>
 800b966:	6823      	ldr	r3, [r4, #0]
 800b968:	f013 0310 	ands.w	r3, r3, #16
 800b96c:	d105      	bne.n	800b97a <_scanf_chars+0xa2>
 800b96e:	68e2      	ldr	r2, [r4, #12]
 800b970:	3201      	adds	r2, #1
 800b972:	60e2      	str	r2, [r4, #12]
 800b974:	69a2      	ldr	r2, [r4, #24]
 800b976:	b102      	cbz	r2, 800b97a <_scanf_chars+0xa2>
 800b978:	7033      	strb	r3, [r6, #0]
 800b97a:	6923      	ldr	r3, [r4, #16]
 800b97c:	443b      	add	r3, r7
 800b97e:	6123      	str	r3, [r4, #16]
 800b980:	2000      	movs	r0, #0
 800b982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b986:	bf00      	nop
 800b988:	0800d770 	.word	0x0800d770

0800b98c <_scanf_i>:
 800b98c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b990:	4698      	mov	r8, r3
 800b992:	4b76      	ldr	r3, [pc, #472]	; (800bb6c <_scanf_i+0x1e0>)
 800b994:	460c      	mov	r4, r1
 800b996:	4682      	mov	sl, r0
 800b998:	4616      	mov	r6, r2
 800b99a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b99e:	b087      	sub	sp, #28
 800b9a0:	ab03      	add	r3, sp, #12
 800b9a2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b9a6:	4b72      	ldr	r3, [pc, #456]	; (800bb70 <_scanf_i+0x1e4>)
 800b9a8:	69a1      	ldr	r1, [r4, #24]
 800b9aa:	4a72      	ldr	r2, [pc, #456]	; (800bb74 <_scanf_i+0x1e8>)
 800b9ac:	2903      	cmp	r1, #3
 800b9ae:	bf18      	it	ne
 800b9b0:	461a      	movne	r2, r3
 800b9b2:	68a3      	ldr	r3, [r4, #8]
 800b9b4:	9201      	str	r2, [sp, #4]
 800b9b6:	1e5a      	subs	r2, r3, #1
 800b9b8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b9bc:	bf88      	it	hi
 800b9be:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b9c2:	4627      	mov	r7, r4
 800b9c4:	bf82      	ittt	hi
 800b9c6:	eb03 0905 	addhi.w	r9, r3, r5
 800b9ca:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b9ce:	60a3      	strhi	r3, [r4, #8]
 800b9d0:	f857 3b1c 	ldr.w	r3, [r7], #28
 800b9d4:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800b9d8:	bf98      	it	ls
 800b9da:	f04f 0900 	movls.w	r9, #0
 800b9de:	6023      	str	r3, [r4, #0]
 800b9e0:	463d      	mov	r5, r7
 800b9e2:	f04f 0b00 	mov.w	fp, #0
 800b9e6:	6831      	ldr	r1, [r6, #0]
 800b9e8:	ab03      	add	r3, sp, #12
 800b9ea:	7809      	ldrb	r1, [r1, #0]
 800b9ec:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800b9f0:	2202      	movs	r2, #2
 800b9f2:	f7f4 fc2d 	bl	8000250 <memchr>
 800b9f6:	b328      	cbz	r0, 800ba44 <_scanf_i+0xb8>
 800b9f8:	f1bb 0f01 	cmp.w	fp, #1
 800b9fc:	d159      	bne.n	800bab2 <_scanf_i+0x126>
 800b9fe:	6862      	ldr	r2, [r4, #4]
 800ba00:	b92a      	cbnz	r2, 800ba0e <_scanf_i+0x82>
 800ba02:	6822      	ldr	r2, [r4, #0]
 800ba04:	2308      	movs	r3, #8
 800ba06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ba0a:	6063      	str	r3, [r4, #4]
 800ba0c:	6022      	str	r2, [r4, #0]
 800ba0e:	6822      	ldr	r2, [r4, #0]
 800ba10:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800ba14:	6022      	str	r2, [r4, #0]
 800ba16:	68a2      	ldr	r2, [r4, #8]
 800ba18:	1e51      	subs	r1, r2, #1
 800ba1a:	60a1      	str	r1, [r4, #8]
 800ba1c:	b192      	cbz	r2, 800ba44 <_scanf_i+0xb8>
 800ba1e:	6832      	ldr	r2, [r6, #0]
 800ba20:	1c51      	adds	r1, r2, #1
 800ba22:	6031      	str	r1, [r6, #0]
 800ba24:	7812      	ldrb	r2, [r2, #0]
 800ba26:	f805 2b01 	strb.w	r2, [r5], #1
 800ba2a:	6872      	ldr	r2, [r6, #4]
 800ba2c:	3a01      	subs	r2, #1
 800ba2e:	2a00      	cmp	r2, #0
 800ba30:	6072      	str	r2, [r6, #4]
 800ba32:	dc07      	bgt.n	800ba44 <_scanf_i+0xb8>
 800ba34:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800ba38:	4631      	mov	r1, r6
 800ba3a:	4650      	mov	r0, sl
 800ba3c:	4790      	blx	r2
 800ba3e:	2800      	cmp	r0, #0
 800ba40:	f040 8085 	bne.w	800bb4e <_scanf_i+0x1c2>
 800ba44:	f10b 0b01 	add.w	fp, fp, #1
 800ba48:	f1bb 0f03 	cmp.w	fp, #3
 800ba4c:	d1cb      	bne.n	800b9e6 <_scanf_i+0x5a>
 800ba4e:	6863      	ldr	r3, [r4, #4]
 800ba50:	b90b      	cbnz	r3, 800ba56 <_scanf_i+0xca>
 800ba52:	230a      	movs	r3, #10
 800ba54:	6063      	str	r3, [r4, #4]
 800ba56:	6863      	ldr	r3, [r4, #4]
 800ba58:	4947      	ldr	r1, [pc, #284]	; (800bb78 <_scanf_i+0x1ec>)
 800ba5a:	6960      	ldr	r0, [r4, #20]
 800ba5c:	1ac9      	subs	r1, r1, r3
 800ba5e:	f000 f89f 	bl	800bba0 <__sccl>
 800ba62:	f04f 0b00 	mov.w	fp, #0
 800ba66:	68a3      	ldr	r3, [r4, #8]
 800ba68:	6822      	ldr	r2, [r4, #0]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d03d      	beq.n	800baea <_scanf_i+0x15e>
 800ba6e:	6831      	ldr	r1, [r6, #0]
 800ba70:	6960      	ldr	r0, [r4, #20]
 800ba72:	f891 c000 	ldrb.w	ip, [r1]
 800ba76:	f810 000c 	ldrb.w	r0, [r0, ip]
 800ba7a:	2800      	cmp	r0, #0
 800ba7c:	d035      	beq.n	800baea <_scanf_i+0x15e>
 800ba7e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800ba82:	d124      	bne.n	800bace <_scanf_i+0x142>
 800ba84:	0510      	lsls	r0, r2, #20
 800ba86:	d522      	bpl.n	800bace <_scanf_i+0x142>
 800ba88:	f10b 0b01 	add.w	fp, fp, #1
 800ba8c:	f1b9 0f00 	cmp.w	r9, #0
 800ba90:	d003      	beq.n	800ba9a <_scanf_i+0x10e>
 800ba92:	3301      	adds	r3, #1
 800ba94:	f109 39ff 	add.w	r9, r9, #4294967295
 800ba98:	60a3      	str	r3, [r4, #8]
 800ba9a:	6873      	ldr	r3, [r6, #4]
 800ba9c:	3b01      	subs	r3, #1
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	6073      	str	r3, [r6, #4]
 800baa2:	dd1b      	ble.n	800badc <_scanf_i+0x150>
 800baa4:	6833      	ldr	r3, [r6, #0]
 800baa6:	3301      	adds	r3, #1
 800baa8:	6033      	str	r3, [r6, #0]
 800baaa:	68a3      	ldr	r3, [r4, #8]
 800baac:	3b01      	subs	r3, #1
 800baae:	60a3      	str	r3, [r4, #8]
 800bab0:	e7d9      	b.n	800ba66 <_scanf_i+0xda>
 800bab2:	f1bb 0f02 	cmp.w	fp, #2
 800bab6:	d1ae      	bne.n	800ba16 <_scanf_i+0x8a>
 800bab8:	6822      	ldr	r2, [r4, #0]
 800baba:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800babe:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800bac2:	d1bf      	bne.n	800ba44 <_scanf_i+0xb8>
 800bac4:	2310      	movs	r3, #16
 800bac6:	6063      	str	r3, [r4, #4]
 800bac8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bacc:	e7a2      	b.n	800ba14 <_scanf_i+0x88>
 800bace:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800bad2:	6022      	str	r2, [r4, #0]
 800bad4:	780b      	ldrb	r3, [r1, #0]
 800bad6:	f805 3b01 	strb.w	r3, [r5], #1
 800bada:	e7de      	b.n	800ba9a <_scanf_i+0x10e>
 800badc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bae0:	4631      	mov	r1, r6
 800bae2:	4650      	mov	r0, sl
 800bae4:	4798      	blx	r3
 800bae6:	2800      	cmp	r0, #0
 800bae8:	d0df      	beq.n	800baaa <_scanf_i+0x11e>
 800baea:	6823      	ldr	r3, [r4, #0]
 800baec:	05db      	lsls	r3, r3, #23
 800baee:	d50d      	bpl.n	800bb0c <_scanf_i+0x180>
 800baf0:	42bd      	cmp	r5, r7
 800baf2:	d909      	bls.n	800bb08 <_scanf_i+0x17c>
 800baf4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800baf8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bafc:	4632      	mov	r2, r6
 800bafe:	4650      	mov	r0, sl
 800bb00:	4798      	blx	r3
 800bb02:	f105 39ff 	add.w	r9, r5, #4294967295
 800bb06:	464d      	mov	r5, r9
 800bb08:	42bd      	cmp	r5, r7
 800bb0a:	d02d      	beq.n	800bb68 <_scanf_i+0x1dc>
 800bb0c:	6822      	ldr	r2, [r4, #0]
 800bb0e:	f012 0210 	ands.w	r2, r2, #16
 800bb12:	d113      	bne.n	800bb3c <_scanf_i+0x1b0>
 800bb14:	702a      	strb	r2, [r5, #0]
 800bb16:	6863      	ldr	r3, [r4, #4]
 800bb18:	9e01      	ldr	r6, [sp, #4]
 800bb1a:	4639      	mov	r1, r7
 800bb1c:	4650      	mov	r0, sl
 800bb1e:	47b0      	blx	r6
 800bb20:	6821      	ldr	r1, [r4, #0]
 800bb22:	f8d8 3000 	ldr.w	r3, [r8]
 800bb26:	f011 0f20 	tst.w	r1, #32
 800bb2a:	d013      	beq.n	800bb54 <_scanf_i+0x1c8>
 800bb2c:	1d1a      	adds	r2, r3, #4
 800bb2e:	f8c8 2000 	str.w	r2, [r8]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	6018      	str	r0, [r3, #0]
 800bb36:	68e3      	ldr	r3, [r4, #12]
 800bb38:	3301      	adds	r3, #1
 800bb3a:	60e3      	str	r3, [r4, #12]
 800bb3c:	1bed      	subs	r5, r5, r7
 800bb3e:	44ab      	add	fp, r5
 800bb40:	6925      	ldr	r5, [r4, #16]
 800bb42:	445d      	add	r5, fp
 800bb44:	6125      	str	r5, [r4, #16]
 800bb46:	2000      	movs	r0, #0
 800bb48:	b007      	add	sp, #28
 800bb4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb4e:	f04f 0b00 	mov.w	fp, #0
 800bb52:	e7ca      	b.n	800baea <_scanf_i+0x15e>
 800bb54:	1d1a      	adds	r2, r3, #4
 800bb56:	f8c8 2000 	str.w	r2, [r8]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	f011 0f01 	tst.w	r1, #1
 800bb60:	bf14      	ite	ne
 800bb62:	8018      	strhne	r0, [r3, #0]
 800bb64:	6018      	streq	r0, [r3, #0]
 800bb66:	e7e6      	b.n	800bb36 <_scanf_i+0x1aa>
 800bb68:	2001      	movs	r0, #1
 800bb6a:	e7ed      	b.n	800bb48 <_scanf_i+0x1bc>
 800bb6c:	0800c0a0 	.word	0x0800c0a0
 800bb70:	0800ae21 	.word	0x0800ae21
 800bb74:	0800bd9d 	.word	0x0800bd9d
 800bb78:	0800d8e9 	.word	0x0800d8e9

0800bb7c <_read_r>:
 800bb7c:	b538      	push	{r3, r4, r5, lr}
 800bb7e:	4d07      	ldr	r5, [pc, #28]	; (800bb9c <_read_r+0x20>)
 800bb80:	4604      	mov	r4, r0
 800bb82:	4608      	mov	r0, r1
 800bb84:	4611      	mov	r1, r2
 800bb86:	2200      	movs	r2, #0
 800bb88:	602a      	str	r2, [r5, #0]
 800bb8a:	461a      	mov	r2, r3
 800bb8c:	f7f8 f884 	bl	8003c98 <_read>
 800bb90:	1c43      	adds	r3, r0, #1
 800bb92:	d102      	bne.n	800bb9a <_read_r+0x1e>
 800bb94:	682b      	ldr	r3, [r5, #0]
 800bb96:	b103      	cbz	r3, 800bb9a <_read_r+0x1e>
 800bb98:	6023      	str	r3, [r4, #0]
 800bb9a:	bd38      	pop	{r3, r4, r5, pc}
 800bb9c:	20000e68 	.word	0x20000e68

0800bba0 <__sccl>:
 800bba0:	b570      	push	{r4, r5, r6, lr}
 800bba2:	780b      	ldrb	r3, [r1, #0]
 800bba4:	4604      	mov	r4, r0
 800bba6:	2b5e      	cmp	r3, #94	; 0x5e
 800bba8:	bf0b      	itete	eq
 800bbaa:	784b      	ldrbeq	r3, [r1, #1]
 800bbac:	1c48      	addne	r0, r1, #1
 800bbae:	1c88      	addeq	r0, r1, #2
 800bbb0:	2200      	movne	r2, #0
 800bbb2:	bf08      	it	eq
 800bbb4:	2201      	moveq	r2, #1
 800bbb6:	1e61      	subs	r1, r4, #1
 800bbb8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800bbbc:	f801 2f01 	strb.w	r2, [r1, #1]!
 800bbc0:	42a9      	cmp	r1, r5
 800bbc2:	d1fb      	bne.n	800bbbc <__sccl+0x1c>
 800bbc4:	b90b      	cbnz	r3, 800bbca <__sccl+0x2a>
 800bbc6:	3801      	subs	r0, #1
 800bbc8:	bd70      	pop	{r4, r5, r6, pc}
 800bbca:	f082 0201 	eor.w	r2, r2, #1
 800bbce:	54e2      	strb	r2, [r4, r3]
 800bbd0:	4605      	mov	r5, r0
 800bbd2:	4628      	mov	r0, r5
 800bbd4:	f810 1b01 	ldrb.w	r1, [r0], #1
 800bbd8:	292d      	cmp	r1, #45	; 0x2d
 800bbda:	d006      	beq.n	800bbea <__sccl+0x4a>
 800bbdc:	295d      	cmp	r1, #93	; 0x5d
 800bbde:	d0f3      	beq.n	800bbc8 <__sccl+0x28>
 800bbe0:	b909      	cbnz	r1, 800bbe6 <__sccl+0x46>
 800bbe2:	4628      	mov	r0, r5
 800bbe4:	e7f0      	b.n	800bbc8 <__sccl+0x28>
 800bbe6:	460b      	mov	r3, r1
 800bbe8:	e7f1      	b.n	800bbce <__sccl+0x2e>
 800bbea:	786e      	ldrb	r6, [r5, #1]
 800bbec:	2e5d      	cmp	r6, #93	; 0x5d
 800bbee:	d0fa      	beq.n	800bbe6 <__sccl+0x46>
 800bbf0:	42b3      	cmp	r3, r6
 800bbf2:	dcf8      	bgt.n	800bbe6 <__sccl+0x46>
 800bbf4:	3502      	adds	r5, #2
 800bbf6:	4619      	mov	r1, r3
 800bbf8:	3101      	adds	r1, #1
 800bbfa:	428e      	cmp	r6, r1
 800bbfc:	5462      	strb	r2, [r4, r1]
 800bbfe:	dcfb      	bgt.n	800bbf8 <__sccl+0x58>
 800bc00:	1af1      	subs	r1, r6, r3
 800bc02:	3901      	subs	r1, #1
 800bc04:	1c58      	adds	r0, r3, #1
 800bc06:	42b3      	cmp	r3, r6
 800bc08:	bfa8      	it	ge
 800bc0a:	2100      	movge	r1, #0
 800bc0c:	1843      	adds	r3, r0, r1
 800bc0e:	e7e0      	b.n	800bbd2 <__sccl+0x32>

0800bc10 <_raise_r>:
 800bc10:	291f      	cmp	r1, #31
 800bc12:	b538      	push	{r3, r4, r5, lr}
 800bc14:	4604      	mov	r4, r0
 800bc16:	460d      	mov	r5, r1
 800bc18:	d904      	bls.n	800bc24 <_raise_r+0x14>
 800bc1a:	2316      	movs	r3, #22
 800bc1c:	6003      	str	r3, [r0, #0]
 800bc1e:	f04f 30ff 	mov.w	r0, #4294967295
 800bc22:	bd38      	pop	{r3, r4, r5, pc}
 800bc24:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bc26:	b112      	cbz	r2, 800bc2e <_raise_r+0x1e>
 800bc28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bc2c:	b94b      	cbnz	r3, 800bc42 <_raise_r+0x32>
 800bc2e:	4620      	mov	r0, r4
 800bc30:	f000 f830 	bl	800bc94 <_getpid_r>
 800bc34:	462a      	mov	r2, r5
 800bc36:	4601      	mov	r1, r0
 800bc38:	4620      	mov	r0, r4
 800bc3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc3e:	f000 b817 	b.w	800bc70 <_kill_r>
 800bc42:	2b01      	cmp	r3, #1
 800bc44:	d00a      	beq.n	800bc5c <_raise_r+0x4c>
 800bc46:	1c59      	adds	r1, r3, #1
 800bc48:	d103      	bne.n	800bc52 <_raise_r+0x42>
 800bc4a:	2316      	movs	r3, #22
 800bc4c:	6003      	str	r3, [r0, #0]
 800bc4e:	2001      	movs	r0, #1
 800bc50:	e7e7      	b.n	800bc22 <_raise_r+0x12>
 800bc52:	2400      	movs	r4, #0
 800bc54:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bc58:	4628      	mov	r0, r5
 800bc5a:	4798      	blx	r3
 800bc5c:	2000      	movs	r0, #0
 800bc5e:	e7e0      	b.n	800bc22 <_raise_r+0x12>

0800bc60 <raise>:
 800bc60:	4b02      	ldr	r3, [pc, #8]	; (800bc6c <raise+0xc>)
 800bc62:	4601      	mov	r1, r0
 800bc64:	6818      	ldr	r0, [r3, #0]
 800bc66:	f7ff bfd3 	b.w	800bc10 <_raise_r>
 800bc6a:	bf00      	nop
 800bc6c:	200000c8 	.word	0x200000c8

0800bc70 <_kill_r>:
 800bc70:	b538      	push	{r3, r4, r5, lr}
 800bc72:	4d07      	ldr	r5, [pc, #28]	; (800bc90 <_kill_r+0x20>)
 800bc74:	2300      	movs	r3, #0
 800bc76:	4604      	mov	r4, r0
 800bc78:	4608      	mov	r0, r1
 800bc7a:	4611      	mov	r1, r2
 800bc7c:	602b      	str	r3, [r5, #0]
 800bc7e:	f7f7 fff1 	bl	8003c64 <_kill>
 800bc82:	1c43      	adds	r3, r0, #1
 800bc84:	d102      	bne.n	800bc8c <_kill_r+0x1c>
 800bc86:	682b      	ldr	r3, [r5, #0]
 800bc88:	b103      	cbz	r3, 800bc8c <_kill_r+0x1c>
 800bc8a:	6023      	str	r3, [r4, #0]
 800bc8c:	bd38      	pop	{r3, r4, r5, pc}
 800bc8e:	bf00      	nop
 800bc90:	20000e68 	.word	0x20000e68

0800bc94 <_getpid_r>:
 800bc94:	f7f7 bfde 	b.w	8003c54 <_getpid>

0800bc98 <_strtol_l.constprop.0>:
 800bc98:	2b01      	cmp	r3, #1
 800bc9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc9e:	d001      	beq.n	800bca4 <_strtol_l.constprop.0+0xc>
 800bca0:	2b24      	cmp	r3, #36	; 0x24
 800bca2:	d906      	bls.n	800bcb2 <_strtol_l.constprop.0+0x1a>
 800bca4:	f7fd fae2 	bl	800926c <__errno>
 800bca8:	2316      	movs	r3, #22
 800bcaa:	6003      	str	r3, [r0, #0]
 800bcac:	2000      	movs	r0, #0
 800bcae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcb2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800bd98 <_strtol_l.constprop.0+0x100>
 800bcb6:	460d      	mov	r5, r1
 800bcb8:	462e      	mov	r6, r5
 800bcba:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bcbe:	f814 700c 	ldrb.w	r7, [r4, ip]
 800bcc2:	f017 0708 	ands.w	r7, r7, #8
 800bcc6:	d1f7      	bne.n	800bcb8 <_strtol_l.constprop.0+0x20>
 800bcc8:	2c2d      	cmp	r4, #45	; 0x2d
 800bcca:	d132      	bne.n	800bd32 <_strtol_l.constprop.0+0x9a>
 800bccc:	782c      	ldrb	r4, [r5, #0]
 800bcce:	2701      	movs	r7, #1
 800bcd0:	1cb5      	adds	r5, r6, #2
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d05b      	beq.n	800bd8e <_strtol_l.constprop.0+0xf6>
 800bcd6:	2b10      	cmp	r3, #16
 800bcd8:	d109      	bne.n	800bcee <_strtol_l.constprop.0+0x56>
 800bcda:	2c30      	cmp	r4, #48	; 0x30
 800bcdc:	d107      	bne.n	800bcee <_strtol_l.constprop.0+0x56>
 800bcde:	782c      	ldrb	r4, [r5, #0]
 800bce0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800bce4:	2c58      	cmp	r4, #88	; 0x58
 800bce6:	d14d      	bne.n	800bd84 <_strtol_l.constprop.0+0xec>
 800bce8:	786c      	ldrb	r4, [r5, #1]
 800bcea:	2310      	movs	r3, #16
 800bcec:	3502      	adds	r5, #2
 800bcee:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800bcf2:	f108 38ff 	add.w	r8, r8, #4294967295
 800bcf6:	f04f 0c00 	mov.w	ip, #0
 800bcfa:	fbb8 f9f3 	udiv	r9, r8, r3
 800bcfe:	4666      	mov	r6, ip
 800bd00:	fb03 8a19 	mls	sl, r3, r9, r8
 800bd04:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800bd08:	f1be 0f09 	cmp.w	lr, #9
 800bd0c:	d816      	bhi.n	800bd3c <_strtol_l.constprop.0+0xa4>
 800bd0e:	4674      	mov	r4, lr
 800bd10:	42a3      	cmp	r3, r4
 800bd12:	dd24      	ble.n	800bd5e <_strtol_l.constprop.0+0xc6>
 800bd14:	f1bc 0f00 	cmp.w	ip, #0
 800bd18:	db1e      	blt.n	800bd58 <_strtol_l.constprop.0+0xc0>
 800bd1a:	45b1      	cmp	r9, r6
 800bd1c:	d31c      	bcc.n	800bd58 <_strtol_l.constprop.0+0xc0>
 800bd1e:	d101      	bne.n	800bd24 <_strtol_l.constprop.0+0x8c>
 800bd20:	45a2      	cmp	sl, r4
 800bd22:	db19      	blt.n	800bd58 <_strtol_l.constprop.0+0xc0>
 800bd24:	fb06 4603 	mla	r6, r6, r3, r4
 800bd28:	f04f 0c01 	mov.w	ip, #1
 800bd2c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bd30:	e7e8      	b.n	800bd04 <_strtol_l.constprop.0+0x6c>
 800bd32:	2c2b      	cmp	r4, #43	; 0x2b
 800bd34:	bf04      	itt	eq
 800bd36:	782c      	ldrbeq	r4, [r5, #0]
 800bd38:	1cb5      	addeq	r5, r6, #2
 800bd3a:	e7ca      	b.n	800bcd2 <_strtol_l.constprop.0+0x3a>
 800bd3c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800bd40:	f1be 0f19 	cmp.w	lr, #25
 800bd44:	d801      	bhi.n	800bd4a <_strtol_l.constprop.0+0xb2>
 800bd46:	3c37      	subs	r4, #55	; 0x37
 800bd48:	e7e2      	b.n	800bd10 <_strtol_l.constprop.0+0x78>
 800bd4a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800bd4e:	f1be 0f19 	cmp.w	lr, #25
 800bd52:	d804      	bhi.n	800bd5e <_strtol_l.constprop.0+0xc6>
 800bd54:	3c57      	subs	r4, #87	; 0x57
 800bd56:	e7db      	b.n	800bd10 <_strtol_l.constprop.0+0x78>
 800bd58:	f04f 3cff 	mov.w	ip, #4294967295
 800bd5c:	e7e6      	b.n	800bd2c <_strtol_l.constprop.0+0x94>
 800bd5e:	f1bc 0f00 	cmp.w	ip, #0
 800bd62:	da05      	bge.n	800bd70 <_strtol_l.constprop.0+0xd8>
 800bd64:	2322      	movs	r3, #34	; 0x22
 800bd66:	6003      	str	r3, [r0, #0]
 800bd68:	4646      	mov	r6, r8
 800bd6a:	b942      	cbnz	r2, 800bd7e <_strtol_l.constprop.0+0xe6>
 800bd6c:	4630      	mov	r0, r6
 800bd6e:	e79e      	b.n	800bcae <_strtol_l.constprop.0+0x16>
 800bd70:	b107      	cbz	r7, 800bd74 <_strtol_l.constprop.0+0xdc>
 800bd72:	4276      	negs	r6, r6
 800bd74:	2a00      	cmp	r2, #0
 800bd76:	d0f9      	beq.n	800bd6c <_strtol_l.constprop.0+0xd4>
 800bd78:	f1bc 0f00 	cmp.w	ip, #0
 800bd7c:	d000      	beq.n	800bd80 <_strtol_l.constprop.0+0xe8>
 800bd7e:	1e69      	subs	r1, r5, #1
 800bd80:	6011      	str	r1, [r2, #0]
 800bd82:	e7f3      	b.n	800bd6c <_strtol_l.constprop.0+0xd4>
 800bd84:	2430      	movs	r4, #48	; 0x30
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d1b1      	bne.n	800bcee <_strtol_l.constprop.0+0x56>
 800bd8a:	2308      	movs	r3, #8
 800bd8c:	e7af      	b.n	800bcee <_strtol_l.constprop.0+0x56>
 800bd8e:	2c30      	cmp	r4, #48	; 0x30
 800bd90:	d0a5      	beq.n	800bcde <_strtol_l.constprop.0+0x46>
 800bd92:	230a      	movs	r3, #10
 800bd94:	e7ab      	b.n	800bcee <_strtol_l.constprop.0+0x56>
 800bd96:	bf00      	nop
 800bd98:	0800d770 	.word	0x0800d770

0800bd9c <_strtol_r>:
 800bd9c:	f7ff bf7c 	b.w	800bc98 <_strtol_l.constprop.0>

0800bda0 <__submore>:
 800bda0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bda4:	460c      	mov	r4, r1
 800bda6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800bda8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bdac:	4299      	cmp	r1, r3
 800bdae:	d11d      	bne.n	800bdec <__submore+0x4c>
 800bdb0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800bdb4:	f7fd fe8c 	bl	8009ad0 <_malloc_r>
 800bdb8:	b918      	cbnz	r0, 800bdc2 <__submore+0x22>
 800bdba:	f04f 30ff 	mov.w	r0, #4294967295
 800bdbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bdc6:	63a3      	str	r3, [r4, #56]	; 0x38
 800bdc8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800bdcc:	6360      	str	r0, [r4, #52]	; 0x34
 800bdce:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800bdd2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800bdd6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800bdda:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800bdde:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800bde2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800bde6:	6020      	str	r0, [r4, #0]
 800bde8:	2000      	movs	r0, #0
 800bdea:	e7e8      	b.n	800bdbe <__submore+0x1e>
 800bdec:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800bdee:	0077      	lsls	r7, r6, #1
 800bdf0:	463a      	mov	r2, r7
 800bdf2:	f7ff fb6f 	bl	800b4d4 <_realloc_r>
 800bdf6:	4605      	mov	r5, r0
 800bdf8:	2800      	cmp	r0, #0
 800bdfa:	d0de      	beq.n	800bdba <__submore+0x1a>
 800bdfc:	eb00 0806 	add.w	r8, r0, r6
 800be00:	4601      	mov	r1, r0
 800be02:	4632      	mov	r2, r6
 800be04:	4640      	mov	r0, r8
 800be06:	f7ff fb3d 	bl	800b484 <memcpy>
 800be0a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800be0e:	f8c4 8000 	str.w	r8, [r4]
 800be12:	e7e9      	b.n	800bde8 <__submore+0x48>

0800be14 <_fstat_r>:
 800be14:	b538      	push	{r3, r4, r5, lr}
 800be16:	4d07      	ldr	r5, [pc, #28]	; (800be34 <_fstat_r+0x20>)
 800be18:	2300      	movs	r3, #0
 800be1a:	4604      	mov	r4, r0
 800be1c:	4608      	mov	r0, r1
 800be1e:	4611      	mov	r1, r2
 800be20:	602b      	str	r3, [r5, #0]
 800be22:	f7f7 ff7e 	bl	8003d22 <_fstat>
 800be26:	1c43      	adds	r3, r0, #1
 800be28:	d102      	bne.n	800be30 <_fstat_r+0x1c>
 800be2a:	682b      	ldr	r3, [r5, #0]
 800be2c:	b103      	cbz	r3, 800be30 <_fstat_r+0x1c>
 800be2e:	6023      	str	r3, [r4, #0]
 800be30:	bd38      	pop	{r3, r4, r5, pc}
 800be32:	bf00      	nop
 800be34:	20000e68 	.word	0x20000e68

0800be38 <_isatty_r>:
 800be38:	b538      	push	{r3, r4, r5, lr}
 800be3a:	4d06      	ldr	r5, [pc, #24]	; (800be54 <_isatty_r+0x1c>)
 800be3c:	2300      	movs	r3, #0
 800be3e:	4604      	mov	r4, r0
 800be40:	4608      	mov	r0, r1
 800be42:	602b      	str	r3, [r5, #0]
 800be44:	f7f7 ff7d 	bl	8003d42 <_isatty>
 800be48:	1c43      	adds	r3, r0, #1
 800be4a:	d102      	bne.n	800be52 <_isatty_r+0x1a>
 800be4c:	682b      	ldr	r3, [r5, #0]
 800be4e:	b103      	cbz	r3, 800be52 <_isatty_r+0x1a>
 800be50:	6023      	str	r3, [r4, #0]
 800be52:	bd38      	pop	{r3, r4, r5, pc}
 800be54:	20000e68 	.word	0x20000e68

0800be58 <_malloc_usable_size_r>:
 800be58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be5c:	1f18      	subs	r0, r3, #4
 800be5e:	2b00      	cmp	r3, #0
 800be60:	bfbc      	itt	lt
 800be62:	580b      	ldrlt	r3, [r1, r0]
 800be64:	18c0      	addlt	r0, r0, r3
 800be66:	4770      	bx	lr

0800be68 <_init>:
 800be68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be6a:	bf00      	nop
 800be6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be6e:	bc08      	pop	{r3}
 800be70:	469e      	mov	lr, r3
 800be72:	4770      	bx	lr

0800be74 <_fini>:
 800be74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be76:	bf00      	nop
 800be78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be7a:	bc08      	pop	{r3}
 800be7c:	469e      	mov	lr, r3
 800be7e:	4770      	bx	lr
