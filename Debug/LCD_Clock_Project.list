
LCD_Clock_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc9c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a6c  0800be7c  0800be7c  0001be7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d8e8  0800d8e8  00020190  2**0
                  CONTENTS
  4 .ARM          00000008  0800d8e8  0800d8e8  0001d8e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d8f0  0800d8f0  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d8f0  0800d8f0  0001d8f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d8f4  0800d8f4  0001d8f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  0800d8f8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cdc  20000190  0800da88  00020190  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000e6c  0800da88  00020e6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020963  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000046d6  00000000  00000000  00040b23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c48  00000000  00000000  00045200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a58  00000000  00000000  00046e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029ae0  00000000  00000000  000488a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025adc  00000000  00000000  00072380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed7b2  00000000  00000000  00097e5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018560e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000873c  00000000  00000000  00185660  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000190 	.word	0x20000190
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800be64 	.word	0x0800be64

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000194 	.word	0x20000194
 800021c:	0800be64 	.word	0x0800be64

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <strcmp>:
 8000230:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000234:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000238:	2a01      	cmp	r2, #1
 800023a:	bf28      	it	cs
 800023c:	429a      	cmpcs	r2, r3
 800023e:	d0f7      	beq.n	8000230 <strcmp>
 8000240:	1ad0      	subs	r0, r2, r3
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_ldivmod>:
 80002f0:	b97b      	cbnz	r3, 8000312 <__aeabi_ldivmod+0x22>
 80002f2:	b972      	cbnz	r2, 8000312 <__aeabi_ldivmod+0x22>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bfbe      	ittt	lt
 80002f8:	2000      	movlt	r0, #0
 80002fa:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80002fe:	e006      	blt.n	800030e <__aeabi_ldivmod+0x1e>
 8000300:	bf08      	it	eq
 8000302:	2800      	cmpeq	r0, #0
 8000304:	bf1c      	itt	ne
 8000306:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800030a:	f04f 30ff 	movne.w	r0, #4294967295
 800030e:	f000 b9bf 	b.w	8000690 <__aeabi_idiv0>
 8000312:	f1ad 0c08 	sub.w	ip, sp, #8
 8000316:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800031a:	2900      	cmp	r1, #0
 800031c:	db09      	blt.n	8000332 <__aeabi_ldivmod+0x42>
 800031e:	2b00      	cmp	r3, #0
 8000320:	db1a      	blt.n	8000358 <__aeabi_ldivmod+0x68>
 8000322:	f000 f84d 	bl	80003c0 <__udivmoddi4>
 8000326:	f8dd e004 	ldr.w	lr, [sp, #4]
 800032a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800032e:	b004      	add	sp, #16
 8000330:	4770      	bx	lr
 8000332:	4240      	negs	r0, r0
 8000334:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000338:	2b00      	cmp	r3, #0
 800033a:	db1b      	blt.n	8000374 <__aeabi_ldivmod+0x84>
 800033c:	f000 f840 	bl	80003c0 <__udivmoddi4>
 8000340:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000348:	b004      	add	sp, #16
 800034a:	4240      	negs	r0, r0
 800034c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000350:	4252      	negs	r2, r2
 8000352:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000356:	4770      	bx	lr
 8000358:	4252      	negs	r2, r2
 800035a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800035e:	f000 f82f 	bl	80003c0 <__udivmoddi4>
 8000362:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000366:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036a:	b004      	add	sp, #16
 800036c:	4240      	negs	r0, r0
 800036e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000372:	4770      	bx	lr
 8000374:	4252      	negs	r2, r2
 8000376:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037a:	f000 f821 	bl	80003c0 <__udivmoddi4>
 800037e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000382:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000386:	b004      	add	sp, #16
 8000388:	4252      	negs	r2, r2
 800038a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <init_PotentioMeter>:
//static float m_voltage;
static int a_hour_value;
static int t_minute_value;
static int t_second_value;

void init_PotentioMeter(ADC_HandleTypeDef* Poten){
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
	m_adci = Poten;
 800069c:	4a04      	ldr	r2, [pc, #16]	; (80006b0 <init_PotentioMeter+0x1c>)
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	6013      	str	r3, [r2, #0]
}
 80006a2:	bf00      	nop
 80006a4:	370c      	adds	r7, #12
 80006a6:	46bd      	mov	sp, r7
 80006a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	200001ac 	.word	0x200001ac

080006b4 <mapping_adc>:
int mapping_adc(int adc){
 80006b4:	b480      	push	{r7}
 80006b6:	b085      	sub	sp, #20
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
	int map_adc = (adc<300)? 0:((adc-300)>3750)? 3750:(adc-300);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80006c2:	db08      	blt.n	80006d6 <mapping_adc+0x22>
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	f640 72d2 	movw	r2, #4050	; 0xfd2
 80006ca:	4293      	cmp	r3, r2
 80006cc:	bfa8      	it	ge
 80006ce:	4613      	movge	r3, r2
 80006d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80006d4:	e000      	b.n	80006d8 <mapping_adc+0x24>
 80006d6:	2300      	movs	r3, #0
 80006d8:	60fb      	str	r3, [r7, #12]
	return map_adc;
 80006da:	68fb      	ldr	r3, [r7, #12]
}
 80006dc:	4618      	mov	r0, r3
 80006de:	3714      	adds	r7, #20
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr

080006e8 <set_Hour>:
	m_adc_value = mapping_adc(HAL_ADC_GetValue(m_adci));
	a_hour_value = (int)(m_adc_value/CHECK_VALUE);
}


void set_Hour(){
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
	HAL_ADC_Start(m_adci);
 80006ec:	4b1b      	ldr	r3, [pc, #108]	; (800075c <set_Hour+0x74>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4618      	mov	r0, r3
 80006f2:	f003 fc73 	bl	8003fdc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(m_adci, 500);
 80006f6:	4b19      	ldr	r3, [pc, #100]	; (800075c <set_Hour+0x74>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80006fe:	4618      	mov	r0, r3
 8000700:	f003 fd3a 	bl	8004178 <HAL_ADC_PollForConversion>
	m_adc_value = mapping_adc(HAL_ADC_GetValue(m_adci));
 8000704:	4b15      	ldr	r3, [pc, #84]	; (800075c <set_Hour+0x74>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4618      	mov	r0, r3
 800070a:	f003 fdc0 	bl	800428e <HAL_ADC_GetValue>
 800070e:	4603      	mov	r3, r0
 8000710:	4618      	mov	r0, r3
 8000712:	f7ff ffcf 	bl	80006b4 <mapping_adc>
 8000716:	4603      	mov	r3, r0
 8000718:	b29a      	uxth	r2, r3
 800071a:	4b11      	ldr	r3, [pc, #68]	; (8000760 <set_Hour+0x78>)
 800071c:	801a      	strh	r2, [r3, #0]
	a_hour_value = (int)(m_adc_value/H_Clock_Convert);
 800071e:	4b10      	ldr	r3, [pc, #64]	; (8000760 <set_Hour+0x78>)
 8000720:	881b      	ldrh	r3, [r3, #0]
 8000722:	461a      	mov	r2, r3
 8000724:	4b0f      	ldr	r3, [pc, #60]	; (8000764 <set_Hour+0x7c>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	fb92 f3f3 	sdiv	r3, r2, r3
 800072c:	4a0e      	ldr	r2, [pc, #56]	; (8000768 <set_Hour+0x80>)
 800072e:	6013      	str	r3, [r2, #0]
	setnHour(a_hour_value);
 8000730:	4b0d      	ldr	r3, [pc, #52]	; (8000768 <set_Hour+0x80>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4618      	mov	r0, r3
 8000736:	f002 fa1f 	bl	8002b78 <setnHour>
	if(getMode() == 2){
 800073a:	f002 f96f 	bl	8002a1c <getMode>
 800073e:	4603      	mov	r3, r0
 8000740:	2b02      	cmp	r3, #2
 8000742:	d102      	bne.n	800074a <set_Hour+0x62>
		n_alarm_show();
 8000744:	f001 fa24 	bl	8001b90 <n_alarm_show>
	}else if(getMode() == 3){
		n_modify_show();
	}
}
 8000748:	e006      	b.n	8000758 <set_Hour+0x70>
	}else if(getMode() == 3){
 800074a:	f002 f967 	bl	8002a1c <getMode>
 800074e:	4603      	mov	r3, r0
 8000750:	2b03      	cmp	r3, #3
 8000752:	d101      	bne.n	8000758 <set_Hour+0x70>
		n_modify_show();
 8000754:	f001 fa34 	bl	8001bc0 <n_modify_show>
}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}
 800075c:	200001ac 	.word	0x200001ac
 8000760:	200001b0 	.word	0x200001b0
 8000764:	20000004 	.word	0x20000004
 8000768:	200001b4 	.word	0x200001b4

0800076c <set_Minute>:

void set_Minute(){
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
	HAL_ADC_Start(m_adci);
 8000770:	4b1f      	ldr	r3, [pc, #124]	; (80007f0 <set_Minute+0x84>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4618      	mov	r0, r3
 8000776:	f003 fc31 	bl	8003fdc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(m_adci, 500);
 800077a:	4b1d      	ldr	r3, [pc, #116]	; (80007f0 <set_Minute+0x84>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000782:	4618      	mov	r0, r3
 8000784:	f003 fcf8 	bl	8004178 <HAL_ADC_PollForConversion>
	m_adc_value = mapping_adc(HAL_ADC_GetValue(m_adci));
 8000788:	4b19      	ldr	r3, [pc, #100]	; (80007f0 <set_Minute+0x84>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4618      	mov	r0, r3
 800078e:	f003 fd7e 	bl	800428e <HAL_ADC_GetValue>
 8000792:	4603      	mov	r3, r0
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff ff8d 	bl	80006b4 <mapping_adc>
 800079a:	4603      	mov	r3, r0
 800079c:	b29a      	uxth	r2, r3
 800079e:	4b15      	ldr	r3, [pc, #84]	; (80007f4 <set_Minute+0x88>)
 80007a0:	801a      	strh	r2, [r3, #0]
	t_minute_value = (int)(m_adc_value/M_Clock_Conver);
 80007a2:	4b14      	ldr	r3, [pc, #80]	; (80007f4 <set_Minute+0x88>)
 80007a4:	881b      	ldrh	r3, [r3, #0]
 80007a6:	461a      	mov	r2, r3
 80007a8:	4b13      	ldr	r3, [pc, #76]	; (80007f8 <set_Minute+0x8c>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	fb92 f3f3 	sdiv	r3, r2, r3
 80007b0:	4a12      	ldr	r2, [pc, #72]	; (80007fc <set_Minute+0x90>)
 80007b2:	6013      	str	r3, [r2, #0]
	setnMinute(t_minute_value);
 80007b4:	4b11      	ldr	r3, [pc, #68]	; (80007fc <set_Minute+0x90>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4618      	mov	r0, r3
 80007ba:	f002 f9fd 	bl	8002bb8 <setnMinute>
	if(getMode() == 1){
 80007be:	f002 f92d 	bl	8002a1c <getMode>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b01      	cmp	r3, #1
 80007c6:	d102      	bne.n	80007ce <set_Minute+0x62>
		n_timer_show();
 80007c8:	f001 f97e 	bl	8001ac8 <n_timer_show>
	}else if (getMode() == 2){
		n_alarm_show();
	}else if(getMode() == 3){
		n_modify_show();
	}
}
 80007cc:	e00e      	b.n	80007ec <set_Minute+0x80>
	}else if (getMode() == 2){
 80007ce:	f002 f925 	bl	8002a1c <getMode>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b02      	cmp	r3, #2
 80007d6:	d102      	bne.n	80007de <set_Minute+0x72>
		n_alarm_show();
 80007d8:	f001 f9da 	bl	8001b90 <n_alarm_show>
}
 80007dc:	e006      	b.n	80007ec <set_Minute+0x80>
	}else if(getMode() == 3){
 80007de:	f002 f91d 	bl	8002a1c <getMode>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b03      	cmp	r3, #3
 80007e6:	d101      	bne.n	80007ec <set_Minute+0x80>
		n_modify_show();
 80007e8:	f001 f9ea 	bl	8001bc0 <n_modify_show>
}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	200001ac 	.word	0x200001ac
 80007f4:	200001b0 	.word	0x200001b0
 80007f8:	20000000 	.word	0x20000000
 80007fc:	200001b8 	.word	0x200001b8

08000800 <set_Second>:

void set_Second(){
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
	HAL_ADC_Start(m_adci);
 8000804:	4b15      	ldr	r3, [pc, #84]	; (800085c <set_Second+0x5c>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4618      	mov	r0, r3
 800080a:	f003 fbe7 	bl	8003fdc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(m_adci, 500);
 800080e:	4b13      	ldr	r3, [pc, #76]	; (800085c <set_Second+0x5c>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000816:	4618      	mov	r0, r3
 8000818:	f003 fcae 	bl	8004178 <HAL_ADC_PollForConversion>
	m_adc_value = mapping_adc(HAL_ADC_GetValue(m_adci));
 800081c:	4b0f      	ldr	r3, [pc, #60]	; (800085c <set_Second+0x5c>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4618      	mov	r0, r3
 8000822:	f003 fd34 	bl	800428e <HAL_ADC_GetValue>
 8000826:	4603      	mov	r3, r0
 8000828:	4618      	mov	r0, r3
 800082a:	f7ff ff43 	bl	80006b4 <mapping_adc>
 800082e:	4603      	mov	r3, r0
 8000830:	b29a      	uxth	r2, r3
 8000832:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <set_Second+0x60>)
 8000834:	801a      	strh	r2, [r3, #0]
	t_second_value = (int)(m_adc_value/M_Clock_Conver);
 8000836:	4b0a      	ldr	r3, [pc, #40]	; (8000860 <set_Second+0x60>)
 8000838:	881b      	ldrh	r3, [r3, #0]
 800083a:	461a      	mov	r2, r3
 800083c:	4b09      	ldr	r3, [pc, #36]	; (8000864 <set_Second+0x64>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	fb92 f3f3 	sdiv	r3, r2, r3
 8000844:	4a08      	ldr	r2, [pc, #32]	; (8000868 <set_Second+0x68>)
 8000846:	6013      	str	r3, [r2, #0]
	setnSecond(t_second_value);
 8000848:	4b07      	ldr	r3, [pc, #28]	; (8000868 <set_Second+0x68>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4618      	mov	r0, r3
 800084e:	f002 f9cf 	bl	8002bf0 <setnSecond>
	n_timer_show();
 8000852:	f001 f939 	bl	8001ac8 <n_timer_show>
}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	200001ac 	.word	0x200001ac
 8000860:	200001b0 	.word	0x200001b0
 8000864:	20000000 	.word	0x20000000
 8000868:	200001bc 	.word	0x200001bc

0800086c <set_Calender>:

void set_Calender(int mode){
 800086c:	b590      	push	{r4, r7, lr}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(m_adci);
 8000874:	4b33      	ldr	r3, [pc, #204]	; (8000944 <set_Calender+0xd8>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4618      	mov	r0, r3
 800087a:	f003 fbaf 	bl	8003fdc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(m_adci, 500);
 800087e:	4b31      	ldr	r3, [pc, #196]	; (8000944 <set_Calender+0xd8>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000886:	4618      	mov	r0, r3
 8000888:	f003 fc76 	bl	8004178 <HAL_ADC_PollForConversion>
	m_adc_value = mapping_adc(HAL_ADC_GetValue(m_adci));
 800088c:	4b2d      	ldr	r3, [pc, #180]	; (8000944 <set_Calender+0xd8>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4618      	mov	r0, r3
 8000892:	f003 fcfc 	bl	800428e <HAL_ADC_GetValue>
 8000896:	4603      	mov	r3, r0
 8000898:	4618      	mov	r0, r3
 800089a:	f7ff ff0b 	bl	80006b4 <mapping_adc>
 800089e:	4603      	mov	r3, r0
 80008a0:	b29a      	uxth	r2, r3
 80008a2:	4b29      	ldr	r3, [pc, #164]	; (8000948 <set_Calender+0xdc>)
 80008a4:	801a      	strh	r2, [r3, #0]
	if(mode == 0){
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d10c      	bne.n	80008c6 <set_Calender+0x5a>
		//modify_Year
		setnYear((int)(m_adc_value/con_Calender[mode]));
 80008ac:	4b26      	ldr	r3, [pc, #152]	; (8000948 <set_Calender+0xdc>)
 80008ae:	881b      	ldrh	r3, [r3, #0]
 80008b0:	4619      	mov	r1, r3
 80008b2:	4a26      	ldr	r2, [pc, #152]	; (800094c <set_Calender+0xe0>)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008ba:	fb91 f3f3 	sdiv	r3, r1, r3
 80008be:	4618      	mov	r0, r3
 80008c0:	f002 f9b2 	bl	8002c28 <setnYear>
 80008c4:	e037      	b.n	8000936 <set_Calender+0xca>
	}else if(mode == 1){
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	2b01      	cmp	r3, #1
 80008ca:	d10c      	bne.n	80008e6 <set_Calender+0x7a>
		// modify Month
		setnMonth((int)(m_adc_value/con_Calender[mode]));
 80008cc:	4b1e      	ldr	r3, [pc, #120]	; (8000948 <set_Calender+0xdc>)
 80008ce:	881b      	ldrh	r3, [r3, #0]
 80008d0:	4619      	mov	r1, r3
 80008d2:	4a1e      	ldr	r2, [pc, #120]	; (800094c <set_Calender+0xe0>)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008da:	fb91 f3f3 	sdiv	r3, r1, r3
 80008de:	4618      	mov	r0, r3
 80008e0:	f002 f9be 	bl	8002c60 <setnMonth>
 80008e4:	e027      	b.n	8000936 <set_Calender+0xca>
	}
	else if(mode == 2){
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	2b02      	cmp	r3, #2
 80008ea:	d124      	bne.n	8000936 <set_Calender+0xca>
		//modify days( Year is leap year and Month is Feb, days Range is 0~29)
		if(getnYear()%4 == 0 && getnMonth() == 1){
 80008ec:	f002 f990 	bl	8002c10 <getnYear>
 80008f0:	4603      	mov	r3, r0
 80008f2:	f003 0303 	and.w	r3, r3, #3
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d10f      	bne.n	800091a <set_Calender+0xae>
 80008fa:	f002 f9a5 	bl	8002c48 <getnMonth>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b01      	cmp	r3, #1
 8000902:	d10a      	bne.n	800091a <set_Calender+0xae>
			setnDay((int)(m_adc_value/TWENINE));
 8000904:	4b10      	ldr	r3, [pc, #64]	; (8000948 <set_Calender+0xdc>)
 8000906:	881b      	ldrh	r3, [r3, #0]
 8000908:	4a11      	ldr	r2, [pc, #68]	; (8000950 <set_Calender+0xe4>)
 800090a:	fba2 2303 	umull	r2, r3, r2, r3
 800090e:	09db      	lsrs	r3, r3, #7
 8000910:	b29b      	uxth	r3, r3
 8000912:	4618      	mov	r0, r3
 8000914:	f002 f9c0 	bl	8002c98 <setnDay>
 8000918:	e00d      	b.n	8000936 <set_Calender+0xca>
		}else{
			setnDay((int)(m_adc_value/con_days[getnMonth()]));
 800091a:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <set_Calender+0xdc>)
 800091c:	881b      	ldrh	r3, [r3, #0]
 800091e:	461c      	mov	r4, r3
 8000920:	f002 f992 	bl	8002c48 <getnMonth>
 8000924:	4603      	mov	r3, r0
 8000926:	4a0b      	ldr	r2, [pc, #44]	; (8000954 <set_Calender+0xe8>)
 8000928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800092c:	fb94 f3f3 	sdiv	r3, r4, r3
 8000930:	4618      	mov	r0, r3
 8000932:	f002 f9b1 	bl	8002c98 <setnDay>
		}
	}
	n_modify_show();
 8000936:	f001 f943 	bl	8001bc0 <n_modify_show>
}
 800093a:	bf00      	nop
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	bd90      	pop	{r4, r7, pc}
 8000942:	bf00      	nop
 8000944:	200001ac 	.word	0x200001ac
 8000948:	200001b0 	.word	0x200001b0
 800094c:	20000008 	.word	0x20000008
 8000950:	f6603d99 	.word	0xf6603d99
 8000954:	20000010 	.word	0x20000010

08000958 <cal_Second>:


void cal_Second(){
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
	for(int i = 2; i>=0; i--){
 800095e:	2302      	movs	r3, #2
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	e016      	b.n	8000992 <cal_Second+0x3a>
		Timer_Second += timer_value[i] * cal_Seconds[i];
 8000964:	4a0f      	ldr	r2, [pc, #60]	; (80009a4 <cal_Second+0x4c>)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800096c:	490e      	ldr	r1, [pc, #56]	; (80009a8 <cal_Second+0x50>)
 800096e:	687a      	ldr	r2, [r7, #4]
 8000970:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000974:	fb03 f202 	mul.w	r2, r3, r2
 8000978:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <cal_Second+0x54>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4413      	add	r3, r2
 800097e:	4a0b      	ldr	r2, [pc, #44]	; (80009ac <cal_Second+0x54>)
 8000980:	6013      	str	r3, [r2, #0]
		timer_value[i] = 0 ;
 8000982:	4a08      	ldr	r2, [pc, #32]	; (80009a4 <cal_Second+0x4c>)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	2100      	movs	r1, #0
 8000988:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 2; i>=0; i--){
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	3b01      	subs	r3, #1
 8000990:	607b      	str	r3, [r7, #4]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	2b00      	cmp	r3, #0
 8000996:	dae5      	bge.n	8000964 <cal_Second+0xc>
	}
	update_timer();
 8000998:	f000 f80a 	bl	80009b0 <update_timer>
}
 800099c:	bf00      	nop
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	2000075c 	.word	0x2000075c
 80009a8:	20000040 	.word	0x20000040
 80009ac:	20000778 	.word	0x20000778

080009b0 <update_timer>:
void update_timer(){
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
	timer_value[1] = (int)Timer_Second/60;
 80009b4:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <update_timer+0x44>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a0f      	ldr	r2, [pc, #60]	; (80009f8 <update_timer+0x48>)
 80009ba:	fb82 1203 	smull	r1, r2, r2, r3
 80009be:	441a      	add	r2, r3
 80009c0:	1152      	asrs	r2, r2, #5
 80009c2:	17db      	asrs	r3, r3, #31
 80009c4:	1ad3      	subs	r3, r2, r3
 80009c6:	4a0d      	ldr	r2, [pc, #52]	; (80009fc <update_timer+0x4c>)
 80009c8:	6053      	str	r3, [r2, #4]
	timer_value[0] = (int)Timer_Second%60;
 80009ca:	4b0a      	ldr	r3, [pc, #40]	; (80009f4 <update_timer+0x44>)
 80009cc:	681a      	ldr	r2, [r3, #0]
 80009ce:	4b0a      	ldr	r3, [pc, #40]	; (80009f8 <update_timer+0x48>)
 80009d0:	fb83 1302 	smull	r1, r3, r3, r2
 80009d4:	4413      	add	r3, r2
 80009d6:	1159      	asrs	r1, r3, #5
 80009d8:	17d3      	asrs	r3, r2, #31
 80009da:	1ac9      	subs	r1, r1, r3
 80009dc:	460b      	mov	r3, r1
 80009de:	011b      	lsls	r3, r3, #4
 80009e0:	1a5b      	subs	r3, r3, r1
 80009e2:	009b      	lsls	r3, r3, #2
 80009e4:	1ad1      	subs	r1, r2, r3
 80009e6:	4b05      	ldr	r3, [pc, #20]	; (80009fc <update_timer+0x4c>)
 80009e8:	6019      	str	r1, [r3, #0]
}
 80009ea:	bf00      	nop
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr
 80009f4:	20000778 	.word	0x20000778
 80009f8:	88888889 	.word	0x88888889
 80009fc:	2000075c 	.word	0x2000075c

08000a00 <init_rtc>:
#define ALARM_FLAG RTC_BKP_DR5

static RTC_HandleTypeDef * r_hrtc;
static int c_state = -1;

void init_rtc(RTC_HandleTypeDef * hrtc){
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
	r_hrtc = hrtc;
 8000a08:	4a04      	ldr	r2, [pc, #16]	; (8000a1c <init_rtc+0x1c>)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	6013      	str	r3, [r2, #0]
}
 8000a0e:	bf00      	nop
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	200001c0 	.word	0x200001c0

08000a20 <check_RTC>:

int check_RTC(int mode){
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
	int What_mode = mode;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	60fb      	str	r3, [r7, #12]
	switch(What_mode){
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d003      	beq.n	8000a3a <check_RTC+0x1a>
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	2b02      	cmp	r3, #2
 8000a36:	d01e      	beq.n	8000a76 <check_RTC+0x56>
 8000a38:	e032      	b.n	8000aa0 <check_RTC+0x80>
	case 1:
		HAL_PWR_EnableBkUpAccess();
 8000a3a:	f004 fff3 	bl	8005a24 <HAL_PWR_EnableBkUpAccess>
		if(HAL_RTCEx_BKUPRead(r_hrtc, CALENDER_H) == 0 && HAL_RTCEx_BKUPRead(r_hrtc, CALENDER_L) == 0){
 8000a3e:	4b1b      	ldr	r3, [pc, #108]	; (8000aac <check_RTC+0x8c>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	2102      	movs	r1, #2
 8000a44:	4618      	mov	r0, r3
 8000a46:	f006 f996 	bl	8006d76 <HAL_RTCEx_BKUPRead>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d10c      	bne.n	8000a6a <check_RTC+0x4a>
 8000a50:	4b16      	ldr	r3, [pc, #88]	; (8000aac <check_RTC+0x8c>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	2101      	movs	r1, #1
 8000a56:	4618      	mov	r0, r3
 8000a58:	f006 f98d 	bl	8006d76 <HAL_RTCEx_BKUPRead>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d103      	bne.n	8000a6a <check_RTC+0x4a>
			c_state = 1;
 8000a62:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <check_RTC+0x90>)
 8000a64:	2201      	movs	r2, #1
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	e002      	b.n	8000a70 <check_RTC+0x50>
		}
		else{
			// 여기서 시간 업데이트가 필요해 보여 아니면 RTC 쪽으로 타이머를 조정하거나
			c_state = 0;
 8000a6a:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <check_RTC+0x90>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
		}
		HAL_PWR_DisableBkUpAccess();
 8000a70:	f004 ffe8 	bl	8005a44 <HAL_PWR_DisableBkUpAccess>
		break;
 8000a74:	e014      	b.n	8000aa0 <check_RTC+0x80>

	case 2:
		HAL_PWR_EnableBkUpAccess();
 8000a76:	f004 ffd5 	bl	8005a24 <HAL_PWR_EnableBkUpAccess>
		if(HAL_RTCEx_BKUPRead(r_hrtc, ALARM_FLAG) == 0){
 8000a7a:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <check_RTC+0x8c>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	2105      	movs	r1, #5
 8000a80:	4618      	mov	r0, r3
 8000a82:	f006 f978 	bl	8006d76 <HAL_RTCEx_BKUPRead>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d103      	bne.n	8000a94 <check_RTC+0x74>
			c_state = 1;
 8000a8c:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <check_RTC+0x90>)
 8000a8e:	2201      	movs	r2, #1
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	e002      	b.n	8000a9a <check_RTC+0x7a>
		}
		else{
			c_state = 0;
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <check_RTC+0x90>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
		}
		HAL_PWR_DisableBkUpAccess();
 8000a9a:	f004 ffd3 	bl	8005a44 <HAL_PWR_DisableBkUpAccess>
		break;
 8000a9e:	bf00      	nop

	}
	return c_state;
 8000aa0:	4b03      	ldr	r3, [pc, #12]	; (8000ab0 <check_RTC+0x90>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3710      	adds	r7, #16
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	200001c0 	.word	0x200001c0
 8000ab0:	2000004c 	.word	0x2000004c

08000ab4 <get_Alarm>:
void get_Alarm(){
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
	if (check_RTC(2) == 0){
 8000aba:	2002      	movs	r0, #2
 8000abc:	f7ff ffb0 	bl	8000a20 <check_RTC>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d127      	bne.n	8000b16 <get_Alarm+0x62>
		HAL_PWR_EnableBkUpAccess();
 8000ac6:	f004 ffad 	bl	8005a24 <HAL_PWR_EnableBkUpAccess>
		int hour = HAL_RTCEx_BKUPRead(r_hrtc, ALARM_HOUR);
 8000aca:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <get_Alarm+0x6c>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	2103      	movs	r1, #3
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f006 f950 	bl	8006d76 <HAL_RTCEx_BKUPRead>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	60fb      	str	r3, [r7, #12]
		int minute = HAL_RTCEx_BKUPRead(r_hrtc, ALARM_MIN);
 8000ada:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <get_Alarm+0x6c>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	2104      	movs	r1, #4
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f006 f948 	bl	8006d76 <HAL_RTCEx_BKUPRead>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	60bb      	str	r3, [r7, #8]
		int alert_mode = HAL_RTCEx_BKUPRead(r_hrtc, ALARM_FLAG);
 8000aea:	4b0d      	ldr	r3, [pc, #52]	; (8000b20 <get_Alarm+0x6c>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	2105      	movs	r1, #5
 8000af0:	4618      	mov	r0, r3
 8000af2:	f006 f940 	bl	8006d76 <HAL_RTCEx_BKUPRead>
 8000af6:	4603      	mov	r3, r0
 8000af8:	607b      	str	r3, [r7, #4]
		alarm_value[2] = hour;
 8000afa:	4a0a      	ldr	r2, [pc, #40]	; (8000b24 <get_Alarm+0x70>)
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	6093      	str	r3, [r2, #8]
		alarm_value[1] = minute;
 8000b00:	4a08      	ldr	r2, [pc, #32]	; (8000b24 <get_Alarm+0x70>)
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	6053      	str	r3, [r2, #4]
		alarm_value[0] = 0;
 8000b06:	4b07      	ldr	r3, [pc, #28]	; (8000b24 <get_Alarm+0x70>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
		setAlarmState(alert_mode);
 8000b0c:	6878      	ldr	r0, [r7, #4]
 8000b0e:	f001 ffc9 	bl	8002aa4 <setAlarmState>
		HAL_PWR_DisableBkUpAccess();
 8000b12:	f004 ff97 	bl	8005a44 <HAL_PWR_DisableBkUpAccess>
	}
}
 8000b16:	bf00      	nop
 8000b18:	3710      	adds	r7, #16
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	200001c0 	.word	0x200001c0
 8000b24:	20000768 	.word	0x20000768

08000b28 <set_Alarm>:
void set_Alarm(int Hour, int Min){
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	6039      	str	r1, [r7, #0]
	HAL_PWR_EnableBkUpAccess();
 8000b32:	f004 ff77 	bl	8005a24 <HAL_PWR_EnableBkUpAccess>
	HAL_RTCEx_BKUPWrite(r_hrtc, ALARM_HOUR, (uint32_t)Hour);
 8000b36:	4b0d      	ldr	r3, [pc, #52]	; (8000b6c <set_Alarm+0x44>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	2103      	movs	r1, #3
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f006 f8ff 	bl	8006d42 <HAL_RTCEx_BKUPWrite>
	HAL_RTCEx_BKUPWrite(r_hrtc, ALARM_MIN, (uint32_t)Min);
 8000b44:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <set_Alarm+0x44>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	683a      	ldr	r2, [r7, #0]
 8000b4a:	2104      	movs	r1, #4
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f006 f8f8 	bl	8006d42 <HAL_RTCEx_BKUPWrite>
	HAL_RTCEx_BKUPWrite(r_hrtc, ALARM_FLAG, (uint32_t)1);
 8000b52:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <set_Alarm+0x44>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	2201      	movs	r2, #1
 8000b58:	2105      	movs	r1, #5
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f006 f8f1 	bl	8006d42 <HAL_RTCEx_BKUPWrite>
	HAL_PWR_DisableBkUpAccess();
 8000b60:	f004 ff70 	bl	8005a44 <HAL_PWR_DisableBkUpAccess>
}
 8000b64:	bf00      	nop
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	200001c0 	.word	0x200001c0

08000b70 <BackupTimeToRTC>:

void BackupTimeToRTC(time_t currentTime) {
 8000b70:	b590      	push	{r4, r7, lr}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	e9c7 0100 	strd	r0, r1, [r7]
	HAL_PWR_EnableBkUpAccess();
 8000b7a:	f004 ff53 	bl	8005a24 <HAL_PWR_EnableBkUpAccess>
    // 하위 32비트를 RTC 백업 레지스터에 저장
    HAL_RTCEx_BKUPWrite(r_hrtc, RTC_BKP_DR1, (uint32_t)(currentTime & 0xFFFFFFFF));
 8000b7e:	4b0e      	ldr	r3, [pc, #56]	; (8000bb8 <BackupTimeToRTC+0x48>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	683a      	ldr	r2, [r7, #0]
 8000b84:	2101      	movs	r1, #1
 8000b86:	4618      	mov	r0, r3
 8000b88:	f006 f8db 	bl	8006d42 <HAL_RTCEx_BKUPWrite>
    // 상위 32비트를 RTC 백업 레지스터에 저장
    HAL_RTCEx_BKUPWrite(r_hrtc, RTC_BKP_DR2, (uint32_t)((currentTime >> 32) & 0xFFFFFFFF));
 8000b8c:	4b0a      	ldr	r3, [pc, #40]	; (8000bb8 <BackupTimeToRTC+0x48>)
 8000b8e:	681c      	ldr	r4, [r3, #0]
 8000b90:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000b94:	f04f 0200 	mov.w	r2, #0
 8000b98:	f04f 0300 	mov.w	r3, #0
 8000b9c:	000a      	movs	r2, r1
 8000b9e:	17cb      	asrs	r3, r1, #31
 8000ba0:	4613      	mov	r3, r2
 8000ba2:	461a      	mov	r2, r3
 8000ba4:	2102      	movs	r1, #2
 8000ba6:	4620      	mov	r0, r4
 8000ba8:	f006 f8cb 	bl	8006d42 <HAL_RTCEx_BKUPWrite>
    HAL_PWR_DisableBkUpAccess();
 8000bac:	f004 ff4a 	bl	8005a44 <HAL_PWR_DisableBkUpAccess>
}
 8000bb0:	bf00      	nop
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd90      	pop	{r4, r7, pc}
 8000bb8:	200001c0 	.word	0x200001c0

08000bbc <RestoreTimeFromRTC>:

time_t RestoreTimeFromRTC() {
 8000bbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000bc0:	b082      	sub	sp, #8
 8000bc2:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess();
 8000bc4:	f004 ff2e 	bl	8005a24 <HAL_PWR_EnableBkUpAccess>
    // 하위 32비트를 RTC 백업 레지스터에서 읽음
    uint32_t low = HAL_RTCEx_BKUPRead(r_hrtc, RTC_BKP_DR1);
 8000bc8:	4b14      	ldr	r3, [pc, #80]	; (8000c1c <RestoreTimeFromRTC+0x60>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2101      	movs	r1, #1
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f006 f8d1 	bl	8006d76 <HAL_RTCEx_BKUPRead>
 8000bd4:	6078      	str	r0, [r7, #4]
    // 상위 32비트를 RTC 백업 레지스터에서 읽음
    uint32_t high = HAL_RTCEx_BKUPRead(r_hrtc, RTC_BKP_DR2);
 8000bd6:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <RestoreTimeFromRTC+0x60>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	2102      	movs	r1, #2
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f006 f8ca 	bl	8006d76 <HAL_RTCEx_BKUPRead>
 8000be2:	6038      	str	r0, [r7, #0]
    HAL_PWR_DisableBkUpAccess();
 8000be4:	f004 ff2e 	bl	8005a44 <HAL_PWR_DisableBkUpAccess>
    // 상위 32비트를 왼쪽으로 32비트 이동한 후, 하위 32비트와 결합하여 64비트 데이터로 복원
    return ((time_t)high << 32) | low;
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	2200      	movs	r2, #0
 8000bec:	469a      	mov	sl, r3
 8000bee:	4693      	mov	fp, r2
 8000bf0:	f04f 0200 	mov.w	r2, #0
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	4653      	mov	r3, sl
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	6879      	ldr	r1, [r7, #4]
 8000bfe:	2000      	movs	r0, #0
 8000c00:	460c      	mov	r4, r1
 8000c02:	4605      	mov	r5, r0
 8000c04:	ea42 0804 	orr.w	r8, r2, r4
 8000c08:	ea43 0905 	orr.w	r9, r3, r5
 8000c0c:	4642      	mov	r2, r8
 8000c0e:	464b      	mov	r3, r9
}
 8000c10:	4610      	mov	r0, r2
 8000c12:	4619      	mov	r1, r3
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000c1c:	200001c0 	.word	0x200001c0

08000c20 <main_Check>:
static int Pos = 0;
static int B_mode = 100;
static int now_mode;
static int Boozer_mode;

void main_Check(){
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
	int mode = getMode();
 8000c26:	f001 fef9 	bl	8002a1c <getMode>
 8000c2a:	6078      	str	r0, [r7, #4]
	if(B_mode != mode){
 8000c2c:	4b3a      	ldr	r3, [pc, #232]	; (8000d18 <main_Check+0xf8>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	687a      	ldr	r2, [r7, #4]
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d004      	beq.n	8000c40 <main_Check+0x20>
		toggleScreen();
 8000c36:	f000 fe53 	bl	80018e0 <toggleScreen>
		B_mode = mode;
 8000c3a:	4a37      	ldr	r2, [pc, #220]	; (8000d18 <main_Check+0xf8>)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6013      	str	r3, [r2, #0]
	}
	// timer가 완료되면 가장 우선순위로 실행되게 해야함
	if(getTimerCompleted() || getAlarmCompleted()){
 8000c40:	f001 ff40 	bl	8002ac4 <getTimerCompleted>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d104      	bne.n	8000c54 <main_Check+0x34>
 8000c4a:	f001 ff57 	bl	8002afc <getAlarmCompleted>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d031      	beq.n	8000cb8 <main_Check+0x98>
		Boozer_mode = getTimerCompleted() == 1 ? 1:(getAlarmCompleted())? 2:0;
 8000c54:	f001 ff36 	bl	8002ac4 <getTimerCompleted>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b01      	cmp	r3, #1
 8000c5c:	d008      	beq.n	8000c70 <main_Check+0x50>
 8000c5e:	f001 ff4d 	bl	8002afc <getAlarmCompleted>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <main_Check+0x4c>
 8000c68:	2302      	movs	r3, #2
 8000c6a:	e002      	b.n	8000c72 <main_Check+0x52>
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	e000      	b.n	8000c72 <main_Check+0x52>
 8000c70:	2301      	movs	r3, #1
 8000c72:	4a2a      	ldr	r2, [pc, #168]	; (8000d1c <main_Check+0xfc>)
 8000c74:	6013      	str	r3, [r2, #0]
		// mode == 1 (Timer Lcd and Event), mode == 2 (Alarm LCd and Event)
		if(Boozer_mode == 1){
 8000c76:	4b29      	ldr	r3, [pc, #164]	; (8000d1c <main_Check+0xfc>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	2b01      	cmp	r3, #1
 8000c7c:	d102      	bne.n	8000c84 <main_Check+0x64>
			timer_lcd();
 8000c7e:	f000 fee5 	bl	8001a4c <timer_lcd>
 8000c82:	e001      	b.n	8000c88 <main_Check+0x68>
		}
		else{
			alarm_lcd();
 8000c84:	f001 f8f0 	bl	8001e68 <alarm_lcd>
		}
		if(cancel_btn){
 8000c88:	4b25      	ldr	r3, [pc, #148]	; (8000d20 <main_Check+0x100>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d026      	beq.n	8000cde <main_Check+0xbe>
			cancel_btn = 0;
 8000c90:	4b23      	ldr	r3, [pc, #140]	; (8000d20 <main_Check+0x100>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	701a      	strb	r2, [r3, #0]
			end_Boozer(Boozer_mode);
 8000c96:	4b21      	ldr	r3, [pc, #132]	; (8000d1c <main_Check+0xfc>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f002 f84a 	bl	8002d34 <end_Boozer>
			setCompleted(Boozer_mode);
 8000ca0:	4b1e      	ldr	r3, [pc, #120]	; (8000d1c <main_Check+0xfc>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f001 ff45 	bl	8002b34 <setCompleted>
			setMode(-1);
 8000caa:	f04f 30ff 	mov.w	r0, #4294967295
 8000cae:	f001 fec1 	bl	8002a34 <setMode>
			toggleScreen();
 8000cb2:	f000 fe15 	bl	80018e0 <toggleScreen>
		if(cancel_btn){
 8000cb6:	e012      	b.n	8000cde <main_Check+0xbe>
		}
	}
	else if(mode < 0){
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	da02      	bge.n	8000cc4 <main_Check+0xa4>
		printDefault();
 8000cbe:	f000 fc31 	bl	8001524 <printDefault>
 8000cc2:	e00c      	b.n	8000cde <main_Check+0xbe>
	}
	else if (mode >= 1){
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	dd02      	ble.n	8000cd0 <main_Check+0xb0>
		sub_Menu();
 8000cca:	f000 f88f 	bl	8000dec <sub_Menu>
 8000cce:	e006      	b.n	8000cde <main_Check+0xbe>
	}else if (mode == 0){
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d103      	bne.n	8000cde <main_Check+0xbe>
		sel_Pos_control();
 8000cd6:	f000 f827 	bl	8000d28 <sel_Pos_control>
		menuSelect();
 8000cda:	f000 fe07 	bl	80018ec <menuSelect>
	}
	if(cancel_btn){
 8000cde:	4b10      	ldr	r3, [pc, #64]	; (8000d20 <main_Check+0x100>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d013      	beq.n	8000d0e <main_Check+0xee>
		cancel_btn = 0;
 8000ce6:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <main_Check+0x100>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	701a      	strb	r2, [r3, #0]
		//if SubMenu or Normal Mode, Return to MenuSelect
//		if((getMode()>0) || (getMode() < 0)){
//			setMode(0);
//			Pos = 0;
//		}
		if(mode < 0){
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	da06      	bge.n	8000d00 <main_Check+0xe0>
			setMode(0);
 8000cf2:	2000      	movs	r0, #0
 8000cf4:	f001 fe9e 	bl	8002a34 <setMode>
			Pos = 0;
 8000cf8:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <main_Check+0x104>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
		// if MenuSelect Mode, return to Normal Mode
		else if (mode == 0){
			setMode(-1);
		}
	}
}
 8000cfe:	e006      	b.n	8000d0e <main_Check+0xee>
		else if (mode == 0){
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d103      	bne.n	8000d0e <main_Check+0xee>
			setMode(-1);
 8000d06:	f04f 30ff 	mov.w	r0, #4294967295
 8000d0a:	f001 fe93 	bl	8002a34 <setMode>
}
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20000050 	.word	0x20000050
 8000d1c:	200001cc 	.word	0x200001cc
 8000d20:	20000758 	.word	0x20000758
 8000d24:	200001c4 	.word	0x200001c4

08000d28 <sel_Pos_control>:


void sel_Pos_control(){
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
	if(up_btn){
 8000d2c:	4b2a      	ldr	r3, [pc, #168]	; (8000dd8 <sel_Pos_control+0xb0>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d014      	beq.n	8000d5e <sel_Pos_control+0x36>
		up_btn = 0;
 8000d34:	4b28      	ldr	r3, [pc, #160]	; (8000dd8 <sel_Pos_control+0xb0>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	701a      	strb	r2, [r3, #0]
		Pos = getPos()-1;
 8000d3a:	f001 ffbd 	bl	8002cb8 <getPos>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	3b01      	subs	r3, #1
 8000d42:	4a26      	ldr	r2, [pc, #152]	; (8000ddc <sel_Pos_control+0xb4>)
 8000d44:	6013      	str	r3, [r2, #0]
		if(Pos <0){
 8000d46:	4b25      	ldr	r3, [pc, #148]	; (8000ddc <sel_Pos_control+0xb4>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	da02      	bge.n	8000d54 <sel_Pos_control+0x2c>
			Pos = 2;
 8000d4e:	4b23      	ldr	r3, [pc, #140]	; (8000ddc <sel_Pos_control+0xb4>)
 8000d50:	2202      	movs	r2, #2
 8000d52:	601a      	str	r2, [r3, #0]
		}
		setPos(Pos);
 8000d54:	4b21      	ldr	r3, [pc, #132]	; (8000ddc <sel_Pos_control+0xb4>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f001 ffb9 	bl	8002cd0 <setPos>
	}
	if(down_btn){
 8000d5e:	4b20      	ldr	r3, [pc, #128]	; (8000de0 <sel_Pos_control+0xb8>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d014      	beq.n	8000d90 <sel_Pos_control+0x68>
		down_btn = 0;
 8000d66:	4b1e      	ldr	r3, [pc, #120]	; (8000de0 <sel_Pos_control+0xb8>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	701a      	strb	r2, [r3, #0]
		Pos = getPos()+1;
 8000d6c:	f001 ffa4 	bl	8002cb8 <getPos>
 8000d70:	4603      	mov	r3, r0
 8000d72:	3301      	adds	r3, #1
 8000d74:	4a19      	ldr	r2, [pc, #100]	; (8000ddc <sel_Pos_control+0xb4>)
 8000d76:	6013      	str	r3, [r2, #0]
		if(Pos >2){
 8000d78:	4b18      	ldr	r3, [pc, #96]	; (8000ddc <sel_Pos_control+0xb4>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2b02      	cmp	r3, #2
 8000d7e:	dd02      	ble.n	8000d86 <sel_Pos_control+0x5e>
			Pos=0;
 8000d80:	4b16      	ldr	r3, [pc, #88]	; (8000ddc <sel_Pos_control+0xb4>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
		}
		setPos(Pos);
 8000d86:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <sel_Pos_control+0xb4>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f001 ffa0 	bl	8002cd0 <setPos>
	}
	if(select_btn){
 8000d90:	4b14      	ldr	r3, [pc, #80]	; (8000de4 <sel_Pos_control+0xbc>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d01d      	beq.n	8000dd4 <sel_Pos_control+0xac>
		select_btn = 0;
 8000d98:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <sel_Pos_control+0xbc>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	701a      	strb	r2, [r3, #0]
		now_mode = getMode()+Pos+1;
 8000d9e:	f001 fe3d 	bl	8002a1c <getMode>
 8000da2:	4602      	mov	r2, r0
 8000da4:	4b0d      	ldr	r3, [pc, #52]	; (8000ddc <sel_Pos_control+0xb4>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4413      	add	r3, r2
 8000daa:	3301      	adds	r3, #1
 8000dac:	4a0e      	ldr	r2, [pc, #56]	; (8000de8 <sel_Pos_control+0xc0>)
 8000dae:	6013      	str	r3, [r2, #0]
		setMode(getMode()+Pos+1);
 8000db0:	f001 fe34 	bl	8002a1c <getMode>
 8000db4:	4602      	mov	r2, r0
 8000db6:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <sel_Pos_control+0xb4>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4413      	add	r3, r2
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f001 fe38 	bl	8002a34 <setMode>
		setPos(0);
 8000dc4:	2000      	movs	r0, #0
 8000dc6:	f001 ff83 	bl	8002cd0 <setPos>
		judge_timer();
 8000dca:	f000 f82b 	bl	8000e24 <judge_timer>
		HAL_Delay(100);
 8000dce:	2064      	movs	r0, #100	; 0x64
 8000dd0:	f003 f89c 	bl	8003f0c <HAL_Delay>
	}
}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	20000759 	.word	0x20000759
 8000ddc:	200001c4 	.word	0x200001c4
 8000de0:	2000075a 	.word	0x2000075a
 8000de4:	2000075b 	.word	0x2000075b
 8000de8:	200001c8 	.word	0x200001c8

08000dec <sub_Menu>:

void sub_Menu(){
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
	if(getMode() >2){
 8000df0:	f001 fe14 	bl	8002a1c <getMode>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b02      	cmp	r3, #2
 8000df8:	dd02      	ble.n	8000e00 <sub_Menu+0x14>
		modify_Process();
 8000dfa:	f001 fd1d 	bl	8002838 <modify_Process>
	else if (getMode() >1){
		alarm_Process();
	}else if(getMode() >0){
		timer_Process();
	}
}
 8000dfe:	e00e      	b.n	8000e1e <sub_Menu+0x32>
	else if (getMode() >1){
 8000e00:	f001 fe0c 	bl	8002a1c <getMode>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	dd02      	ble.n	8000e10 <sub_Menu+0x24>
		alarm_Process();
 8000e0a:	f001 fcdf 	bl	80027cc <alarm_Process>
}
 8000e0e:	e006      	b.n	8000e1e <sub_Menu+0x32>
	}else if(getMode() >0){
 8000e10:	f001 fe04 	bl	8002a1c <getMode>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	dd01      	ble.n	8000e1e <sub_Menu+0x32>
		timer_Process();
 8000e1a:	f001 fcbd 	bl	8002798 <timer_Process>
}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
	...

08000e24 <judge_timer>:

void judge_timer(){
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
	if(getTimerState() && getMode()==1){
 8000e28:	f001 fe14 	bl	8002a54 <getTimerState>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d00f      	beq.n	8000e52 <judge_timer+0x2e>
 8000e32:	f001 fdf3 	bl	8002a1c <getMode>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d10a      	bne.n	8000e52 <judge_timer+0x2e>
		// 타이머가 취소되었다는 LCD를 띄우고 clear
		timer_cancle_lcd();
 8000e3c:	f000 fdd0 	bl	80019e0 <timer_cancle_lcd>
		setTimerState(0);
 8000e40:	2000      	movs	r0, #0
 8000e42:	f001 fe13 	bl	8002a6c <setTimerState>
		setMode(0);
 8000e46:	2000      	movs	r0, #0
 8000e48:	f001 fdf4 	bl	8002a34 <setMode>
		Timer_Second = 0;
 8000e4c:	4b02      	ldr	r3, [pc, #8]	; (8000e58 <judge_timer+0x34>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
	}
}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20000778 	.word	0x20000778

08000e5c <init_dht11>:
static uint16_t mTime1 = 0, mTime2 = 0, mBit = 0;
static uint8_t humVal = 0, tempVal = 0, parityVal = 0, genParity = 0;
static uint8_t mData[40];


void init_dht11( TIM_HandleTypeDef *htim, GPIO_TypeDef* port, uint16_t pin){
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	60b9      	str	r1, [r7, #8]
 8000e66:	4613      	mov	r3, r2
 8000e68:	80fb      	strh	r3, [r7, #6]
	dhttemperSensor.htim = htim;
 8000e6a:	4a09      	ldr	r2, [pc, #36]	; (8000e90 <init_dht11+0x34>)
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	6093      	str	r3, [r2, #8]
	dhttemperSensor.port = port;
 8000e70:	4a07      	ldr	r2, [pc, #28]	; (8000e90 <init_dht11+0x34>)
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	6013      	str	r3, [r2, #0]
	dhttemperSensor.pin = pin;
 8000e76:	4a06      	ldr	r2, [pc, #24]	; (8000e90 <init_dht11+0x34>)
 8000e78:	88fb      	ldrh	r3, [r7, #6]
 8000e7a:	8093      	strh	r3, [r2, #4]
	d_init =1;
 8000e7c:	4b05      	ldr	r3, [pc, #20]	; (8000e94 <init_dht11+0x38>)
 8000e7e:	2201      	movs	r2, #1
 8000e80:	701a      	strb	r2, [r3, #0]
}
 8000e82:	bf00      	nop
 8000e84:	3714      	adds	r7, #20
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	200001d0 	.word	0x200001d0
 8000e94:	200001e0 	.word	0x200001e0

08000e98 <set_dht11_gpio_mode>:
//	  HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
//	}
//}

void set_dht11_gpio_mode( uint8_t pMode)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b088      	sub	sp, #32
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	71fb      	strb	r3, [r7, #7]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea2:	f107 030c 	add.w	r3, r7, #12
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	605a      	str	r2, [r3, #4]
 8000eac:	609a      	str	r2, [r3, #8]
 8000eae:	60da      	str	r2, [r3, #12]
 8000eb0:	611a      	str	r2, [r3, #16]

	if(pMode == OUTPUT)
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d111      	bne.n	8000edc <set_dht11_gpio_mode+0x44>
	{
	  GPIO_InitStruct.Pin = dhttemperSensor.pin;
 8000eb8:	4b14      	ldr	r3, [pc, #80]	; (8000f0c <set_dht11_gpio_mode+0x74>)
 8000eba:	889b      	ldrh	r3, [r3, #4]
 8000ebc:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(dhttemperSensor.port, &GPIO_InitStruct);
 8000eca:	4b10      	ldr	r3, [pc, #64]	; (8000f0c <set_dht11_gpio_mode+0x74>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f107 020c 	add.w	r2, r7, #12
 8000ed2:	4611      	mov	r1, r2
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f003 fd49 	bl	800496c <HAL_GPIO_Init>
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
	  HAL_GPIO_Init(dhttemperSensor.port, &GPIO_InitStruct);
	}
}
 8000eda:	e013      	b.n	8000f04 <set_dht11_gpio_mode+0x6c>
	}else if(pMode == INPUT)
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d110      	bne.n	8000f04 <set_dht11_gpio_mode+0x6c>
	  GPIO_InitStruct.Pin = dhttemperSensor.pin;
 8000ee2:	4b0a      	ldr	r3, [pc, #40]	; (8000f0c <set_dht11_gpio_mode+0x74>)
 8000ee4:	889b      	ldrh	r3, [r3, #4]
 8000ee6:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(dhttemperSensor.port, &GPIO_InitStruct);
 8000ef4:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <set_dht11_gpio_mode+0x74>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f107 020c 	add.w	r2, r7, #12
 8000efc:	4611      	mov	r1, r2
 8000efe:	4618      	mov	r0, r3
 8000f00:	f003 fd34 	bl	800496c <HAL_GPIO_Init>
}
 8000f04:	bf00      	nop
 8000f06:	3720      	adds	r7, #32
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	200001d0 	.word	0x200001d0

08000f10 <readDHT11>:
 * @brief reads dht11 value
 * @param dht struct for dht11
 * @return 1 if read ok 0 if something wrong in read
 */
uint8_t readDHT11()
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
//	uint16_t mTime1 = 0, mTime2 = 0, mBit = 0;
//	uint8_t humVal = 0, tempVal = 0, parityVal = 0, genParity = 0;
//	uint8_t mData[40];

	//start comm
	set_dht11_gpio_mode(OUTPUT);			//set pin direction as input
 8000f16:	2001      	movs	r0, #1
 8000f18:	f7ff ffbe 	bl	8000e98 <set_dht11_gpio_mode>
	HAL_GPIO_WritePin(dhttemperSensor.port, dhttemperSensor.pin, GPIO_PIN_RESET);
 8000f1c:	4b8c      	ldr	r3, [pc, #560]	; (8001150 <readDHT11+0x240>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a8b      	ldr	r2, [pc, #556]	; (8001150 <readDHT11+0x240>)
 8000f22:	8891      	ldrh	r1, [r2, #4]
 8000f24:	2200      	movs	r2, #0
 8000f26:	4618      	mov	r0, r3
 8000f28:	f003 fed4 	bl	8004cd4 <HAL_GPIO_WritePin>
	HAL_Delay(18);					//wait 18 ms in Low state
 8000f2c:	2012      	movs	r0, #18
 8000f2e:	f002 ffed 	bl	8003f0c <HAL_Delay>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f32:	b672      	cpsid	i
}
 8000f34:	bf00      	nop
	__disable_irq();	//disable all interupts to do only read dht otherwise miss timer
	HAL_TIM_Base_Start(dhttemperSensor.htim); //start timer
 8000f36:	4b86      	ldr	r3, [pc, #536]	; (8001150 <readDHT11+0x240>)
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f005 ff8a 	bl	8006e54 <HAL_TIM_Base_Start>
	set_dht11_gpio_mode(INPUT);
 8000f40:	2000      	movs	r0, #0
 8000f42:	f7ff ffa9 	bl	8000e98 <set_dht11_gpio_mode>

	//check dht answer
	__HAL_TIM_SET_COUNTER(dhttemperSensor.htim, 0);				//set timer counter to zero
 8000f46:	4b82      	ldr	r3, [pc, #520]	; (8001150 <readDHT11+0x240>)
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	625a      	str	r2, [r3, #36]	; 0x24
	while(HAL_GPIO_ReadPin(dhttemperSensor.port, dhttemperSensor.pin) == GPIO_PIN_SET){
 8000f50:	e00b      	b.n	8000f6a <readDHT11+0x5a>
		if((uint16_t)__HAL_TIM_GET_COUNTER(dhttemperSensor.htim) > 500){
 8000f52:	4b7f      	ldr	r3, [pc, #508]	; (8001150 <readDHT11+0x240>)
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000f60:	d903      	bls.n	8000f6a <readDHT11+0x5a>
  __ASM volatile ("cpsie i" : : : "memory");
 8000f62:	b662      	cpsie	i
}
 8000f64:	bf00      	nop
			__enable_irq();
			return 0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	e150      	b.n	800120c <readDHT11+0x2fc>
	while(HAL_GPIO_ReadPin(dhttemperSensor.port, dhttemperSensor.pin) == GPIO_PIN_SET){
 8000f6a:	4b79      	ldr	r3, [pc, #484]	; (8001150 <readDHT11+0x240>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a78      	ldr	r2, [pc, #480]	; (8001150 <readDHT11+0x240>)
 8000f70:	8892      	ldrh	r2, [r2, #4]
 8000f72:	4611      	mov	r1, r2
 8000f74:	4618      	mov	r0, r3
 8000f76:	f003 fe95 	bl	8004ca4 <HAL_GPIO_ReadPin>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d0e8      	beq.n	8000f52 <readDHT11+0x42>
		}
	}
	__HAL_TIM_SET_COUNTER(dhttemperSensor.htim, 0);
 8000f80:	4b73      	ldr	r3, [pc, #460]	; (8001150 <readDHT11+0x240>)
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2200      	movs	r2, #0
 8000f88:	625a      	str	r2, [r3, #36]	; 0x24
	while(HAL_GPIO_ReadPin(dhttemperSensor.port, dhttemperSensor.pin) == GPIO_PIN_RESET){
 8000f8a:	e00b      	b.n	8000fa4 <readDHT11+0x94>
		if((uint16_t)__HAL_TIM_GET_COUNTER(dhttemperSensor.htim) > 500){
 8000f8c:	4b70      	ldr	r3, [pc, #448]	; (8001150 <readDHT11+0x240>)
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f94:	b29b      	uxth	r3, r3
 8000f96:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000f9a:	d903      	bls.n	8000fa4 <readDHT11+0x94>
  __ASM volatile ("cpsie i" : : : "memory");
 8000f9c:	b662      	cpsie	i
}
 8000f9e:	bf00      	nop
			__enable_irq();
			return 0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	e133      	b.n	800120c <readDHT11+0x2fc>
	while(HAL_GPIO_ReadPin(dhttemperSensor.port, dhttemperSensor.pin) == GPIO_PIN_RESET){
 8000fa4:	4b6a      	ldr	r3, [pc, #424]	; (8001150 <readDHT11+0x240>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a69      	ldr	r2, [pc, #420]	; (8001150 <readDHT11+0x240>)
 8000faa:	8892      	ldrh	r2, [r2, #4]
 8000fac:	4611      	mov	r1, r2
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f003 fe78 	bl	8004ca4 <HAL_GPIO_ReadPin>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d0e8      	beq.n	8000f8c <readDHT11+0x7c>
		}
	}
	mTime1 = (uint16_t)__HAL_TIM_GET_COUNTER(dhttemperSensor.htim);
 8000fba:	4b65      	ldr	r3, [pc, #404]	; (8001150 <readDHT11+0x240>)
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fc2:	b29a      	uxth	r2, r3
 8000fc4:	4b63      	ldr	r3, [pc, #396]	; (8001154 <readDHT11+0x244>)
 8000fc6:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(dhttemperSensor.htim, 0);
 8000fc8:	4b61      	ldr	r3, [pc, #388]	; (8001150 <readDHT11+0x240>)
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	625a      	str	r2, [r3, #36]	; 0x24
	while(HAL_GPIO_ReadPin(dhttemperSensor.port, dhttemperSensor.pin) == GPIO_PIN_SET){
 8000fd2:	e00b      	b.n	8000fec <readDHT11+0xdc>
		if((uint16_t)__HAL_TIM_GET_COUNTER(dhttemperSensor.htim) > 500){
 8000fd4:	4b5e      	ldr	r3, [pc, #376]	; (8001150 <readDHT11+0x240>)
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000fe2:	d903      	bls.n	8000fec <readDHT11+0xdc>
  __ASM volatile ("cpsie i" : : : "memory");
 8000fe4:	b662      	cpsie	i
}
 8000fe6:	bf00      	nop
			__enable_irq();
			return 0;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	e10f      	b.n	800120c <readDHT11+0x2fc>
	while(HAL_GPIO_ReadPin(dhttemperSensor.port, dhttemperSensor.pin) == GPIO_PIN_SET){
 8000fec:	4b58      	ldr	r3, [pc, #352]	; (8001150 <readDHT11+0x240>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a57      	ldr	r2, [pc, #348]	; (8001150 <readDHT11+0x240>)
 8000ff2:	8892      	ldrh	r2, [r2, #4]
 8000ff4:	4611      	mov	r1, r2
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f003 fe54 	bl	8004ca4 <HAL_GPIO_ReadPin>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d0e8      	beq.n	8000fd4 <readDHT11+0xc4>
		}
	}
	mTime2 = (uint16_t)__HAL_TIM_GET_COUNTER(dhttemperSensor.htim);
 8001002:	4b53      	ldr	r3, [pc, #332]	; (8001150 <readDHT11+0x240>)
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800100a:	b29a      	uxth	r2, r3
 800100c:	4b52      	ldr	r3, [pc, #328]	; (8001158 <readDHT11+0x248>)
 800100e:	801a      	strh	r2, [r3, #0]

	//if answer is wrong return
	if(mTime1 < 75 && mTime1 > 85 && mTime2 < 75 && mTime2 > 85)
 8001010:	4b50      	ldr	r3, [pc, #320]	; (8001154 <readDHT11+0x244>)
 8001012:	881b      	ldrh	r3, [r3, #0]
 8001014:	2b4a      	cmp	r3, #74	; 0x4a
 8001016:	d80f      	bhi.n	8001038 <readDHT11+0x128>
 8001018:	4b4e      	ldr	r3, [pc, #312]	; (8001154 <readDHT11+0x244>)
 800101a:	881b      	ldrh	r3, [r3, #0]
 800101c:	2b55      	cmp	r3, #85	; 0x55
 800101e:	d90b      	bls.n	8001038 <readDHT11+0x128>
 8001020:	4b4d      	ldr	r3, [pc, #308]	; (8001158 <readDHT11+0x248>)
 8001022:	881b      	ldrh	r3, [r3, #0]
 8001024:	2b4a      	cmp	r3, #74	; 0x4a
 8001026:	d807      	bhi.n	8001038 <readDHT11+0x128>
 8001028:	4b4b      	ldr	r3, [pc, #300]	; (8001158 <readDHT11+0x248>)
 800102a:	881b      	ldrh	r3, [r3, #0]
 800102c:	2b55      	cmp	r3, #85	; 0x55
 800102e:	d903      	bls.n	8001038 <readDHT11+0x128>
  __ASM volatile ("cpsie i" : : : "memory");
 8001030:	b662      	cpsie	i
}
 8001032:	bf00      	nop
	{
		__enable_irq();
		return 0;
 8001034:	2300      	movs	r3, #0
 8001036:	e0e9      	b.n	800120c <readDHT11+0x2fc>
	}

//	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
	for(int j = 0; j < 40; j++)
 8001038:	2300      	movs	r3, #0
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	e062      	b.n	8001104 <readDHT11+0x1f4>
	{
		__HAL_TIM_SET_COUNTER(dhttemperSensor.htim, 0);
 800103e:	4b44      	ldr	r3, [pc, #272]	; (8001150 <readDHT11+0x240>)
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2200      	movs	r2, #0
 8001046:	625a      	str	r2, [r3, #36]	; 0x24
		while(HAL_GPIO_ReadPin(dhttemperSensor.port, dhttemperSensor.pin) == GPIO_PIN_RESET){
 8001048:	e00b      	b.n	8001062 <readDHT11+0x152>
			if((uint16_t)__HAL_TIM_GET_COUNTER(dhttemperSensor.htim) > 500){
 800104a:	4b41      	ldr	r3, [pc, #260]	; (8001150 <readDHT11+0x240>)
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001052:	b29b      	uxth	r3, r3
 8001054:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001058:	d903      	bls.n	8001062 <readDHT11+0x152>
  __ASM volatile ("cpsie i" : : : "memory");
 800105a:	b662      	cpsie	i
}
 800105c:	bf00      	nop
				__enable_irq();
				return 0;
 800105e:	2300      	movs	r3, #0
 8001060:	e0d4      	b.n	800120c <readDHT11+0x2fc>
		while(HAL_GPIO_ReadPin(dhttemperSensor.port, dhttemperSensor.pin) == GPIO_PIN_RESET){
 8001062:	4b3b      	ldr	r3, [pc, #236]	; (8001150 <readDHT11+0x240>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a3a      	ldr	r2, [pc, #232]	; (8001150 <readDHT11+0x240>)
 8001068:	8892      	ldrh	r2, [r2, #4]
 800106a:	4611      	mov	r1, r2
 800106c:	4618      	mov	r0, r3
 800106e:	f003 fe19 	bl	8004ca4 <HAL_GPIO_ReadPin>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d0e8      	beq.n	800104a <readDHT11+0x13a>
			}

		}
		__HAL_TIM_SET_COUNTER(dhttemperSensor.htim, 0);
 8001078:	4b35      	ldr	r3, [pc, #212]	; (8001150 <readDHT11+0x240>)
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	2200      	movs	r2, #0
 8001080:	625a      	str	r2, [r3, #36]	; 0x24
		while(HAL_GPIO_ReadPin(dhttemperSensor.port, dhttemperSensor.pin) == GPIO_PIN_SET){
 8001082:	e00b      	b.n	800109c <readDHT11+0x18c>
			if((uint16_t)__HAL_TIM_GET_COUNTER(dhttemperSensor.htim) > 500){
 8001084:	4b32      	ldr	r3, [pc, #200]	; (8001150 <readDHT11+0x240>)
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800108c:	b29b      	uxth	r3, r3
 800108e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001092:	d903      	bls.n	800109c <readDHT11+0x18c>
  __ASM volatile ("cpsie i" : : : "memory");
 8001094:	b662      	cpsie	i
}
 8001096:	bf00      	nop
				__enable_irq();
				return 0;
 8001098:	2300      	movs	r3, #0
 800109a:	e0b7      	b.n	800120c <readDHT11+0x2fc>
		while(HAL_GPIO_ReadPin(dhttemperSensor.port, dhttemperSensor.pin) == GPIO_PIN_SET){
 800109c:	4b2c      	ldr	r3, [pc, #176]	; (8001150 <readDHT11+0x240>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a2b      	ldr	r2, [pc, #172]	; (8001150 <readDHT11+0x240>)
 80010a2:	8892      	ldrh	r2, [r2, #4]
 80010a4:	4611      	mov	r1, r2
 80010a6:	4618      	mov	r0, r3
 80010a8:	f003 fdfc 	bl	8004ca4 <HAL_GPIO_ReadPin>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d0e8      	beq.n	8001084 <readDHT11+0x174>
			}

		}
		mTime1 = (uint16_t)__HAL_TIM_GET_COUNTER(dhttemperSensor.htim);
 80010b2:	4b27      	ldr	r3, [pc, #156]	; (8001150 <readDHT11+0x240>)
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ba:	b29a      	uxth	r2, r3
 80010bc:	4b25      	ldr	r3, [pc, #148]	; (8001154 <readDHT11+0x244>)
 80010be:	801a      	strh	r2, [r3, #0]

		//check pass time in high state
		//if pass time 25uS set as LOW
		if(mTime1 > 20 && mTime1 < 30)
 80010c0:	4b24      	ldr	r3, [pc, #144]	; (8001154 <readDHT11+0x244>)
 80010c2:	881b      	ldrh	r3, [r3, #0]
 80010c4:	2b14      	cmp	r3, #20
 80010c6:	d907      	bls.n	80010d8 <readDHT11+0x1c8>
 80010c8:	4b22      	ldr	r3, [pc, #136]	; (8001154 <readDHT11+0x244>)
 80010ca:	881b      	ldrh	r3, [r3, #0]
 80010cc:	2b1d      	cmp	r3, #29
 80010ce:	d803      	bhi.n	80010d8 <readDHT11+0x1c8>
		{
			mBit = 0;
 80010d0:	4b22      	ldr	r3, [pc, #136]	; (800115c <readDHT11+0x24c>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	801a      	strh	r2, [r3, #0]
 80010d6:	e00a      	b.n	80010ee <readDHT11+0x1de>
		}
		else if(mTime1 > 60 && mTime1 < 80) //if pass time 70 uS set as HIGH
 80010d8:	4b1e      	ldr	r3, [pc, #120]	; (8001154 <readDHT11+0x244>)
 80010da:	881b      	ldrh	r3, [r3, #0]
 80010dc:	2b3c      	cmp	r3, #60	; 0x3c
 80010de:	d906      	bls.n	80010ee <readDHT11+0x1de>
 80010e0:	4b1c      	ldr	r3, [pc, #112]	; (8001154 <readDHT11+0x244>)
 80010e2:	881b      	ldrh	r3, [r3, #0]
 80010e4:	2b4f      	cmp	r3, #79	; 0x4f
 80010e6:	d802      	bhi.n	80010ee <readDHT11+0x1de>
		{
			 mBit = 1;
 80010e8:	4b1c      	ldr	r3, [pc, #112]	; (800115c <readDHT11+0x24c>)
 80010ea:	2201      	movs	r2, #1
 80010ec:	801a      	strh	r2, [r3, #0]
		}

		//set i th data in data buffer`
		mData[j] = mBit;
 80010ee:	4b1b      	ldr	r3, [pc, #108]	; (800115c <readDHT11+0x24c>)
 80010f0:	881b      	ldrh	r3, [r3, #0]
 80010f2:	b2d9      	uxtb	r1, r3
 80010f4:	4a1a      	ldr	r2, [pc, #104]	; (8001160 <readDHT11+0x250>)
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	4413      	add	r3, r2
 80010fa:	460a      	mov	r2, r1
 80010fc:	701a      	strb	r2, [r3, #0]
	for(int j = 0; j < 40; j++)
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	3301      	adds	r3, #1
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	2b27      	cmp	r3, #39	; 0x27
 8001108:	dd99      	ble.n	800103e <readDHT11+0x12e>

	}

	HAL_TIM_Base_Stop(dhttemperSensor.htim); //stop timer
 800110a:	4b11      	ldr	r3, [pc, #68]	; (8001150 <readDHT11+0x240>)
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	4618      	mov	r0, r3
 8001110:	f005 ff10 	bl	8006f34 <HAL_TIM_Base_Stop>
  __ASM volatile ("cpsie i" : : : "memory");
 8001114:	b662      	cpsie	i
}
 8001116:	bf00      	nop
	__enable_irq(); //enable all interrupts

	//get hum value from data buffer
	for(int i = 0; i < 8; i++)
 8001118:	2300      	movs	r3, #0
 800111a:	60bb      	str	r3, [r7, #8]
 800111c:	e012      	b.n	8001144 <readDHT11+0x234>
	{
		humVal += mData[i];
 800111e:	4a10      	ldr	r2, [pc, #64]	; (8001160 <readDHT11+0x250>)
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	4413      	add	r3, r2
 8001124:	781a      	ldrb	r2, [r3, #0]
 8001126:	4b0f      	ldr	r3, [pc, #60]	; (8001164 <readDHT11+0x254>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	4413      	add	r3, r2
 800112c:	b2da      	uxtb	r2, r3
 800112e:	4b0d      	ldr	r3, [pc, #52]	; (8001164 <readDHT11+0x254>)
 8001130:	701a      	strb	r2, [r3, #0]
		humVal = humVal << 1;
 8001132:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <readDHT11+0x254>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	b2da      	uxtb	r2, r3
 800113a:	4b0a      	ldr	r3, [pc, #40]	; (8001164 <readDHT11+0x254>)
 800113c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 8; i++)
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	3301      	adds	r3, #1
 8001142:	60bb      	str	r3, [r7, #8]
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	2b07      	cmp	r3, #7
 8001148:	dde9      	ble.n	800111e <readDHT11+0x20e>
	}

	//get temp value from data buffer
	for(int i = 16; i < 24; i++)
 800114a:	2310      	movs	r3, #16
 800114c:	607b      	str	r3, [r7, #4]
 800114e:	e01e      	b.n	800118e <readDHT11+0x27e>
 8001150:	200001d0 	.word	0x200001d0
 8001154:	200001e2 	.word	0x200001e2
 8001158:	200001e4 	.word	0x200001e4
 800115c:	200001e6 	.word	0x200001e6
 8001160:	200001ec 	.word	0x200001ec
 8001164:	200001e8 	.word	0x200001e8
	{
		tempVal += mData[i];
 8001168:	4a2a      	ldr	r2, [pc, #168]	; (8001214 <readDHT11+0x304>)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4413      	add	r3, r2
 800116e:	781a      	ldrb	r2, [r3, #0]
 8001170:	4b29      	ldr	r3, [pc, #164]	; (8001218 <readDHT11+0x308>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	4413      	add	r3, r2
 8001176:	b2da      	uxtb	r2, r3
 8001178:	4b27      	ldr	r3, [pc, #156]	; (8001218 <readDHT11+0x308>)
 800117a:	701a      	strb	r2, [r3, #0]
		tempVal = tempVal << 1;
 800117c:	4b26      	ldr	r3, [pc, #152]	; (8001218 <readDHT11+0x308>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	b2da      	uxtb	r2, r3
 8001184:	4b24      	ldr	r3, [pc, #144]	; (8001218 <readDHT11+0x308>)
 8001186:	701a      	strb	r2, [r3, #0]
	for(int i = 16; i < 24; i++)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	3301      	adds	r3, #1
 800118c:	607b      	str	r3, [r7, #4]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2b17      	cmp	r3, #23
 8001192:	dde9      	ble.n	8001168 <readDHT11+0x258>
	}

	//get parity value from data buffer
	for(int i = 32; i < 40; i++)
 8001194:	2320      	movs	r3, #32
 8001196:	603b      	str	r3, [r7, #0]
 8001198:	e012      	b.n	80011c0 <readDHT11+0x2b0>
	{
		parityVal += mData[i];
 800119a:	4a1e      	ldr	r2, [pc, #120]	; (8001214 <readDHT11+0x304>)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	4413      	add	r3, r2
 80011a0:	781a      	ldrb	r2, [r3, #0]
 80011a2:	4b1e      	ldr	r3, [pc, #120]	; (800121c <readDHT11+0x30c>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	4413      	add	r3, r2
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	4b1c      	ldr	r3, [pc, #112]	; (800121c <readDHT11+0x30c>)
 80011ac:	701a      	strb	r2, [r3, #0]
		parityVal = parityVal << 1;
 80011ae:	4b1b      	ldr	r3, [pc, #108]	; (800121c <readDHT11+0x30c>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	b2da      	uxtb	r2, r3
 80011b6:	4b19      	ldr	r3, [pc, #100]	; (800121c <readDHT11+0x30c>)
 80011b8:	701a      	strb	r2, [r3, #0]
	for(int i = 32; i < 40; i++)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	3301      	adds	r3, #1
 80011be:	603b      	str	r3, [r7, #0]
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	2b27      	cmp	r3, #39	; 0x27
 80011c4:	dde9      	ble.n	800119a <readDHT11+0x28a>
	}

	parityVal = parityVal >> 1;
 80011c6:	4b15      	ldr	r3, [pc, #84]	; (800121c <readDHT11+0x30c>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	085b      	lsrs	r3, r3, #1
 80011cc:	b2da      	uxtb	r2, r3
 80011ce:	4b13      	ldr	r3, [pc, #76]	; (800121c <readDHT11+0x30c>)
 80011d0:	701a      	strb	r2, [r3, #0]
	humVal = humVal >> 1;
 80011d2:	4b13      	ldr	r3, [pc, #76]	; (8001220 <readDHT11+0x310>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	085b      	lsrs	r3, r3, #1
 80011d8:	b2da      	uxtb	r2, r3
 80011da:	4b11      	ldr	r3, [pc, #68]	; (8001220 <readDHT11+0x310>)
 80011dc:	701a      	strb	r2, [r3, #0]
	tempVal = tempVal >> 1;
 80011de:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <readDHT11+0x308>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	085b      	lsrs	r3, r3, #1
 80011e4:	b2da      	uxtb	r2, r3
 80011e6:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <readDHT11+0x308>)
 80011e8:	701a      	strb	r2, [r3, #0]

	genParity = humVal + tempVal;
 80011ea:	4b0d      	ldr	r3, [pc, #52]	; (8001220 <readDHT11+0x310>)
 80011ec:	781a      	ldrb	r2, [r3, #0]
 80011ee:	4b0a      	ldr	r3, [pc, #40]	; (8001218 <readDHT11+0x308>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	4413      	add	r3, r2
 80011f4:	b2da      	uxtb	r2, r3
 80011f6:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <readDHT11+0x314>)
 80011f8:	701a      	strb	r2, [r3, #0]

//	if(genParity == parityVal)

	dhttemperSensor.temperature = tempVal;
 80011fa:	4b07      	ldr	r3, [pc, #28]	; (8001218 <readDHT11+0x308>)
 80011fc:	781a      	ldrb	r2, [r3, #0]
 80011fe:	4b0a      	ldr	r3, [pc, #40]	; (8001228 <readDHT11+0x318>)
 8001200:	731a      	strb	r2, [r3, #12]
	dhttemperSensor.humidty = humVal;
 8001202:	4b07      	ldr	r3, [pc, #28]	; (8001220 <readDHT11+0x310>)
 8001204:	781a      	ldrb	r2, [r3, #0]
 8001206:	4b08      	ldr	r3, [pc, #32]	; (8001228 <readDHT11+0x318>)
 8001208:	735a      	strb	r2, [r3, #13]


	return 1;
 800120a:	2301      	movs	r3, #1
}
 800120c:	4618      	mov	r0, r3
 800120e:	3710      	adds	r7, #16
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	200001ec 	.word	0x200001ec
 8001218:	200001e9 	.word	0x200001e9
 800121c:	200001ea 	.word	0x200001ea
 8001220:	200001e8 	.word	0x200001e8
 8001224:	200001eb 	.word	0x200001eb
 8001228:	200001d0 	.word	0x200001d0

0800122c <getCurrentDHTTemper>:
//
//
//	return 1;
//}

float getCurrentDHTTemper(){
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
	return dhttemperSensor.temperature;
 8001230:	4b05      	ldr	r3, [pc, #20]	; (8001248 <getCurrentDHTTemper+0x1c>)
 8001232:	7b1b      	ldrb	r3, [r3, #12]
 8001234:	ee07 3a90 	vmov	s15, r3
 8001238:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 800123c:	eeb0 0a67 	vmov.f32	s0, s15
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	200001d0 	.word	0x200001d0

0800124c <getCurrentDHTHud>:

float getCurrentDHTHud(){
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
	return dhttemperSensor.humidty;
 8001250:	4b05      	ldr	r3, [pc, #20]	; (8001268 <getCurrentDHTHud+0x1c>)
 8001252:	7b5b      	ldrb	r3, [r3, #13]
 8001254:	ee07 3a90 	vmov	s15, r3
 8001258:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 800125c:	eeb0 0a67 	vmov.f32	s0, s15
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	200001d0 	.word	0x200001d0

0800126c <check_send>:

extern UART_HandleTypeDef huart6;
static char data_send[20];
static int send_cnt = 1;

void check_send(){
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
	int ck_hour = clock_value[2];
 8001272:	4b10      	ldr	r3, [pc, #64]	; (80012b4 <check_send+0x48>)
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	607b      	str	r3, [r7, #4]
	int send_hour = send_cnt*6;
 8001278:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <check_send+0x4c>)
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	4613      	mov	r3, r2
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	4413      	add	r3, r2
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	603b      	str	r3, [r7, #0]
	if(ck_hour == send_hour){
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	429a      	cmp	r2, r3
 800128c:	d10d      	bne.n	80012aa <check_send+0x3e>
		send_esp32();
 800128e:	f000 f835 	bl	80012fc <send_esp32>
		send_cnt++;
 8001292:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <check_send+0x4c>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	3301      	adds	r3, #1
 8001298:	4a07      	ldr	r2, [pc, #28]	; (80012b8 <check_send+0x4c>)
 800129a:	6013      	str	r3, [r2, #0]
		if(send_cnt >LIMIT_CNT){
 800129c:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <check_send+0x4c>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2b03      	cmp	r3, #3
 80012a2:	dd02      	ble.n	80012aa <check_send+0x3e>
			send_cnt = 0;
 80012a4:	4b04      	ldr	r3, [pc, #16]	; (80012b8 <check_send+0x4c>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
		}
	}
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	200000ac 	.word	0x200000ac
 80012b8:	20000054 	.word	0x20000054

080012bc <set_send_cnt>:
void set_send_cnt(int hour){
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
	int set_cnt = (int)hour/6+1;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4a0b      	ldr	r2, [pc, #44]	; (80012f4 <set_send_cnt+0x38>)
 80012c8:	fb82 1203 	smull	r1, r2, r2, r3
 80012cc:	17db      	asrs	r3, r3, #31
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	3301      	adds	r3, #1
 80012d2:	60fb      	str	r3, [r7, #12]
	if(set_cnt >LIMIT_CNT){
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	2b03      	cmp	r3, #3
 80012d8:	dd03      	ble.n	80012e2 <set_send_cnt+0x26>
		send_cnt = 0;
 80012da:	4b07      	ldr	r3, [pc, #28]	; (80012f8 <set_send_cnt+0x3c>)
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
	}else{
		send_cnt = set_cnt;
	}
}
 80012e0:	e002      	b.n	80012e8 <set_send_cnt+0x2c>
		send_cnt = set_cnt;
 80012e2:	4a05      	ldr	r2, [pc, #20]	; (80012f8 <set_send_cnt+0x3c>)
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	6013      	str	r3, [r2, #0]
}
 80012e8:	bf00      	nop
 80012ea:	3714      	adds	r7, #20
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	2aaaaaab 	.word	0x2aaaaaab
 80012f8:	20000054 	.word	0x20000054

080012fc <send_esp32>:

void send_esp32(){
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af02      	add	r7, sp, #8
	int temper = (int)getCurrentDHTTemper();
 8001302:	f7ff ff93 	bl	800122c <getCurrentDHTTemper>
 8001306:	eef0 7a40 	vmov.f32	s15, s0
 800130a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800130e:	ee17 3a90 	vmov	r3, s15
 8001312:	607b      	str	r3, [r7, #4]
	int hudmity = (int)getCurrentDHTHud();
 8001314:	f7ff ff9a 	bl	800124c <getCurrentDHTHud>
 8001318:	eef0 7a40 	vmov.f32	s15, s0
 800131c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001320:	ee17 3a90 	vmov	r3, s15
 8001324:	603b      	str	r3, [r7, #0]
	sprintf(data_send,"%d,temp:%d,hud:%d\n",send_cnt,temper,hudmity);
 8001326:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <send_esp32+0x58>)
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	9300      	str	r3, [sp, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4909      	ldr	r1, [pc, #36]	; (8001358 <send_esp32+0x5c>)
 8001332:	480a      	ldr	r0, [pc, #40]	; (800135c <send_esp32+0x60>)
 8001334:	f008 fc82 	bl	8009c3c <siprintf>
	HAL_UART_Transmit(&huart6, (uint8_t *)data_send, strlen(data_send), 100);
 8001338:	4808      	ldr	r0, [pc, #32]	; (800135c <send_esp32+0x60>)
 800133a:	f7fe ff71 	bl	8000220 <strlen>
 800133e:	4603      	mov	r3, r0
 8001340:	b29a      	uxth	r2, r3
 8001342:	2364      	movs	r3, #100	; 0x64
 8001344:	4905      	ldr	r1, [pc, #20]	; (800135c <send_esp32+0x60>)
 8001346:	4806      	ldr	r0, [pc, #24]	; (8001360 <send_esp32+0x64>)
 8001348:	f006 ffce 	bl	80082e8 <HAL_UART_Transmit>
}
 800134c:	bf00      	nop
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	20000054 	.word	0x20000054
 8001358:	0800be7c 	.word	0x0800be7c
 800135c:	20000214 	.word	0x20000214
 8001360:	2000099c 	.word	0x2000099c

08001364 <opening>:
                 "THU", "FRI", "SAT" };

const char *menus[] = {" Cancel Timer"," Timer Mode"," Alarm Setting"," Clock Modify"};
int prevousPos = -1;

void opening(){
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
	SSD1306_GotoXY(10,10);
 8001368:	210a      	movs	r1, #10
 800136a:	200a      	movs	r0, #10
 800136c:	f000 ff3c 	bl	80021e8 <SSD1306_GotoXY>
	if(check_RTC(2)){
 8001370:	2002      	movs	r0, #2
 8001372:	f7ff fb55 	bl	8000a20 <check_RTC>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d005      	beq.n	8001388 <opening+0x24>
		SSD1306_Puts("Alarm Not Set.. ", &Font_7x10, 1);
 800137c:	2201      	movs	r2, #1
 800137e:	4918      	ldr	r1, [pc, #96]	; (80013e0 <opening+0x7c>)
 8001380:	4818      	ldr	r0, [pc, #96]	; (80013e4 <opening+0x80>)
 8001382:	f000 ffc7 	bl	8002314 <SSD1306_Puts>
 8001386:	e006      	b.n	8001396 <opening+0x32>
	}else{
		SSD1306_Puts("Alarm Set!! ", &Font_7x10, 1);
 8001388:	2201      	movs	r2, #1
 800138a:	4915      	ldr	r1, [pc, #84]	; (80013e0 <opening+0x7c>)
 800138c:	4816      	ldr	r0, [pc, #88]	; (80013e8 <opening+0x84>)
 800138e:	f000 ffc1 	bl	8002314 <SSD1306_Puts>
		get_Alarm();
 8001392:	f7ff fb8f 	bl	8000ab4 <get_Alarm>
	}
	SSD1306_GotoXY(10,30);
 8001396:	211e      	movs	r1, #30
 8001398:	200a      	movs	r0, #10
 800139a:	f000 ff25 	bl	80021e8 <SSD1306_GotoXY>
	if(check_RTC(1)){
 800139e:	2001      	movs	r0, #1
 80013a0:	f7ff fb3e 	bl	8000a20 <check_RTC>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d008      	beq.n	80013bc <opening+0x58>
		SSD1306_Puts("Start_M is Modify", &Font_7x10, 1);
 80013aa:	2201      	movs	r2, #1
 80013ac:	490c      	ldr	r1, [pc, #48]	; (80013e0 <opening+0x7c>)
 80013ae:	480f      	ldr	r0, [pc, #60]	; (80013ec <opening+0x88>)
 80013b0:	f000 ffb0 	bl	8002314 <SSD1306_Puts>
		setMode(3);
 80013b4:	2003      	movs	r0, #3
 80013b6:	f001 fb3d 	bl	8002a34 <setMode>
 80013ba:	e006      	b.n	80013ca <opening+0x66>
	}else{
		init_timer_funs();
 80013bc:	f001 fa74 	bl	80028a8 <init_timer_funs>
		SSD1306_Puts("Start_M is Normal", &Font_7x10, 1);
 80013c0:	2201      	movs	r2, #1
 80013c2:	4907      	ldr	r1, [pc, #28]	; (80013e0 <opening+0x7c>)
 80013c4:	480a      	ldr	r0, [pc, #40]	; (80013f0 <opening+0x8c>)
 80013c6:	f000 ffa5 	bl	8002314 <SSD1306_Puts>
		// 여기서 clock 업데이트 및 RTC 업데이트 필요
	}
	SSD1306_UpdateScreen();
 80013ca:	f000 fe67 	bl	800209c <SSD1306_UpdateScreen>
	HAL_Delay(1000);
 80013ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80013d2:	f002 fd9b 	bl	8003f0c <HAL_Delay>
	SSD1306_Clear();
 80013d6:	f000 ffc2 	bl	800235e <SSD1306_Clear>
}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	20000058 	.word	0x20000058
 80013e4:	0800bee8 	.word	0x0800bee8
 80013e8:	0800befc 	.word	0x0800befc
 80013ec:	0800bf0c 	.word	0x0800bf0c
 80013f0:	0800bf20 	.word	0x0800bf20

080013f4 <printCalender>:
void startToggle(){
	if(m_toggle_count == 0) m_toggle_count = 4;
}
void printCalender(){
 80013f4:	b5b0      	push	{r4, r5, r7, lr}
 80013f6:	b094      	sub	sp, #80	; 0x50
 80013f8:	af04      	add	r7, sp, #16
	SSD1306_GotoXY(10,10);
 80013fa:	210a      	movs	r1, #10
 80013fc:	200a      	movs	r0, #10
 80013fe:	f000 fef3 	bl	80021e8 <SSD1306_GotoXY>
	if(getMode() == 3){
 8001402:	f001 fb0b 	bl	8002a1c <getMode>
 8001406:	4603      	mov	r3, r0
 8001408:	2b03      	cmp	r3, #3
 800140a:	d117      	bne.n	800143c <printCalender+0x48>
		int s_year = getnYear();
 800140c:	f001 fc00 	bl	8002c10 <getnYear>
 8001410:	63f8      	str	r0, [r7, #60]	; 0x3c
		int s_month = getnMonth();
 8001412:	f001 fc19 	bl	8002c48 <getnMonth>
 8001416:	63b8      	str	r0, [r7, #56]	; 0x38
		int s_day = getnDay();
 8001418:	f001 fc32 	bl	8002c80 <getnDay>
 800141c:	6378      	str	r0, [r7, #52]	; 0x34
		t->tm_year = s_year+100;
 800141e:	4b3a      	ldr	r3, [pc, #232]	; (8001508 <printCalender+0x114>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001424:	3264      	adds	r2, #100	; 0x64
 8001426:	615a      	str	r2, [r3, #20]
		t->tm_mon = s_month;
 8001428:	4b37      	ldr	r3, [pc, #220]	; (8001508 <printCalender+0x114>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800142e:	611a      	str	r2, [r3, #16]
		t->tm_mday = s_day+1;
 8001430:	4b35      	ldr	r3, [pc, #212]	; (8001508 <printCalender+0x114>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001436:	3201      	adds	r2, #1
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	e00d      	b.n	8001458 <printCalender+0x64>
	}
	else{
		*t = get_struct_tm();
 800143c:	4b32      	ldr	r3, [pc, #200]	; (8001508 <printCalender+0x114>)
 800143e:	681c      	ldr	r4, [r3, #0]
 8001440:	463b      	mov	r3, r7
 8001442:	4618      	mov	r0, r3
 8001444:	f001 fabe 	bl	80029c4 <get_struct_tm>
 8001448:	4625      	mov	r5, r4
 800144a:	463c      	mov	r4, r7
 800144c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800144e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001450:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001452:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001454:	6823      	ldr	r3, [r4, #0]
 8001456:	602b      	str	r3, [r5, #0]
	}
	cal_t = mktime(t);
 8001458:	4b2b      	ldr	r3, [pc, #172]	; (8001508 <printCalender+0x114>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4618      	mov	r0, r3
 800145e:	f008 f92f 	bl	80096c0 <mktime>
 8001462:	4602      	mov	r2, r0
 8001464:	460b      	mov	r3, r1
 8001466:	4929      	ldr	r1, [pc, #164]	; (800150c <printCalender+0x118>)
 8001468:	e9c1 2300 	strd	r2, r3, [r1]
	int show_year = t->tm_year+1900;
 800146c:	4b26      	ldr	r3, [pc, #152]	; (8001508 <printCalender+0x114>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8001476:	633b      	str	r3, [r7, #48]	; 0x30
	int show_month = t->tm_mon+1;
 8001478:	4b23      	ldr	r3, [pc, #140]	; (8001508 <printCalender+0x114>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	691b      	ldr	r3, [r3, #16]
 800147e:	3301      	adds	r3, #1
 8001480:	62fb      	str	r3, [r7, #44]	; 0x2c
	int show_day = t->tm_mday;
 8001482:	4b21      	ldr	r3, [pc, #132]	; (8001508 <printCalender+0x114>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	62bb      	str	r3, [r7, #40]	; 0x28
	sprintf(calender_time,"%d %d%d/%d%d %s",show_year,show_month/10,show_month%10,show_day/10,show_day%10 ,wday[t->tm_wday]);
 800148a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800148c:	4a20      	ldr	r2, [pc, #128]	; (8001510 <printCalender+0x11c>)
 800148e:	fb82 1203 	smull	r1, r2, r2, r3
 8001492:	1092      	asrs	r2, r2, #2
 8001494:	17db      	asrs	r3, r3, #31
 8001496:	1ad5      	subs	r5, r2, r3
 8001498:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800149a:	4b1d      	ldr	r3, [pc, #116]	; (8001510 <printCalender+0x11c>)
 800149c:	fb83 2301 	smull	r2, r3, r3, r1
 80014a0:	109a      	asrs	r2, r3, #2
 80014a2:	17cb      	asrs	r3, r1, #31
 80014a4:	1ad2      	subs	r2, r2, r3
 80014a6:	4613      	mov	r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	4413      	add	r3, r2
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	1aca      	subs	r2, r1, r3
 80014b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014b2:	4917      	ldr	r1, [pc, #92]	; (8001510 <printCalender+0x11c>)
 80014b4:	fb81 0103 	smull	r0, r1, r1, r3
 80014b8:	1089      	asrs	r1, r1, #2
 80014ba:	17db      	asrs	r3, r3, #31
 80014bc:	1acc      	subs	r4, r1, r3
 80014be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80014c0:	4b13      	ldr	r3, [pc, #76]	; (8001510 <printCalender+0x11c>)
 80014c2:	fb83 1300 	smull	r1, r3, r3, r0
 80014c6:	1099      	asrs	r1, r3, #2
 80014c8:	17c3      	asrs	r3, r0, #31
 80014ca:	1ac9      	subs	r1, r1, r3
 80014cc:	460b      	mov	r3, r1
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	440b      	add	r3, r1
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	1ac1      	subs	r1, r0, r3
 80014d6:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <printCalender+0x114>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	480d      	ldr	r0, [pc, #52]	; (8001514 <printCalender+0x120>)
 80014de:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80014e2:	9303      	str	r3, [sp, #12]
 80014e4:	9102      	str	r1, [sp, #8]
 80014e6:	9401      	str	r4, [sp, #4]
 80014e8:	9200      	str	r2, [sp, #0]
 80014ea:	462b      	mov	r3, r5
 80014ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80014ee:	490a      	ldr	r1, [pc, #40]	; (8001518 <printCalender+0x124>)
 80014f0:	480a      	ldr	r0, [pc, #40]	; (800151c <printCalender+0x128>)
 80014f2:	f008 fba3 	bl	8009c3c <siprintf>
	SSD1306_Puts(calender_time, &Font_7x10, 1);
 80014f6:	2201      	movs	r2, #1
 80014f8:	4909      	ldr	r1, [pc, #36]	; (8001520 <printCalender+0x12c>)
 80014fa:	4808      	ldr	r0, [pc, #32]	; (800151c <printCalender+0x128>)
 80014fc:	f000 ff0a 	bl	8002314 <SSD1306_Puts>
}
 8001500:	bf00      	nop
 8001502:	3740      	adds	r7, #64	; 0x40
 8001504:	46bd      	mov	sp, r7
 8001506:	bdb0      	pop	{r4, r5, r7, pc}
 8001508:	200002dc 	.word	0x200002dc
 800150c:	200002e0 	.word	0x200002e0
 8001510:	66666667 	.word	0x66666667
 8001514:	20000074 	.word	0x20000074
 8001518:	0800bf34 	.word	0x0800bf34
 800151c:	200002c8 	.word	0x200002c8
 8001520:	20000058 	.word	0x20000058

08001524 <printDefault>:
void printDefault(){
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af02      	add	r7, sp, #8
	printCalender();
 800152a:	f7ff ff63 	bl	80013f4 <printCalender>
	printClock();
 800152e:	f000 f853 	bl	80015d8 <printClock>
	printDht();
 8001532:	f000 f8f3 	bl	800171c <printDht>
	SSD1306_GotoXY(10,50);
 8001536:	2132      	movs	r1, #50	; 0x32
 8001538:	200a      	movs	r0, #10
 800153a:	f000 fe55 	bl	80021e8 <SSD1306_GotoXY>
	if(getTimerState()){
 800153e:	f001 fa89 	bl	8002a54 <getTimerState>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d025      	beq.n	8001594 <printDefault+0x70>
		int tMin = timer_value[1];
 8001548:	4b1b      	ldr	r3, [pc, #108]	; (80015b8 <printDefault+0x94>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	607b      	str	r3, [r7, #4]
		int tSec = timer_value[0];
 800154e:	4b1a      	ldr	r3, [pc, #104]	; (80015b8 <printDefault+0x94>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	603b      	str	r3, [r7, #0]
		sprintf(timer_time,"----- %d:%d%d -----",tMin,tSec/10,tSec%10);
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	4a19      	ldr	r2, [pc, #100]	; (80015bc <printDefault+0x98>)
 8001558:	fb82 1203 	smull	r1, r2, r2, r3
 800155c:	1092      	asrs	r2, r2, #2
 800155e:	17db      	asrs	r3, r3, #31
 8001560:	1ad0      	subs	r0, r2, r3
 8001562:	6839      	ldr	r1, [r7, #0]
 8001564:	4b15      	ldr	r3, [pc, #84]	; (80015bc <printDefault+0x98>)
 8001566:	fb83 2301 	smull	r2, r3, r3, r1
 800156a:	109a      	asrs	r2, r3, #2
 800156c:	17cb      	asrs	r3, r1, #31
 800156e:	1ad2      	subs	r2, r2, r3
 8001570:	4613      	mov	r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4413      	add	r3, r2
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	1aca      	subs	r2, r1, r3
 800157a:	9200      	str	r2, [sp, #0]
 800157c:	4603      	mov	r3, r0
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	490f      	ldr	r1, [pc, #60]	; (80015c0 <printDefault+0x9c>)
 8001582:	4810      	ldr	r0, [pc, #64]	; (80015c4 <printDefault+0xa0>)
 8001584:	f008 fb5a 	bl	8009c3c <siprintf>
		SSD1306_Puts(timer_time, &Font_7x10, 1);
 8001588:	2201      	movs	r2, #1
 800158a:	490f      	ldr	r1, [pc, #60]	; (80015c8 <printDefault+0xa4>)
 800158c:	480d      	ldr	r0, [pc, #52]	; (80015c4 <printDefault+0xa0>)
 800158e:	f000 fec1 	bl	8002314 <SSD1306_Puts>
 8001592:	e00b      	b.n	80015ac <printDefault+0x88>
	}else{
		sprintf(second_time,"------ %d ------",clock_value[0]);
 8001594:	4b0d      	ldr	r3, [pc, #52]	; (80015cc <printDefault+0xa8>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	461a      	mov	r2, r3
 800159a:	490d      	ldr	r1, [pc, #52]	; (80015d0 <printDefault+0xac>)
 800159c:	480d      	ldr	r0, [pc, #52]	; (80015d4 <printDefault+0xb0>)
 800159e:	f008 fb4d 	bl	8009c3c <siprintf>
		SSD1306_Puts(second_time, &Font_7x10, 1);
 80015a2:	2201      	movs	r2, #1
 80015a4:	4908      	ldr	r1, [pc, #32]	; (80015c8 <printDefault+0xa4>)
 80015a6:	480b      	ldr	r0, [pc, #44]	; (80015d4 <printDefault+0xb0>)
 80015a8:	f000 feb4 	bl	8002314 <SSD1306_Puts>
	}
	SSD1306_UpdateScreen();
 80015ac:	f000 fd76 	bl	800209c <SSD1306_UpdateScreen>
}
 80015b0:	bf00      	nop
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	2000075c 	.word	0x2000075c
 80015bc:	66666667 	.word	0x66666667
 80015c0:	0800bf44 	.word	0x0800bf44
 80015c4:	20000228 	.word	0x20000228
 80015c8:	20000058 	.word	0x20000058
 80015cc:	200000ac 	.word	0x200000ac
 80015d0:	0800bf58 	.word	0x0800bf58
 80015d4:	200002a0 	.word	0x200002a0

080015d8 <printClock>:

// Code by Mireu LEE
void printClock(){
 80015d8:	b5b0      	push	{r4, r5, r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af02      	add	r7, sp, #8
	int am_pm = clock_value[2]/13;
 80015de:	4b46      	ldr	r3, [pc, #280]	; (80016f8 <printClock+0x120>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	4a46      	ldr	r2, [pc, #280]	; (80016fc <printClock+0x124>)
 80015e4:	fb82 1203 	smull	r1, r2, r2, r3
 80015e8:	1092      	asrs	r2, r2, #2
 80015ea:	17db      	asrs	r3, r3, #31
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	60fb      	str	r3, [r7, #12]
	int s_hour = clock_value[2];
 80015f0:	4b41      	ldr	r3, [pc, #260]	; (80016f8 <printClock+0x120>)
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	60bb      	str	r3, [r7, #8]
	int s_minute = clock_value[1];
 80015f6:	4b40      	ldr	r3, [pc, #256]	; (80016f8 <printClock+0x120>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	607b      	str	r3, [r7, #4]
	SSD1306_GotoXY(10,32);
 80015fc:	2120      	movs	r1, #32
 80015fe:	200a      	movs	r0, #10
 8001600:	f000 fdf2 	bl	80021e8 <SSD1306_GotoXY>
	if(am_pm){
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d036      	beq.n	8001678 <printClock+0xa0>
		SSD1306_Puts("PM", &Font_7x10, 1);
 800160a:	2201      	movs	r2, #1
 800160c:	493c      	ldr	r1, [pc, #240]	; (8001700 <printClock+0x128>)
 800160e:	483d      	ldr	r0, [pc, #244]	; (8001704 <printClock+0x12c>)
 8001610:	f000 fe80 	bl	8002314 <SSD1306_Puts>
		int hour = s_hour-12;
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	3b0c      	subs	r3, #12
 8001618:	603b      	str	r3, [r7, #0]
		sprintf(clock_time,"%d%d:%d%d",hour/10,hour%10,s_minute/10,s_minute%10);
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	4a3a      	ldr	r2, [pc, #232]	; (8001708 <printClock+0x130>)
 800161e:	fb82 1203 	smull	r1, r2, r2, r3
 8001622:	1092      	asrs	r2, r2, #2
 8001624:	17db      	asrs	r3, r3, #31
 8001626:	1ad5      	subs	r5, r2, r3
 8001628:	683a      	ldr	r2, [r7, #0]
 800162a:	4b37      	ldr	r3, [pc, #220]	; (8001708 <printClock+0x130>)
 800162c:	fb83 1302 	smull	r1, r3, r3, r2
 8001630:	1099      	asrs	r1, r3, #2
 8001632:	17d3      	asrs	r3, r2, #31
 8001634:	1ac8      	subs	r0, r1, r3
 8001636:	4603      	mov	r3, r0
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	4403      	add	r3, r0
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	1ad0      	subs	r0, r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	4a31      	ldr	r2, [pc, #196]	; (8001708 <printClock+0x130>)
 8001644:	fb82 1203 	smull	r1, r2, r2, r3
 8001648:	1092      	asrs	r2, r2, #2
 800164a:	17db      	asrs	r3, r3, #31
 800164c:	1ad4      	subs	r4, r2, r3
 800164e:	6879      	ldr	r1, [r7, #4]
 8001650:	4b2d      	ldr	r3, [pc, #180]	; (8001708 <printClock+0x130>)
 8001652:	fb83 2301 	smull	r2, r3, r3, r1
 8001656:	109a      	asrs	r2, r3, #2
 8001658:	17cb      	asrs	r3, r1, #31
 800165a:	1ad2      	subs	r2, r2, r3
 800165c:	4613      	mov	r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	4413      	add	r3, r2
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	1aca      	subs	r2, r1, r3
 8001666:	9201      	str	r2, [sp, #4]
 8001668:	9400      	str	r4, [sp, #0]
 800166a:	4603      	mov	r3, r0
 800166c:	462a      	mov	r2, r5
 800166e:	4927      	ldr	r1, [pc, #156]	; (800170c <printClock+0x134>)
 8001670:	4827      	ldr	r0, [pc, #156]	; (8001710 <printClock+0x138>)
 8001672:	f008 fae3 	bl	8009c3c <siprintf>
 8001676:	e032      	b.n	80016de <printClock+0x106>
	}else{
		SSD1306_Puts("AM", &Font_7x10, 1);
 8001678:	2201      	movs	r2, #1
 800167a:	4921      	ldr	r1, [pc, #132]	; (8001700 <printClock+0x128>)
 800167c:	4825      	ldr	r0, [pc, #148]	; (8001714 <printClock+0x13c>)
 800167e:	f000 fe49 	bl	8002314 <SSD1306_Puts>
		sprintf(clock_time,"%d%d:%d%d",s_hour/10,s_hour%10,s_minute/10,s_minute%10);
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	4a20      	ldr	r2, [pc, #128]	; (8001708 <printClock+0x130>)
 8001686:	fb82 1203 	smull	r1, r2, r2, r3
 800168a:	1092      	asrs	r2, r2, #2
 800168c:	17db      	asrs	r3, r3, #31
 800168e:	1ad5      	subs	r5, r2, r3
 8001690:	68ba      	ldr	r2, [r7, #8]
 8001692:	4b1d      	ldr	r3, [pc, #116]	; (8001708 <printClock+0x130>)
 8001694:	fb83 1302 	smull	r1, r3, r3, r2
 8001698:	1099      	asrs	r1, r3, #2
 800169a:	17d3      	asrs	r3, r2, #31
 800169c:	1ac8      	subs	r0, r1, r3
 800169e:	4603      	mov	r3, r0
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	4403      	add	r3, r0
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	1ad0      	subs	r0, r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	4a17      	ldr	r2, [pc, #92]	; (8001708 <printClock+0x130>)
 80016ac:	fb82 1203 	smull	r1, r2, r2, r3
 80016b0:	1092      	asrs	r2, r2, #2
 80016b2:	17db      	asrs	r3, r3, #31
 80016b4:	1ad4      	subs	r4, r2, r3
 80016b6:	6879      	ldr	r1, [r7, #4]
 80016b8:	4b13      	ldr	r3, [pc, #76]	; (8001708 <printClock+0x130>)
 80016ba:	fb83 2301 	smull	r2, r3, r3, r1
 80016be:	109a      	asrs	r2, r3, #2
 80016c0:	17cb      	asrs	r3, r1, #31
 80016c2:	1ad2      	subs	r2, r2, r3
 80016c4:	4613      	mov	r3, r2
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	4413      	add	r3, r2
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	1aca      	subs	r2, r1, r3
 80016ce:	9201      	str	r2, [sp, #4]
 80016d0:	9400      	str	r4, [sp, #0]
 80016d2:	4603      	mov	r3, r0
 80016d4:	462a      	mov	r2, r5
 80016d6:	490d      	ldr	r1, [pc, #52]	; (800170c <printClock+0x134>)
 80016d8:	480d      	ldr	r0, [pc, #52]	; (8001710 <printClock+0x138>)
 80016da:	f008 faaf 	bl	8009c3c <siprintf>
	}
	SSD1306_GotoXY(27,25);
 80016de:	2119      	movs	r1, #25
 80016e0:	201b      	movs	r0, #27
 80016e2:	f000 fd81 	bl	80021e8 <SSD1306_GotoXY>
	SSD1306_Puts(clock_time, &Font_11x18, 1);
 80016e6:	2201      	movs	r2, #1
 80016e8:	490b      	ldr	r1, [pc, #44]	; (8001718 <printClock+0x140>)
 80016ea:	4809      	ldr	r0, [pc, #36]	; (8001710 <printClock+0x138>)
 80016ec:	f000 fe12 	bl	8002314 <SSD1306_Puts>
}
 80016f0:	bf00      	nop
 80016f2:	3710      	adds	r7, #16
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bdb0      	pop	{r4, r5, r7, pc}
 80016f8:	200000ac 	.word	0x200000ac
 80016fc:	4ec4ec4f 	.word	0x4ec4ec4f
 8001700:	20000058 	.word	0x20000058
 8001704:	0800bf6c 	.word	0x0800bf6c
 8001708:	66666667 	.word	0x66666667
 800170c:	0800bf70 	.word	0x0800bf70
 8001710:	20000278 	.word	0x20000278
 8001714:	0800bf7c 	.word	0x0800bf7c
 8001718:	20000060 	.word	0x20000060

0800171c <printDht>:

void printDht(){
 800171c:	b580      	push	{r7, lr}
 800171e:	b096      	sub	sp, #88	; 0x58
 8001720:	af00      	add	r7, sp, #0
	int temper = (int)getCurrentDHTTemper();
 8001722:	f7ff fd83 	bl	800122c <getCurrentDHTTemper>
 8001726:	eef0 7a40 	vmov.f32	s15, s0
 800172a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800172e:	ee17 3a90 	vmov	r3, s15
 8001732:	657b      	str	r3, [r7, #84]	; 0x54
	int hudmity = (int)getCurrentDHTHud();
 8001734:	f7ff fd8a 	bl	800124c <getCurrentDHTHud>
 8001738:	eef0 7a40 	vmov.f32	s15, s0
 800173c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001740:	ee17 3a90 	vmov	r3, s15
 8001744:	653b      	str	r3, [r7, #80]	; 0x50
	char hud[40], temp[40];
	sprintf(hud,"%d%%",hudmity);
 8001746:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800174a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800174c:	4911      	ldr	r1, [pc, #68]	; (8001794 <printDht+0x78>)
 800174e:	4618      	mov	r0, r3
 8001750:	f008 fa74 	bl	8009c3c <siprintf>
	sprintf(temp,"%d'c",temper);
 8001754:	463b      	mov	r3, r7
 8001756:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001758:	490f      	ldr	r1, [pc, #60]	; (8001798 <printDht+0x7c>)
 800175a:	4618      	mov	r0, r3
 800175c:	f008 fa6e 	bl	8009c3c <siprintf>
	SSD1306_GotoXY(90,25);
 8001760:	2119      	movs	r1, #25
 8001762:	205a      	movs	r0, #90	; 0x5a
 8001764:	f000 fd40 	bl	80021e8 <SSD1306_GotoXY>
	SSD1306_Puts(temp, &Font_7x10, 1);
 8001768:	463b      	mov	r3, r7
 800176a:	2201      	movs	r2, #1
 800176c:	490b      	ldr	r1, [pc, #44]	; (800179c <printDht+0x80>)
 800176e:	4618      	mov	r0, r3
 8001770:	f000 fdd0 	bl	8002314 <SSD1306_Puts>
	SSD1306_GotoXY(90,37);
 8001774:	2125      	movs	r1, #37	; 0x25
 8001776:	205a      	movs	r0, #90	; 0x5a
 8001778:	f000 fd36 	bl	80021e8 <SSD1306_GotoXY>
	SSD1306_Puts(hud, &Font_7x10, 1);
 800177c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001780:	2201      	movs	r2, #1
 8001782:	4906      	ldr	r1, [pc, #24]	; (800179c <printDht+0x80>)
 8001784:	4618      	mov	r0, r3
 8001786:	f000 fdc5 	bl	8002314 <SSD1306_Puts>
}
 800178a:	bf00      	nop
 800178c:	3758      	adds	r7, #88	; 0x58
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	0800bf80 	.word	0x0800bf80
 8001798:	0800bf88 	.word	0x0800bf88
 800179c:	20000058 	.word	0x20000058

080017a0 <print_Set_time>:


void print_Set_time(){
 80017a0:	b5b0      	push	{r4, r5, r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af02      	add	r7, sp, #8
	int s_hour = getnHour();
 80017a6:	f001 f9db 	bl	8002b60 <getnHour>
 80017aa:	60f8      	str	r0, [r7, #12]
	int s_minute = getnMinute();
 80017ac:	f001 f9f8 	bl	8002ba0 <getnMinute>
 80017b0:	60b8      	str	r0, [r7, #8]
	int am_pm = s_hour/13;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	4a42      	ldr	r2, [pc, #264]	; (80018c0 <print_Set_time+0x120>)
 80017b6:	fb82 1203 	smull	r1, r2, r2, r3
 80017ba:	1092      	asrs	r2, r2, #2
 80017bc:	17db      	asrs	r3, r3, #31
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	607b      	str	r3, [r7, #4]
	SSD1306_GotoXY(10,32);
 80017c2:	2120      	movs	r1, #32
 80017c4:	200a      	movs	r0, #10
 80017c6:	f000 fd0f 	bl	80021e8 <SSD1306_GotoXY>
	if(am_pm){
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d036      	beq.n	800183e <print_Set_time+0x9e>
		SSD1306_Puts("PM", &Font_7x10, 1);
 80017d0:	2201      	movs	r2, #1
 80017d2:	493c      	ldr	r1, [pc, #240]	; (80018c4 <print_Set_time+0x124>)
 80017d4:	483c      	ldr	r0, [pc, #240]	; (80018c8 <print_Set_time+0x128>)
 80017d6:	f000 fd9d 	bl	8002314 <SSD1306_Puts>
		int hour = s_hour-12;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	3b0c      	subs	r3, #12
 80017de:	603b      	str	r3, [r7, #0]
		sprintf(alarm_time,"%d%d:%d%d",hour/10,hour%10,s_minute/10,s_minute%10);
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	4a3a      	ldr	r2, [pc, #232]	; (80018cc <print_Set_time+0x12c>)
 80017e4:	fb82 1203 	smull	r1, r2, r2, r3
 80017e8:	1092      	asrs	r2, r2, #2
 80017ea:	17db      	asrs	r3, r3, #31
 80017ec:	1ad5      	subs	r5, r2, r3
 80017ee:	683a      	ldr	r2, [r7, #0]
 80017f0:	4b36      	ldr	r3, [pc, #216]	; (80018cc <print_Set_time+0x12c>)
 80017f2:	fb83 1302 	smull	r1, r3, r3, r2
 80017f6:	1099      	asrs	r1, r3, #2
 80017f8:	17d3      	asrs	r3, r2, #31
 80017fa:	1ac8      	subs	r0, r1, r3
 80017fc:	4603      	mov	r3, r0
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	4403      	add	r3, r0
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	1ad0      	subs	r0, r2, r3
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	4a30      	ldr	r2, [pc, #192]	; (80018cc <print_Set_time+0x12c>)
 800180a:	fb82 1203 	smull	r1, r2, r2, r3
 800180e:	1092      	asrs	r2, r2, #2
 8001810:	17db      	asrs	r3, r3, #31
 8001812:	1ad4      	subs	r4, r2, r3
 8001814:	68b9      	ldr	r1, [r7, #8]
 8001816:	4b2d      	ldr	r3, [pc, #180]	; (80018cc <print_Set_time+0x12c>)
 8001818:	fb83 2301 	smull	r2, r3, r3, r1
 800181c:	109a      	asrs	r2, r3, #2
 800181e:	17cb      	asrs	r3, r1, #31
 8001820:	1ad2      	subs	r2, r2, r3
 8001822:	4613      	mov	r3, r2
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	4413      	add	r3, r2
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	1aca      	subs	r2, r1, r3
 800182c:	9201      	str	r2, [sp, #4]
 800182e:	9400      	str	r4, [sp, #0]
 8001830:	4603      	mov	r3, r0
 8001832:	462a      	mov	r2, r5
 8001834:	4926      	ldr	r1, [pc, #152]	; (80018d0 <print_Set_time+0x130>)
 8001836:	4827      	ldr	r0, [pc, #156]	; (80018d4 <print_Set_time+0x134>)
 8001838:	f008 fa00 	bl	8009c3c <siprintf>
 800183c:	e032      	b.n	80018a4 <print_Set_time+0x104>
	}else{
		SSD1306_Puts("AM", &Font_7x10, 1);
 800183e:	2201      	movs	r2, #1
 8001840:	4920      	ldr	r1, [pc, #128]	; (80018c4 <print_Set_time+0x124>)
 8001842:	4825      	ldr	r0, [pc, #148]	; (80018d8 <print_Set_time+0x138>)
 8001844:	f000 fd66 	bl	8002314 <SSD1306_Puts>
		sprintf(alarm_time,"%d%d:%d%d",s_hour/10,s_hour%10,s_minute/10,s_minute%10);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	4a20      	ldr	r2, [pc, #128]	; (80018cc <print_Set_time+0x12c>)
 800184c:	fb82 1203 	smull	r1, r2, r2, r3
 8001850:	1092      	asrs	r2, r2, #2
 8001852:	17db      	asrs	r3, r3, #31
 8001854:	1ad5      	subs	r5, r2, r3
 8001856:	68fa      	ldr	r2, [r7, #12]
 8001858:	4b1c      	ldr	r3, [pc, #112]	; (80018cc <print_Set_time+0x12c>)
 800185a:	fb83 1302 	smull	r1, r3, r3, r2
 800185e:	1099      	asrs	r1, r3, #2
 8001860:	17d3      	asrs	r3, r2, #31
 8001862:	1ac8      	subs	r0, r1, r3
 8001864:	4603      	mov	r3, r0
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	4403      	add	r3, r0
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	1ad0      	subs	r0, r2, r3
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	4a16      	ldr	r2, [pc, #88]	; (80018cc <print_Set_time+0x12c>)
 8001872:	fb82 1203 	smull	r1, r2, r2, r3
 8001876:	1092      	asrs	r2, r2, #2
 8001878:	17db      	asrs	r3, r3, #31
 800187a:	1ad4      	subs	r4, r2, r3
 800187c:	68b9      	ldr	r1, [r7, #8]
 800187e:	4b13      	ldr	r3, [pc, #76]	; (80018cc <print_Set_time+0x12c>)
 8001880:	fb83 2301 	smull	r2, r3, r3, r1
 8001884:	109a      	asrs	r2, r3, #2
 8001886:	17cb      	asrs	r3, r1, #31
 8001888:	1ad2      	subs	r2, r2, r3
 800188a:	4613      	mov	r3, r2
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	4413      	add	r3, r2
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	1aca      	subs	r2, r1, r3
 8001894:	9201      	str	r2, [sp, #4]
 8001896:	9400      	str	r4, [sp, #0]
 8001898:	4603      	mov	r3, r0
 800189a:	462a      	mov	r2, r5
 800189c:	490c      	ldr	r1, [pc, #48]	; (80018d0 <print_Set_time+0x130>)
 800189e:	480d      	ldr	r0, [pc, #52]	; (80018d4 <print_Set_time+0x134>)
 80018a0:	f008 f9cc 	bl	8009c3c <siprintf>
	}
	SSD1306_GotoXY(27,25);
 80018a4:	2119      	movs	r1, #25
 80018a6:	201b      	movs	r0, #27
 80018a8:	f000 fc9e 	bl	80021e8 <SSD1306_GotoXY>
	SSD1306_Puts(alarm_time, &Font_11x18, 1);
 80018ac:	2201      	movs	r2, #1
 80018ae:	490b      	ldr	r1, [pc, #44]	; (80018dc <print_Set_time+0x13c>)
 80018b0:	4808      	ldr	r0, [pc, #32]	; (80018d4 <print_Set_time+0x134>)
 80018b2:	f000 fd2f 	bl	8002314 <SSD1306_Puts>
}
 80018b6:	bf00      	nop
 80018b8:	3710      	adds	r7, #16
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bdb0      	pop	{r4, r5, r7, pc}
 80018be:	bf00      	nop
 80018c0:	4ec4ec4f 	.word	0x4ec4ec4f
 80018c4:	20000058 	.word	0x20000058
 80018c8:	0800bf6c 	.word	0x0800bf6c
 80018cc:	66666667 	.word	0x66666667
 80018d0:	0800bf70 	.word	0x0800bf70
 80018d4:	20000250 	.word	0x20000250
 80018d8:	0800bf7c 	.word	0x0800bf7c
 80018dc:	20000060 	.word	0x20000060

080018e0 <toggleScreen>:
void toggleScreen(){
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
	SSD1306_Clear();
 80018e4:	f000 fd3b 	bl	800235e <SSD1306_Clear>
}
 80018e8:	bf00      	nop
 80018ea:	bd80      	pop	{r7, pc}

080018ec <menuSelect>:

void menuSelect(){
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b088      	sub	sp, #32
 80018f0:	af00      	add	r7, sp, #0
	int m_pos = getPos();
 80018f2:	f001 f9e1 	bl	8002cb8 <getPos>
 80018f6:	61b8      	str	r0, [r7, #24]
	if(m_pos != prevousPos){
 80018f8:	4b32      	ldr	r3, [pc, #200]	; (80019c4 <menuSelect+0xd8>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	429a      	cmp	r2, r3
 8001900:	d004      	beq.n	800190c <menuSelect+0x20>
		toggleScreen();
 8001902:	f7ff ffed 	bl	80018e0 <toggleScreen>
		prevousPos = m_pos;
 8001906:	4a2f      	ldr	r2, [pc, #188]	; (80019c4 <menuSelect+0xd8>)
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	6013      	str	r3, [r2, #0]
	}
	SSD1306_GotoXY(10,10);
 800190c:	210a      	movs	r1, #10
 800190e:	200a      	movs	r0, #10
 8001910:	f000 fc6a 	bl	80021e8 <SSD1306_GotoXY>
	SSD1306_Puts("----------------", &Font_7x10, 1);
 8001914:	2201      	movs	r2, #1
 8001916:	492c      	ldr	r1, [pc, #176]	; (80019c8 <menuSelect+0xdc>)
 8001918:	482c      	ldr	r0, [pc, #176]	; (80019cc <menuSelect+0xe0>)
 800191a:	f000 fcfb 	bl	8002314 <SSD1306_Puts>
	for(int i=1; i<=3; i++){
 800191e:	2301      	movs	r3, #1
 8001920:	61fb      	str	r3, [r7, #28]
 8001922:	e03d      	b.n	80019a0 <menuSelect+0xb4>
		char line[20];
		SSD1306_GotoXY(10, pos_y[i-1]);
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	3b01      	subs	r3, #1
 8001928:	4a29      	ldr	r2, [pc, #164]	; (80019d0 <menuSelect+0xe4>)
 800192a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800192e:	b29b      	uxth	r3, r3
 8001930:	4619      	mov	r1, r3
 8001932:	200a      	movs	r0, #10
 8001934:	f000 fc58 	bl	80021e8 <SSD1306_GotoXY>
		if(i == m_pos+1){
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	3301      	adds	r3, #1
 800193c:	69fa      	ldr	r2, [r7, #28]
 800193e:	429a      	cmp	r2, r3
 8001940:	d11c      	bne.n	800197c <menuSelect+0x90>
			if(getTimerState() && i == 1){
 8001942:	f001 f887 	bl	8002a54 <getTimerState>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d00d      	beq.n	8001968 <menuSelect+0x7c>
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d10a      	bne.n	8001968 <menuSelect+0x7c>
				snprintf(line,sizeof(line),">%s",menus[i-1]);
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	3b01      	subs	r3, #1
 8001956:	4a1f      	ldr	r2, [pc, #124]	; (80019d4 <menuSelect+0xe8>)
 8001958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800195c:	1d38      	adds	r0, r7, #4
 800195e:	4a1e      	ldr	r2, [pc, #120]	; (80019d8 <menuSelect+0xec>)
 8001960:	2114      	movs	r1, #20
 8001962:	f008 f937 	bl	8009bd4 <sniprintf>
 8001966:	e012      	b.n	800198e <menuSelect+0xa2>
			}
			else{
				snprintf(line,sizeof(line),">%s",menus[i]);
 8001968:	4a1a      	ldr	r2, [pc, #104]	; (80019d4 <menuSelect+0xe8>)
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001970:	1d38      	adds	r0, r7, #4
 8001972:	4a19      	ldr	r2, [pc, #100]	; (80019d8 <menuSelect+0xec>)
 8001974:	2114      	movs	r1, #20
 8001976:	f008 f92d 	bl	8009bd4 <sniprintf>
 800197a:	e008      	b.n	800198e <menuSelect+0xa2>
			}
		}else{
			snprintf(line,sizeof(line),"%s",menus[i]);
 800197c:	4a15      	ldr	r2, [pc, #84]	; (80019d4 <menuSelect+0xe8>)
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001984:	1d38      	adds	r0, r7, #4
 8001986:	4a15      	ldr	r2, [pc, #84]	; (80019dc <menuSelect+0xf0>)
 8001988:	2114      	movs	r1, #20
 800198a:	f008 f923 	bl	8009bd4 <sniprintf>
		}
		SSD1306_Puts(line, &Font_7x10, 1);
 800198e:	1d3b      	adds	r3, r7, #4
 8001990:	2201      	movs	r2, #1
 8001992:	490d      	ldr	r1, [pc, #52]	; (80019c8 <menuSelect+0xdc>)
 8001994:	4618      	mov	r0, r3
 8001996:	f000 fcbd 	bl	8002314 <SSD1306_Puts>
	for(int i=1; i<=3; i++){
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	3301      	adds	r3, #1
 800199e:	61fb      	str	r3, [r7, #28]
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	2b03      	cmp	r3, #3
 80019a4:	ddbe      	ble.n	8001924 <menuSelect+0x38>
	}

	SSD1306_GotoXY(10,50);
 80019a6:	2132      	movs	r1, #50	; 0x32
 80019a8:	200a      	movs	r0, #10
 80019aa:	f000 fc1d 	bl	80021e8 <SSD1306_GotoXY>
	SSD1306_Puts("----------------", &Font_7x10, 1);
 80019ae:	2201      	movs	r2, #1
 80019b0:	4905      	ldr	r1, [pc, #20]	; (80019c8 <menuSelect+0xdc>)
 80019b2:	4806      	ldr	r0, [pc, #24]	; (80019cc <menuSelect+0xe0>)
 80019b4:	f000 fcae 	bl	8002314 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 80019b8:	f000 fb70 	bl	800209c <SSD1306_UpdateScreen>
}
 80019bc:	bf00      	nop
 80019be:	3720      	adds	r7, #32
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	200000a0 	.word	0x200000a0
 80019c8:	20000058 	.word	0x20000058
 80019cc:	0800bf90 	.word	0x0800bf90
 80019d0:	20000068 	.word	0x20000068
 80019d4:	20000090 	.word	0x20000090
 80019d8:	0800bfa4 	.word	0x0800bfa4
 80019dc:	0800bfa8 	.word	0x0800bfa8

080019e0 <timer_cancle_lcd>:

void timer_cancle_lcd(){
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
	SSD1306_GotoXY(10,10);
 80019e4:	210a      	movs	r1, #10
 80019e6:	200a      	movs	r0, #10
 80019e8:	f000 fbfe 	bl	80021e8 <SSD1306_GotoXY>
	SSD1306_Puts("----------------", &Font_7x10, 1);
 80019ec:	2201      	movs	r2, #1
 80019ee:	4912      	ldr	r1, [pc, #72]	; (8001a38 <timer_cancle_lcd+0x58>)
 80019f0:	4812      	ldr	r0, [pc, #72]	; (8001a3c <timer_cancle_lcd+0x5c>)
 80019f2:	f000 fc8f 	bl	8002314 <SSD1306_Puts>
	SSD1306_GotoXY(10,20);
 80019f6:	2114      	movs	r1, #20
 80019f8:	200a      	movs	r0, #10
 80019fa:	f000 fbf5 	bl	80021e8 <SSD1306_GotoXY>
	SSD1306_Puts("Timer Mode be", &Font_7x10, 1);
 80019fe:	2201      	movs	r2, #1
 8001a00:	490d      	ldr	r1, [pc, #52]	; (8001a38 <timer_cancle_lcd+0x58>)
 8001a02:	480f      	ldr	r0, [pc, #60]	; (8001a40 <timer_cancle_lcd+0x60>)
 8001a04:	f000 fc86 	bl	8002314 <SSD1306_Puts>
	SSD1306_GotoXY(10,30);
 8001a08:	211e      	movs	r1, #30
 8001a0a:	200a      	movs	r0, #10
 8001a0c:	f000 fbec 	bl	80021e8 <SSD1306_GotoXY>
	SSD1306_Puts("Canceled....", &Font_11x18, 1);
 8001a10:	2201      	movs	r2, #1
 8001a12:	490c      	ldr	r1, [pc, #48]	; (8001a44 <timer_cancle_lcd+0x64>)
 8001a14:	480c      	ldr	r0, [pc, #48]	; (8001a48 <timer_cancle_lcd+0x68>)
 8001a16:	f000 fc7d 	bl	8002314 <SSD1306_Puts>
	SSD1306_GotoXY(10,50);
 8001a1a:	2132      	movs	r1, #50	; 0x32
 8001a1c:	200a      	movs	r0, #10
 8001a1e:	f000 fbe3 	bl	80021e8 <SSD1306_GotoXY>
	SSD1306_Puts("----------------", &Font_7x10, 1);
 8001a22:	2201      	movs	r2, #1
 8001a24:	4904      	ldr	r1, [pc, #16]	; (8001a38 <timer_cancle_lcd+0x58>)
 8001a26:	4805      	ldr	r0, [pc, #20]	; (8001a3c <timer_cancle_lcd+0x5c>)
 8001a28:	f000 fc74 	bl	8002314 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001a2c:	f000 fb36 	bl	800209c <SSD1306_UpdateScreen>
	SSD1306_Clear();
 8001a30:	f000 fc95 	bl	800235e <SSD1306_Clear>
}
 8001a34:	bf00      	nop
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	20000058 	.word	0x20000058
 8001a3c:	0800bf90 	.word	0x0800bf90
 8001a40:	0800bfac 	.word	0x0800bfac
 8001a44:	20000060 	.word	0x20000060
 8001a48:	0800bfbc 	.word	0x0800bfbc

08001a4c <timer_lcd>:


void timer_lcd(){
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
	SSD1306_GotoXY(10,10);
 8001a50:	210a      	movs	r1, #10
 8001a52:	200a      	movs	r0, #10
 8001a54:	f000 fbc8 	bl	80021e8 <SSD1306_GotoXY>
	SSD1306_Puts("----------------", &Font_7x10, 1);
 8001a58:	2201      	movs	r2, #1
 8001a5a:	4916      	ldr	r1, [pc, #88]	; (8001ab4 <timer_lcd+0x68>)
 8001a5c:	4816      	ldr	r0, [pc, #88]	; (8001ab8 <timer_lcd+0x6c>)
 8001a5e:	f000 fc59 	bl	8002314 <SSD1306_Puts>
	SSD1306_GotoXY(15,20);
 8001a62:	2114      	movs	r1, #20
 8001a64:	200f      	movs	r0, #15
 8001a66:	f000 fbbf 	bl	80021e8 <SSD1306_GotoXY>
	SSD1306_Puts("Timer Completed!!", &Font_7x10, 1);
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	4911      	ldr	r1, [pc, #68]	; (8001ab4 <timer_lcd+0x68>)
 8001a6e:	4813      	ldr	r0, [pc, #76]	; (8001abc <timer_lcd+0x70>)
 8001a70:	f000 fc50 	bl	8002314 <SSD1306_Puts>
	SSD1306_GotoXY(15,30);
 8001a74:	211e      	movs	r1, #30
 8001a76:	200f      	movs	r0, #15
 8001a78:	f000 fbb6 	bl	80021e8 <SSD1306_GotoXY>
	SSD1306_Puts("Press The", &Font_7x10, 1);
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	490d      	ldr	r1, [pc, #52]	; (8001ab4 <timer_lcd+0x68>)
 8001a80:	480f      	ldr	r0, [pc, #60]	; (8001ac0 <timer_lcd+0x74>)
 8001a82:	f000 fc47 	bl	8002314 <SSD1306_Puts>
	SSD1306_GotoXY(15,40);
 8001a86:	2128      	movs	r1, #40	; 0x28
 8001a88:	200f      	movs	r0, #15
 8001a8a:	f000 fbad 	bl	80021e8 <SSD1306_GotoXY>
	SSD1306_Puts("Can Button", &Font_7x10, 1);
 8001a8e:	2201      	movs	r2, #1
 8001a90:	4908      	ldr	r1, [pc, #32]	; (8001ab4 <timer_lcd+0x68>)
 8001a92:	480c      	ldr	r0, [pc, #48]	; (8001ac4 <timer_lcd+0x78>)
 8001a94:	f000 fc3e 	bl	8002314 <SSD1306_Puts>
	SSD1306_GotoXY(10,50);
 8001a98:	2132      	movs	r1, #50	; 0x32
 8001a9a:	200a      	movs	r0, #10
 8001a9c:	f000 fba4 	bl	80021e8 <SSD1306_GotoXY>
	SSD1306_Puts("----------------", &Font_7x10, 1);
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	4904      	ldr	r1, [pc, #16]	; (8001ab4 <timer_lcd+0x68>)
 8001aa4:	4804      	ldr	r0, [pc, #16]	; (8001ab8 <timer_lcd+0x6c>)
 8001aa6:	f000 fc35 	bl	8002314 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001aaa:	f000 faf7 	bl	800209c <SSD1306_UpdateScreen>
}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	20000058 	.word	0x20000058
 8001ab8:	0800bf90 	.word	0x0800bf90
 8001abc:	0800bfcc 	.word	0x0800bfcc
 8001ac0:	0800bfe0 	.word	0x0800bfe0
 8001ac4:	0800bfec 	.word	0x0800bfec

08001ac8 <n_timer_show>:

void n_timer_show(){
 8001ac8:	b5b0      	push	{r4, r5, r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af02      	add	r7, sp, #8
	int minute = getnMinute();
 8001ace:	f001 f867 	bl	8002ba0 <getnMinute>
 8001ad2:	6078      	str	r0, [r7, #4]
	int second = getnSecond();
 8001ad4:	f001 f880 	bl	8002bd8 <getnSecond>
 8001ad8:	6038      	str	r0, [r7, #0]
	sprintf(timer_time,"%d%d:%d%d",minute/10,minute%10,second/10,second%10);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a26      	ldr	r2, [pc, #152]	; (8001b78 <n_timer_show+0xb0>)
 8001ade:	fb82 1203 	smull	r1, r2, r2, r3
 8001ae2:	1092      	asrs	r2, r2, #2
 8001ae4:	17db      	asrs	r3, r3, #31
 8001ae6:	1ad5      	subs	r5, r2, r3
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	4b23      	ldr	r3, [pc, #140]	; (8001b78 <n_timer_show+0xb0>)
 8001aec:	fb83 1302 	smull	r1, r3, r3, r2
 8001af0:	1099      	asrs	r1, r3, #2
 8001af2:	17d3      	asrs	r3, r2, #31
 8001af4:	1ac8      	subs	r0, r1, r3
 8001af6:	4603      	mov	r3, r0
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	4403      	add	r3, r0
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	1ad0      	subs	r0, r2, r3
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	4a1d      	ldr	r2, [pc, #116]	; (8001b78 <n_timer_show+0xb0>)
 8001b04:	fb82 1203 	smull	r1, r2, r2, r3
 8001b08:	1092      	asrs	r2, r2, #2
 8001b0a:	17db      	asrs	r3, r3, #31
 8001b0c:	1ad4      	subs	r4, r2, r3
 8001b0e:	6839      	ldr	r1, [r7, #0]
 8001b10:	4b19      	ldr	r3, [pc, #100]	; (8001b78 <n_timer_show+0xb0>)
 8001b12:	fb83 2301 	smull	r2, r3, r3, r1
 8001b16:	109a      	asrs	r2, r3, #2
 8001b18:	17cb      	asrs	r3, r1, #31
 8001b1a:	1ad2      	subs	r2, r2, r3
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	4413      	add	r3, r2
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	1aca      	subs	r2, r1, r3
 8001b26:	9201      	str	r2, [sp, #4]
 8001b28:	9400      	str	r4, [sp, #0]
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	462a      	mov	r2, r5
 8001b2e:	4913      	ldr	r1, [pc, #76]	; (8001b7c <n_timer_show+0xb4>)
 8001b30:	4813      	ldr	r0, [pc, #76]	; (8001b80 <n_timer_show+0xb8>)
 8001b32:	f008 f883 	bl	8009c3c <siprintf>
	SSD1306_GotoXY(10,10);
 8001b36:	210a      	movs	r1, #10
 8001b38:	200a      	movs	r0, #10
 8001b3a:	f000 fb55 	bl	80021e8 <SSD1306_GotoXY>
	SSD1306_Puts("----------------", &Font_7x10, 1);
 8001b3e:	2201      	movs	r2, #1
 8001b40:	4910      	ldr	r1, [pc, #64]	; (8001b84 <n_timer_show+0xbc>)
 8001b42:	4811      	ldr	r0, [pc, #68]	; (8001b88 <n_timer_show+0xc0>)
 8001b44:	f000 fbe6 	bl	8002314 <SSD1306_Puts>
	SSD1306_GotoXY(28,26);
 8001b48:	211a      	movs	r1, #26
 8001b4a:	201c      	movs	r0, #28
 8001b4c:	f000 fb4c 	bl	80021e8 <SSD1306_GotoXY>
	SSD1306_Puts(timer_time, &Font_11x18, 1);
 8001b50:	2201      	movs	r2, #1
 8001b52:	490e      	ldr	r1, [pc, #56]	; (8001b8c <n_timer_show+0xc4>)
 8001b54:	480a      	ldr	r0, [pc, #40]	; (8001b80 <n_timer_show+0xb8>)
 8001b56:	f000 fbdd 	bl	8002314 <SSD1306_Puts>
	SSD1306_GotoXY(10,50);
 8001b5a:	2132      	movs	r1, #50	; 0x32
 8001b5c:	200a      	movs	r0, #10
 8001b5e:	f000 fb43 	bl	80021e8 <SSD1306_GotoXY>
	SSD1306_Puts("----------------", &Font_7x10, 1);
 8001b62:	2201      	movs	r2, #1
 8001b64:	4907      	ldr	r1, [pc, #28]	; (8001b84 <n_timer_show+0xbc>)
 8001b66:	4808      	ldr	r0, [pc, #32]	; (8001b88 <n_timer_show+0xc0>)
 8001b68:	f000 fbd4 	bl	8002314 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001b6c:	f000 fa96 	bl	800209c <SSD1306_UpdateScreen>
}
 8001b70:	bf00      	nop
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bdb0      	pop	{r4, r5, r7, pc}
 8001b78:	66666667 	.word	0x66666667
 8001b7c:	0800bf70 	.word	0x0800bf70
 8001b80:	20000228 	.word	0x20000228
 8001b84:	20000058 	.word	0x20000058
 8001b88:	0800bf90 	.word	0x0800bf90
 8001b8c:	20000060 	.word	0x20000060

08001b90 <n_alarm_show>:

void n_alarm_show(){
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
	printCalender();
 8001b94:	f7ff fc2e 	bl	80013f4 <printCalender>
	print_Set_time();
 8001b98:	f7ff fe02 	bl	80017a0 <print_Set_time>
	SSD1306_GotoXY(10,50);
 8001b9c:	2132      	movs	r1, #50	; 0x32
 8001b9e:	200a      	movs	r0, #10
 8001ba0:	f000 fb22 	bl	80021e8 <SSD1306_GotoXY>
	SSD1306_Puts("ALARM_SETTING...", &Font_7x10, 1);
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	4904      	ldr	r1, [pc, #16]	; (8001bb8 <n_alarm_show+0x28>)
 8001ba8:	4804      	ldr	r0, [pc, #16]	; (8001bbc <n_alarm_show+0x2c>)
 8001baa:	f000 fbb3 	bl	8002314 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001bae:	f000 fa75 	bl	800209c <SSD1306_UpdateScreen>
}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20000058 	.word	0x20000058
 8001bbc:	0800bff8 	.word	0x0800bff8

08001bc0 <n_modify_show>:

void n_modify_show(){
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
	printCalender();
 8001bc4:	f7ff fc16 	bl	80013f4 <printCalender>
	print_Set_time();
 8001bc8:	f7ff fdea 	bl	80017a0 <print_Set_time>
	SSD1306_GotoXY(10,50);
 8001bcc:	2132      	movs	r1, #50	; 0x32
 8001bce:	200a      	movs	r0, #10
 8001bd0:	f000 fb0a 	bl	80021e8 <SSD1306_GotoXY>
	SSD1306_Puts("...MODIFYING...", &Font_7x10, 1);
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	4904      	ldr	r1, [pc, #16]	; (8001be8 <n_modify_show+0x28>)
 8001bd8:	4804      	ldr	r0, [pc, #16]	; (8001bec <n_modify_show+0x2c>)
 8001bda:	f000 fb9b 	bl	8002314 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001bde:	f000 fa5d 	bl	800209c <SSD1306_UpdateScreen>
}
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	20000058 	.word	0x20000058
 8001bec:	0800c00c 	.word	0x0800c00c

08001bf0 <check_timer_lcd>:

void check_timer_lcd(){
 8001bf0:	b5b0      	push	{r4, r5, r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af02      	add	r7, sp, #8
	int minute = getnMinute();
 8001bf6:	f000 ffd3 	bl	8002ba0 <getnMinute>
 8001bfa:	6078      	str	r0, [r7, #4]
	int second = getnSecond();
 8001bfc:	f000 ffec 	bl	8002bd8 <getnSecond>
 8001c00:	6038      	str	r0, [r7, #0]
	sprintf(timer_time,"%d%d:%d%d",minute/10,minute%10,second/10,second%10);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a26      	ldr	r2, [pc, #152]	; (8001ca0 <check_timer_lcd+0xb0>)
 8001c06:	fb82 1203 	smull	r1, r2, r2, r3
 8001c0a:	1092      	asrs	r2, r2, #2
 8001c0c:	17db      	asrs	r3, r3, #31
 8001c0e:	1ad5      	subs	r5, r2, r3
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	4b23      	ldr	r3, [pc, #140]	; (8001ca0 <check_timer_lcd+0xb0>)
 8001c14:	fb83 1302 	smull	r1, r3, r3, r2
 8001c18:	1099      	asrs	r1, r3, #2
 8001c1a:	17d3      	asrs	r3, r2, #31
 8001c1c:	1ac8      	subs	r0, r1, r3
 8001c1e:	4603      	mov	r3, r0
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	4403      	add	r3, r0
 8001c24:	005b      	lsls	r3, r3, #1
 8001c26:	1ad0      	subs	r0, r2, r3
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	4a1d      	ldr	r2, [pc, #116]	; (8001ca0 <check_timer_lcd+0xb0>)
 8001c2c:	fb82 1203 	smull	r1, r2, r2, r3
 8001c30:	1092      	asrs	r2, r2, #2
 8001c32:	17db      	asrs	r3, r3, #31
 8001c34:	1ad4      	subs	r4, r2, r3
 8001c36:	6839      	ldr	r1, [r7, #0]
 8001c38:	4b19      	ldr	r3, [pc, #100]	; (8001ca0 <check_timer_lcd+0xb0>)
 8001c3a:	fb83 2301 	smull	r2, r3, r3, r1
 8001c3e:	109a      	asrs	r2, r3, #2
 8001c40:	17cb      	asrs	r3, r1, #31
 8001c42:	1ad2      	subs	r2, r2, r3
 8001c44:	4613      	mov	r3, r2
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	4413      	add	r3, r2
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	1aca      	subs	r2, r1, r3
 8001c4e:	9201      	str	r2, [sp, #4]
 8001c50:	9400      	str	r4, [sp, #0]
 8001c52:	4603      	mov	r3, r0
 8001c54:	462a      	mov	r2, r5
 8001c56:	4913      	ldr	r1, [pc, #76]	; (8001ca4 <check_timer_lcd+0xb4>)
 8001c58:	4813      	ldr	r0, [pc, #76]	; (8001ca8 <check_timer_lcd+0xb8>)
 8001c5a:	f007 ffef 	bl	8009c3c <siprintf>
	SSD1306_GotoXY(10,10);
 8001c5e:	210a      	movs	r1, #10
 8001c60:	200a      	movs	r0, #10
 8001c62:	f000 fac1 	bl	80021e8 <SSD1306_GotoXY>
	SSD1306_Puts("----------------", &Font_7x10, 1);
 8001c66:	2201      	movs	r2, #1
 8001c68:	4910      	ldr	r1, [pc, #64]	; (8001cac <check_timer_lcd+0xbc>)
 8001c6a:	4811      	ldr	r0, [pc, #68]	; (8001cb0 <check_timer_lcd+0xc0>)
 8001c6c:	f000 fb52 	bl	8002314 <SSD1306_Puts>
	SSD1306_GotoXY(28,26);
 8001c70:	211a      	movs	r1, #26
 8001c72:	201c      	movs	r0, #28
 8001c74:	f000 fab8 	bl	80021e8 <SSD1306_GotoXY>
	SSD1306_Puts(timer_time, &Font_11x18, 1);
 8001c78:	2201      	movs	r2, #1
 8001c7a:	490e      	ldr	r1, [pc, #56]	; (8001cb4 <check_timer_lcd+0xc4>)
 8001c7c:	480a      	ldr	r0, [pc, #40]	; (8001ca8 <check_timer_lcd+0xb8>)
 8001c7e:	f000 fb49 	bl	8002314 <SSD1306_Puts>
	SSD1306_GotoXY(10,50);
 8001c82:	2132      	movs	r1, #50	; 0x32
 8001c84:	200a      	movs	r0, #10
 8001c86:	f000 faaf 	bl	80021e8 <SSD1306_GotoXY>
	SSD1306_Puts("OK? Y:SEL N:MENU", &Font_7x10, 1);
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	4907      	ldr	r1, [pc, #28]	; (8001cac <check_timer_lcd+0xbc>)
 8001c8e:	480a      	ldr	r0, [pc, #40]	; (8001cb8 <check_timer_lcd+0xc8>)
 8001c90:	f000 fb40 	bl	8002314 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001c94:	f000 fa02 	bl	800209c <SSD1306_UpdateScreen>
}
 8001c98:	bf00      	nop
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bdb0      	pop	{r4, r5, r7, pc}
 8001ca0:	66666667 	.word	0x66666667
 8001ca4:	0800bf70 	.word	0x0800bf70
 8001ca8:	20000228 	.word	0x20000228
 8001cac:	20000058 	.word	0x20000058
 8001cb0:	0800bf90 	.word	0x0800bf90
 8001cb4:	20000060 	.word	0x20000060
 8001cb8:	0800c01c 	.word	0x0800c01c

08001cbc <check_alarm_change_lcd>:

void check_alarm_change_lcd(){
 8001cbc:	b5b0      	push	{r4, r5, r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af02      	add	r7, sp, #8
	int am_pm = (int)alarm_value[2]/13;
 8001cc2:	4b53      	ldr	r3, [pc, #332]	; (8001e10 <check_alarm_change_lcd+0x154>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	4a53      	ldr	r2, [pc, #332]	; (8001e14 <check_alarm_change_lcd+0x158>)
 8001cc8:	fb82 1203 	smull	r1, r2, r2, r3
 8001ccc:	1092      	asrs	r2, r2, #2
 8001cce:	17db      	asrs	r3, r3, #31
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	607b      	str	r3, [r7, #4]
	if(am_pm){
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d034      	beq.n	8001d44 <check_alarm_change_lcd+0x88>
		int hour = alarm_value[2]-12;
 8001cda:	4b4d      	ldr	r3, [pc, #308]	; (8001e10 <check_alarm_change_lcd+0x154>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	3b0c      	subs	r3, #12
 8001ce0:	603b      	str	r3, [r7, #0]
		sprintf(alarm_time,"You Set Pm %d%d:%d%d",hour/10,hour%10,alarm_value[1]/10,alarm_value[1]%10);
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	4a4c      	ldr	r2, [pc, #304]	; (8001e18 <check_alarm_change_lcd+0x15c>)
 8001ce6:	fb82 1203 	smull	r1, r2, r2, r3
 8001cea:	1092      	asrs	r2, r2, #2
 8001cec:	17db      	asrs	r3, r3, #31
 8001cee:	1ad5      	subs	r5, r2, r3
 8001cf0:	683a      	ldr	r2, [r7, #0]
 8001cf2:	4b49      	ldr	r3, [pc, #292]	; (8001e18 <check_alarm_change_lcd+0x15c>)
 8001cf4:	fb83 1302 	smull	r1, r3, r3, r2
 8001cf8:	1099      	asrs	r1, r3, #2
 8001cfa:	17d3      	asrs	r3, r2, #31
 8001cfc:	1ac8      	subs	r0, r1, r3
 8001cfe:	4603      	mov	r3, r0
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	4403      	add	r3, r0
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	1ad0      	subs	r0, r2, r3
 8001d08:	4b41      	ldr	r3, [pc, #260]	; (8001e10 <check_alarm_change_lcd+0x154>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	4a42      	ldr	r2, [pc, #264]	; (8001e18 <check_alarm_change_lcd+0x15c>)
 8001d0e:	fb82 1203 	smull	r1, r2, r2, r3
 8001d12:	1092      	asrs	r2, r2, #2
 8001d14:	17db      	asrs	r3, r3, #31
 8001d16:	1ad4      	subs	r4, r2, r3
 8001d18:	4b3d      	ldr	r3, [pc, #244]	; (8001e10 <check_alarm_change_lcd+0x154>)
 8001d1a:	6859      	ldr	r1, [r3, #4]
 8001d1c:	4b3e      	ldr	r3, [pc, #248]	; (8001e18 <check_alarm_change_lcd+0x15c>)
 8001d1e:	fb83 2301 	smull	r2, r3, r3, r1
 8001d22:	109a      	asrs	r2, r3, #2
 8001d24:	17cb      	asrs	r3, r1, #31
 8001d26:	1ad2      	subs	r2, r2, r3
 8001d28:	4613      	mov	r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	4413      	add	r3, r2
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	1aca      	subs	r2, r1, r3
 8001d32:	9201      	str	r2, [sp, #4]
 8001d34:	9400      	str	r4, [sp, #0]
 8001d36:	4603      	mov	r3, r0
 8001d38:	462a      	mov	r2, r5
 8001d3a:	4938      	ldr	r1, [pc, #224]	; (8001e1c <check_alarm_change_lcd+0x160>)
 8001d3c:	4838      	ldr	r0, [pc, #224]	; (8001e20 <check_alarm_change_lcd+0x164>)
 8001d3e:	f007 ff7d 	bl	8009c3c <siprintf>
 8001d42:	e031      	b.n	8001da8 <check_alarm_change_lcd+0xec>
	}else{
		sprintf(alarm_time,"You Set Am %d%d:%d%d",alarm_value[2]/10,alarm_value[2]%10,alarm_value[1]/10,alarm_value[1]%10);
 8001d44:	4b32      	ldr	r3, [pc, #200]	; (8001e10 <check_alarm_change_lcd+0x154>)
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	4a33      	ldr	r2, [pc, #204]	; (8001e18 <check_alarm_change_lcd+0x15c>)
 8001d4a:	fb82 1203 	smull	r1, r2, r2, r3
 8001d4e:	1092      	asrs	r2, r2, #2
 8001d50:	17db      	asrs	r3, r3, #31
 8001d52:	1ad5      	subs	r5, r2, r3
 8001d54:	4b2e      	ldr	r3, [pc, #184]	; (8001e10 <check_alarm_change_lcd+0x154>)
 8001d56:	689a      	ldr	r2, [r3, #8]
 8001d58:	4b2f      	ldr	r3, [pc, #188]	; (8001e18 <check_alarm_change_lcd+0x15c>)
 8001d5a:	fb83 1302 	smull	r1, r3, r3, r2
 8001d5e:	1099      	asrs	r1, r3, #2
 8001d60:	17d3      	asrs	r3, r2, #31
 8001d62:	1ac8      	subs	r0, r1, r3
 8001d64:	4603      	mov	r3, r0
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	4403      	add	r3, r0
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	1ad0      	subs	r0, r2, r3
 8001d6e:	4b28      	ldr	r3, [pc, #160]	; (8001e10 <check_alarm_change_lcd+0x154>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	4a29      	ldr	r2, [pc, #164]	; (8001e18 <check_alarm_change_lcd+0x15c>)
 8001d74:	fb82 1203 	smull	r1, r2, r2, r3
 8001d78:	1092      	asrs	r2, r2, #2
 8001d7a:	17db      	asrs	r3, r3, #31
 8001d7c:	1ad4      	subs	r4, r2, r3
 8001d7e:	4b24      	ldr	r3, [pc, #144]	; (8001e10 <check_alarm_change_lcd+0x154>)
 8001d80:	6859      	ldr	r1, [r3, #4]
 8001d82:	4b25      	ldr	r3, [pc, #148]	; (8001e18 <check_alarm_change_lcd+0x15c>)
 8001d84:	fb83 2301 	smull	r2, r3, r3, r1
 8001d88:	109a      	asrs	r2, r3, #2
 8001d8a:	17cb      	asrs	r3, r1, #31
 8001d8c:	1ad2      	subs	r2, r2, r3
 8001d8e:	4613      	mov	r3, r2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	4413      	add	r3, r2
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	1aca      	subs	r2, r1, r3
 8001d98:	9201      	str	r2, [sp, #4]
 8001d9a:	9400      	str	r4, [sp, #0]
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	462a      	mov	r2, r5
 8001da0:	4920      	ldr	r1, [pc, #128]	; (8001e24 <check_alarm_change_lcd+0x168>)
 8001da2:	481f      	ldr	r0, [pc, #124]	; (8001e20 <check_alarm_change_lcd+0x164>)
 8001da4:	f007 ff4a 	bl	8009c3c <siprintf>
	}
	SSD1306_GotoXY(3,10);
 8001da8:	210a      	movs	r1, #10
 8001daa:	2003      	movs	r0, #3
 8001dac:	f000 fa1c 	bl	80021e8 <SSD1306_GotoXY>
	SSD1306_Puts("----------------", &Font_7x10, 1);
 8001db0:	2201      	movs	r2, #1
 8001db2:	491d      	ldr	r1, [pc, #116]	; (8001e28 <check_alarm_change_lcd+0x16c>)
 8001db4:	481d      	ldr	r0, [pc, #116]	; (8001e2c <check_alarm_change_lcd+0x170>)
 8001db6:	f000 faad 	bl	8002314 <SSD1306_Puts>
	SSD1306_GotoXY(3,20);
 8001dba:	2114      	movs	r1, #20
 8001dbc:	2003      	movs	r0, #3
 8001dbe:	f000 fa13 	bl	80021e8 <SSD1306_GotoXY>
	// 대충 설정한 시간을 표시
	SSD1306_Puts(alarm_time, &Font_7x10, 1);
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	4918      	ldr	r1, [pc, #96]	; (8001e28 <check_alarm_change_lcd+0x16c>)
 8001dc6:	4816      	ldr	r0, [pc, #88]	; (8001e20 <check_alarm_change_lcd+0x164>)
 8001dc8:	f000 faa4 	bl	8002314 <SSD1306_Puts>
	// you want modify
	SSD1306_GotoXY(3,30);
 8001dcc:	211e      	movs	r1, #30
 8001dce:	2003      	movs	r0, #3
 8001dd0:	f000 fa0a 	bl	80021e8 <SSD1306_GotoXY>
	SSD1306_Puts("Want Change time", &Font_7x10, 1);
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	4914      	ldr	r1, [pc, #80]	; (8001e28 <check_alarm_change_lcd+0x16c>)
 8001dd8:	4815      	ldr	r0, [pc, #84]	; (8001e30 <check_alarm_change_lcd+0x174>)
 8001dda:	f000 fa9b 	bl	8002314 <SSD1306_Puts>
	SSD1306_GotoXY(3,40);
 8001dde:	2128      	movs	r1, #40	; 0x28
 8001de0:	2003      	movs	r0, #3
 8001de2:	f000 fa01 	bl	80021e8 <SSD1306_GotoXY>
	SSD1306_Puts("Press the SEL BTN", &Font_7x10, 1);
 8001de6:	2201      	movs	r2, #1
 8001de8:	490f      	ldr	r1, [pc, #60]	; (8001e28 <check_alarm_change_lcd+0x16c>)
 8001dea:	4812      	ldr	r0, [pc, #72]	; (8001e34 <check_alarm_change_lcd+0x178>)
 8001dec:	f000 fa92 	bl	8002314 <SSD1306_Puts>
	SSD1306_GotoXY(3,50);
 8001df0:	2132      	movs	r1, #50	; 0x32
 8001df2:	2003      	movs	r0, #3
 8001df4:	f000 f9f8 	bl	80021e8 <SSD1306_GotoXY>
	SSD1306_Puts("----------------", &Font_7x10, 1);
 8001df8:	2201      	movs	r2, #1
 8001dfa:	490b      	ldr	r1, [pc, #44]	; (8001e28 <check_alarm_change_lcd+0x16c>)
 8001dfc:	480b      	ldr	r0, [pc, #44]	; (8001e2c <check_alarm_change_lcd+0x170>)
 8001dfe:	f000 fa89 	bl	8002314 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001e02:	f000 f94b 	bl	800209c <SSD1306_UpdateScreen>
}
 8001e06:	bf00      	nop
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bdb0      	pop	{r4, r5, r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	20000768 	.word	0x20000768
 8001e14:	4ec4ec4f 	.word	0x4ec4ec4f
 8001e18:	66666667 	.word	0x66666667
 8001e1c:	0800c030 	.word	0x0800c030
 8001e20:	20000250 	.word	0x20000250
 8001e24:	0800c048 	.word	0x0800c048
 8001e28:	20000058 	.word	0x20000058
 8001e2c:	0800bf90 	.word	0x0800bf90
 8001e30:	0800c060 	.word	0x0800c060
 8001e34:	0800c074 	.word	0x0800c074

08001e38 <check_alarm_lcd>:

void check_alarm_lcd()
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
	printCalender();
 8001e3c:	f7ff fada 	bl	80013f4 <printCalender>
	print_Set_time();
 8001e40:	f7ff fcae 	bl	80017a0 <print_Set_time>
	SSD1306_GotoXY(10,50);
 8001e44:	2132      	movs	r1, #50	; 0x32
 8001e46:	200a      	movs	r0, #10
 8001e48:	f000 f9ce 	bl	80021e8 <SSD1306_GotoXY>
	SSD1306_Puts("OK? Y:SEL N:MENU", &Font_7x10, 1);
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	4904      	ldr	r1, [pc, #16]	; (8001e60 <check_alarm_lcd+0x28>)
 8001e50:	4804      	ldr	r0, [pc, #16]	; (8001e64 <check_alarm_lcd+0x2c>)
 8001e52:	f000 fa5f 	bl	8002314 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001e56:	f000 f921 	bl	800209c <SSD1306_UpdateScreen>
}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20000058 	.word	0x20000058
 8001e64:	0800c01c 	.word	0x0800c01c

08001e68 <alarm_lcd>:

void alarm_lcd(){
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
	SSD1306_GotoXY(10,10);
 8001e6c:	210a      	movs	r1, #10
 8001e6e:	200a      	movs	r0, #10
 8001e70:	f000 f9ba 	bl	80021e8 <SSD1306_GotoXY>
	SSD1306_Puts("----------------", &Font_7x10, 1);
 8001e74:	2201      	movs	r2, #1
 8001e76:	4916      	ldr	r1, [pc, #88]	; (8001ed0 <alarm_lcd+0x68>)
 8001e78:	4816      	ldr	r0, [pc, #88]	; (8001ed4 <alarm_lcd+0x6c>)
 8001e7a:	f000 fa4b 	bl	8002314 <SSD1306_Puts>
	SSD1306_GotoXY(15,20);
 8001e7e:	2114      	movs	r1, #20
 8001e80:	200f      	movs	r0, #15
 8001e82:	f000 f9b1 	bl	80021e8 <SSD1306_GotoXY>
	SSD1306_Puts("Alarm Completed!!", &Font_7x10, 1);
 8001e86:	2201      	movs	r2, #1
 8001e88:	4911      	ldr	r1, [pc, #68]	; (8001ed0 <alarm_lcd+0x68>)
 8001e8a:	4813      	ldr	r0, [pc, #76]	; (8001ed8 <alarm_lcd+0x70>)
 8001e8c:	f000 fa42 	bl	8002314 <SSD1306_Puts>
	SSD1306_GotoXY(15,30);
 8001e90:	211e      	movs	r1, #30
 8001e92:	200f      	movs	r0, #15
 8001e94:	f000 f9a8 	bl	80021e8 <SSD1306_GotoXY>
	SSD1306_Puts("Press The", &Font_7x10, 1);
 8001e98:	2201      	movs	r2, #1
 8001e9a:	490d      	ldr	r1, [pc, #52]	; (8001ed0 <alarm_lcd+0x68>)
 8001e9c:	480f      	ldr	r0, [pc, #60]	; (8001edc <alarm_lcd+0x74>)
 8001e9e:	f000 fa39 	bl	8002314 <SSD1306_Puts>
	SSD1306_GotoXY(15,40);
 8001ea2:	2128      	movs	r1, #40	; 0x28
 8001ea4:	200f      	movs	r0, #15
 8001ea6:	f000 f99f 	bl	80021e8 <SSD1306_GotoXY>
	SSD1306_Puts("Can Button", &Font_7x10, 1);
 8001eaa:	2201      	movs	r2, #1
 8001eac:	4908      	ldr	r1, [pc, #32]	; (8001ed0 <alarm_lcd+0x68>)
 8001eae:	480c      	ldr	r0, [pc, #48]	; (8001ee0 <alarm_lcd+0x78>)
 8001eb0:	f000 fa30 	bl	8002314 <SSD1306_Puts>
	SSD1306_GotoXY(10,50);
 8001eb4:	2132      	movs	r1, #50	; 0x32
 8001eb6:	200a      	movs	r0, #10
 8001eb8:	f000 f996 	bl	80021e8 <SSD1306_GotoXY>
	SSD1306_Puts("----------------", &Font_7x10, 1);
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	4904      	ldr	r1, [pc, #16]	; (8001ed0 <alarm_lcd+0x68>)
 8001ec0:	4804      	ldr	r0, [pc, #16]	; (8001ed4 <alarm_lcd+0x6c>)
 8001ec2:	f000 fa27 	bl	8002314 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001ec6:	f000 f8e9 	bl	800209c <SSD1306_UpdateScreen>

}
 8001eca:	bf00      	nop
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	20000058 	.word	0x20000058
 8001ed4:	0800bf90 	.word	0x0800bf90
 8001ed8:	0800c088 	.word	0x0800c088
 8001edc:	0800bfe0 	.word	0x0800bfe0
 8001ee0:	0800bfec 	.word	0x0800bfec

08001ee4 <check_modify_lcd>:

void check_modify_lcd(){
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
	printCalender();
 8001ee8:	f7ff fa84 	bl	80013f4 <printCalender>
	printClock();
 8001eec:	f7ff fb74 	bl	80015d8 <printClock>
	SSD1306_GotoXY(3,50);
 8001ef0:	2132      	movs	r1, #50	; 0x32
 8001ef2:	2003      	movs	r0, #3
 8001ef4:	f000 f978 	bl	80021e8 <SSD1306_GotoXY>
	SSD1306_Puts("OK? Y:SEL N:MENU", &Font_7x10, 1);
 8001ef8:	2201      	movs	r2, #1
 8001efa:	4904      	ldr	r1, [pc, #16]	; (8001f0c <check_modify_lcd+0x28>)
 8001efc:	4804      	ldr	r0, [pc, #16]	; (8001f10 <check_modify_lcd+0x2c>)
 8001efe:	f000 fa09 	bl	8002314 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8001f02:	f000 f8cb 	bl	800209c <SSD1306_UpdateScreen>
}
 8001f06:	bf00      	nop
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	20000058 	.word	0x20000058
 8001f10:	0800c01c 	.word	0x0800c01c

08001f14 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001f1a:	f000 fa29 	bl	8002370 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001f1e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001f22:	2201      	movs	r2, #1
 8001f24:	2178      	movs	r1, #120	; 0x78
 8001f26:	485b      	ldr	r0, [pc, #364]	; (8002094 <SSD1306_Init+0x180>)
 8001f28:	f003 f896 	bl	8005058 <HAL_I2C_IsDeviceReady>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001f32:	2300      	movs	r3, #0
 8001f34:	e0a9      	b.n	800208a <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001f36:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001f3a:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001f3c:	e002      	b.n	8001f44 <SSD1306_Init+0x30>
		p--;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	3b01      	subs	r3, #1
 8001f42:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1f9      	bne.n	8001f3e <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001f4a:	22ae      	movs	r2, #174	; 0xae
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	2078      	movs	r0, #120	; 0x78
 8001f50:	f000 fa8a 	bl	8002468 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001f54:	2220      	movs	r2, #32
 8001f56:	2100      	movs	r1, #0
 8001f58:	2078      	movs	r0, #120	; 0x78
 8001f5a:	f000 fa85 	bl	8002468 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001f5e:	2210      	movs	r2, #16
 8001f60:	2100      	movs	r1, #0
 8001f62:	2078      	movs	r0, #120	; 0x78
 8001f64:	f000 fa80 	bl	8002468 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001f68:	22b0      	movs	r2, #176	; 0xb0
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	2078      	movs	r0, #120	; 0x78
 8001f6e:	f000 fa7b 	bl	8002468 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001f72:	22c8      	movs	r2, #200	; 0xc8
 8001f74:	2100      	movs	r1, #0
 8001f76:	2078      	movs	r0, #120	; 0x78
 8001f78:	f000 fa76 	bl	8002468 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	2100      	movs	r1, #0
 8001f80:	2078      	movs	r0, #120	; 0x78
 8001f82:	f000 fa71 	bl	8002468 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001f86:	2210      	movs	r2, #16
 8001f88:	2100      	movs	r1, #0
 8001f8a:	2078      	movs	r0, #120	; 0x78
 8001f8c:	f000 fa6c 	bl	8002468 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001f90:	2240      	movs	r2, #64	; 0x40
 8001f92:	2100      	movs	r1, #0
 8001f94:	2078      	movs	r0, #120	; 0x78
 8001f96:	f000 fa67 	bl	8002468 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001f9a:	2281      	movs	r2, #129	; 0x81
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	2078      	movs	r0, #120	; 0x78
 8001fa0:	f000 fa62 	bl	8002468 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001fa4:	22ff      	movs	r2, #255	; 0xff
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	2078      	movs	r0, #120	; 0x78
 8001faa:	f000 fa5d 	bl	8002468 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001fae:	22a1      	movs	r2, #161	; 0xa1
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	2078      	movs	r0, #120	; 0x78
 8001fb4:	f000 fa58 	bl	8002468 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001fb8:	22a6      	movs	r2, #166	; 0xa6
 8001fba:	2100      	movs	r1, #0
 8001fbc:	2078      	movs	r0, #120	; 0x78
 8001fbe:	f000 fa53 	bl	8002468 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001fc2:	22a8      	movs	r2, #168	; 0xa8
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	2078      	movs	r0, #120	; 0x78
 8001fc8:	f000 fa4e 	bl	8002468 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001fcc:	223f      	movs	r2, #63	; 0x3f
 8001fce:	2100      	movs	r1, #0
 8001fd0:	2078      	movs	r0, #120	; 0x78
 8001fd2:	f000 fa49 	bl	8002468 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001fd6:	22a4      	movs	r2, #164	; 0xa4
 8001fd8:	2100      	movs	r1, #0
 8001fda:	2078      	movs	r0, #120	; 0x78
 8001fdc:	f000 fa44 	bl	8002468 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001fe0:	22d3      	movs	r2, #211	; 0xd3
 8001fe2:	2100      	movs	r1, #0
 8001fe4:	2078      	movs	r0, #120	; 0x78
 8001fe6:	f000 fa3f 	bl	8002468 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001fea:	2200      	movs	r2, #0
 8001fec:	2100      	movs	r1, #0
 8001fee:	2078      	movs	r0, #120	; 0x78
 8001ff0:	f000 fa3a 	bl	8002468 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001ff4:	22d5      	movs	r2, #213	; 0xd5
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	2078      	movs	r0, #120	; 0x78
 8001ffa:	f000 fa35 	bl	8002468 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001ffe:	22f0      	movs	r2, #240	; 0xf0
 8002000:	2100      	movs	r1, #0
 8002002:	2078      	movs	r0, #120	; 0x78
 8002004:	f000 fa30 	bl	8002468 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8002008:	22d9      	movs	r2, #217	; 0xd9
 800200a:	2100      	movs	r1, #0
 800200c:	2078      	movs	r0, #120	; 0x78
 800200e:	f000 fa2b 	bl	8002468 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8002012:	2222      	movs	r2, #34	; 0x22
 8002014:	2100      	movs	r1, #0
 8002016:	2078      	movs	r0, #120	; 0x78
 8002018:	f000 fa26 	bl	8002468 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800201c:	22da      	movs	r2, #218	; 0xda
 800201e:	2100      	movs	r1, #0
 8002020:	2078      	movs	r0, #120	; 0x78
 8002022:	f000 fa21 	bl	8002468 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8002026:	2212      	movs	r2, #18
 8002028:	2100      	movs	r1, #0
 800202a:	2078      	movs	r0, #120	; 0x78
 800202c:	f000 fa1c 	bl	8002468 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002030:	22db      	movs	r2, #219	; 0xdb
 8002032:	2100      	movs	r1, #0
 8002034:	2078      	movs	r0, #120	; 0x78
 8002036:	f000 fa17 	bl	8002468 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800203a:	2220      	movs	r2, #32
 800203c:	2100      	movs	r1, #0
 800203e:	2078      	movs	r0, #120	; 0x78
 8002040:	f000 fa12 	bl	8002468 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002044:	228d      	movs	r2, #141	; 0x8d
 8002046:	2100      	movs	r1, #0
 8002048:	2078      	movs	r0, #120	; 0x78
 800204a:	f000 fa0d 	bl	8002468 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800204e:	2214      	movs	r2, #20
 8002050:	2100      	movs	r1, #0
 8002052:	2078      	movs	r0, #120	; 0x78
 8002054:	f000 fa08 	bl	8002468 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002058:	22af      	movs	r2, #175	; 0xaf
 800205a:	2100      	movs	r1, #0
 800205c:	2078      	movs	r0, #120	; 0x78
 800205e:	f000 fa03 	bl	8002468 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8002062:	222e      	movs	r2, #46	; 0x2e
 8002064:	2100      	movs	r1, #0
 8002066:	2078      	movs	r0, #120	; 0x78
 8002068:	f000 f9fe 	bl	8002468 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800206c:	2000      	movs	r0, #0
 800206e:	f000 f843 	bl	80020f8 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8002072:	f000 f813 	bl	800209c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8002076:	4b08      	ldr	r3, [pc, #32]	; (8002098 <SSD1306_Init+0x184>)
 8002078:	2200      	movs	r2, #0
 800207a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800207c:	4b06      	ldr	r3, [pc, #24]	; (8002098 <SSD1306_Init+0x184>)
 800207e:	2200      	movs	r2, #0
 8002080:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8002082:	4b05      	ldr	r3, [pc, #20]	; (8002098 <SSD1306_Init+0x184>)
 8002084:	2201      	movs	r2, #1
 8002086:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8002088:	2301      	movs	r3, #1
}
 800208a:	4618      	mov	r0, r3
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	200007c8 	.word	0x200007c8
 8002098:	200006e8 	.word	0x200006e8

0800209c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80020a2:	2300      	movs	r3, #0
 80020a4:	71fb      	strb	r3, [r7, #7]
 80020a6:	e01d      	b.n	80020e4 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80020a8:	79fb      	ldrb	r3, [r7, #7]
 80020aa:	3b50      	subs	r3, #80	; 0x50
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	461a      	mov	r2, r3
 80020b0:	2100      	movs	r1, #0
 80020b2:	2078      	movs	r0, #120	; 0x78
 80020b4:	f000 f9d8 	bl	8002468 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80020b8:	2200      	movs	r2, #0
 80020ba:	2100      	movs	r1, #0
 80020bc:	2078      	movs	r0, #120	; 0x78
 80020be:	f000 f9d3 	bl	8002468 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80020c2:	2210      	movs	r2, #16
 80020c4:	2100      	movs	r1, #0
 80020c6:	2078      	movs	r0, #120	; 0x78
 80020c8:	f000 f9ce 	bl	8002468 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80020cc:	79fb      	ldrb	r3, [r7, #7]
 80020ce:	01db      	lsls	r3, r3, #7
 80020d0:	4a08      	ldr	r2, [pc, #32]	; (80020f4 <SSD1306_UpdateScreen+0x58>)
 80020d2:	441a      	add	r2, r3
 80020d4:	2380      	movs	r3, #128	; 0x80
 80020d6:	2140      	movs	r1, #64	; 0x40
 80020d8:	2078      	movs	r0, #120	; 0x78
 80020da:	f000 f95f 	bl	800239c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80020de:	79fb      	ldrb	r3, [r7, #7]
 80020e0:	3301      	adds	r3, #1
 80020e2:	71fb      	strb	r3, [r7, #7]
 80020e4:	79fb      	ldrb	r3, [r7, #7]
 80020e6:	2b07      	cmp	r3, #7
 80020e8:	d9de      	bls.n	80020a8 <SSD1306_UpdateScreen+0xc>
	}
}
 80020ea:	bf00      	nop
 80020ec:	bf00      	nop
 80020ee:	3708      	adds	r7, #8
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	200002e8 	.word	0x200002e8

080020f8 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	4603      	mov	r3, r0
 8002100:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002102:	79fb      	ldrb	r3, [r7, #7]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d101      	bne.n	800210c <SSD1306_Fill+0x14>
 8002108:	2300      	movs	r3, #0
 800210a:	e000      	b.n	800210e <SSD1306_Fill+0x16>
 800210c:	23ff      	movs	r3, #255	; 0xff
 800210e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002112:	4619      	mov	r1, r3
 8002114:	4803      	ldr	r0, [pc, #12]	; (8002124 <SSD1306_Fill+0x2c>)
 8002116:	f007 f9f3 	bl	8009500 <memset>
}
 800211a:	bf00      	nop
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	200002e8 	.word	0x200002e8

08002128 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	4603      	mov	r3, r0
 8002130:	80fb      	strh	r3, [r7, #6]
 8002132:	460b      	mov	r3, r1
 8002134:	80bb      	strh	r3, [r7, #4]
 8002136:	4613      	mov	r3, r2
 8002138:	70fb      	strb	r3, [r7, #3]
	if (
 800213a:	88fb      	ldrh	r3, [r7, #6]
 800213c:	2b7f      	cmp	r3, #127	; 0x7f
 800213e:	d848      	bhi.n	80021d2 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8002140:	88bb      	ldrh	r3, [r7, #4]
 8002142:	2b3f      	cmp	r3, #63	; 0x3f
 8002144:	d845      	bhi.n	80021d2 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8002146:	4b26      	ldr	r3, [pc, #152]	; (80021e0 <SSD1306_DrawPixel+0xb8>)
 8002148:	791b      	ldrb	r3, [r3, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d006      	beq.n	800215c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800214e:	78fb      	ldrb	r3, [r7, #3]
 8002150:	2b00      	cmp	r3, #0
 8002152:	bf0c      	ite	eq
 8002154:	2301      	moveq	r3, #1
 8002156:	2300      	movne	r3, #0
 8002158:	b2db      	uxtb	r3, r3
 800215a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800215c:	78fb      	ldrb	r3, [r7, #3]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d11a      	bne.n	8002198 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002162:	88fa      	ldrh	r2, [r7, #6]
 8002164:	88bb      	ldrh	r3, [r7, #4]
 8002166:	08db      	lsrs	r3, r3, #3
 8002168:	b298      	uxth	r0, r3
 800216a:	4603      	mov	r3, r0
 800216c:	01db      	lsls	r3, r3, #7
 800216e:	4413      	add	r3, r2
 8002170:	4a1c      	ldr	r2, [pc, #112]	; (80021e4 <SSD1306_DrawPixel+0xbc>)
 8002172:	5cd3      	ldrb	r3, [r2, r3]
 8002174:	b25a      	sxtb	r2, r3
 8002176:	88bb      	ldrh	r3, [r7, #4]
 8002178:	f003 0307 	and.w	r3, r3, #7
 800217c:	2101      	movs	r1, #1
 800217e:	fa01 f303 	lsl.w	r3, r1, r3
 8002182:	b25b      	sxtb	r3, r3
 8002184:	4313      	orrs	r3, r2
 8002186:	b259      	sxtb	r1, r3
 8002188:	88fa      	ldrh	r2, [r7, #6]
 800218a:	4603      	mov	r3, r0
 800218c:	01db      	lsls	r3, r3, #7
 800218e:	4413      	add	r3, r2
 8002190:	b2c9      	uxtb	r1, r1
 8002192:	4a14      	ldr	r2, [pc, #80]	; (80021e4 <SSD1306_DrawPixel+0xbc>)
 8002194:	54d1      	strb	r1, [r2, r3]
 8002196:	e01d      	b.n	80021d4 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002198:	88fa      	ldrh	r2, [r7, #6]
 800219a:	88bb      	ldrh	r3, [r7, #4]
 800219c:	08db      	lsrs	r3, r3, #3
 800219e:	b298      	uxth	r0, r3
 80021a0:	4603      	mov	r3, r0
 80021a2:	01db      	lsls	r3, r3, #7
 80021a4:	4413      	add	r3, r2
 80021a6:	4a0f      	ldr	r2, [pc, #60]	; (80021e4 <SSD1306_DrawPixel+0xbc>)
 80021a8:	5cd3      	ldrb	r3, [r2, r3]
 80021aa:	b25a      	sxtb	r2, r3
 80021ac:	88bb      	ldrh	r3, [r7, #4]
 80021ae:	f003 0307 	and.w	r3, r3, #7
 80021b2:	2101      	movs	r1, #1
 80021b4:	fa01 f303 	lsl.w	r3, r1, r3
 80021b8:	b25b      	sxtb	r3, r3
 80021ba:	43db      	mvns	r3, r3
 80021bc:	b25b      	sxtb	r3, r3
 80021be:	4013      	ands	r3, r2
 80021c0:	b259      	sxtb	r1, r3
 80021c2:	88fa      	ldrh	r2, [r7, #6]
 80021c4:	4603      	mov	r3, r0
 80021c6:	01db      	lsls	r3, r3, #7
 80021c8:	4413      	add	r3, r2
 80021ca:	b2c9      	uxtb	r1, r1
 80021cc:	4a05      	ldr	r2, [pc, #20]	; (80021e4 <SSD1306_DrawPixel+0xbc>)
 80021ce:	54d1      	strb	r1, [r2, r3]
 80021d0:	e000      	b.n	80021d4 <SSD1306_DrawPixel+0xac>
		return;
 80021d2:	bf00      	nop
	}
}
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	200006e8 	.word	0x200006e8
 80021e4:	200002e8 	.word	0x200002e8

080021e8 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	4603      	mov	r3, r0
 80021f0:	460a      	mov	r2, r1
 80021f2:	80fb      	strh	r3, [r7, #6]
 80021f4:	4613      	mov	r3, r2
 80021f6:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80021f8:	4a05      	ldr	r2, [pc, #20]	; (8002210 <SSD1306_GotoXY+0x28>)
 80021fa:	88fb      	ldrh	r3, [r7, #6]
 80021fc:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80021fe:	4a04      	ldr	r2, [pc, #16]	; (8002210 <SSD1306_GotoXY+0x28>)
 8002200:	88bb      	ldrh	r3, [r7, #4]
 8002202:	8053      	strh	r3, [r2, #2]
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	200006e8 	.word	0x200006e8

08002214 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af00      	add	r7, sp, #0
 800221a:	4603      	mov	r3, r0
 800221c:	6039      	str	r1, [r7, #0]
 800221e:	71fb      	strb	r3, [r7, #7]
 8002220:	4613      	mov	r3, r2
 8002222:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002224:	4b3a      	ldr	r3, [pc, #232]	; (8002310 <SSD1306_Putc+0xfc>)
 8002226:	881b      	ldrh	r3, [r3, #0]
 8002228:	461a      	mov	r2, r3
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	4413      	add	r3, r2
	if (
 8002230:	2b7f      	cmp	r3, #127	; 0x7f
 8002232:	dc07      	bgt.n	8002244 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8002234:	4b36      	ldr	r3, [pc, #216]	; (8002310 <SSD1306_Putc+0xfc>)
 8002236:	885b      	ldrh	r3, [r3, #2]
 8002238:	461a      	mov	r2, r3
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	785b      	ldrb	r3, [r3, #1]
 800223e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002240:	2b3f      	cmp	r3, #63	; 0x3f
 8002242:	dd01      	ble.n	8002248 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8002244:	2300      	movs	r3, #0
 8002246:	e05e      	b.n	8002306 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002248:	2300      	movs	r3, #0
 800224a:	617b      	str	r3, [r7, #20]
 800224c:	e04b      	b.n	80022e6 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685a      	ldr	r2, [r3, #4]
 8002252:	79fb      	ldrb	r3, [r7, #7]
 8002254:	3b20      	subs	r3, #32
 8002256:	6839      	ldr	r1, [r7, #0]
 8002258:	7849      	ldrb	r1, [r1, #1]
 800225a:	fb01 f303 	mul.w	r3, r1, r3
 800225e:	4619      	mov	r1, r3
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	440b      	add	r3, r1
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	4413      	add	r3, r2
 8002268:	881b      	ldrh	r3, [r3, #0]
 800226a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 800226c:	2300      	movs	r3, #0
 800226e:	613b      	str	r3, [r7, #16]
 8002270:	e030      	b.n	80022d4 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d010      	beq.n	80022a4 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8002282:	4b23      	ldr	r3, [pc, #140]	; (8002310 <SSD1306_Putc+0xfc>)
 8002284:	881a      	ldrh	r2, [r3, #0]
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	b29b      	uxth	r3, r3
 800228a:	4413      	add	r3, r2
 800228c:	b298      	uxth	r0, r3
 800228e:	4b20      	ldr	r3, [pc, #128]	; (8002310 <SSD1306_Putc+0xfc>)
 8002290:	885a      	ldrh	r2, [r3, #2]
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	b29b      	uxth	r3, r3
 8002296:	4413      	add	r3, r2
 8002298:	b29b      	uxth	r3, r3
 800229a:	79ba      	ldrb	r2, [r7, #6]
 800229c:	4619      	mov	r1, r3
 800229e:	f7ff ff43 	bl	8002128 <SSD1306_DrawPixel>
 80022a2:	e014      	b.n	80022ce <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80022a4:	4b1a      	ldr	r3, [pc, #104]	; (8002310 <SSD1306_Putc+0xfc>)
 80022a6:	881a      	ldrh	r2, [r3, #0]
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	4413      	add	r3, r2
 80022ae:	b298      	uxth	r0, r3
 80022b0:	4b17      	ldr	r3, [pc, #92]	; (8002310 <SSD1306_Putc+0xfc>)
 80022b2:	885a      	ldrh	r2, [r3, #2]
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	4413      	add	r3, r2
 80022ba:	b299      	uxth	r1, r3
 80022bc:	79bb      	ldrb	r3, [r7, #6]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	bf0c      	ite	eq
 80022c2:	2301      	moveq	r3, #1
 80022c4:	2300      	movne	r3, #0
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	461a      	mov	r2, r3
 80022ca:	f7ff ff2d 	bl	8002128 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	3301      	adds	r3, #1
 80022d2:	613b      	str	r3, [r7, #16]
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	461a      	mov	r2, r3
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	4293      	cmp	r3, r2
 80022de:	d3c8      	bcc.n	8002272 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	3301      	adds	r3, #1
 80022e4:	617b      	str	r3, [r7, #20]
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	785b      	ldrb	r3, [r3, #1]
 80022ea:	461a      	mov	r2, r3
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d3ad      	bcc.n	800224e <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80022f2:	4b07      	ldr	r3, [pc, #28]	; (8002310 <SSD1306_Putc+0xfc>)
 80022f4:	881a      	ldrh	r2, [r3, #0]
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	4413      	add	r3, r2
 80022fe:	b29a      	uxth	r2, r3
 8002300:	4b03      	ldr	r3, [pc, #12]	; (8002310 <SSD1306_Putc+0xfc>)
 8002302:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8002304:	79fb      	ldrb	r3, [r7, #7]
}
 8002306:	4618      	mov	r0, r3
 8002308:	3718      	adds	r7, #24
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	200006e8 	.word	0x200006e8

08002314 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	60b9      	str	r1, [r7, #8]
 800231e:	4613      	mov	r3, r2
 8002320:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8002322:	e012      	b.n	800234a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	79fa      	ldrb	r2, [r7, #7]
 800232a:	68b9      	ldr	r1, [r7, #8]
 800232c:	4618      	mov	r0, r3
 800232e:	f7ff ff71 	bl	8002214 <SSD1306_Putc>
 8002332:	4603      	mov	r3, r0
 8002334:	461a      	mov	r2, r3
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	429a      	cmp	r2, r3
 800233c:	d002      	beq.n	8002344 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	e008      	b.n	8002356 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	3301      	adds	r3, #1
 8002348:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d1e8      	bne.n	8002324 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	781b      	ldrb	r3, [r3, #0]
}
 8002356:	4618      	mov	r0, r3
 8002358:	3710      	adds	r7, #16
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8002362:	2000      	movs	r0, #0
 8002364:	f7ff fec8 	bl	80020f8 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8002368:	f7ff fe98 	bl	800209c <SSD1306_UpdateScreen>
}
 800236c:	bf00      	nop
 800236e:	bd80      	pop	{r7, pc}

08002370 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8002376:	4b08      	ldr	r3, [pc, #32]	; (8002398 <ssd1306_I2C_Init+0x28>)
 8002378:	607b      	str	r3, [r7, #4]
	while(p>0)
 800237a:	e002      	b.n	8002382 <ssd1306_I2C_Init+0x12>
		p--;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	3b01      	subs	r3, #1
 8002380:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d1f9      	bne.n	800237c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8002388:	bf00      	nop
 800238a:	bf00      	nop
 800238c:	370c      	adds	r7, #12
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	0003d090 	.word	0x0003d090

0800239c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800239c:	b590      	push	{r4, r7, lr}
 800239e:	b0c7      	sub	sp, #284	; 0x11c
 80023a0:	af02      	add	r7, sp, #8
 80023a2:	4604      	mov	r4, r0
 80023a4:	4608      	mov	r0, r1
 80023a6:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80023aa:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 80023ae:	600a      	str	r2, [r1, #0]
 80023b0:	4619      	mov	r1, r3
 80023b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80023b6:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80023ba:	4622      	mov	r2, r4
 80023bc:	701a      	strb	r2, [r3, #0]
 80023be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80023c2:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80023c6:	4602      	mov	r2, r0
 80023c8:	701a      	strb	r2, [r3, #0]
 80023ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80023ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80023d2:	460a      	mov	r2, r1
 80023d4:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80023d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80023da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80023de:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80023e2:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 80023e6:	7812      	ldrb	r2, [r2, #0]
 80023e8:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80023ea:	2300      	movs	r3, #0
 80023ec:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80023f0:	e015      	b.n	800241e <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80023f2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80023f6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80023fa:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80023fe:	6812      	ldr	r2, [r2, #0]
 8002400:	441a      	add	r2, r3
 8002402:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002406:	3301      	adds	r3, #1
 8002408:	7811      	ldrb	r1, [r2, #0]
 800240a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800240e:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8002412:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8002414:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002418:	3301      	adds	r3, #1
 800241a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800241e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002422:	b29b      	uxth	r3, r3
 8002424:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002428:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800242c:	8812      	ldrh	r2, [r2, #0]
 800242e:	429a      	cmp	r2, r3
 8002430:	d8df      	bhi.n	80023f2 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8002432:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002436:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	b299      	uxth	r1, r3
 800243e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002442:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002446:	881b      	ldrh	r3, [r3, #0]
 8002448:	3301      	adds	r3, #1
 800244a:	b29b      	uxth	r3, r3
 800244c:	f107 020c 	add.w	r2, r7, #12
 8002450:	200a      	movs	r0, #10
 8002452:	9000      	str	r0, [sp, #0]
 8002454:	4803      	ldr	r0, [pc, #12]	; (8002464 <ssd1306_I2C_WriteMulti+0xc8>)
 8002456:	f002 fd0b 	bl	8004e70 <HAL_I2C_Master_Transmit>
}
 800245a:	bf00      	nop
 800245c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8002460:	46bd      	mov	sp, r7
 8002462:	bd90      	pop	{r4, r7, pc}
 8002464:	200007c8 	.word	0x200007c8

08002468 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af02      	add	r7, sp, #8
 800246e:	4603      	mov	r3, r0
 8002470:	71fb      	strb	r3, [r7, #7]
 8002472:	460b      	mov	r3, r1
 8002474:	71bb      	strb	r3, [r7, #6]
 8002476:	4613      	mov	r3, r2
 8002478:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800247a:	79bb      	ldrb	r3, [r7, #6]
 800247c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800247e:	797b      	ldrb	r3, [r7, #5]
 8002480:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8002482:	79fb      	ldrb	r3, [r7, #7]
 8002484:	b299      	uxth	r1, r3
 8002486:	f107 020c 	add.w	r2, r7, #12
 800248a:	230a      	movs	r3, #10
 800248c:	9300      	str	r3, [sp, #0]
 800248e:	2302      	movs	r3, #2
 8002490:	4803      	ldr	r0, [pc, #12]	; (80024a0 <ssd1306_I2C_Write+0x38>)
 8002492:	f002 fced 	bl	8004e70 <HAL_I2C_Master_Transmit>
}
 8002496:	bf00      	nop
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	200007c8 	.word	0x200007c8

080024a4 <handleButtonPress>:
// m_Process case is Modify the Clock's Hour and Minute Process_number, 0 is hour Modify, 1 is Minute Modify,
// i think Add a mode, year,month,day Modify Modes
static int m_Process_case = 0;


bool handleButtonPress(int *process_case, int increment) {
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
    if (select_btn) {
 80024ae:	4b1e      	ldr	r3, [pc, #120]	; (8002528 <handleButtonPress+0x84>)
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d012      	beq.n	80024dc <handleButtonPress+0x38>
        select_btn = 0;  // 0은 false
 80024b6:	4b1c      	ldr	r3, [pc, #112]	; (8002528 <handleButtonPress+0x84>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	701a      	strb	r2, [r3, #0]
        if(*process_case >99){
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2b63      	cmp	r3, #99	; 0x63
 80024c2:	dd03      	ble.n	80024cc <handleButtonPress+0x28>
			*process_case = 0;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	601a      	str	r2, [r3, #0]
 80024ca:	e005      	b.n	80024d8 <handleButtonPress+0x34>
		}else{
			*process_case += increment;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	441a      	add	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	601a      	str	r2, [r3, #0]
		}
        return true;  // 1은 true
 80024d8:	2301      	movs	r3, #1
 80024da:	e020      	b.n	800251e <handleButtonPress+0x7a>
    }else if (cancel_btn){
 80024dc:	4b13      	ldr	r3, [pc, #76]	; (800252c <handleButtonPress+0x88>)
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d01c      	beq.n	800251e <handleButtonPress+0x7a>
    	cancel_btn = 0;
 80024e4:	4b11      	ldr	r3, [pc, #68]	; (800252c <handleButtonPress+0x88>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	701a      	strb	r2, [r3, #0]
    	if(*process_case >99){
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2b63      	cmp	r3, #99	; 0x63
 80024f0:	dd03      	ble.n	80024fa <handleButtonPress+0x56>
    		setMode(0);
 80024f2:	2000      	movs	r0, #0
 80024f4:	f000 fa9e 	bl	8002a34 <setMode>
 80024f8:	e005      	b.n	8002506 <handleButtonPress+0x62>
    	}else{
    		*process_case -= increment;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	1ad2      	subs	r2, r2, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	601a      	str	r2, [r3, #0]
    	}
    	if(*process_case < 0){
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2b00      	cmp	r3, #0
 800250c:	da05      	bge.n	800251a <handleButtonPress+0x76>
    		*process_case=0;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	601a      	str	r2, [r3, #0]
    		setMode(0);
 8002514:	2000      	movs	r0, #0
 8002516:	f000 fa8d 	bl	8002a34 <setMode>
    	}
    	return false;  // 0은 false
 800251a:	2300      	movs	r3, #0
 800251c:	e7ff      	b.n	800251e <handleButtonPress+0x7a>
    }
}
 800251e:	4618      	mov	r0, r3
 8002520:	3708      	adds	r7, #8
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	2000075b 	.word	0x2000075b
 800252c:	20000758 	.word	0x20000758

08002530 <processTimerMinute>:

void processTimerMinute() {
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
    set_Minute();
 8002534:	f7fe f91a 	bl	800076c <set_Minute>
    if (handleButtonPress( &t_Process_case, 1)== true) {
 8002538:	2101      	movs	r1, #1
 800253a:	4806      	ldr	r0, [pc, #24]	; (8002554 <processTimerMinute+0x24>)
 800253c:	f7ff ffb2 	bl	80024a4 <handleButtonPress>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d004      	beq.n	8002550 <processTimerMinute+0x20>
        timer_value[1] = getnMinute();
 8002546:	f000 fb2b 	bl	8002ba0 <getnMinute>
 800254a:	4603      	mov	r3, r0
 800254c:	4a02      	ldr	r2, [pc, #8]	; (8002558 <processTimerMinute+0x28>)
 800254e:	6053      	str	r3, [r2, #4]
    }
}
 8002550:	bf00      	nop
 8002552:	bd80      	pop	{r7, pc}
 8002554:	200006f0 	.word	0x200006f0
 8002558:	2000075c 	.word	0x2000075c

0800255c <processTimerSecond>:

void processTimerSecond() {
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
    set_Second();
 8002560:	f7fe f94e 	bl	8000800 <set_Second>
    if (handleButtonPress(&t_Process_case, 1) == true) {
 8002564:	2101      	movs	r1, #1
 8002566:	4806      	ldr	r0, [pc, #24]	; (8002580 <processTimerSecond+0x24>)
 8002568:	f7ff ff9c 	bl	80024a4 <handleButtonPress>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d004      	beq.n	800257c <processTimerSecond+0x20>
        timer_value[0] = getnSecond();
 8002572:	f000 fb31 	bl	8002bd8 <getnSecond>
 8002576:	4603      	mov	r3, r0
 8002578:	4a02      	ldr	r2, [pc, #8]	; (8002584 <processTimerSecond+0x28>)
 800257a:	6013      	str	r3, [r2, #0]
    }
}
 800257c:	bf00      	nop
 800257e:	bd80      	pop	{r7, pc}
 8002580:	200006f0 	.word	0x200006f0
 8002584:	2000075c 	.word	0x2000075c

08002588 <processTimerReview>:

void processTimerReview() {
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
    check_timer_lcd();
 800258c:	f7ff fb30 	bl	8001bf0 <check_timer_lcd>
    if (handleButtonPress(&t_Process_case, 1)== true) {
 8002590:	2101      	movs	r1, #1
 8002592:	480d      	ldr	r0, [pc, #52]	; (80025c8 <processTimerReview+0x40>)
 8002594:	f7ff ff86 	bl	80024a4 <handleButtonPress>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d011      	beq.n	80025c2 <processTimerReview+0x3a>
        cal_Second();
 800259e:	f7fe f9db 	bl	8000958 <cal_Second>
        t_Process_case = 0;
 80025a2:	4b09      	ldr	r3, [pc, #36]	; (80025c8 <processTimerReview+0x40>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]
        setTimerState(1);
 80025a8:	2001      	movs	r0, #1
 80025aa:	f000 fa5f 	bl	8002a6c <setTimerState>
        setnMinute(0);
 80025ae:	2000      	movs	r0, #0
 80025b0:	f000 fb02 	bl	8002bb8 <setnMinute>
        setnSecond(0);
 80025b4:	2000      	movs	r0, #0
 80025b6:	f000 fb1b 	bl	8002bf0 <setnSecond>
        setMode(-1);
 80025ba:	f04f 30ff 	mov.w	r0, #4294967295
 80025be:	f000 fa39 	bl	8002a34 <setMode>
    }
}
 80025c2:	bf00      	nop
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	200006f0 	.word	0x200006f0

080025cc <processAlarmChangeCheck>:


void processAlarmChangeCheck() {
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
	check_alarm_change_lcd();
 80025d0:	f7ff fb74 	bl	8001cbc <check_alarm_change_lcd>
    if (handleButtonPress(&a_Process_case, 1)== true) {
 80025d4:	2101      	movs	r1, #1
 80025d6:	4806      	ldr	r0, [pc, #24]	; (80025f0 <processAlarmChangeCheck+0x24>)
 80025d8:	f7ff ff64 	bl	80024a4 <handleButtonPress>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d004      	beq.n	80025ec <processAlarmChangeCheck+0x20>
        setAlarmState(0);
 80025e2:	2000      	movs	r0, #0
 80025e4:	f000 fa5e 	bl	8002aa4 <setAlarmState>
        toggleScreen();
 80025e8:	f7ff f97a 	bl	80018e0 <toggleScreen>
    }
}
 80025ec:	bf00      	nop
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	200006f4 	.word	0x200006f4

080025f4 <processAlarmHour>:

void processAlarmHour(int *input_Process_case) {
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
    set_Hour();
 80025fc:	f7fe f874 	bl	80006e8 <set_Hour>
    if (handleButtonPress(input_Process_case, 1) == true) {
 8002600:	2101      	movs	r1, #1
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f7ff ff4e 	bl	80024a4 <handleButtonPress>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d013      	beq.n	8002636 <processAlarmHour+0x42>
    	int mode = getMode();
 800260e:	f000 fa05 	bl	8002a1c <getMode>
 8002612:	60f8      	str	r0, [r7, #12]
    	if(mode==2){
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2b02      	cmp	r3, #2
 8002618:	d105      	bne.n	8002626 <processAlarmHour+0x32>
    		alarm_value[2] = getnHour();
 800261a:	f000 faa1 	bl	8002b60 <getnHour>
 800261e:	4603      	mov	r3, r0
 8002620:	4a07      	ldr	r2, [pc, #28]	; (8002640 <processAlarmHour+0x4c>)
 8002622:	6093      	str	r3, [r2, #8]
    	}else if(mode==3){
    		clock_value[2] = getnHour();
    	}
    }
}
 8002624:	e007      	b.n	8002636 <processAlarmHour+0x42>
    	}else if(mode==3){
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2b03      	cmp	r3, #3
 800262a:	d104      	bne.n	8002636 <processAlarmHour+0x42>
    		clock_value[2] = getnHour();
 800262c:	f000 fa98 	bl	8002b60 <getnHour>
 8002630:	4603      	mov	r3, r0
 8002632:	4a04      	ldr	r2, [pc, #16]	; (8002644 <processAlarmHour+0x50>)
 8002634:	6093      	str	r3, [r2, #8]
}
 8002636:	bf00      	nop
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	20000768 	.word	0x20000768
 8002644:	200000ac 	.word	0x200000ac

08002648 <processAlarmMinute>:

void processAlarmMinute(int *input_Process_case){
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
    set_Minute();
 8002650:	f7fe f88c 	bl	800076c <set_Minute>
    if (handleButtonPress(input_Process_case, 1) == true) {
 8002654:	2101      	movs	r1, #1
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f7ff ff24 	bl	80024a4 <handleButtonPress>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d013      	beq.n	800268a <processAlarmMinute+0x42>
    	int mode = getMode();
 8002662:	f000 f9db 	bl	8002a1c <getMode>
 8002666:	60f8      	str	r0, [r7, #12]
    	if(mode == 2){
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2b02      	cmp	r3, #2
 800266c:	d105      	bne.n	800267a <processAlarmMinute+0x32>
    		alarm_value[1] = getnMinute();
 800266e:	f000 fa97 	bl	8002ba0 <getnMinute>
 8002672:	4603      	mov	r3, r0
 8002674:	4a07      	ldr	r2, [pc, #28]	; (8002694 <processAlarmMinute+0x4c>)
 8002676:	6053      	str	r3, [r2, #4]
    	}else if(mode ==3){
    		clock_value[1] = getnMinute();
    	}
    }
}
 8002678:	e007      	b.n	800268a <processAlarmMinute+0x42>
    	}else if(mode ==3){
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2b03      	cmp	r3, #3
 800267e:	d104      	bne.n	800268a <processAlarmMinute+0x42>
    		clock_value[1] = getnMinute();
 8002680:	f000 fa8e 	bl	8002ba0 <getnMinute>
 8002684:	4603      	mov	r3, r0
 8002686:	4a04      	ldr	r2, [pc, #16]	; (8002698 <processAlarmMinute+0x50>)
 8002688:	6053      	str	r3, [r2, #4]
}
 800268a:	bf00      	nop
 800268c:	3710      	adds	r7, #16
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	20000768 	.word	0x20000768
 8002698:	200000ac 	.word	0x200000ac

0800269c <processAlarmReview>:

void processAlarmReview() {
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
    check_alarm_lcd();
 80026a0:	f7ff fbca 	bl	8001e38 <check_alarm_lcd>
    handleButtonPress( &a_Process_case, 1);
 80026a4:	2101      	movs	r1, #1
 80026a6:	4802      	ldr	r0, [pc, #8]	; (80026b0 <processAlarmReview+0x14>)
 80026a8:	f7ff fefc 	bl	80024a4 <handleButtonPress>
}
 80026ac:	bf00      	nop
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	200006f4 	.word	0x200006f4

080026b4 <processAlarmFinalization>:

void processAlarmFinalization() {
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
	setAlarmState(1);
 80026ba:	2001      	movs	r0, #1
 80026bc:	f000 f9f2 	bl	8002aa4 <setAlarmState>
	int aHour = getnHour();
 80026c0:	f000 fa4e 	bl	8002b60 <getnHour>
 80026c4:	6078      	str	r0, [r7, #4]
	int aMin = getnMinute();
 80026c6:	f000 fa6b 	bl	8002ba0 <getnMinute>
 80026ca:	6038      	str	r0, [r7, #0]
	set_Alarm(aHour,aMin);
 80026cc:	6839      	ldr	r1, [r7, #0]
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f7fe fa2a 	bl	8000b28 <set_Alarm>
    setnHour(0);
 80026d4:	2000      	movs	r0, #0
 80026d6:	f000 fa4f 	bl	8002b78 <setnHour>
    setnMinute(0);
 80026da:	2000      	movs	r0, #0
 80026dc:	f000 fa6c 	bl	8002bb8 <setnMinute>
    n_alarm_show();
 80026e0:	f7ff fa56 	bl	8001b90 <n_alarm_show>
    setMode(-1);
 80026e4:	f04f 30ff 	mov.w	r0, #4294967295
 80026e8:	f000 f9a4 	bl	8002a34 <setMode>
    a_Process_case = 0;
 80026ec:	4b03      	ldr	r3, [pc, #12]	; (80026fc <processAlarmFinalization+0x48>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	601a      	str	r2, [r3, #0]
}
 80026f2:	bf00      	nop
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	200006f4 	.word	0x200006f4

08002700 <processModifyCalender>:

void processModifyCalender(int *input_Process_case){
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
	set_Calender(*input_Process_case);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4618      	mov	r0, r3
 800270e:	f7fe f8ad 	bl	800086c <set_Calender>
	handleButtonPress(input_Process_case, 1);
 8002712:	2101      	movs	r1, #1
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f7ff fec5 	bl	80024a4 <handleButtonPress>
}
 800271a:	bf00      	nop
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <processModifyCheck>:
void processModifyCheck(int *input_Process_case){
 8002722:	b580      	push	{r7, lr}
 8002724:	b082      	sub	sp, #8
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
	check_modify_lcd();
 800272a:	f7ff fbdb 	bl	8001ee4 <check_modify_lcd>
	handleButtonPress(input_Process_case, 1);
 800272e:	2101      	movs	r1, #1
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f7ff feb7 	bl	80024a4 <handleButtonPress>
}
 8002736:	bf00      	nop
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
	...

08002740 <processModifyFinalization>:

void processModifyFinalization(){
 8002740:	b5b0      	push	{r4, r5, r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af02      	add	r7, sp, #8
	set_tm_strut(getnYear(),getnMonth(),getnDay()+1,clock_value[2],clock_value[1]);
 8002746:	f000 fa63 	bl	8002c10 <getnYear>
 800274a:	4604      	mov	r4, r0
 800274c:	f000 fa7c 	bl	8002c48 <getnMonth>
 8002750:	4605      	mov	r5, r0
 8002752:	f000 fa95 	bl	8002c80 <getnDay>
 8002756:	4603      	mov	r3, r0
 8002758:	1c5a      	adds	r2, r3, #1
 800275a:	4b0c      	ldr	r3, [pc, #48]	; (800278c <processModifyFinalization+0x4c>)
 800275c:	6899      	ldr	r1, [r3, #8]
 800275e:	4b0b      	ldr	r3, [pc, #44]	; (800278c <processModifyFinalization+0x4c>)
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	460b      	mov	r3, r1
 8002766:	4629      	mov	r1, r5
 8002768:	4620      	mov	r0, r4
 800276a:	f000 f8c7 	bl	80028fc <set_tm_strut>
	set_RTC_Time_t();
 800276e:	f000 f8f5 	bl	800295c <set_RTC_Time_t>
	default_second = 0;
 8002772:	4b07      	ldr	r3, [pc, #28]	; (8002790 <processModifyFinalization+0x50>)
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]
	setMode(-1);
 8002778:	f04f 30ff 	mov.w	r0, #4294967295
 800277c:	f000 f95a 	bl	8002a34 <setMode>
	m_Process_case = 0;
 8002780:	4b04      	ldr	r3, [pc, #16]	; (8002794 <processModifyFinalization+0x54>)
 8002782:	2200      	movs	r2, #0
 8002784:	601a      	str	r2, [r3, #0]
}
 8002786:	bf00      	nop
 8002788:	46bd      	mov	sp, r7
 800278a:	bdb0      	pop	{r4, r5, r7, pc}
 800278c:	200000ac 	.word	0x200000ac
 8002790:	20000774 	.word	0x20000774
 8002794:	200006f8 	.word	0x200006f8

08002798 <timer_Process>:

void timer_Process() {
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
    switch (t_Process_case) {
 800279c:	4b0a      	ldr	r3, [pc, #40]	; (80027c8 <timer_Process+0x30>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2b02      	cmp	r3, #2
 80027a2:	d00c      	beq.n	80027be <timer_Process+0x26>
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	dc0d      	bgt.n	80027c4 <timer_Process+0x2c>
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d002      	beq.n	80027b2 <timer_Process+0x1a>
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d003      	beq.n	80027b8 <timer_Process+0x20>
            break;
        case 2:
            processTimerReview();
            break;
    }
}
 80027b0:	e008      	b.n	80027c4 <timer_Process+0x2c>
            processTimerMinute();
 80027b2:	f7ff febd 	bl	8002530 <processTimerMinute>
            break;
 80027b6:	e005      	b.n	80027c4 <timer_Process+0x2c>
            processTimerSecond();
 80027b8:	f7ff fed0 	bl	800255c <processTimerSecond>
            break;
 80027bc:	e002      	b.n	80027c4 <timer_Process+0x2c>
            processTimerReview();
 80027be:	f7ff fee3 	bl	8002588 <processTimerReview>
            break;
 80027c2:	bf00      	nop
}
 80027c4:	bf00      	nop
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	200006f0 	.word	0x200006f0

080027cc <alarm_Process>:

void alarm_Process() {
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
    if (getAlarmState()) {
 80027d0:	f000 f95c 	bl	8002a8c <getAlarmState>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d002      	beq.n	80027e0 <alarm_Process+0x14>
        a_Process_case = 100;
 80027da:	4b16      	ldr	r3, [pc, #88]	; (8002834 <alarm_Process+0x68>)
 80027dc:	2264      	movs	r2, #100	; 0x64
 80027de:	601a      	str	r2, [r3, #0]
    }
    switch (a_Process_case) {
 80027e0:	4b14      	ldr	r3, [pc, #80]	; (8002834 <alarm_Process+0x68>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2b03      	cmp	r3, #3
 80027e6:	dc0f      	bgt.n	8002808 <alarm_Process+0x3c>
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	db21      	blt.n	8002830 <alarm_Process+0x64>
 80027ec:	2b03      	cmp	r3, #3
 80027ee:	d81f      	bhi.n	8002830 <alarm_Process+0x64>
 80027f0:	a201      	add	r2, pc, #4	; (adr r2, 80027f8 <alarm_Process+0x2c>)
 80027f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027f6:	bf00      	nop
 80027f8:	0800280f 	.word	0x0800280f
 80027fc:	08002817 	.word	0x08002817
 8002800:	0800281f 	.word	0x0800281f
 8002804:	08002825 	.word	0x08002825
 8002808:	2b64      	cmp	r3, #100	; 0x64
 800280a:	d00e      	beq.n	800282a <alarm_Process+0x5e>
            break;
        case 100: // if You Set a Alarm before, Process_Value bigger than All Phase
			processAlarmChangeCheck();
			break;
    }
}
 800280c:	e010      	b.n	8002830 <alarm_Process+0x64>
            processAlarmHour(&a_Process_case);
 800280e:	4809      	ldr	r0, [pc, #36]	; (8002834 <alarm_Process+0x68>)
 8002810:	f7ff fef0 	bl	80025f4 <processAlarmHour>
            break;
 8002814:	e00c      	b.n	8002830 <alarm_Process+0x64>
            processAlarmMinute(&a_Process_case);
 8002816:	4807      	ldr	r0, [pc, #28]	; (8002834 <alarm_Process+0x68>)
 8002818:	f7ff ff16 	bl	8002648 <processAlarmMinute>
            break;
 800281c:	e008      	b.n	8002830 <alarm_Process+0x64>
            processAlarmReview();
 800281e:	f7ff ff3d 	bl	800269c <processAlarmReview>
            break;
 8002822:	e005      	b.n	8002830 <alarm_Process+0x64>
            processAlarmFinalization();
 8002824:	f7ff ff46 	bl	80026b4 <processAlarmFinalization>
            break;
 8002828:	e002      	b.n	8002830 <alarm_Process+0x64>
			processAlarmChangeCheck();
 800282a:	f7ff fecf 	bl	80025cc <processAlarmChangeCheck>
			break;
 800282e:	bf00      	nop
}
 8002830:	bf00      	nop
 8002832:	bd80      	pop	{r7, pc}
 8002834:	200006f4 	.word	0x200006f4

08002838 <modify_Process>:
void modify_Process(){
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
	switch(m_Process_case){
 800283c:	4b19      	ldr	r3, [pc, #100]	; (80028a4 <modify_Process+0x6c>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2b06      	cmp	r3, #6
 8002842:	d82c      	bhi.n	800289e <modify_Process+0x66>
 8002844:	a201      	add	r2, pc, #4	; (adr r2, 800284c <modify_Process+0x14>)
 8002846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800284a:	bf00      	nop
 800284c:	08002869 	.word	0x08002869
 8002850:	08002871 	.word	0x08002871
 8002854:	08002879 	.word	0x08002879
 8002858:	08002881 	.word	0x08002881
 800285c:	08002889 	.word	0x08002889
 8002860:	08002891 	.word	0x08002891
 8002864:	08002899 	.word	0x08002899
	case 0 :
		processModifyCalender(&m_Process_case);
 8002868:	480e      	ldr	r0, [pc, #56]	; (80028a4 <modify_Process+0x6c>)
 800286a:	f7ff ff49 	bl	8002700 <processModifyCalender>
		break;
 800286e:	e016      	b.n	800289e <modify_Process+0x66>
	case 1:
		processModifyCalender(&m_Process_case);
 8002870:	480c      	ldr	r0, [pc, #48]	; (80028a4 <modify_Process+0x6c>)
 8002872:	f7ff ff45 	bl	8002700 <processModifyCalender>
		break;
 8002876:	e012      	b.n	800289e <modify_Process+0x66>
	case 2:
		// show the Check the OLED
		processModifyCalender(&m_Process_case);
 8002878:	480a      	ldr	r0, [pc, #40]	; (80028a4 <modify_Process+0x6c>)
 800287a:	f7ff ff41 	bl	8002700 <processModifyCalender>
		break;
 800287e:	e00e      	b.n	800289e <modify_Process+0x66>
	case 3:
		processAlarmHour(&m_Process_case);
 8002880:	4808      	ldr	r0, [pc, #32]	; (80028a4 <modify_Process+0x6c>)
 8002882:	f7ff feb7 	bl	80025f4 <processAlarmHour>
		break;
 8002886:	e00a      	b.n	800289e <modify_Process+0x66>
	case 4:
		processAlarmMinute(&m_Process_case);
 8002888:	4806      	ldr	r0, [pc, #24]	; (80028a4 <modify_Process+0x6c>)
 800288a:	f7ff fedd 	bl	8002648 <processAlarmMinute>
		break;
 800288e:	e006      	b.n	800289e <modify_Process+0x66>
	case 5:
		processModifyCheck(&m_Process_case);
 8002890:	4804      	ldr	r0, [pc, #16]	; (80028a4 <modify_Process+0x6c>)
 8002892:	f7ff ff46 	bl	8002722 <processModifyCheck>
		break;
 8002896:	e002      	b.n	800289e <modify_Process+0x66>
	case 6:
		processModifyFinalization();
 8002898:	f7ff ff52 	bl	8002740 <processModifyFinalization>
		break;
 800289c:	bf00      	nop
	}
}
 800289e:	bf00      	nop
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	200006f8 	.word	0x200006f8

080028a8 <init_timer_funs>:
#include "esp32_dht11.h"

static time_t sec_con;
static struct tm current_time;

void init_timer_funs(){
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
	get_RTC_Time_t();
 80028ac:	f000 f848 	bl	8002940 <get_RTC_Time_t>
	convert_tm();
 80028b0:	f000 f872 	bl	8002998 <convert_tm>
	update_clock_value();
 80028b4:	f000 f80c 	bl	80028d0 <update_clock_value>
	set_send_cnt(current_time.tm_hour);
 80028b8:	4b04      	ldr	r3, [pc, #16]	; (80028cc <init_timer_funs+0x24>)
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	4618      	mov	r0, r3
 80028be:	f7fe fcfd 	bl	80012bc <set_send_cnt>
	set_RTC_Time_t();
 80028c2:	f000 f84b 	bl	800295c <set_RTC_Time_t>
}
 80028c6:	bf00      	nop
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	20000708 	.word	0x20000708

080028d0 <update_clock_value>:
void update_clock_value(){
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0
	clock_value[2] = current_time.tm_hour;
 80028d4:	4b07      	ldr	r3, [pc, #28]	; (80028f4 <update_clock_value+0x24>)
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	4a07      	ldr	r2, [pc, #28]	; (80028f8 <update_clock_value+0x28>)
 80028da:	6093      	str	r3, [r2, #8]
	clock_value[1] = current_time.tm_min;
 80028dc:	4b05      	ldr	r3, [pc, #20]	; (80028f4 <update_clock_value+0x24>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	4a05      	ldr	r2, [pc, #20]	; (80028f8 <update_clock_value+0x28>)
 80028e2:	6053      	str	r3, [r2, #4]
	//  여기서 온도데이터 업데이트를 진행핼까?
	if(clock_value[1] == 0){
 80028e4:	4b04      	ldr	r3, [pc, #16]	; (80028f8 <update_clock_value+0x28>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d101      	bne.n	80028f0 <update_clock_value+0x20>
		check_send();
 80028ec:	f7fe fcbe 	bl	800126c <check_send>
	}
}
 80028f0:	bf00      	nop
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	20000708 	.word	0x20000708
 80028f8:	200000ac 	.word	0x200000ac

080028fc <set_tm_strut>:

void set_tm_strut(int year,int month, int mday, int hour, int minute){
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
 8002908:	603b      	str	r3, [r7, #0]
	current_time.tm_year= year+100;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	3364      	adds	r3, #100	; 0x64
 800290e:	4a0b      	ldr	r2, [pc, #44]	; (800293c <set_tm_strut+0x40>)
 8002910:	6153      	str	r3, [r2, #20]
	current_time.tm_mon = month;
 8002912:	4a0a      	ldr	r2, [pc, #40]	; (800293c <set_tm_strut+0x40>)
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	6113      	str	r3, [r2, #16]
	current_time.tm_mday = mday;
 8002918:	4a08      	ldr	r2, [pc, #32]	; (800293c <set_tm_strut+0x40>)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	60d3      	str	r3, [r2, #12]
	current_time.tm_hour = hour;
 800291e:	4a07      	ldr	r2, [pc, #28]	; (800293c <set_tm_strut+0x40>)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	6093      	str	r3, [r2, #8]
	current_time.tm_min = minute;
 8002924:	4a05      	ldr	r2, [pc, #20]	; (800293c <set_tm_strut+0x40>)
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	6053      	str	r3, [r2, #4]
	set_send_cnt(hour);
 800292a:	6838      	ldr	r0, [r7, #0]
 800292c:	f7fe fcc6 	bl	80012bc <set_send_cnt>
	convert_time_t();
 8002930:	f000 f822 	bl	8002978 <convert_time_t>
}
 8002934:	bf00      	nop
 8002936:	3710      	adds	r7, #16
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	20000708 	.word	0x20000708

08002940 <get_RTC_Time_t>:

void get_RTC_Time_t(){
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
	sec_con = RestoreTimeFromRTC();
 8002944:	f7fe f93a 	bl	8000bbc <RestoreTimeFromRTC>
 8002948:	4602      	mov	r2, r0
 800294a:	460b      	mov	r3, r1
 800294c:	4902      	ldr	r1, [pc, #8]	; (8002958 <get_RTC_Time_t+0x18>)
 800294e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002952:	bf00      	nop
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	20000700 	.word	0x20000700

0800295c <set_RTC_Time_t>:

void set_RTC_Time_t(){
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
	BackupTimeToRTC(sec_con);
 8002960:	4b04      	ldr	r3, [pc, #16]	; (8002974 <set_RTC_Time_t+0x18>)
 8002962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002966:	4610      	mov	r0, r2
 8002968:	4619      	mov	r1, r3
 800296a:	f7fe f901 	bl	8000b70 <BackupTimeToRTC>
}
 800296e:	bf00      	nop
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	20000700 	.word	0x20000700

08002978 <convert_time_t>:

void convert_time_t(){
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
	sec_con = mktime(&current_time);
 800297c:	4804      	ldr	r0, [pc, #16]	; (8002990 <convert_time_t+0x18>)
 800297e:	f006 fe9f 	bl	80096c0 <mktime>
 8002982:	4602      	mov	r2, r0
 8002984:	460b      	mov	r3, r1
 8002986:	4903      	ldr	r1, [pc, #12]	; (8002994 <convert_time_t+0x1c>)
 8002988:	e9c1 2300 	strd	r2, r3, [r1]
}
 800298c:	bf00      	nop
 800298e:	bd80      	pop	{r7, pc}
 8002990:	20000708 	.word	0x20000708
 8002994:	20000700 	.word	0x20000700

08002998 <convert_tm>:

void convert_tm(){
 8002998:	b5b0      	push	{r4, r5, r7, lr}
 800299a:	af00      	add	r7, sp, #0
	current_time = *localtime(&sec_con);
 800299c:	4807      	ldr	r0, [pc, #28]	; (80029bc <convert_tm+0x24>)
 800299e:	f006 fc8d 	bl	80092bc <localtime>
 80029a2:	4603      	mov	r3, r0
 80029a4:	4a06      	ldr	r2, [pc, #24]	; (80029c0 <convert_tm+0x28>)
 80029a6:	4614      	mov	r4, r2
 80029a8:	461d      	mov	r5, r3
 80029aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029b2:	682b      	ldr	r3, [r5, #0]
 80029b4:	6023      	str	r3, [r4, #0]
}
 80029b6:	bf00      	nop
 80029b8:	bdb0      	pop	{r4, r5, r7, pc}
 80029ba:	bf00      	nop
 80029bc:	20000700 	.word	0x20000700
 80029c0:	20000708 	.word	0x20000708

080029c4 <get_struct_tm>:

void set_struct_tm(struct tm * calender){
	current_time = *calender;
}
struct tm get_struct_tm(){
 80029c4:	b4b0      	push	{r4, r5, r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
	return current_time;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a07      	ldr	r2, [pc, #28]	; (80029ec <get_struct_tm+0x28>)
 80029d0:	461c      	mov	r4, r3
 80029d2:	4615      	mov	r5, r2
 80029d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029dc:	682b      	ldr	r3, [r5, #0]
 80029de:	6023      	str	r3, [r4, #0]
}
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bcb0      	pop	{r4, r5, r7}
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	20000708 	.word	0x20000708

080029f0 <set_time_t>:

void set_time_t(){
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
	sec_con += minute_cnt;
 80029f4:	4b08      	ldr	r3, [pc, #32]	; (8002a18 <set_time_t+0x28>)
 80029f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029fa:	f112 003c 	adds.w	r0, r2, #60	; 0x3c
 80029fe:	f143 0100 	adc.w	r1, r3, #0
 8002a02:	4b05      	ldr	r3, [pc, #20]	; (8002a18 <set_time_t+0x28>)
 8002a04:	e9c3 0100 	strd	r0, r1, [r3]
	convert_tm();
 8002a08:	f7ff ffc6 	bl	8002998 <convert_tm>
	update_clock_value();
 8002a0c:	f7ff ff60 	bl	80028d0 <update_clock_value>
	set_RTC_Time_t();
 8002a10:	f7ff ffa4 	bl	800295c <set_RTC_Time_t>
}
 8002a14:	bf00      	nop
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	20000700 	.word	0x20000700

08002a1c <getMode>:

// Mode_Process_variable


// functions about Sub menu or select_menu and main_menu Mode
int getMode(){
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
	 return D_mode;
 8002a20:	4b03      	ldr	r3, [pc, #12]	; (8002a30 <getMode+0x14>)
 8002a22:	681b      	ldr	r3, [r3, #0]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	200000a4 	.word	0x200000a4

08002a34 <setMode>:
void setMode(int setMode){
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
	D_mode = setMode;
 8002a3c:	4a04      	ldr	r2, [pc, #16]	; (8002a50 <setMode+0x1c>)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6013      	str	r3, [r2, #0]
}
 8002a42:	bf00      	nop
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	200000a4 	.word	0x200000a4

08002a54 <getTimerState>:

// Functions About Timer_mode
int getTimerState(){
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
	 return timer_on;
 8002a58:	4b03      	ldr	r3, [pc, #12]	; (8002a68 <getTimerState+0x14>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	20000744 	.word	0x20000744

08002a6c <setTimerState>:
void setTimerState(int timer){
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
	timer_on = timer;
 8002a74:	4a04      	ldr	r2, [pc, #16]	; (8002a88 <setTimerState+0x1c>)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6013      	str	r3, [r2, #0]
}
 8002a7a:	bf00      	nop
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr
 8002a86:	bf00      	nop
 8002a88:	20000744 	.word	0x20000744

08002a8c <getAlarmState>:
// Check to set a Alarm Mode
int getAlarmState(){
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
	return alarm_On;
 8002a90:	4b03      	ldr	r3, [pc, #12]	; (8002aa0 <getAlarmState+0x14>)
 8002a92:	681b      	ldr	r3, [r3, #0]
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	20000750 	.word	0x20000750

08002aa4 <setAlarmState>:
void setAlarmState(int State){
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
	alarm_On = State;
 8002aac:	4a04      	ldr	r2, [pc, #16]	; (8002ac0 <setAlarmState+0x1c>)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6013      	str	r3, [r2, #0]
}
 8002ab2:	bf00      	nop
 8002ab4:	370c      	adds	r7, #12
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	20000750 	.word	0x20000750

08002ac4 <getTimerCompleted>:

// Functions about Timer Complete
int getTimerCompleted(){
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
	return com_timer;
 8002ac8:	4b03      	ldr	r3, [pc, #12]	; (8002ad8 <getTimerCompleted+0x14>)
 8002aca:	681b      	ldr	r3, [r3, #0]
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	20000748 	.word	0x20000748

08002adc <setTimerCompleted>:
void setTimerCompleted(int completed){
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
	com_timer = completed;
 8002ae4:	4a04      	ldr	r2, [pc, #16]	; (8002af8 <setTimerCompleted+0x1c>)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6013      	str	r3, [r2, #0]
}
 8002aea:	bf00      	nop
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	20000748 	.word	0x20000748

08002afc <getAlarmCompleted>:
// Functions About Alarm Complete
int getAlarmCompleted(){
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
	return com_alarm;
 8002b00:	4b03      	ldr	r3, [pc, #12]	; (8002b10 <getAlarmCompleted+0x14>)
 8002b02:	681b      	ldr	r3, [r3, #0]
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	2000074c 	.word	0x2000074c

08002b14 <setAlarmCompleted>:
void setAlarmCompleted(int completed){
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
	com_alarm = completed;
 8002b1c:	4a04      	ldr	r2, [pc, #16]	; (8002b30 <setAlarmCompleted+0x1c>)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6013      	str	r3, [r2, #0]
}
 8002b22:	bf00      	nop
 8002b24:	370c      	adds	r7, #12
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	2000074c 	.word	0x2000074c

08002b34 <setCompleted>:

void setCompleted(int mode){
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
	if(mode == 1){
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d106      	bne.n	8002b50 <setCompleted+0x1c>
		setTimerState(0);
 8002b42:	2000      	movs	r0, #0
 8002b44:	f7ff ff92 	bl	8002a6c <setTimerState>
		setTimerCompleted(0);
 8002b48:	2000      	movs	r0, #0
 8002b4a:	f7ff ffc7 	bl	8002adc <setTimerCompleted>
	}else{
		setAlarmCompleted(0);
	}
}
 8002b4e:	e002      	b.n	8002b56 <setCompleted+0x22>
		setAlarmCompleted(0);
 8002b50:	2000      	movs	r0, #0
 8002b52:	f7ff ffdf 	bl	8002b14 <setAlarmCompleted>
}
 8002b56:	bf00      	nop
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
	...

08002b60 <getnHour>:

// Timer or Alarm set a Time
int getnHour(){
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
	return n_hour;
 8002b64:	4b03      	ldr	r3, [pc, #12]	; (8002b74 <getnHour+0x14>)
 8002b66:	681b      	ldr	r3, [r3, #0]
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	20000730 	.word	0x20000730

08002b78 <setnHour>:

void setnHour(int hour){
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
	if(hour == 24){
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2b18      	cmp	r3, #24
 8002b84:	d101      	bne.n	8002b8a <setnHour+0x12>
		hour = 0;
 8002b86:	2300      	movs	r3, #0
 8002b88:	607b      	str	r3, [r7, #4]
	}
	n_hour = hour;
 8002b8a:	4a04      	ldr	r2, [pc, #16]	; (8002b9c <setnHour+0x24>)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6013      	str	r3, [r2, #0]
}
 8002b90:	bf00      	nop
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr
 8002b9c:	20000730 	.word	0x20000730

08002ba0 <getnMinute>:

int getnMinute(){
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
	return n_minute;
 8002ba4:	4b03      	ldr	r3, [pc, #12]	; (8002bb4 <getnMinute+0x14>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	20000734 	.word	0x20000734

08002bb8 <setnMinute>:
void setnMinute(int minute){
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
	n_minute = minute;
 8002bc0:	4a04      	ldr	r2, [pc, #16]	; (8002bd4 <setnMinute+0x1c>)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6013      	str	r3, [r2, #0]
}
 8002bc6:	bf00      	nop
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	20000734 	.word	0x20000734

08002bd8 <getnSecond>:

int getnSecond(){
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
	return n_second;
 8002bdc:	4b03      	ldr	r3, [pc, #12]	; (8002bec <getnSecond+0x14>)
 8002bde:	681b      	ldr	r3, [r3, #0]
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	20000738 	.word	0x20000738

08002bf0 <setnSecond>:
void setnSecond(int second){
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
	n_second = second;
 8002bf8:	4a04      	ldr	r2, [pc, #16]	; (8002c0c <setnSecond+0x1c>)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6013      	str	r3, [r2, #0]
}
 8002bfe:	bf00      	nop
 8002c00:	370c      	adds	r7, #12
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	20000738 	.word	0x20000738

08002c10 <getnYear>:

int getnYear(){
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
	return n_year;
 8002c14:	4b03      	ldr	r3, [pc, #12]	; (8002c24 <getnYear+0x14>)
 8002c16:	681b      	ldr	r3, [r3, #0]
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	2000073c 	.word	0x2000073c

08002c28 <setnYear>:

void setnYear(int s_year){
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
	n_year = s_year;
 8002c30:	4a04      	ldr	r2, [pc, #16]	; (8002c44 <setnYear+0x1c>)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6013      	str	r3, [r2, #0]
}
 8002c36:	bf00      	nop
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	2000073c 	.word	0x2000073c

08002c48 <getnMonth>:

int getnMonth(){
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
	return n_month;
 8002c4c:	4b03      	ldr	r3, [pc, #12]	; (8002c5c <getnMonth+0x14>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	20000740 	.word	0x20000740

08002c60 <setnMonth>:
void setnMonth(int s_month){
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
	n_month = s_month;
 8002c68:	4a04      	ldr	r2, [pc, #16]	; (8002c7c <setnMonth+0x1c>)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6013      	str	r3, [r2, #0]
}
 8002c6e:	bf00      	nop
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	20000740 	.word	0x20000740

08002c80 <getnDay>:
int getnDay(){
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
	return n_day;
 8002c84:	4b03      	ldr	r3, [pc, #12]	; (8002c94 <getnDay+0x14>)
 8002c86:	681b      	ldr	r3, [r3, #0]
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	200000a8 	.word	0x200000a8

08002c98 <setnDay>:
void setnDay(int s_day){
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
	n_day = s_day;
 8002ca0:	4a04      	ldr	r2, [pc, #16]	; (8002cb4 <setnDay+0x1c>)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6013      	str	r3, [r2, #0]
}
 8002ca6:	bf00      	nop
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	200000a8 	.word	0x200000a8

08002cb8 <getPos>:
// select_menu_Position Functions
int getPos(){
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
	return sel_po;
 8002cbc:	4b03      	ldr	r3, [pc, #12]	; (8002ccc <getPos+0x14>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	2000072c 	.word	0x2000072c

08002cd0 <setPos>:
void setPos(int Pos){
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
	if(Pos >2){
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	dd02      	ble.n	8002ce4 <setPos+0x14>
		Pos = 2;
 8002cde:	2302      	movs	r3, #2
 8002ce0:	607b      	str	r3, [r7, #4]
 8002ce2:	e004      	b.n	8002cee <setPos+0x1e>
	}
	else if (Pos <0){
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	da01      	bge.n	8002cee <setPos+0x1e>
		Pos = 0;
 8002cea:	2300      	movs	r3, #0
 8002cec:	607b      	str	r3, [r7, #4]
	}
	sel_po = Pos;
 8002cee:	4a04      	ldr	r2, [pc, #16]	; (8002d00 <setPos+0x30>)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6013      	str	r3, [r2, #0]
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr
 8002d00:	2000072c 	.word	0x2000072c

08002d04 <start_Boozer>:
#include "ssd1306.h"
#include "esp32_dht11.h"

static int alarm_check = 0;

void start_Boozer(int mode){
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
	toggleScreen();
 8002d0c:	f7fe fde8 	bl	80018e0 <toggleScreen>
	if(mode ==1){
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d102      	bne.n	8002d1c <start_Boozer+0x18>
		setTimerState(0);
 8002d16:	2000      	movs	r0, #0
 8002d18:	f7ff fea8 	bl	8002a6c <setTimerState>
	}
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, htim4.Init.Period);
 8002d1c:	4b04      	ldr	r3, [pc, #16]	; (8002d30 <start_Boozer+0x2c>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a03      	ldr	r2, [pc, #12]	; (8002d30 <start_Boozer+0x2c>)
 8002d22:	68d2      	ldr	r2, [r2, #12]
 8002d24:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002d26:	bf00      	nop
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	20000880 	.word	0x20000880

08002d34 <end_Boozer>:

void end_Boozer(int mode){
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
	if(mode == 1){
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d103      	bne.n	8002d4a <end_Boozer+0x16>
		alert_mode = 0;
 8002d42:	4b09      	ldr	r3, [pc, #36]	; (8002d68 <end_Boozer+0x34>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	701a      	strb	r2, [r3, #0]
 8002d48:	e002      	b.n	8002d50 <end_Boozer+0x1c>
	}else{
		alarm_check = 0;
 8002d4a:	4b08      	ldr	r3, [pc, #32]	; (8002d6c <end_Boozer+0x38>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	601a      	str	r2, [r3, #0]
	}
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 8002d50:	4b07      	ldr	r3, [pc, #28]	; (8002d70 <end_Boozer+0x3c>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2200      	movs	r2, #0
 8002d56:	63da      	str	r2, [r3, #60]	; 0x3c
	setCompleted(mode);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f7ff feeb 	bl	8002b34 <setCompleted>
}
 8002d5e:	bf00      	nop
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	2000077c 	.word	0x2000077c
 8002d6c:	20000754 	.word	0x20000754
 8002d70:	20000880 	.word	0x20000880

08002d74 <check_Alarm>:

void check_Alarm(){
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
	if((alarm_value[2] == clock_value[2]) && (alarm_value[1] == clock_value[1])){
 8002d78:	4b0f      	ldr	r3, [pc, #60]	; (8002db8 <check_Alarm+0x44>)
 8002d7a:	689a      	ldr	r2, [r3, #8]
 8002d7c:	4b0f      	ldr	r3, [pc, #60]	; (8002dbc <check_Alarm+0x48>)
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d116      	bne.n	8002db2 <check_Alarm+0x3e>
 8002d84:	4b0c      	ldr	r3, [pc, #48]	; (8002db8 <check_Alarm+0x44>)
 8002d86:	685a      	ldr	r2, [r3, #4]
 8002d88:	4b0c      	ldr	r3, [pc, #48]	; (8002dbc <check_Alarm+0x48>)
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d110      	bne.n	8002db2 <check_Alarm+0x3e>
		if(!alarm_check && clock_value[0] == 0){
 8002d90:	4b0b      	ldr	r3, [pc, #44]	; (8002dc0 <check_Alarm+0x4c>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d10c      	bne.n	8002db2 <check_Alarm+0x3e>
 8002d98:	4b08      	ldr	r3, [pc, #32]	; (8002dbc <check_Alarm+0x48>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d108      	bne.n	8002db2 <check_Alarm+0x3e>
			alarm_check = 1;
 8002da0:	4b07      	ldr	r3, [pc, #28]	; (8002dc0 <check_Alarm+0x4c>)
 8002da2:	2201      	movs	r2, #1
 8002da4:	601a      	str	r2, [r3, #0]
			start_Boozer(2);
 8002da6:	2002      	movs	r0, #2
 8002da8:	f7ff ffac 	bl	8002d04 <start_Boozer>
			setAlarmCompleted(1);
 8002dac:	2001      	movs	r0, #1
 8002dae:	f7ff feb1 	bl	8002b14 <setAlarmCompleted>
		}
	}
}
 8002db2:	bf00      	nop
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	20000768 	.word	0x20000768
 8002dbc:	200000ac 	.word	0x200000ac
 8002dc0:	20000754 	.word	0x20000754

08002dc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002dc8:	f001 f843 	bl	8003e52 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002dcc:	f000 f83e 	bl	8002e4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002dd0:	f000 fada 	bl	8003388 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8002dd4:	f000 fa4a 	bl	800326c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8002dd8:	f000 faa8 	bl	800332c <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 8002ddc:	f000 f964 	bl	80030a8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8002de0:	f000 f9b2 	bl	8003148 <MX_TIM4_Init>
  MX_ADC3_Init();
 8002de4:	f000 f89e 	bl	8002f24 <MX_ADC3_Init>
  MX_I2C1_Init();
 8002de8:	f000 f8ee 	bl	8002fc8 <MX_I2C1_Init>
  MX_RTC_Init();
 8002dec:	f000 f92c 	bl	8003048 <MX_RTC_Init>
  MX_TIM6_Init();
 8002df0:	f000 fa06 	bl	8003200 <MX_TIM6_Init>
  MX_USART6_UART_Init();
 8002df4:	f000 fa6a 	bl	80032cc <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
//  HAL_GPIO_WritePin(SOUND_OUT_GPIO_Port, SOUND_OUT_Pin, GPIO_PIN_RESET);
  init_PotentioMeter(&hadc3);
 8002df8:	480e      	ldr	r0, [pc, #56]	; (8002e34 <main+0x70>)
 8002dfa:	f7fd fc4b 	bl	8000694 <init_PotentioMeter>
  init_rtc(&hrtc);
 8002dfe:	480e      	ldr	r0, [pc, #56]	; (8002e38 <main+0x74>)
 8002e00:	f7fd fdfe 	bl	8000a00 <init_rtc>
//  init_timer_funs();

  SSD1306_Init();
 8002e04:	f7ff f886 	bl	8001f14 <SSD1306_Init>
  init_dht11(&htim6, TEMP_DATA_GPIO_Port, TEMP_DATA_Pin);
 8002e08:	2201      	movs	r2, #1
 8002e0a:	490c      	ldr	r1, [pc, #48]	; (8002e3c <main+0x78>)
 8002e0c:	480c      	ldr	r0, [pc, #48]	; (8002e40 <main+0x7c>)
 8002e0e:	f7fe f825 	bl	8000e5c <init_dht11>
  HAL_TIM_Base_Start(&htim6);
 8002e12:	480b      	ldr	r0, [pc, #44]	; (8002e40 <main+0x7c>)
 8002e14:	f004 f81e 	bl	8006e54 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 8002e18:	480a      	ldr	r0, [pc, #40]	; (8002e44 <main+0x80>)
 8002e1a:	f004 f8b3 	bl	8006f84 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8002e1e:	2108      	movs	r1, #8
 8002e20:	4809      	ldr	r0, [pc, #36]	; (8002e48 <main+0x84>)
 8002e22:	f004 f97f 	bl	8007124 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  opening();
 8002e26:	f7fe fa9d 	bl	8001364 <opening>
    /* USER CODE BEGIN 3 */
	  //Update Check Loops
//	  check_adc_change();
//	  update_test();
	  // Main Loop
	  readDHT11();
 8002e2a:	f7fe f871 	bl	8000f10 <readDHT11>
	  main_Check();
 8002e2e:	f7fd fef7 	bl	8000c20 <main_Check>
	  readDHT11();
 8002e32:	e7fa      	b.n	8002e2a <main+0x66>
 8002e34:	20000780 	.word	0x20000780
 8002e38:	20000814 	.word	0x20000814
 8002e3c:	40020800 	.word	0x40020800
 8002e40:	200008cc 	.word	0x200008cc
 8002e44:	20000834 	.word	0x20000834
 8002e48:	20000880 	.word	0x20000880

08002e4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b094      	sub	sp, #80	; 0x50
 8002e50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002e52:	f107 0320 	add.w	r3, r7, #32
 8002e56:	2230      	movs	r2, #48	; 0x30
 8002e58:	2100      	movs	r1, #0
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f006 fb50 	bl	8009500 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002e60:	f107 030c 	add.w	r3, r7, #12
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	605a      	str	r2, [r3, #4]
 8002e6a:	609a      	str	r2, [r3, #8]
 8002e6c:	60da      	str	r2, [r3, #12]
 8002e6e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002e70:	f002 fdd8 	bl	8005a24 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e74:	4b29      	ldr	r3, [pc, #164]	; (8002f1c <SystemClock_Config+0xd0>)
 8002e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e78:	4a28      	ldr	r2, [pc, #160]	; (8002f1c <SystemClock_Config+0xd0>)
 8002e7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e7e:	6413      	str	r3, [r2, #64]	; 0x40
 8002e80:	4b26      	ldr	r3, [pc, #152]	; (8002f1c <SystemClock_Config+0xd0>)
 8002e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e88:	60bb      	str	r3, [r7, #8]
 8002e8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002e8c:	4b24      	ldr	r3, [pc, #144]	; (8002f20 <SystemClock_Config+0xd4>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002e94:	4a22      	ldr	r2, [pc, #136]	; (8002f20 <SystemClock_Config+0xd4>)
 8002e96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e9a:	6013      	str	r3, [r2, #0]
 8002e9c:	4b20      	ldr	r3, [pc, #128]	; (8002f20 <SystemClock_Config+0xd4>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002ea4:	607b      	str	r3, [r7, #4]
 8002ea6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002ea8:	2309      	movs	r3, #9
 8002eaa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002eac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002eb0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002eba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002ec0:	2304      	movs	r3, #4
 8002ec2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8002ec4:	2390      	movs	r3, #144	; 0x90
 8002ec6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002ec8:	2302      	movs	r3, #2
 8002eca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8002ecc:	2306      	movs	r3, #6
 8002ece:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ed0:	f107 0320 	add.w	r3, r7, #32
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f002 fdc5 	bl	8005a64 <HAL_RCC_OscConfig>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d001      	beq.n	8002ee4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002ee0:	f000 fb2a 	bl	8003538 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ee4:	230f      	movs	r3, #15
 8002ee6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ee8:	2302      	movs	r3, #2
 8002eea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8002eec:	2380      	movs	r3, #128	; 0x80
 8002eee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002ef0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ef4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002ef6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002efa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002efc:	f107 030c 	add.w	r3, r7, #12
 8002f00:	2102      	movs	r1, #2
 8002f02:	4618      	mov	r0, r3
 8002f04:	f003 f852 	bl	8005fac <HAL_RCC_ClockConfig>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002f0e:	f000 fb13 	bl	8003538 <Error_Handler>
  }
}
 8002f12:	bf00      	nop
 8002f14:	3750      	adds	r7, #80	; 0x50
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	40023800 	.word	0x40023800
 8002f20:	40007000 	.word	0x40007000

08002f24 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002f2a:	463b      	mov	r3, r7
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	601a      	str	r2, [r3, #0]
 8002f30:	605a      	str	r2, [r3, #4]
 8002f32:	609a      	str	r2, [r3, #8]
 8002f34:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8002f36:	4b21      	ldr	r3, [pc, #132]	; (8002fbc <MX_ADC3_Init+0x98>)
 8002f38:	4a21      	ldr	r2, [pc, #132]	; (8002fc0 <MX_ADC3_Init+0x9c>)
 8002f3a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002f3c:	4b1f      	ldr	r3, [pc, #124]	; (8002fbc <MX_ADC3_Init+0x98>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002f42:	4b1e      	ldr	r3, [pc, #120]	; (8002fbc <MX_ADC3_Init+0x98>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002f48:	4b1c      	ldr	r3, [pc, #112]	; (8002fbc <MX_ADC3_Init+0x98>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8002f4e:	4b1b      	ldr	r3, [pc, #108]	; (8002fbc <MX_ADC3_Init+0x98>)
 8002f50:	2201      	movs	r2, #1
 8002f52:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002f54:	4b19      	ldr	r3, [pc, #100]	; (8002fbc <MX_ADC3_Init+0x98>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002f5c:	4b17      	ldr	r3, [pc, #92]	; (8002fbc <MX_ADC3_Init+0x98>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002f62:	4b16      	ldr	r3, [pc, #88]	; (8002fbc <MX_ADC3_Init+0x98>)
 8002f64:	4a17      	ldr	r2, [pc, #92]	; (8002fc4 <MX_ADC3_Init+0xa0>)
 8002f66:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002f68:	4b14      	ldr	r3, [pc, #80]	; (8002fbc <MX_ADC3_Init+0x98>)
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8002f6e:	4b13      	ldr	r3, [pc, #76]	; (8002fbc <MX_ADC3_Init+0x98>)
 8002f70:	2201      	movs	r2, #1
 8002f72:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8002f74:	4b11      	ldr	r3, [pc, #68]	; (8002fbc <MX_ADC3_Init+0x98>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002f7c:	4b0f      	ldr	r3, [pc, #60]	; (8002fbc <MX_ADC3_Init+0x98>)
 8002f7e:	2201      	movs	r2, #1
 8002f80:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002f82:	480e      	ldr	r0, [pc, #56]	; (8002fbc <MX_ADC3_Init+0x98>)
 8002f84:	f000 ffe6 	bl	8003f54 <HAL_ADC_Init>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 8002f8e:	f000 fad3 	bl	8003538 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002f92:	2303      	movs	r3, #3
 8002f94:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002f96:	2301      	movs	r3, #1
 8002f98:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002f9e:	463b      	mov	r3, r7
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	4806      	ldr	r0, [pc, #24]	; (8002fbc <MX_ADC3_Init+0x98>)
 8002fa4:	f001 f980 	bl	80042a8 <HAL_ADC_ConfigChannel>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 8002fae:	f000 fac3 	bl	8003538 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8002fb2:	bf00      	nop
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	20000780 	.word	0x20000780
 8002fc0:	40012200 	.word	0x40012200
 8002fc4:	0f000001 	.word	0x0f000001

08002fc8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002fcc:	4b1b      	ldr	r3, [pc, #108]	; (800303c <MX_I2C1_Init+0x74>)
 8002fce:	4a1c      	ldr	r2, [pc, #112]	; (8003040 <MX_I2C1_Init+0x78>)
 8002fd0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00301739;
 8002fd2:	4b1a      	ldr	r3, [pc, #104]	; (800303c <MX_I2C1_Init+0x74>)
 8002fd4:	4a1b      	ldr	r2, [pc, #108]	; (8003044 <MX_I2C1_Init+0x7c>)
 8002fd6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002fd8:	4b18      	ldr	r3, [pc, #96]	; (800303c <MX_I2C1_Init+0x74>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002fde:	4b17      	ldr	r3, [pc, #92]	; (800303c <MX_I2C1_Init+0x74>)
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002fe4:	4b15      	ldr	r3, [pc, #84]	; (800303c <MX_I2C1_Init+0x74>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002fea:	4b14      	ldr	r3, [pc, #80]	; (800303c <MX_I2C1_Init+0x74>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002ff0:	4b12      	ldr	r3, [pc, #72]	; (800303c <MX_I2C1_Init+0x74>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002ff6:	4b11      	ldr	r3, [pc, #68]	; (800303c <MX_I2C1_Init+0x74>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002ffc:	4b0f      	ldr	r3, [pc, #60]	; (800303c <MX_I2C1_Init+0x74>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003002:	480e      	ldr	r0, [pc, #56]	; (800303c <MX_I2C1_Init+0x74>)
 8003004:	f001 fea4 	bl	8004d50 <HAL_I2C_Init>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800300e:	f000 fa93 	bl	8003538 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003012:	2100      	movs	r1, #0
 8003014:	4809      	ldr	r0, [pc, #36]	; (800303c <MX_I2C1_Init+0x74>)
 8003016:	f002 fb25 	bl	8005664 <HAL_I2CEx_ConfigAnalogFilter>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d001      	beq.n	8003024 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003020:	f000 fa8a 	bl	8003538 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003024:	2100      	movs	r1, #0
 8003026:	4805      	ldr	r0, [pc, #20]	; (800303c <MX_I2C1_Init+0x74>)
 8003028:	f002 fb67 	bl	80056fa <HAL_I2CEx_ConfigDigitalFilter>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003032:	f000 fa81 	bl	8003538 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003036:	bf00      	nop
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	200007c8 	.word	0x200007c8
 8003040:	40005400 	.word	0x40005400
 8003044:	00301739 	.word	0x00301739

08003048 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800304c:	4b14      	ldr	r3, [pc, #80]	; (80030a0 <MX_RTC_Init+0x58>)
 800304e:	4a15      	ldr	r2, [pc, #84]	; (80030a4 <MX_RTC_Init+0x5c>)
 8003050:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003052:	4b13      	ldr	r3, [pc, #76]	; (80030a0 <MX_RTC_Init+0x58>)
 8003054:	2200      	movs	r2, #0
 8003056:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003058:	4b11      	ldr	r3, [pc, #68]	; (80030a0 <MX_RTC_Init+0x58>)
 800305a:	227f      	movs	r2, #127	; 0x7f
 800305c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800305e:	4b10      	ldr	r3, [pc, #64]	; (80030a0 <MX_RTC_Init+0x58>)
 8003060:	22ff      	movs	r2, #255	; 0xff
 8003062:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003064:	4b0e      	ldr	r3, [pc, #56]	; (80030a0 <MX_RTC_Init+0x58>)
 8003066:	2200      	movs	r2, #0
 8003068:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800306a:	4b0d      	ldr	r3, [pc, #52]	; (80030a0 <MX_RTC_Init+0x58>)
 800306c:	2200      	movs	r2, #0
 800306e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003070:	4b0b      	ldr	r3, [pc, #44]	; (80030a0 <MX_RTC_Init+0x58>)
 8003072:	2200      	movs	r2, #0
 8003074:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003076:	480a      	ldr	r0, [pc, #40]	; (80030a0 <MX_RTC_Init+0x58>)
 8003078:	f003 fd08 	bl	8006a8c <HAL_RTC_Init>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8003082:	f000 fa59 	bl	8003538 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8003086:	2200      	movs	r2, #0
 8003088:	2100      	movs	r1, #0
 800308a:	4805      	ldr	r0, [pc, #20]	; (80030a0 <MX_RTC_Init+0x58>)
 800308c:	f003 fde4 	bl	8006c58 <HAL_RTCEx_SetWakeUpTimer>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8003096:	f000 fa4f 	bl	8003538 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800309a:	bf00      	nop
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	20000814 	.word	0x20000814
 80030a4:	40002800 	.word	0x40002800

080030a8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b088      	sub	sp, #32
 80030ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80030ae:	f107 0310 	add.w	r3, r7, #16
 80030b2:	2200      	movs	r2, #0
 80030b4:	601a      	str	r2, [r3, #0]
 80030b6:	605a      	str	r2, [r3, #4]
 80030b8:	609a      	str	r2, [r3, #8]
 80030ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030bc:	1d3b      	adds	r3, r7, #4
 80030be:	2200      	movs	r2, #0
 80030c0:	601a      	str	r2, [r3, #0]
 80030c2:	605a      	str	r2, [r3, #4]
 80030c4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80030c6:	4b1e      	ldr	r3, [pc, #120]	; (8003140 <MX_TIM3_Init+0x98>)
 80030c8:	4a1e      	ldr	r2, [pc, #120]	; (8003144 <MX_TIM3_Init+0x9c>)
 80030ca:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 80030cc:	4b1c      	ldr	r3, [pc, #112]	; (8003140 <MX_TIM3_Init+0x98>)
 80030ce:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80030d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030d4:	4b1a      	ldr	r3, [pc, #104]	; (8003140 <MX_TIM3_Init+0x98>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 80030da:	4b19      	ldr	r3, [pc, #100]	; (8003140 <MX_TIM3_Init+0x98>)
 80030dc:	f242 720f 	movw	r2, #9999	; 0x270f
 80030e0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030e2:	4b17      	ldr	r3, [pc, #92]	; (8003140 <MX_TIM3_Init+0x98>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80030e8:	4b15      	ldr	r3, [pc, #84]	; (8003140 <MX_TIM3_Init+0x98>)
 80030ea:	2280      	movs	r2, #128	; 0x80
 80030ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80030ee:	4814      	ldr	r0, [pc, #80]	; (8003140 <MX_TIM3_Init+0x98>)
 80030f0:	f003 fe59 	bl	8006da6 <HAL_TIM_Base_Init>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80030fa:	f000 fa1d 	bl	8003538 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003102:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003104:	f107 0310 	add.w	r3, r7, #16
 8003108:	4619      	mov	r1, r3
 800310a:	480d      	ldr	r0, [pc, #52]	; (8003140 <MX_TIM3_Init+0x98>)
 800310c:	f004 fb38 	bl	8007780 <HAL_TIM_ConfigClockSource>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8003116:	f000 fa0f 	bl	8003538 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800311a:	2300      	movs	r3, #0
 800311c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800311e:	2300      	movs	r3, #0
 8003120:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003122:	1d3b      	adds	r3, r7, #4
 8003124:	4619      	mov	r1, r3
 8003126:	4806      	ldr	r0, [pc, #24]	; (8003140 <MX_TIM3_Init+0x98>)
 8003128:	f004 ffe4 	bl	80080f4 <HAL_TIMEx_MasterConfigSynchronization>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d001      	beq.n	8003136 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8003132:	f000 fa01 	bl	8003538 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003136:	bf00      	nop
 8003138:	3720      	adds	r7, #32
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	20000834 	.word	0x20000834
 8003144:	40000400 	.word	0x40000400

08003148 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b08a      	sub	sp, #40	; 0x28
 800314c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800314e:	f107 031c 	add.w	r3, r7, #28
 8003152:	2200      	movs	r2, #0
 8003154:	601a      	str	r2, [r3, #0]
 8003156:	605a      	str	r2, [r3, #4]
 8003158:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800315a:	463b      	mov	r3, r7
 800315c:	2200      	movs	r2, #0
 800315e:	601a      	str	r2, [r3, #0]
 8003160:	605a      	str	r2, [r3, #4]
 8003162:	609a      	str	r2, [r3, #8]
 8003164:	60da      	str	r2, [r3, #12]
 8003166:	611a      	str	r2, [r3, #16]
 8003168:	615a      	str	r2, [r3, #20]
 800316a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800316c:	4b22      	ldr	r3, [pc, #136]	; (80031f8 <MX_TIM4_Init+0xb0>)
 800316e:	4a23      	ldr	r2, [pc, #140]	; (80031fc <MX_TIM4_Init+0xb4>)
 8003170:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 325;
 8003172:	4b21      	ldr	r3, [pc, #132]	; (80031f8 <MX_TIM4_Init+0xb0>)
 8003174:	f240 1245 	movw	r2, #325	; 0x145
 8003178:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800317a:	4b1f      	ldr	r3, [pc, #124]	; (80031f8 <MX_TIM4_Init+0xb0>)
 800317c:	2200      	movs	r2, #0
 800317e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 327;
 8003180:	4b1d      	ldr	r3, [pc, #116]	; (80031f8 <MX_TIM4_Init+0xb0>)
 8003182:	f240 1247 	movw	r2, #327	; 0x147
 8003186:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003188:	4b1b      	ldr	r3, [pc, #108]	; (80031f8 <MX_TIM4_Init+0xb0>)
 800318a:	2200      	movs	r2, #0
 800318c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800318e:	4b1a      	ldr	r3, [pc, #104]	; (80031f8 <MX_TIM4_Init+0xb0>)
 8003190:	2200      	movs	r2, #0
 8003192:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003194:	4818      	ldr	r0, [pc, #96]	; (80031f8 <MX_TIM4_Init+0xb0>)
 8003196:	f003 ff6d 	bl	8007074 <HAL_TIM_PWM_Init>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <MX_TIM4_Init+0x5c>
  {
    Error_Handler();
 80031a0:	f000 f9ca 	bl	8003538 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031a4:	2300      	movs	r3, #0
 80031a6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031a8:	2300      	movs	r3, #0
 80031aa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80031ac:	f107 031c 	add.w	r3, r7, #28
 80031b0:	4619      	mov	r1, r3
 80031b2:	4811      	ldr	r0, [pc, #68]	; (80031f8 <MX_TIM4_Init+0xb0>)
 80031b4:	f004 ff9e 	bl	80080f4 <HAL_TIMEx_MasterConfigSynchronization>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d001      	beq.n	80031c2 <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 80031be:	f000 f9bb 	bl	8003538 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80031c2:	2360      	movs	r3, #96	; 0x60
 80031c4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80031c6:	2300      	movs	r3, #0
 80031c8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80031ca:	2300      	movs	r3, #0
 80031cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80031ce:	2300      	movs	r3, #0
 80031d0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80031d2:	463b      	mov	r3, r7
 80031d4:	2208      	movs	r2, #8
 80031d6:	4619      	mov	r1, r3
 80031d8:	4807      	ldr	r0, [pc, #28]	; (80031f8 <MX_TIM4_Init+0xb0>)
 80031da:	f004 f9bd 	bl	8007558 <HAL_TIM_PWM_ConfigChannel>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d001      	beq.n	80031e8 <MX_TIM4_Init+0xa0>
  {
    Error_Handler();
 80031e4:	f000 f9a8 	bl	8003538 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80031e8:	4803      	ldr	r0, [pc, #12]	; (80031f8 <MX_TIM4_Init+0xb0>)
 80031ea:	f000 faf7 	bl	80037dc <HAL_TIM_MspPostInit>

}
 80031ee:	bf00      	nop
 80031f0:	3728      	adds	r7, #40	; 0x28
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	20000880 	.word	0x20000880
 80031fc:	40000800 	.word	0x40000800

08003200 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003206:	1d3b      	adds	r3, r7, #4
 8003208:	2200      	movs	r2, #0
 800320a:	601a      	str	r2, [r3, #0]
 800320c:	605a      	str	r2, [r3, #4]
 800320e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003210:	4b14      	ldr	r3, [pc, #80]	; (8003264 <MX_TIM6_Init+0x64>)
 8003212:	4a15      	ldr	r2, [pc, #84]	; (8003268 <MX_TIM6_Init+0x68>)
 8003214:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 72-1;
 8003216:	4b13      	ldr	r3, [pc, #76]	; (8003264 <MX_TIM6_Init+0x64>)
 8003218:	2247      	movs	r2, #71	; 0x47
 800321a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800321c:	4b11      	ldr	r3, [pc, #68]	; (8003264 <MX_TIM6_Init+0x64>)
 800321e:	2200      	movs	r2, #0
 8003220:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8003222:	4b10      	ldr	r3, [pc, #64]	; (8003264 <MX_TIM6_Init+0x64>)
 8003224:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003228:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800322a:	4b0e      	ldr	r3, [pc, #56]	; (8003264 <MX_TIM6_Init+0x64>)
 800322c:	2200      	movs	r2, #0
 800322e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003230:	480c      	ldr	r0, [pc, #48]	; (8003264 <MX_TIM6_Init+0x64>)
 8003232:	f003 fdb8 	bl	8006da6 <HAL_TIM_Base_Init>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d001      	beq.n	8003240 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800323c:	f000 f97c 	bl	8003538 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003240:	2300      	movs	r3, #0
 8003242:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003244:	2300      	movs	r3, #0
 8003246:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003248:	1d3b      	adds	r3, r7, #4
 800324a:	4619      	mov	r1, r3
 800324c:	4805      	ldr	r0, [pc, #20]	; (8003264 <MX_TIM6_Init+0x64>)
 800324e:	f004 ff51 	bl	80080f4 <HAL_TIMEx_MasterConfigSynchronization>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8003258:	f000 f96e 	bl	8003538 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800325c:	bf00      	nop
 800325e:	3710      	adds	r7, #16
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	200008cc 	.word	0x200008cc
 8003268:	40001000 	.word	0x40001000

0800326c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003270:	4b14      	ldr	r3, [pc, #80]	; (80032c4 <MX_USART3_UART_Init+0x58>)
 8003272:	4a15      	ldr	r2, [pc, #84]	; (80032c8 <MX_USART3_UART_Init+0x5c>)
 8003274:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003276:	4b13      	ldr	r3, [pc, #76]	; (80032c4 <MX_USART3_UART_Init+0x58>)
 8003278:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800327c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800327e:	4b11      	ldr	r3, [pc, #68]	; (80032c4 <MX_USART3_UART_Init+0x58>)
 8003280:	2200      	movs	r2, #0
 8003282:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003284:	4b0f      	ldr	r3, [pc, #60]	; (80032c4 <MX_USART3_UART_Init+0x58>)
 8003286:	2200      	movs	r2, #0
 8003288:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800328a:	4b0e      	ldr	r3, [pc, #56]	; (80032c4 <MX_USART3_UART_Init+0x58>)
 800328c:	2200      	movs	r2, #0
 800328e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003290:	4b0c      	ldr	r3, [pc, #48]	; (80032c4 <MX_USART3_UART_Init+0x58>)
 8003292:	220c      	movs	r2, #12
 8003294:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003296:	4b0b      	ldr	r3, [pc, #44]	; (80032c4 <MX_USART3_UART_Init+0x58>)
 8003298:	2200      	movs	r2, #0
 800329a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800329c:	4b09      	ldr	r3, [pc, #36]	; (80032c4 <MX_USART3_UART_Init+0x58>)
 800329e:	2200      	movs	r2, #0
 80032a0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80032a2:	4b08      	ldr	r3, [pc, #32]	; (80032c4 <MX_USART3_UART_Init+0x58>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80032a8:	4b06      	ldr	r3, [pc, #24]	; (80032c4 <MX_USART3_UART_Init+0x58>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80032ae:	4805      	ldr	r0, [pc, #20]	; (80032c4 <MX_USART3_UART_Init+0x58>)
 80032b0:	f004 ffcc 	bl	800824c <HAL_UART_Init>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80032ba:	f000 f93d 	bl	8003538 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80032be:	bf00      	nop
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	20000918 	.word	0x20000918
 80032c8:	40004800 	.word	0x40004800

080032cc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80032d0:	4b14      	ldr	r3, [pc, #80]	; (8003324 <MX_USART6_UART_Init+0x58>)
 80032d2:	4a15      	ldr	r2, [pc, #84]	; (8003328 <MX_USART6_UART_Init+0x5c>)
 80032d4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80032d6:	4b13      	ldr	r3, [pc, #76]	; (8003324 <MX_USART6_UART_Init+0x58>)
 80032d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80032dc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80032de:	4b11      	ldr	r3, [pc, #68]	; (8003324 <MX_USART6_UART_Init+0x58>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80032e4:	4b0f      	ldr	r3, [pc, #60]	; (8003324 <MX_USART6_UART_Init+0x58>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80032ea:	4b0e      	ldr	r3, [pc, #56]	; (8003324 <MX_USART6_UART_Init+0x58>)
 80032ec:	2200      	movs	r2, #0
 80032ee:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80032f0:	4b0c      	ldr	r3, [pc, #48]	; (8003324 <MX_USART6_UART_Init+0x58>)
 80032f2:	220c      	movs	r2, #12
 80032f4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032f6:	4b0b      	ldr	r3, [pc, #44]	; (8003324 <MX_USART6_UART_Init+0x58>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80032fc:	4b09      	ldr	r3, [pc, #36]	; (8003324 <MX_USART6_UART_Init+0x58>)
 80032fe:	2200      	movs	r2, #0
 8003300:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003302:	4b08      	ldr	r3, [pc, #32]	; (8003324 <MX_USART6_UART_Init+0x58>)
 8003304:	2200      	movs	r2, #0
 8003306:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003308:	4b06      	ldr	r3, [pc, #24]	; (8003324 <MX_USART6_UART_Init+0x58>)
 800330a:	2200      	movs	r2, #0
 800330c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800330e:	4805      	ldr	r0, [pc, #20]	; (8003324 <MX_USART6_UART_Init+0x58>)
 8003310:	f004 ff9c 	bl	800824c <HAL_UART_Init>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800331a:	f000 f90d 	bl	8003538 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800331e:	bf00      	nop
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	2000099c 	.word	0x2000099c
 8003328:	40011400 	.word	0x40011400

0800332c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003330:	4b14      	ldr	r3, [pc, #80]	; (8003384 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003332:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003336:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8003338:	4b12      	ldr	r3, [pc, #72]	; (8003384 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800333a:	2206      	movs	r2, #6
 800333c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800333e:	4b11      	ldr	r3, [pc, #68]	; (8003384 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003340:	2200      	movs	r2, #0
 8003342:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003344:	4b0f      	ldr	r3, [pc, #60]	; (8003384 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003346:	2202      	movs	r2, #2
 8003348:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800334a:	4b0e      	ldr	r3, [pc, #56]	; (8003384 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800334c:	2201      	movs	r2, #1
 800334e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8003350:	4b0c      	ldr	r3, [pc, #48]	; (8003384 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003352:	2200      	movs	r2, #0
 8003354:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8003356:	4b0b      	ldr	r3, [pc, #44]	; (8003384 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003358:	2200      	movs	r2, #0
 800335a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800335c:	4b09      	ldr	r3, [pc, #36]	; (8003384 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800335e:	2201      	movs	r2, #1
 8003360:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8003362:	4b08      	ldr	r3, [pc, #32]	; (8003384 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003364:	2201      	movs	r2, #1
 8003366:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8003368:	4b06      	ldr	r3, [pc, #24]	; (8003384 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800336a:	2200      	movs	r2, #0
 800336c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800336e:	4805      	ldr	r0, [pc, #20]	; (8003384 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003370:	f002 fa0f 	bl	8005792 <HAL_PCD_Init>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d001      	beq.n	800337e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800337a:	f000 f8dd 	bl	8003538 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800337e:	bf00      	nop
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	20000a20 	.word	0x20000a20

08003388 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b08c      	sub	sp, #48	; 0x30
 800338c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800338e:	f107 031c 	add.w	r3, r7, #28
 8003392:	2200      	movs	r2, #0
 8003394:	601a      	str	r2, [r3, #0]
 8003396:	605a      	str	r2, [r3, #4]
 8003398:	609a      	str	r2, [r3, #8]
 800339a:	60da      	str	r2, [r3, #12]
 800339c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800339e:	4b61      	ldr	r3, [pc, #388]	; (8003524 <MX_GPIO_Init+0x19c>)
 80033a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a2:	4a60      	ldr	r2, [pc, #384]	; (8003524 <MX_GPIO_Init+0x19c>)
 80033a4:	f043 0304 	orr.w	r3, r3, #4
 80033a8:	6313      	str	r3, [r2, #48]	; 0x30
 80033aa:	4b5e      	ldr	r3, [pc, #376]	; (8003524 <MX_GPIO_Init+0x19c>)
 80033ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ae:	f003 0304 	and.w	r3, r3, #4
 80033b2:	61bb      	str	r3, [r7, #24]
 80033b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80033b6:	4b5b      	ldr	r3, [pc, #364]	; (8003524 <MX_GPIO_Init+0x19c>)
 80033b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ba:	4a5a      	ldr	r2, [pc, #360]	; (8003524 <MX_GPIO_Init+0x19c>)
 80033bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033c0:	6313      	str	r3, [r2, #48]	; 0x30
 80033c2:	4b58      	ldr	r3, [pc, #352]	; (8003524 <MX_GPIO_Init+0x19c>)
 80033c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ca:	617b      	str	r3, [r7, #20]
 80033cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80033ce:	4b55      	ldr	r3, [pc, #340]	; (8003524 <MX_GPIO_Init+0x19c>)
 80033d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d2:	4a54      	ldr	r2, [pc, #336]	; (8003524 <MX_GPIO_Init+0x19c>)
 80033d4:	f043 0301 	orr.w	r3, r3, #1
 80033d8:	6313      	str	r3, [r2, #48]	; 0x30
 80033da:	4b52      	ldr	r3, [pc, #328]	; (8003524 <MX_GPIO_Init+0x19c>)
 80033dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033de:	f003 0301 	and.w	r3, r3, #1
 80033e2:	613b      	str	r3, [r7, #16]
 80033e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80033e6:	4b4f      	ldr	r3, [pc, #316]	; (8003524 <MX_GPIO_Init+0x19c>)
 80033e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ea:	4a4e      	ldr	r2, [pc, #312]	; (8003524 <MX_GPIO_Init+0x19c>)
 80033ec:	f043 0302 	orr.w	r3, r3, #2
 80033f0:	6313      	str	r3, [r2, #48]	; 0x30
 80033f2:	4b4c      	ldr	r3, [pc, #304]	; (8003524 <MX_GPIO_Init+0x19c>)
 80033f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	60fb      	str	r3, [r7, #12]
 80033fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80033fe:	4b49      	ldr	r3, [pc, #292]	; (8003524 <MX_GPIO_Init+0x19c>)
 8003400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003402:	4a48      	ldr	r2, [pc, #288]	; (8003524 <MX_GPIO_Init+0x19c>)
 8003404:	f043 0310 	orr.w	r3, r3, #16
 8003408:	6313      	str	r3, [r2, #48]	; 0x30
 800340a:	4b46      	ldr	r3, [pc, #280]	; (8003524 <MX_GPIO_Init+0x19c>)
 800340c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340e:	f003 0310 	and.w	r3, r3, #16
 8003412:	60bb      	str	r3, [r7, #8]
 8003414:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003416:	4b43      	ldr	r3, [pc, #268]	; (8003524 <MX_GPIO_Init+0x19c>)
 8003418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341a:	4a42      	ldr	r2, [pc, #264]	; (8003524 <MX_GPIO_Init+0x19c>)
 800341c:	f043 0308 	orr.w	r3, r3, #8
 8003420:	6313      	str	r3, [r2, #48]	; 0x30
 8003422:	4b40      	ldr	r3, [pc, #256]	; (8003524 <MX_GPIO_Init+0x19c>)
 8003424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003426:	f003 0308 	and.w	r3, r3, #8
 800342a:	607b      	str	r3, [r7, #4]
 800342c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800342e:	4b3d      	ldr	r3, [pc, #244]	; (8003524 <MX_GPIO_Init+0x19c>)
 8003430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003432:	4a3c      	ldr	r2, [pc, #240]	; (8003524 <MX_GPIO_Init+0x19c>)
 8003434:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003438:	6313      	str	r3, [r2, #48]	; 0x30
 800343a:	4b3a      	ldr	r3, [pc, #232]	; (8003524 <MX_GPIO_Init+0x19c>)
 800343c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003442:	603b      	str	r3, [r7, #0]
 8003444:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEMP_DATA_GPIO_Port, TEMP_DATA_Pin, GPIO_PIN_SET);
 8003446:	2201      	movs	r2, #1
 8003448:	2101      	movs	r1, #1
 800344a:	4837      	ldr	r0, [pc, #220]	; (8003528 <MX_GPIO_Init+0x1a0>)
 800344c:	f001 fc42 	bl	8004cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8003450:	2200      	movs	r2, #0
 8003452:	f244 0181 	movw	r1, #16513	; 0x4081
 8003456:	4835      	ldr	r0, [pc, #212]	; (800352c <MX_GPIO_Init+0x1a4>)
 8003458:	f001 fc3c 	bl	8004cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800345c:	2200      	movs	r2, #0
 800345e:	2140      	movs	r1, #64	; 0x40
 8003460:	4833      	ldr	r0, [pc, #204]	; (8003530 <MX_GPIO_Init+0x1a8>)
 8003462:	f001 fc37 	bl	8004cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8003466:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800346a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800346c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003470:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003472:	2300      	movs	r3, #0
 8003474:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8003476:	f107 031c 	add.w	r3, r7, #28
 800347a:	4619      	mov	r1, r3
 800347c:	482a      	ldr	r0, [pc, #168]	; (8003528 <MX_GPIO_Init+0x1a0>)
 800347e:	f001 fa75 	bl	800496c <HAL_GPIO_Init>

  /*Configure GPIO pin : TEMP_DATA_Pin */
  GPIO_InitStruct.Pin = TEMP_DATA_Pin;
 8003482:	2301      	movs	r3, #1
 8003484:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003486:	2301      	movs	r3, #1
 8003488:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800348a:	2301      	movs	r3, #1
 800348c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800348e:	2302      	movs	r3, #2
 8003490:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TEMP_DATA_GPIO_Port, &GPIO_InitStruct);
 8003492:	f107 031c 	add.w	r3, r7, #28
 8003496:	4619      	mov	r1, r3
 8003498:	4823      	ldr	r0, [pc, #140]	; (8003528 <MX_GPIO_Init+0x1a0>)
 800349a:	f001 fa67 	bl	800496c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800349e:	f244 0381 	movw	r3, #16513	; 0x4081
 80034a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034a4:	2301      	movs	r3, #1
 80034a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034a8:	2300      	movs	r3, #0
 80034aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ac:	2300      	movs	r3, #0
 80034ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034b0:	f107 031c 	add.w	r3, r7, #28
 80034b4:	4619      	mov	r1, r3
 80034b6:	481d      	ldr	r0, [pc, #116]	; (800352c <MX_GPIO_Init+0x1a4>)
 80034b8:	f001 fa58 	bl	800496c <HAL_GPIO_Init>

  /*Configure GPIO pins : UP_B_Pin DOWN_B_Pin SEL_B_Pin */
  GPIO_InitStruct.Pin = UP_B_Pin|DOWN_B_Pin|SEL_B_Pin;
 80034bc:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 80034c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80034c2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80034c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034c8:	2301      	movs	r3, #1
 80034ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80034cc:	f107 031c 	add.w	r3, r7, #28
 80034d0:	4619      	mov	r1, r3
 80034d2:	4818      	ldr	r0, [pc, #96]	; (8003534 <MX_GPIO_Init+0x1ac>)
 80034d4:	f001 fa4a 	bl	800496c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80034d8:	2340      	movs	r3, #64	; 0x40
 80034da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034dc:	2301      	movs	r3, #1
 80034de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e0:	2300      	movs	r3, #0
 80034e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034e4:	2300      	movs	r3, #0
 80034e6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80034e8:	f107 031c 	add.w	r3, r7, #28
 80034ec:	4619      	mov	r1, r3
 80034ee:	4810      	ldr	r0, [pc, #64]	; (8003530 <MX_GPIO_Init+0x1a8>)
 80034f0:	f001 fa3c 	bl	800496c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80034f4:	2380      	movs	r3, #128	; 0x80
 80034f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034f8:	2300      	movs	r3, #0
 80034fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034fc:	2300      	movs	r3, #0
 80034fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003500:	f107 031c 	add.w	r3, r7, #28
 8003504:	4619      	mov	r1, r3
 8003506:	480a      	ldr	r0, [pc, #40]	; (8003530 <MX_GPIO_Init+0x1a8>)
 8003508:	f001 fa30 	bl	800496c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800350c:	2200      	movs	r2, #0
 800350e:	2100      	movs	r1, #0
 8003510:	2028      	movs	r0, #40	; 0x28
 8003512:	f001 f9f4 	bl	80048fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003516:	2028      	movs	r0, #40	; 0x28
 8003518:	f001 fa0d 	bl	8004936 <HAL_NVIC_EnableIRQ>

}
 800351c:	bf00      	nop
 800351e:	3730      	adds	r7, #48	; 0x30
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}
 8003524:	40023800 	.word	0x40023800
 8003528:	40020800 	.word	0x40020800
 800352c:	40020400 	.word	0x40020400
 8003530:	40021800 	.word	0x40021800
 8003534:	40021000 	.word	0x40021000

08003538 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003538:	b480      	push	{r7}
 800353a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800353c:	b672      	cpsid	i
}
 800353e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003540:	e7fe      	b.n	8003540 <Error_Handler+0x8>
	...

08003544 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800354a:	4b0f      	ldr	r3, [pc, #60]	; (8003588 <HAL_MspInit+0x44>)
 800354c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354e:	4a0e      	ldr	r2, [pc, #56]	; (8003588 <HAL_MspInit+0x44>)
 8003550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003554:	6413      	str	r3, [r2, #64]	; 0x40
 8003556:	4b0c      	ldr	r3, [pc, #48]	; (8003588 <HAL_MspInit+0x44>)
 8003558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800355e:	607b      	str	r3, [r7, #4]
 8003560:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003562:	4b09      	ldr	r3, [pc, #36]	; (8003588 <HAL_MspInit+0x44>)
 8003564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003566:	4a08      	ldr	r2, [pc, #32]	; (8003588 <HAL_MspInit+0x44>)
 8003568:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800356c:	6453      	str	r3, [r2, #68]	; 0x44
 800356e:	4b06      	ldr	r3, [pc, #24]	; (8003588 <HAL_MspInit+0x44>)
 8003570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003572:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003576:	603b      	str	r3, [r7, #0]
 8003578:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800357a:	bf00      	nop
 800357c:	370c      	adds	r7, #12
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	40023800 	.word	0x40023800

0800358c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b08a      	sub	sp, #40	; 0x28
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003594:	f107 0314 	add.w	r3, r7, #20
 8003598:	2200      	movs	r2, #0
 800359a:	601a      	str	r2, [r3, #0]
 800359c:	605a      	str	r2, [r3, #4]
 800359e:	609a      	str	r2, [r3, #8]
 80035a0:	60da      	str	r2, [r3, #12]
 80035a2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a15      	ldr	r2, [pc, #84]	; (8003600 <HAL_ADC_MspInit+0x74>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d123      	bne.n	80035f6 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80035ae:	4b15      	ldr	r3, [pc, #84]	; (8003604 <HAL_ADC_MspInit+0x78>)
 80035b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b2:	4a14      	ldr	r2, [pc, #80]	; (8003604 <HAL_ADC_MspInit+0x78>)
 80035b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035b8:	6453      	str	r3, [r2, #68]	; 0x44
 80035ba:	4b12      	ldr	r3, [pc, #72]	; (8003604 <HAL_ADC_MspInit+0x78>)
 80035bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035c2:	613b      	str	r3, [r7, #16]
 80035c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035c6:	4b0f      	ldr	r3, [pc, #60]	; (8003604 <HAL_ADC_MspInit+0x78>)
 80035c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ca:	4a0e      	ldr	r2, [pc, #56]	; (8003604 <HAL_ADC_MspInit+0x78>)
 80035cc:	f043 0301 	orr.w	r3, r3, #1
 80035d0:	6313      	str	r3, [r2, #48]	; 0x30
 80035d2:	4b0c      	ldr	r3, [pc, #48]	; (8003604 <HAL_ADC_MspInit+0x78>)
 80035d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	60fb      	str	r3, [r7, #12]
 80035dc:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PA3     ------> ADC3_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80035de:	2308      	movs	r3, #8
 80035e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80035e2:	2303      	movs	r3, #3
 80035e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035e6:	2300      	movs	r3, #0
 80035e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035ea:	f107 0314 	add.w	r3, r7, #20
 80035ee:	4619      	mov	r1, r3
 80035f0:	4805      	ldr	r0, [pc, #20]	; (8003608 <HAL_ADC_MspInit+0x7c>)
 80035f2:	f001 f9bb 	bl	800496c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80035f6:	bf00      	nop
 80035f8:	3728      	adds	r7, #40	; 0x28
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	40012200 	.word	0x40012200
 8003604:	40023800 	.word	0x40023800
 8003608:	40020000 	.word	0x40020000

0800360c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b0aa      	sub	sp, #168	; 0xa8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003614:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003618:	2200      	movs	r2, #0
 800361a:	601a      	str	r2, [r3, #0]
 800361c:	605a      	str	r2, [r3, #4]
 800361e:	609a      	str	r2, [r3, #8]
 8003620:	60da      	str	r2, [r3, #12]
 8003622:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003624:	f107 0314 	add.w	r3, r7, #20
 8003628:	2280      	movs	r2, #128	; 0x80
 800362a:	2100      	movs	r1, #0
 800362c:	4618      	mov	r0, r3
 800362e:	f005 ff67 	bl	8009500 <memset>
  if(hi2c->Instance==I2C1)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a22      	ldr	r2, [pc, #136]	; (80036c0 <HAL_I2C_MspInit+0xb4>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d13c      	bne.n	80036b6 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800363c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003640:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003642:	2300      	movs	r3, #0
 8003644:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003646:	f107 0314 	add.w	r3, r7, #20
 800364a:	4618      	mov	r0, r3
 800364c:	f002 fed4 	bl	80063f8 <HAL_RCCEx_PeriphCLKConfig>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d001      	beq.n	800365a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003656:	f7ff ff6f 	bl	8003538 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800365a:	4b1a      	ldr	r3, [pc, #104]	; (80036c4 <HAL_I2C_MspInit+0xb8>)
 800365c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365e:	4a19      	ldr	r2, [pc, #100]	; (80036c4 <HAL_I2C_MspInit+0xb8>)
 8003660:	f043 0302 	orr.w	r3, r3, #2
 8003664:	6313      	str	r3, [r2, #48]	; 0x30
 8003666:	4b17      	ldr	r3, [pc, #92]	; (80036c4 <HAL_I2C_MspInit+0xb8>)
 8003668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	613b      	str	r3, [r7, #16]
 8003670:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_PIN_Pin|SDA_PIN_Pin;
 8003672:	f44f 7310 	mov.w	r3, #576	; 0x240
 8003676:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800367a:	2312      	movs	r3, #18
 800367c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003680:	2300      	movs	r3, #0
 8003682:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003686:	2303      	movs	r3, #3
 8003688:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800368c:	2304      	movs	r3, #4
 800368e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003692:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003696:	4619      	mov	r1, r3
 8003698:	480b      	ldr	r0, [pc, #44]	; (80036c8 <HAL_I2C_MspInit+0xbc>)
 800369a:	f001 f967 	bl	800496c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800369e:	4b09      	ldr	r3, [pc, #36]	; (80036c4 <HAL_I2C_MspInit+0xb8>)
 80036a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a2:	4a08      	ldr	r2, [pc, #32]	; (80036c4 <HAL_I2C_MspInit+0xb8>)
 80036a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80036a8:	6413      	str	r3, [r2, #64]	; 0x40
 80036aa:	4b06      	ldr	r3, [pc, #24]	; (80036c4 <HAL_I2C_MspInit+0xb8>)
 80036ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036b2:	60fb      	str	r3, [r7, #12]
 80036b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80036b6:	bf00      	nop
 80036b8:	37a8      	adds	r7, #168	; 0xa8
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	40005400 	.word	0x40005400
 80036c4:	40023800 	.word	0x40023800
 80036c8:	40020400 	.word	0x40020400

080036cc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b0a2      	sub	sp, #136	; 0x88
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80036d4:	f107 0308 	add.w	r3, r7, #8
 80036d8:	2280      	movs	r2, #128	; 0x80
 80036da:	2100      	movs	r1, #0
 80036dc:	4618      	mov	r0, r3
 80036de:	f005 ff0f 	bl	8009500 <memset>
  if(hrtc->Instance==RTC)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a0e      	ldr	r2, [pc, #56]	; (8003720 <HAL_RTC_MspInit+0x54>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d114      	bne.n	8003716 <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80036ec:	2320      	movs	r3, #32
 80036ee:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80036f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036f4:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80036f6:	f107 0308 	add.w	r3, r7, #8
 80036fa:	4618      	mov	r0, r3
 80036fc:	f002 fe7c 	bl	80063f8 <HAL_RCCEx_PeriphCLKConfig>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d001      	beq.n	800370a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8003706:	f7ff ff17 	bl	8003538 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800370a:	4b06      	ldr	r3, [pc, #24]	; (8003724 <HAL_RTC_MspInit+0x58>)
 800370c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800370e:	4a05      	ldr	r2, [pc, #20]	; (8003724 <HAL_RTC_MspInit+0x58>)
 8003710:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003714:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003716:	bf00      	nop
 8003718:	3788      	adds	r7, #136	; 0x88
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	40002800 	.word	0x40002800
 8003724:	40023800 	.word	0x40023800

08003728 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a16      	ldr	r2, [pc, #88]	; (8003790 <HAL_TIM_Base_MspInit+0x68>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d114      	bne.n	8003764 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800373a:	4b16      	ldr	r3, [pc, #88]	; (8003794 <HAL_TIM_Base_MspInit+0x6c>)
 800373c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373e:	4a15      	ldr	r2, [pc, #84]	; (8003794 <HAL_TIM_Base_MspInit+0x6c>)
 8003740:	f043 0302 	orr.w	r3, r3, #2
 8003744:	6413      	str	r3, [r2, #64]	; 0x40
 8003746:	4b13      	ldr	r3, [pc, #76]	; (8003794 <HAL_TIM_Base_MspInit+0x6c>)
 8003748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	60fb      	str	r3, [r7, #12]
 8003750:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003752:	2200      	movs	r2, #0
 8003754:	2100      	movs	r1, #0
 8003756:	201d      	movs	r0, #29
 8003758:	f001 f8d1 	bl	80048fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800375c:	201d      	movs	r0, #29
 800375e:	f001 f8ea 	bl	8004936 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003762:	e010      	b.n	8003786 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM6)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a0b      	ldr	r2, [pc, #44]	; (8003798 <HAL_TIM_Base_MspInit+0x70>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d10b      	bne.n	8003786 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800376e:	4b09      	ldr	r3, [pc, #36]	; (8003794 <HAL_TIM_Base_MspInit+0x6c>)
 8003770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003772:	4a08      	ldr	r2, [pc, #32]	; (8003794 <HAL_TIM_Base_MspInit+0x6c>)
 8003774:	f043 0310 	orr.w	r3, r3, #16
 8003778:	6413      	str	r3, [r2, #64]	; 0x40
 800377a:	4b06      	ldr	r3, [pc, #24]	; (8003794 <HAL_TIM_Base_MspInit+0x6c>)
 800377c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377e:	f003 0310 	and.w	r3, r3, #16
 8003782:	60bb      	str	r3, [r7, #8]
 8003784:	68bb      	ldr	r3, [r7, #8]
}
 8003786:	bf00      	nop
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	40000400 	.word	0x40000400
 8003794:	40023800 	.word	0x40023800
 8003798:	40001000 	.word	0x40001000

0800379c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a0a      	ldr	r2, [pc, #40]	; (80037d4 <HAL_TIM_PWM_MspInit+0x38>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d10b      	bne.n	80037c6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80037ae:	4b0a      	ldr	r3, [pc, #40]	; (80037d8 <HAL_TIM_PWM_MspInit+0x3c>)
 80037b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b2:	4a09      	ldr	r2, [pc, #36]	; (80037d8 <HAL_TIM_PWM_MspInit+0x3c>)
 80037b4:	f043 0304 	orr.w	r3, r3, #4
 80037b8:	6413      	str	r3, [r2, #64]	; 0x40
 80037ba:	4b07      	ldr	r3, [pc, #28]	; (80037d8 <HAL_TIM_PWM_MspInit+0x3c>)
 80037bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037be:	f003 0304 	and.w	r3, r3, #4
 80037c2:	60fb      	str	r3, [r7, #12]
 80037c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80037c6:	bf00      	nop
 80037c8:	3714      	adds	r7, #20
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	40000800 	.word	0x40000800
 80037d8:	40023800 	.word	0x40023800

080037dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b088      	sub	sp, #32
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037e4:	f107 030c 	add.w	r3, r7, #12
 80037e8:	2200      	movs	r2, #0
 80037ea:	601a      	str	r2, [r3, #0]
 80037ec:	605a      	str	r2, [r3, #4]
 80037ee:	609a      	str	r2, [r3, #8]
 80037f0:	60da      	str	r2, [r3, #12]
 80037f2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a11      	ldr	r2, [pc, #68]	; (8003840 <HAL_TIM_MspPostInit+0x64>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d11c      	bne.n	8003838 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80037fe:	4b11      	ldr	r3, [pc, #68]	; (8003844 <HAL_TIM_MspPostInit+0x68>)
 8003800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003802:	4a10      	ldr	r2, [pc, #64]	; (8003844 <HAL_TIM_MspPostInit+0x68>)
 8003804:	f043 0308 	orr.w	r3, r3, #8
 8003808:	6313      	str	r3, [r2, #48]	; 0x30
 800380a:	4b0e      	ldr	r3, [pc, #56]	; (8003844 <HAL_TIM_MspPostInit+0x68>)
 800380c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380e:	f003 0308 	and.w	r3, r3, #8
 8003812:	60bb      	str	r3, [r7, #8]
 8003814:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003816:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800381a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800381c:	2302      	movs	r3, #2
 800381e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003820:	2300      	movs	r3, #0
 8003822:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003824:	2300      	movs	r3, #0
 8003826:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003828:	2302      	movs	r3, #2
 800382a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800382c:	f107 030c 	add.w	r3, r7, #12
 8003830:	4619      	mov	r1, r3
 8003832:	4805      	ldr	r0, [pc, #20]	; (8003848 <HAL_TIM_MspPostInit+0x6c>)
 8003834:	f001 f89a 	bl	800496c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8003838:	bf00      	nop
 800383a:	3720      	adds	r7, #32
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	40000800 	.word	0x40000800
 8003844:	40023800 	.word	0x40023800
 8003848:	40020c00 	.word	0x40020c00

0800384c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b0ac      	sub	sp, #176	; 0xb0
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003854:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003858:	2200      	movs	r2, #0
 800385a:	601a      	str	r2, [r3, #0]
 800385c:	605a      	str	r2, [r3, #4]
 800385e:	609a      	str	r2, [r3, #8]
 8003860:	60da      	str	r2, [r3, #12]
 8003862:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003864:	f107 031c 	add.w	r3, r7, #28
 8003868:	2280      	movs	r2, #128	; 0x80
 800386a:	2100      	movs	r1, #0
 800386c:	4618      	mov	r0, r3
 800386e:	f005 fe47 	bl	8009500 <memset>
  if(huart->Instance==USART3)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a43      	ldr	r2, [pc, #268]	; (8003984 <HAL_UART_MspInit+0x138>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d13d      	bne.n	80038f8 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800387c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003880:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003882:	2300      	movs	r3, #0
 8003884:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003886:	f107 031c 	add.w	r3, r7, #28
 800388a:	4618      	mov	r0, r3
 800388c:	f002 fdb4 	bl	80063f8 <HAL_RCCEx_PeriphCLKConfig>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d001      	beq.n	800389a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003896:	f7ff fe4f 	bl	8003538 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800389a:	4b3b      	ldr	r3, [pc, #236]	; (8003988 <HAL_UART_MspInit+0x13c>)
 800389c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389e:	4a3a      	ldr	r2, [pc, #232]	; (8003988 <HAL_UART_MspInit+0x13c>)
 80038a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038a4:	6413      	str	r3, [r2, #64]	; 0x40
 80038a6:	4b38      	ldr	r3, [pc, #224]	; (8003988 <HAL_UART_MspInit+0x13c>)
 80038a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038ae:	61bb      	str	r3, [r7, #24]
 80038b0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80038b2:	4b35      	ldr	r3, [pc, #212]	; (8003988 <HAL_UART_MspInit+0x13c>)
 80038b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b6:	4a34      	ldr	r2, [pc, #208]	; (8003988 <HAL_UART_MspInit+0x13c>)
 80038b8:	f043 0308 	orr.w	r3, r3, #8
 80038bc:	6313      	str	r3, [r2, #48]	; 0x30
 80038be:	4b32      	ldr	r3, [pc, #200]	; (8003988 <HAL_UART_MspInit+0x13c>)
 80038c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c2:	f003 0308 	and.w	r3, r3, #8
 80038c6:	617b      	str	r3, [r7, #20]
 80038c8:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80038ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80038ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038d2:	2302      	movs	r3, #2
 80038d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d8:	2300      	movs	r3, #0
 80038da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038de:	2303      	movs	r3, #3
 80038e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80038e4:	2307      	movs	r3, #7
 80038e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80038ea:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80038ee:	4619      	mov	r1, r3
 80038f0:	4826      	ldr	r0, [pc, #152]	; (800398c <HAL_UART_MspInit+0x140>)
 80038f2:	f001 f83b 	bl	800496c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80038f6:	e040      	b.n	800397a <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART6)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a24      	ldr	r2, [pc, #144]	; (8003990 <HAL_UART_MspInit+0x144>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d13b      	bne.n	800397a <HAL_UART_MspInit+0x12e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8003902:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003906:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8003908:	2300      	movs	r3, #0
 800390a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800390c:	f107 031c 	add.w	r3, r7, #28
 8003910:	4618      	mov	r0, r3
 8003912:	f002 fd71 	bl	80063f8 <HAL_RCCEx_PeriphCLKConfig>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d001      	beq.n	8003920 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 800391c:	f7ff fe0c 	bl	8003538 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003920:	4b19      	ldr	r3, [pc, #100]	; (8003988 <HAL_UART_MspInit+0x13c>)
 8003922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003924:	4a18      	ldr	r2, [pc, #96]	; (8003988 <HAL_UART_MspInit+0x13c>)
 8003926:	f043 0320 	orr.w	r3, r3, #32
 800392a:	6453      	str	r3, [r2, #68]	; 0x44
 800392c:	4b16      	ldr	r3, [pc, #88]	; (8003988 <HAL_UART_MspInit+0x13c>)
 800392e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003930:	f003 0320 	and.w	r3, r3, #32
 8003934:	613b      	str	r3, [r7, #16]
 8003936:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003938:	4b13      	ldr	r3, [pc, #76]	; (8003988 <HAL_UART_MspInit+0x13c>)
 800393a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393c:	4a12      	ldr	r2, [pc, #72]	; (8003988 <HAL_UART_MspInit+0x13c>)
 800393e:	f043 0304 	orr.w	r3, r3, #4
 8003942:	6313      	str	r3, [r2, #48]	; 0x30
 8003944:	4b10      	ldr	r3, [pc, #64]	; (8003988 <HAL_UART_MspInit+0x13c>)
 8003946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003948:	f003 0304 	and.w	r3, r3, #4
 800394c:	60fb      	str	r3, [r7, #12]
 800394e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003950:	23c0      	movs	r3, #192	; 0xc0
 8003952:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003956:	2302      	movs	r3, #2
 8003958:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800395c:	2300      	movs	r3, #0
 800395e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003962:	2303      	movs	r3, #3
 8003964:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003968:	2308      	movs	r3, #8
 800396a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800396e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003972:	4619      	mov	r1, r3
 8003974:	4807      	ldr	r0, [pc, #28]	; (8003994 <HAL_UART_MspInit+0x148>)
 8003976:	f000 fff9 	bl	800496c <HAL_GPIO_Init>
}
 800397a:	bf00      	nop
 800397c:	37b0      	adds	r7, #176	; 0xb0
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	40004800 	.word	0x40004800
 8003988:	40023800 	.word	0x40023800
 800398c:	40020c00 	.word	0x40020c00
 8003990:	40011400 	.word	0x40011400
 8003994:	40020800 	.word	0x40020800

08003998 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b0aa      	sub	sp, #168	; 0xa8
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039a0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80039a4:	2200      	movs	r2, #0
 80039a6:	601a      	str	r2, [r3, #0]
 80039a8:	605a      	str	r2, [r3, #4]
 80039aa:	609a      	str	r2, [r3, #8]
 80039ac:	60da      	str	r2, [r3, #12]
 80039ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80039b0:	f107 0314 	add.w	r3, r7, #20
 80039b4:	2280      	movs	r2, #128	; 0x80
 80039b6:	2100      	movs	r1, #0
 80039b8:	4618      	mov	r0, r3
 80039ba:	f005 fda1 	bl	8009500 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039c6:	d159      	bne.n	8003a7c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80039c8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80039cc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80039ce:	2300      	movs	r3, #0
 80039d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80039d4:	f107 0314 	add.w	r3, r7, #20
 80039d8:	4618      	mov	r0, r3
 80039da:	f002 fd0d 	bl	80063f8 <HAL_RCCEx_PeriphCLKConfig>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d001      	beq.n	80039e8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80039e4:	f7ff fda8 	bl	8003538 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039e8:	4b26      	ldr	r3, [pc, #152]	; (8003a84 <HAL_PCD_MspInit+0xec>)
 80039ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ec:	4a25      	ldr	r2, [pc, #148]	; (8003a84 <HAL_PCD_MspInit+0xec>)
 80039ee:	f043 0301 	orr.w	r3, r3, #1
 80039f2:	6313      	str	r3, [r2, #48]	; 0x30
 80039f4:	4b23      	ldr	r3, [pc, #140]	; (8003a84 <HAL_PCD_MspInit+0xec>)
 80039f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f8:	f003 0301 	and.w	r3, r3, #1
 80039fc:	613b      	str	r3, [r7, #16]
 80039fe:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8003a00:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8003a04:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a08:	2302      	movs	r3, #2
 8003a0a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a14:	2303      	movs	r3, #3
 8003a16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003a1a:	230a      	movs	r3, #10
 8003a1c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a20:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003a24:	4619      	mov	r1, r3
 8003a26:	4818      	ldr	r0, [pc, #96]	; (8003a88 <HAL_PCD_MspInit+0xf0>)
 8003a28:	f000 ffa0 	bl	800496c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8003a2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a30:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a34:	2300      	movs	r3, #0
 8003a36:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003a40:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003a44:	4619      	mov	r1, r3
 8003a46:	4810      	ldr	r0, [pc, #64]	; (8003a88 <HAL_PCD_MspInit+0xf0>)
 8003a48:	f000 ff90 	bl	800496c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003a4c:	4b0d      	ldr	r3, [pc, #52]	; (8003a84 <HAL_PCD_MspInit+0xec>)
 8003a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a50:	4a0c      	ldr	r2, [pc, #48]	; (8003a84 <HAL_PCD_MspInit+0xec>)
 8003a52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a56:	6353      	str	r3, [r2, #52]	; 0x34
 8003a58:	4b0a      	ldr	r3, [pc, #40]	; (8003a84 <HAL_PCD_MspInit+0xec>)
 8003a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a60:	60fb      	str	r3, [r7, #12]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	4b07      	ldr	r3, [pc, #28]	; (8003a84 <HAL_PCD_MspInit+0xec>)
 8003a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a68:	4a06      	ldr	r2, [pc, #24]	; (8003a84 <HAL_PCD_MspInit+0xec>)
 8003a6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a6e:	6453      	str	r3, [r2, #68]	; 0x44
 8003a70:	4b04      	ldr	r3, [pc, #16]	; (8003a84 <HAL_PCD_MspInit+0xec>)
 8003a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a78:	60bb      	str	r3, [r7, #8]
 8003a7a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8003a7c:	bf00      	nop
 8003a7e:	37a8      	adds	r7, #168	; 0xa8
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	40023800 	.word	0x40023800
 8003a88:	40020000 	.word	0x40020000

08003a8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a90:	e7fe      	b.n	8003a90 <NMI_Handler+0x4>

08003a92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a92:	b480      	push	{r7}
 8003a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a96:	e7fe      	b.n	8003a96 <HardFault_Handler+0x4>

08003a98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a9c:	e7fe      	b.n	8003a9c <MemManage_Handler+0x4>

08003a9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a9e:	b480      	push	{r7}
 8003aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003aa2:	e7fe      	b.n	8003aa2 <BusFault_Handler+0x4>

08003aa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003aa8:	e7fe      	b.n	8003aa8 <UsageFault_Handler+0x4>

08003aaa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003aaa:	b480      	push	{r7}
 8003aac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003aae:	bf00      	nop
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr

08003ab8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003abc:	bf00      	nop
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr

08003ac6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ac6:	b480      	push	{r7}
 8003ac8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003aca:	bf00      	nop
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ad8:	f000 f9f8 	bl	8003ecc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003adc:	bf00      	nop
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003ae6:	4822      	ldr	r0, [pc, #136]	; (8003b70 <TIM3_IRQHandler+0x90>)
 8003ae8:	f003 fc16 	bl	8007318 <HAL_TIM_IRQHandler>
//  second_count ++;
//  update_clock(second_count);
//  if(second_count > 120){
//  	  second_count=0;
//    }
  int now_mode = getMode();
 8003aec:	f7fe ff96 	bl	8002a1c <getMode>
 8003af0:	6078      	str	r0, [r7, #4]
  // if now mode is Modify, Don't Increase Second..
  if(now_mode != 3){
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2b03      	cmp	r3, #3
 8003af6:	d008      	beq.n	8003b0a <TIM3_IRQHandler+0x2a>
	  clock_value[0] = ++default_second;
 8003af8:	4b1e      	ldr	r3, [pc, #120]	; (8003b74 <TIM3_IRQHandler+0x94>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	3301      	adds	r3, #1
 8003afe:	4a1d      	ldr	r2, [pc, #116]	; (8003b74 <TIM3_IRQHandler+0x94>)
 8003b00:	6013      	str	r3, [r2, #0]
 8003b02:	4b1c      	ldr	r3, [pc, #112]	; (8003b74 <TIM3_IRQHandler+0x94>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a1c      	ldr	r2, [pc, #112]	; (8003b78 <TIM3_IRQHandler+0x98>)
 8003b08:	6013      	str	r3, [r2, #0]
  }
  if(default_second >=60){
 8003b0a:	4b1a      	ldr	r3, [pc, #104]	; (8003b74 <TIM3_IRQHandler+0x94>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2b3b      	cmp	r3, #59	; 0x3b
 8003b10:	dd0f      	ble.n	8003b32 <TIM3_IRQHandler+0x52>
	  default_second=0;
 8003b12:	4b18      	ldr	r3, [pc, #96]	; (8003b74 <TIM3_IRQHandler+0x94>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	601a      	str	r2, [r3, #0]
	  set_time_t();
 8003b18:	f7fe ff6a 	bl	80029f0 <set_time_t>
	  clock_value[0]=default_second;
 8003b1c:	4b15      	ldr	r3, [pc, #84]	; (8003b74 <TIM3_IRQHandler+0x94>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a15      	ldr	r2, [pc, #84]	; (8003b78 <TIM3_IRQHandler+0x98>)
 8003b22:	6013      	str	r3, [r2, #0]
	  if(getAlarmState()){
 8003b24:	f7fe ffb2 	bl	8002a8c <getAlarmState>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d001      	beq.n	8003b32 <TIM3_IRQHandler+0x52>
		  check_Alarm();
 8003b2e:	f7ff f921 	bl	8002d74 <check_Alarm>
	  }
	  // alarm check ?��?��
  }
  if(getTimerState() == 1){
 8003b32:	f7fe ff8f 	bl	8002a54 <getTimerState>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d115      	bne.n	8003b68 <TIM3_IRQHandler+0x88>
	  Timer_Second--;
 8003b3c:	4b0f      	ldr	r3, [pc, #60]	; (8003b7c <TIM3_IRQHandler+0x9c>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	3b01      	subs	r3, #1
 8003b42:	4a0e      	ldr	r2, [pc, #56]	; (8003b7c <TIM3_IRQHandler+0x9c>)
 8003b44:	6013      	str	r3, [r2, #0]
	  update_timer();
 8003b46:	f7fc ff33 	bl	80009b0 <update_timer>
	  if(Timer_Second == 0 && getTimerState()==1){
 8003b4a:	4b0c      	ldr	r3, [pc, #48]	; (8003b7c <TIM3_IRQHandler+0x9c>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d10a      	bne.n	8003b68 <TIM3_IRQHandler+0x88>
 8003b52:	f7fe ff7f 	bl	8002a54 <getTimerState>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d105      	bne.n	8003b68 <TIM3_IRQHandler+0x88>
		  setTimerCompleted(1);
 8003b5c:	2001      	movs	r0, #1
 8003b5e:	f7fe ffbd 	bl	8002adc <setTimerCompleted>
//		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, htim4.Init.Period);
		  start_Boozer(1);
 8003b62:	2001      	movs	r0, #1
 8003b64:	f7ff f8ce 	bl	8002d04 <start_Boozer>
	  }
  }

  /* USER CODE END TIM3_IRQn 1 */
}
 8003b68:	bf00      	nop
 8003b6a:	3708      	adds	r7, #8
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	20000834 	.word	0x20000834
 8003b74:	20000774 	.word	0x20000774
 8003b78:	200000ac 	.word	0x200000ac
 8003b7c:	20000778 	.word	0x20000778

08003b80 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(UP_B_Pin);
 8003b84:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003b88:	f001 f8be 	bl	8004d08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8003b8c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003b90:	f001 f8ba 	bl	8004d08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DOWN_B_Pin);
 8003b94:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003b98:	f001 f8b6 	bl	8004d08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SEL_B_Pin);
 8003b9c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003ba0:	f001 f8b2 	bl	8004d08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  if((HAL_GetTick() - btn_time) > BUTTON_GAP){
 8003ba4:	f000 f9a6 	bl	8003ef4 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	4b22      	ldr	r3, [pc, #136]	; (8003c34 <EXTI15_10_IRQHandler+0xb4>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003bb4:	d937      	bls.n	8003c26 <EXTI15_10_IRQHandler+0xa6>
	  cancel_btn = HAL_GPIO_ReadPin(USER_Btn_GPIO_Port,USER_Btn_Pin);
 8003bb6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003bba:	481f      	ldr	r0, [pc, #124]	; (8003c38 <EXTI15_10_IRQHandler+0xb8>)
 8003bbc:	f001 f872 	bl	8004ca4 <HAL_GPIO_ReadPin>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	4b1d      	ldr	r3, [pc, #116]	; (8003c3c <EXTI15_10_IRQHandler+0xbc>)
 8003bc6:	701a      	strb	r2, [r3, #0]
	  // Mode�??????? 메뉴 모드?��?���??????? ?��?��?��?���??????? ?��?�� ?��?�� �????????���??????? �???????(0?��?��?�� ?��?��)
	  if(getMode() >= 0){
 8003bc8:	f7fe ff28 	bl	8002a1c <getMode>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	db29      	blt.n	8003c26 <EXTI15_10_IRQHandler+0xa6>
		  up_btn = !HAL_GPIO_ReadPin(UP_B_GPIO_Port,UP_B_Pin);
 8003bd2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003bd6:	481a      	ldr	r0, [pc, #104]	; (8003c40 <EXTI15_10_IRQHandler+0xc0>)
 8003bd8:	f001 f864 	bl	8004ca4 <HAL_GPIO_ReadPin>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	bf0c      	ite	eq
 8003be2:	2301      	moveq	r3, #1
 8003be4:	2300      	movne	r3, #0
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	461a      	mov	r2, r3
 8003bea:	4b16      	ldr	r3, [pc, #88]	; (8003c44 <EXTI15_10_IRQHandler+0xc4>)
 8003bec:	701a      	strb	r2, [r3, #0]
		  down_btn = !HAL_GPIO_ReadPin(DOWN_B_GPIO_Port,DOWN_B_Pin);
 8003bee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003bf2:	4813      	ldr	r0, [pc, #76]	; (8003c40 <EXTI15_10_IRQHandler+0xc0>)
 8003bf4:	f001 f856 	bl	8004ca4 <HAL_GPIO_ReadPin>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	bf0c      	ite	eq
 8003bfe:	2301      	moveq	r3, #1
 8003c00:	2300      	movne	r3, #0
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	461a      	mov	r2, r3
 8003c06:	4b10      	ldr	r3, [pc, #64]	; (8003c48 <EXTI15_10_IRQHandler+0xc8>)
 8003c08:	701a      	strb	r2, [r3, #0]
		  select_btn = !HAL_GPIO_ReadPin(SEL_B_GPIO_Port,SEL_B_Pin);
 8003c0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c0e:	480c      	ldr	r0, [pc, #48]	; (8003c40 <EXTI15_10_IRQHandler+0xc0>)
 8003c10:	f001 f848 	bl	8004ca4 <HAL_GPIO_ReadPin>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	bf0c      	ite	eq
 8003c1a:	2301      	moveq	r3, #1
 8003c1c:	2300      	movne	r3, #0
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	461a      	mov	r2, r3
 8003c22:	4b0a      	ldr	r3, [pc, #40]	; (8003c4c <EXTI15_10_IRQHandler+0xcc>)
 8003c24:	701a      	strb	r2, [r3, #0]
	  }
  }
  btn_time = HAL_GetTick();
 8003c26:	f000 f965 	bl	8003ef4 <HAL_GetTick>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	4a01      	ldr	r2, [pc, #4]	; (8003c34 <EXTI15_10_IRQHandler+0xb4>)
 8003c2e:	6013      	str	r3, [r2, #0]
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003c30:	bf00      	nop
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	20000e24 	.word	0x20000e24
 8003c38:	40020800 	.word	0x40020800
 8003c3c:	20000758 	.word	0x20000758
 8003c40:	40021000 	.word	0x40021000
 8003c44:	20000759 	.word	0x20000759
 8003c48:	2000075a 	.word	0x2000075a
 8003c4c:	2000075b 	.word	0x2000075b

08003c50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003c50:	b480      	push	{r7}
 8003c52:	af00      	add	r7, sp, #0
	return 1;
 8003c54:	2301      	movs	r3, #1
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <_kill>:

int _kill(int pid, int sig)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003c6a:	f005 fafd 	bl	8009268 <__errno>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2216      	movs	r2, #22
 8003c72:	601a      	str	r2, [r3, #0]
	return -1;
 8003c74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3708      	adds	r7, #8
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <_exit>:

void _exit (int status)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003c88:	f04f 31ff 	mov.w	r1, #4294967295
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f7ff ffe7 	bl	8003c60 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003c92:	e7fe      	b.n	8003c92 <_exit+0x12>

08003c94 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b086      	sub	sp, #24
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	617b      	str	r3, [r7, #20]
 8003ca4:	e00a      	b.n	8003cbc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003ca6:	f3af 8000 	nop.w
 8003caa:	4601      	mov	r1, r0
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	1c5a      	adds	r2, r3, #1
 8003cb0:	60ba      	str	r2, [r7, #8]
 8003cb2:	b2ca      	uxtb	r2, r1
 8003cb4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	3301      	adds	r3, #1
 8003cba:	617b      	str	r3, [r7, #20]
 8003cbc:	697a      	ldr	r2, [r7, #20]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	dbf0      	blt.n	8003ca6 <_read+0x12>
	}

return len;
 8003cc4:	687b      	ldr	r3, [r7, #4]
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3718      	adds	r7, #24
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}

08003cce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003cce:	b580      	push	{r7, lr}
 8003cd0:	b086      	sub	sp, #24
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	60f8      	str	r0, [r7, #12]
 8003cd6:	60b9      	str	r1, [r7, #8]
 8003cd8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cda:	2300      	movs	r3, #0
 8003cdc:	617b      	str	r3, [r7, #20]
 8003cde:	e009      	b.n	8003cf4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	1c5a      	adds	r2, r3, #1
 8003ce4:	60ba      	str	r2, [r7, #8]
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	617b      	str	r3, [r7, #20]
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	dbf1      	blt.n	8003ce0 <_write+0x12>
	}
	return len;
 8003cfc:	687b      	ldr	r3, [r7, #4]
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3718      	adds	r7, #24
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <_close>:

int _close(int file)
{
 8003d06:	b480      	push	{r7}
 8003d08:	b083      	sub	sp, #12
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
	return -1;
 8003d0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	370c      	adds	r7, #12
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr

08003d1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003d1e:	b480      	push	{r7}
 8003d20:	b083      	sub	sp, #12
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
 8003d26:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d2e:	605a      	str	r2, [r3, #4]
	return 0;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	370c      	adds	r7, #12
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr

08003d3e <_isatty>:

int _isatty(int file)
{
 8003d3e:	b480      	push	{r7}
 8003d40:	b083      	sub	sp, #12
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
	return 1;
 8003d46:	2301      	movs	r3, #1
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	370c      	adds	r7, #12
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b085      	sub	sp, #20
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	607a      	str	r2, [r7, #4]
	return 0;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3714      	adds	r7, #20
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
	...

08003d70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b086      	sub	sp, #24
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d78:	4a14      	ldr	r2, [pc, #80]	; (8003dcc <_sbrk+0x5c>)
 8003d7a:	4b15      	ldr	r3, [pc, #84]	; (8003dd0 <_sbrk+0x60>)
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d84:	4b13      	ldr	r3, [pc, #76]	; (8003dd4 <_sbrk+0x64>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d102      	bne.n	8003d92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d8c:	4b11      	ldr	r3, [pc, #68]	; (8003dd4 <_sbrk+0x64>)
 8003d8e:	4a12      	ldr	r2, [pc, #72]	; (8003dd8 <_sbrk+0x68>)
 8003d90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d92:	4b10      	ldr	r3, [pc, #64]	; (8003dd4 <_sbrk+0x64>)
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4413      	add	r3, r2
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d207      	bcs.n	8003db0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003da0:	f005 fa62 	bl	8009268 <__errno>
 8003da4:	4603      	mov	r3, r0
 8003da6:	220c      	movs	r2, #12
 8003da8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003daa:	f04f 33ff 	mov.w	r3, #4294967295
 8003dae:	e009      	b.n	8003dc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003db0:	4b08      	ldr	r3, [pc, #32]	; (8003dd4 <_sbrk+0x64>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003db6:	4b07      	ldr	r3, [pc, #28]	; (8003dd4 <_sbrk+0x64>)
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	4a05      	ldr	r2, [pc, #20]	; (8003dd4 <_sbrk+0x64>)
 8003dc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3718      	adds	r7, #24
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	20040000 	.word	0x20040000
 8003dd0:	00000400 	.word	0x00000400
 8003dd4:	20000e2c 	.word	0x20000e2c
 8003dd8:	20000e70 	.word	0x20000e70

08003ddc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003de0:	4b06      	ldr	r3, [pc, #24]	; (8003dfc <SystemInit+0x20>)
 8003de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de6:	4a05      	ldr	r2, [pc, #20]	; (8003dfc <SystemInit+0x20>)
 8003de8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003dec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003df0:	bf00      	nop
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	e000ed00 	.word	0xe000ed00

08003e00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003e00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003e38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003e04:	480d      	ldr	r0, [pc, #52]	; (8003e3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003e06:	490e      	ldr	r1, [pc, #56]	; (8003e40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003e08:	4a0e      	ldr	r2, [pc, #56]	; (8003e44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003e0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e0c:	e002      	b.n	8003e14 <LoopCopyDataInit>

08003e0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e12:	3304      	adds	r3, #4

08003e14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e18:	d3f9      	bcc.n	8003e0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e1a:	4a0b      	ldr	r2, [pc, #44]	; (8003e48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003e1c:	4c0b      	ldr	r4, [pc, #44]	; (8003e4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8003e1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e20:	e001      	b.n	8003e26 <LoopFillZerobss>

08003e22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e24:	3204      	adds	r2, #4

08003e26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e28:	d3fb      	bcc.n	8003e22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003e2a:	f7ff ffd7 	bl	8003ddc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003e2e:	f005 fa21 	bl	8009274 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003e32:	f7fe ffc7 	bl	8002dc4 <main>
  bx  lr    
 8003e36:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003e38:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8003e3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003e40:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8003e44:	0800d8f8 	.word	0x0800d8f8
  ldr r2, =_sbss
 8003e48:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8003e4c:	20000e6c 	.word	0x20000e6c

08003e50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e50:	e7fe      	b.n	8003e50 <ADC_IRQHandler>

08003e52 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e52:	b580      	push	{r7, lr}
 8003e54:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e56:	2003      	movs	r0, #3
 8003e58:	f000 fd46 	bl	80048e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003e5c:	2000      	movs	r0, #0
 8003e5e:	f000 f805 	bl	8003e6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003e62:	f7ff fb6f 	bl	8003544 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003e74:	4b12      	ldr	r3, [pc, #72]	; (8003ec0 <HAL_InitTick+0x54>)
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	4b12      	ldr	r3, [pc, #72]	; (8003ec4 <HAL_InitTick+0x58>)
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e82:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f000 fd61 	bl	8004952 <HAL_SYSTICK_Config>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d001      	beq.n	8003e9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e00e      	b.n	8003eb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2b0f      	cmp	r3, #15
 8003e9e:	d80a      	bhi.n	8003eb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	6879      	ldr	r1, [r7, #4]
 8003ea4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ea8:	f000 fd29 	bl	80048fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003eac:	4a06      	ldr	r2, [pc, #24]	; (8003ec8 <HAL_InitTick+0x5c>)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	e000      	b.n	8003eb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3708      	adds	r7, #8
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	200000bc 	.word	0x200000bc
 8003ec4:	200000c4 	.word	0x200000c4
 8003ec8:	200000c0 	.word	0x200000c0

08003ecc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ed0:	4b06      	ldr	r3, [pc, #24]	; (8003eec <HAL_IncTick+0x20>)
 8003ed2:	781b      	ldrb	r3, [r3, #0]
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	4b06      	ldr	r3, [pc, #24]	; (8003ef0 <HAL_IncTick+0x24>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4413      	add	r3, r2
 8003edc:	4a04      	ldr	r2, [pc, #16]	; (8003ef0 <HAL_IncTick+0x24>)
 8003ede:	6013      	str	r3, [r2, #0]
}
 8003ee0:	bf00      	nop
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	200000c4 	.word	0x200000c4
 8003ef0:	20000e30 	.word	0x20000e30

08003ef4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	af00      	add	r7, sp, #0
  return uwTick;
 8003ef8:	4b03      	ldr	r3, [pc, #12]	; (8003f08 <HAL_GetTick+0x14>)
 8003efa:	681b      	ldr	r3, [r3, #0]
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	20000e30 	.word	0x20000e30

08003f0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f14:	f7ff ffee 	bl	8003ef4 <HAL_GetTick>
 8003f18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f24:	d005      	beq.n	8003f32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f26:	4b0a      	ldr	r3, [pc, #40]	; (8003f50 <HAL_Delay+0x44>)
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	4413      	add	r3, r2
 8003f30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003f32:	bf00      	nop
 8003f34:	f7ff ffde 	bl	8003ef4 <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d8f7      	bhi.n	8003f34 <HAL_Delay+0x28>
  {
  }
}
 8003f44:	bf00      	nop
 8003f46:	bf00      	nop
 8003f48:	3710      	adds	r7, #16
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	200000c4 	.word	0x200000c4

08003f54 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d101      	bne.n	8003f6a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e031      	b.n	8003fce <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d109      	bne.n	8003f86 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f7ff fb0a 	bl	800358c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8a:	f003 0310 	and.w	r3, r3, #16
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d116      	bne.n	8003fc0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f96:	4b10      	ldr	r3, [pc, #64]	; (8003fd8 <HAL_ADC_Init+0x84>)
 8003f98:	4013      	ands	r3, r2
 8003f9a:	f043 0202 	orr.w	r2, r3, #2
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 fad6 	bl	8004554 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb2:	f023 0303 	bic.w	r3, r3, #3
 8003fb6:	f043 0201 	orr.w	r2, r3, #1
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	641a      	str	r2, [r3, #64]	; 0x40
 8003fbe:	e001      	b.n	8003fc4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3710      	adds	r7, #16
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	ffffeefd 	.word	0xffffeefd

08003fdc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d101      	bne.n	8003ff6 <HAL_ADC_Start+0x1a>
 8003ff2:	2302      	movs	r3, #2
 8003ff4:	e0ad      	b.n	8004152 <HAL_ADC_Start+0x176>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	f003 0301 	and.w	r3, r3, #1
 8004008:	2b01      	cmp	r3, #1
 800400a:	d018      	beq.n	800403e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	689a      	ldr	r2, [r3, #8]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f042 0201 	orr.w	r2, r2, #1
 800401a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800401c:	4b50      	ldr	r3, [pc, #320]	; (8004160 <HAL_ADC_Start+0x184>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a50      	ldr	r2, [pc, #320]	; (8004164 <HAL_ADC_Start+0x188>)
 8004022:	fba2 2303 	umull	r2, r3, r2, r3
 8004026:	0c9a      	lsrs	r2, r3, #18
 8004028:	4613      	mov	r3, r2
 800402a:	005b      	lsls	r3, r3, #1
 800402c:	4413      	add	r3, r2
 800402e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004030:	e002      	b.n	8004038 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	3b01      	subs	r3, #1
 8004036:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1f9      	bne.n	8004032 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	f003 0301 	and.w	r3, r3, #1
 8004048:	2b01      	cmp	r3, #1
 800404a:	d175      	bne.n	8004138 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004050:	4b45      	ldr	r3, [pc, #276]	; (8004168 <HAL_ADC_Start+0x18c>)
 8004052:	4013      	ands	r3, r2
 8004054:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004066:	2b00      	cmp	r3, #0
 8004068:	d007      	beq.n	800407a <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004072:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004086:	d106      	bne.n	8004096 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800408c:	f023 0206 	bic.w	r2, r3, #6
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	645a      	str	r2, [r3, #68]	; 0x44
 8004094:	e002      	b.n	800409c <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80040ac:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80040ae:	4b2f      	ldr	r3, [pc, #188]	; (800416c <HAL_ADC_Start+0x190>)
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f003 031f 	and.w	r3, r3, #31
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10f      	bne.n	80040da <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d143      	bne.n	8004150 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	689a      	ldr	r2, [r3, #8]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80040d6:	609a      	str	r2, [r3, #8]
 80040d8:	e03a      	b.n	8004150 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a24      	ldr	r2, [pc, #144]	; (8004170 <HAL_ADC_Start+0x194>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d10e      	bne.n	8004102 <HAL_ADC_Start+0x126>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d107      	bne.n	8004102 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	689a      	ldr	r2, [r3, #8]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004100:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8004102:	4b1a      	ldr	r3, [pc, #104]	; (800416c <HAL_ADC_Start+0x190>)
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f003 0310 	and.w	r3, r3, #16
 800410a:	2b00      	cmp	r3, #0
 800410c:	d120      	bne.n	8004150 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a18      	ldr	r2, [pc, #96]	; (8004174 <HAL_ADC_Start+0x198>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d11b      	bne.n	8004150 <HAL_ADC_Start+0x174>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d114      	bne.n	8004150 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	689a      	ldr	r2, [r3, #8]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004134:	609a      	str	r2, [r3, #8]
 8004136:	e00b      	b.n	8004150 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413c:	f043 0210 	orr.w	r2, r3, #16
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004148:	f043 0201 	orr.w	r2, r3, #1
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3714      	adds	r7, #20
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	200000bc 	.word	0x200000bc
 8004164:	431bde83 	.word	0x431bde83
 8004168:	fffff8fe 	.word	0xfffff8fe
 800416c:	40012300 	.word	0x40012300
 8004170:	40012000 	.word	0x40012000
 8004174:	40012200 	.word	0x40012200

08004178 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004182:	2300      	movs	r3, #0
 8004184:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004190:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004194:	d113      	bne.n	80041be <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80041a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041a4:	d10b      	bne.n	80041be <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041aa:	f043 0220 	orr.w	r2, r3, #32
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e063      	b.n	8004286 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80041be:	f7ff fe99 	bl	8003ef4 <HAL_GetTick>
 80041c2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80041c4:	e021      	b.n	800420a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041cc:	d01d      	beq.n	800420a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d007      	beq.n	80041e4 <HAL_ADC_PollForConversion+0x6c>
 80041d4:	f7ff fe8e 	bl	8003ef4 <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	683a      	ldr	r2, [r7, #0]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d212      	bcs.n	800420a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d00b      	beq.n	800420a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f6:	f043 0204 	orr.w	r2, r3, #4
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e03d      	b.n	8004286 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0302 	and.w	r3, r3, #2
 8004214:	2b02      	cmp	r3, #2
 8004216:	d1d6      	bne.n	80041c6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f06f 0212 	mvn.w	r2, #18
 8004220:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004226:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d123      	bne.n	8004284 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004240:	2b00      	cmp	r3, #0
 8004242:	d11f      	bne.n	8004284 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800424a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800424e:	2b00      	cmp	r3, #0
 8004250:	d006      	beq.n	8004260 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800425c:	2b00      	cmp	r3, #0
 800425e:	d111      	bne.n	8004284 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004264:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004270:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d105      	bne.n	8004284 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427c:	f043 0201 	orr.w	r2, r3, #1
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3710      	adds	r7, #16
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800428e:	b480      	push	{r7}
 8004290:	b083      	sub	sp, #12
 8004292:	af00      	add	r7, sp, #0
 8004294:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800429c:	4618      	mov	r0, r3
 800429e:	370c      	adds	r7, #12
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b085      	sub	sp, #20
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80042b2:	2300      	movs	r3, #0
 80042b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d101      	bne.n	80042c4 <HAL_ADC_ConfigChannel+0x1c>
 80042c0:	2302      	movs	r3, #2
 80042c2:	e136      	b.n	8004532 <HAL_ADC_ConfigChannel+0x28a>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2b09      	cmp	r3, #9
 80042d2:	d93a      	bls.n	800434a <HAL_ADC_ConfigChannel+0xa2>
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042dc:	d035      	beq.n	800434a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	68d9      	ldr	r1, [r3, #12]
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	461a      	mov	r2, r3
 80042ec:	4613      	mov	r3, r2
 80042ee:	005b      	lsls	r3, r3, #1
 80042f0:	4413      	add	r3, r2
 80042f2:	3b1e      	subs	r3, #30
 80042f4:	2207      	movs	r2, #7
 80042f6:	fa02 f303 	lsl.w	r3, r2, r3
 80042fa:	43da      	mvns	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	400a      	ands	r2, r1
 8004302:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a8d      	ldr	r2, [pc, #564]	; (8004540 <HAL_ADC_ConfigChannel+0x298>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d10a      	bne.n	8004324 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68d9      	ldr	r1, [r3, #12]
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	061a      	lsls	r2, r3, #24
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	430a      	orrs	r2, r1
 8004320:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004322:	e035      	b.n	8004390 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68d9      	ldr	r1, [r3, #12]
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	689a      	ldr	r2, [r3, #8]
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	b29b      	uxth	r3, r3
 8004334:	4618      	mov	r0, r3
 8004336:	4603      	mov	r3, r0
 8004338:	005b      	lsls	r3, r3, #1
 800433a:	4403      	add	r3, r0
 800433c:	3b1e      	subs	r3, #30
 800433e:	409a      	lsls	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	430a      	orrs	r2, r1
 8004346:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004348:	e022      	b.n	8004390 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	6919      	ldr	r1, [r3, #16]
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	b29b      	uxth	r3, r3
 8004356:	461a      	mov	r2, r3
 8004358:	4613      	mov	r3, r2
 800435a:	005b      	lsls	r3, r3, #1
 800435c:	4413      	add	r3, r2
 800435e:	2207      	movs	r2, #7
 8004360:	fa02 f303 	lsl.w	r3, r2, r3
 8004364:	43da      	mvns	r2, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	400a      	ands	r2, r1
 800436c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	6919      	ldr	r1, [r3, #16]
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	689a      	ldr	r2, [r3, #8]
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	b29b      	uxth	r3, r3
 800437e:	4618      	mov	r0, r3
 8004380:	4603      	mov	r3, r0
 8004382:	005b      	lsls	r3, r3, #1
 8004384:	4403      	add	r3, r0
 8004386:	409a      	lsls	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	430a      	orrs	r2, r1
 800438e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	2b06      	cmp	r3, #6
 8004396:	d824      	bhi.n	80043e2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	685a      	ldr	r2, [r3, #4]
 80043a2:	4613      	mov	r3, r2
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	4413      	add	r3, r2
 80043a8:	3b05      	subs	r3, #5
 80043aa:	221f      	movs	r2, #31
 80043ac:	fa02 f303 	lsl.w	r3, r2, r3
 80043b0:	43da      	mvns	r2, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	400a      	ands	r2, r1
 80043b8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	4618      	mov	r0, r3
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	685a      	ldr	r2, [r3, #4]
 80043cc:	4613      	mov	r3, r2
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	4413      	add	r3, r2
 80043d2:	3b05      	subs	r3, #5
 80043d4:	fa00 f203 	lsl.w	r2, r0, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	430a      	orrs	r2, r1
 80043de:	635a      	str	r2, [r3, #52]	; 0x34
 80043e0:	e04c      	b.n	800447c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	2b0c      	cmp	r3, #12
 80043e8:	d824      	bhi.n	8004434 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	685a      	ldr	r2, [r3, #4]
 80043f4:	4613      	mov	r3, r2
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	4413      	add	r3, r2
 80043fa:	3b23      	subs	r3, #35	; 0x23
 80043fc:	221f      	movs	r2, #31
 80043fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004402:	43da      	mvns	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	400a      	ands	r2, r1
 800440a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	b29b      	uxth	r3, r3
 8004418:	4618      	mov	r0, r3
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	685a      	ldr	r2, [r3, #4]
 800441e:	4613      	mov	r3, r2
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	4413      	add	r3, r2
 8004424:	3b23      	subs	r3, #35	; 0x23
 8004426:	fa00 f203 	lsl.w	r2, r0, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	430a      	orrs	r2, r1
 8004430:	631a      	str	r2, [r3, #48]	; 0x30
 8004432:	e023      	b.n	800447c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	685a      	ldr	r2, [r3, #4]
 800443e:	4613      	mov	r3, r2
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	4413      	add	r3, r2
 8004444:	3b41      	subs	r3, #65	; 0x41
 8004446:	221f      	movs	r2, #31
 8004448:	fa02 f303 	lsl.w	r3, r2, r3
 800444c:	43da      	mvns	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	400a      	ands	r2, r1
 8004454:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	b29b      	uxth	r3, r3
 8004462:	4618      	mov	r0, r3
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	685a      	ldr	r2, [r3, #4]
 8004468:	4613      	mov	r3, r2
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	4413      	add	r3, r2
 800446e:	3b41      	subs	r3, #65	; 0x41
 8004470:	fa00 f203 	lsl.w	r2, r0, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	430a      	orrs	r2, r1
 800447a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a30      	ldr	r2, [pc, #192]	; (8004544 <HAL_ADC_ConfigChannel+0x29c>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d10a      	bne.n	800449c <HAL_ADC_ConfigChannel+0x1f4>
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800448e:	d105      	bne.n	800449c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8004490:	4b2d      	ldr	r3, [pc, #180]	; (8004548 <HAL_ADC_ConfigChannel+0x2a0>)
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	4a2c      	ldr	r2, [pc, #176]	; (8004548 <HAL_ADC_ConfigChannel+0x2a0>)
 8004496:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800449a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a28      	ldr	r2, [pc, #160]	; (8004544 <HAL_ADC_ConfigChannel+0x29c>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d10f      	bne.n	80044c6 <HAL_ADC_ConfigChannel+0x21e>
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2b12      	cmp	r3, #18
 80044ac:	d10b      	bne.n	80044c6 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80044ae:	4b26      	ldr	r3, [pc, #152]	; (8004548 <HAL_ADC_ConfigChannel+0x2a0>)
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	4a25      	ldr	r2, [pc, #148]	; (8004548 <HAL_ADC_ConfigChannel+0x2a0>)
 80044b4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80044b8:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80044ba:	4b23      	ldr	r3, [pc, #140]	; (8004548 <HAL_ADC_ConfigChannel+0x2a0>)
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	4a22      	ldr	r2, [pc, #136]	; (8004548 <HAL_ADC_ConfigChannel+0x2a0>)
 80044c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80044c4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a1e      	ldr	r2, [pc, #120]	; (8004544 <HAL_ADC_ConfigChannel+0x29c>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d12b      	bne.n	8004528 <HAL_ADC_ConfigChannel+0x280>
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a1a      	ldr	r2, [pc, #104]	; (8004540 <HAL_ADC_ConfigChannel+0x298>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d003      	beq.n	80044e2 <HAL_ADC_ConfigChannel+0x23a>
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2b11      	cmp	r3, #17
 80044e0:	d122      	bne.n	8004528 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80044e2:	4b19      	ldr	r3, [pc, #100]	; (8004548 <HAL_ADC_ConfigChannel+0x2a0>)
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	4a18      	ldr	r2, [pc, #96]	; (8004548 <HAL_ADC_ConfigChannel+0x2a0>)
 80044e8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80044ec:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80044ee:	4b16      	ldr	r3, [pc, #88]	; (8004548 <HAL_ADC_ConfigChannel+0x2a0>)
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	4a15      	ldr	r2, [pc, #84]	; (8004548 <HAL_ADC_ConfigChannel+0x2a0>)
 80044f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80044f8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a10      	ldr	r2, [pc, #64]	; (8004540 <HAL_ADC_ConfigChannel+0x298>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d111      	bne.n	8004528 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004504:	4b11      	ldr	r3, [pc, #68]	; (800454c <HAL_ADC_ConfigChannel+0x2a4>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a11      	ldr	r2, [pc, #68]	; (8004550 <HAL_ADC_ConfigChannel+0x2a8>)
 800450a:	fba2 2303 	umull	r2, r3, r2, r3
 800450e:	0c9a      	lsrs	r2, r3, #18
 8004510:	4613      	mov	r3, r2
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	4413      	add	r3, r2
 8004516:	005b      	lsls	r3, r3, #1
 8004518:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800451a:	e002      	b.n	8004522 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	3b01      	subs	r3, #1
 8004520:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d1f9      	bne.n	800451c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	3714      	adds	r7, #20
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	10000012 	.word	0x10000012
 8004544:	40012000 	.word	0x40012000
 8004548:	40012300 	.word	0x40012300
 800454c:	200000bc 	.word	0x200000bc
 8004550:	431bde83 	.word	0x431bde83

08004554 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800455c:	4b78      	ldr	r3, [pc, #480]	; (8004740 <ADC_Init+0x1ec>)
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	4a77      	ldr	r2, [pc, #476]	; (8004740 <ADC_Init+0x1ec>)
 8004562:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004566:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8004568:	4b75      	ldr	r3, [pc, #468]	; (8004740 <ADC_Init+0x1ec>)
 800456a:	685a      	ldr	r2, [r3, #4]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	4973      	ldr	r1, [pc, #460]	; (8004740 <ADC_Init+0x1ec>)
 8004572:	4313      	orrs	r3, r2
 8004574:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	685a      	ldr	r2, [r3, #4]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004584:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	6859      	ldr	r1, [r3, #4]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	021a      	lsls	r2, r3, #8
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	430a      	orrs	r2, r1
 8004598:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	685a      	ldr	r2, [r3, #4]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80045a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	6859      	ldr	r1, [r3, #4]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	689a      	ldr	r2, [r3, #8]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	430a      	orrs	r2, r1
 80045ba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	689a      	ldr	r2, [r3, #8]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	6899      	ldr	r1, [r3, #8]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	68da      	ldr	r2, [r3, #12]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	430a      	orrs	r2, r1
 80045dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e2:	4a58      	ldr	r2, [pc, #352]	; (8004744 <ADC_Init+0x1f0>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d022      	beq.n	800462e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	689a      	ldr	r2, [r3, #8]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80045f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	6899      	ldr	r1, [r3, #8]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	430a      	orrs	r2, r1
 8004608:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	689a      	ldr	r2, [r3, #8]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004618:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	6899      	ldr	r1, [r3, #8]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	430a      	orrs	r2, r1
 800462a:	609a      	str	r2, [r3, #8]
 800462c:	e00f      	b.n	800464e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	689a      	ldr	r2, [r3, #8]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800463c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	689a      	ldr	r2, [r3, #8]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800464c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	689a      	ldr	r2, [r3, #8]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f022 0202 	bic.w	r2, r2, #2
 800465c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	6899      	ldr	r1, [r3, #8]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	699b      	ldr	r3, [r3, #24]
 8004668:	005a      	lsls	r2, r3, #1
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	430a      	orrs	r2, r1
 8004670:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d01b      	beq.n	80046b4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	685a      	ldr	r2, [r3, #4]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800468a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	685a      	ldr	r2, [r3, #4]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800469a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	6859      	ldr	r1, [r3, #4]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a6:	3b01      	subs	r3, #1
 80046a8:	035a      	lsls	r2, r3, #13
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	430a      	orrs	r2, r1
 80046b0:	605a      	str	r2, [r3, #4]
 80046b2:	e007      	b.n	80046c4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	685a      	ldr	r2, [r3, #4]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046c2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80046d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	69db      	ldr	r3, [r3, #28]
 80046de:	3b01      	subs	r3, #1
 80046e0:	051a      	lsls	r2, r3, #20
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	430a      	orrs	r2, r1
 80046e8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	689a      	ldr	r2, [r3, #8]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80046f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	6899      	ldr	r1, [r3, #8]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004706:	025a      	lsls	r2, r3, #9
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	430a      	orrs	r2, r1
 800470e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	689a      	ldr	r2, [r3, #8]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800471e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	6899      	ldr	r1, [r3, #8]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	695b      	ldr	r3, [r3, #20]
 800472a:	029a      	lsls	r2, r3, #10
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	430a      	orrs	r2, r1
 8004732:	609a      	str	r2, [r3, #8]
}
 8004734:	bf00      	nop
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr
 8004740:	40012300 	.word	0x40012300
 8004744:	0f000001 	.word	0x0f000001

08004748 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004748:	b480      	push	{r7}
 800474a:	b085      	sub	sp, #20
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f003 0307 	and.w	r3, r3, #7
 8004756:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004758:	4b0b      	ldr	r3, [pc, #44]	; (8004788 <__NVIC_SetPriorityGrouping+0x40>)
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800475e:	68ba      	ldr	r2, [r7, #8]
 8004760:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004764:	4013      	ands	r3, r2
 8004766:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004770:	4b06      	ldr	r3, [pc, #24]	; (800478c <__NVIC_SetPriorityGrouping+0x44>)
 8004772:	4313      	orrs	r3, r2
 8004774:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004776:	4a04      	ldr	r2, [pc, #16]	; (8004788 <__NVIC_SetPriorityGrouping+0x40>)
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	60d3      	str	r3, [r2, #12]
}
 800477c:	bf00      	nop
 800477e:	3714      	adds	r7, #20
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr
 8004788:	e000ed00 	.word	0xe000ed00
 800478c:	05fa0000 	.word	0x05fa0000

08004790 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004790:	b480      	push	{r7}
 8004792:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004794:	4b04      	ldr	r3, [pc, #16]	; (80047a8 <__NVIC_GetPriorityGrouping+0x18>)
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	0a1b      	lsrs	r3, r3, #8
 800479a:	f003 0307 	and.w	r3, r3, #7
}
 800479e:	4618      	mov	r0, r3
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr
 80047a8:	e000ed00 	.word	0xe000ed00

080047ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	4603      	mov	r3, r0
 80047b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	db0b      	blt.n	80047d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047be:	79fb      	ldrb	r3, [r7, #7]
 80047c0:	f003 021f 	and.w	r2, r3, #31
 80047c4:	4907      	ldr	r1, [pc, #28]	; (80047e4 <__NVIC_EnableIRQ+0x38>)
 80047c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ca:	095b      	lsrs	r3, r3, #5
 80047cc:	2001      	movs	r0, #1
 80047ce:	fa00 f202 	lsl.w	r2, r0, r2
 80047d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80047d6:	bf00      	nop
 80047d8:	370c      	adds	r7, #12
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	e000e100 	.word	0xe000e100

080047e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	4603      	mov	r3, r0
 80047f0:	6039      	str	r1, [r7, #0]
 80047f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	db0a      	blt.n	8004812 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	b2da      	uxtb	r2, r3
 8004800:	490c      	ldr	r1, [pc, #48]	; (8004834 <__NVIC_SetPriority+0x4c>)
 8004802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004806:	0112      	lsls	r2, r2, #4
 8004808:	b2d2      	uxtb	r2, r2
 800480a:	440b      	add	r3, r1
 800480c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004810:	e00a      	b.n	8004828 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	b2da      	uxtb	r2, r3
 8004816:	4908      	ldr	r1, [pc, #32]	; (8004838 <__NVIC_SetPriority+0x50>)
 8004818:	79fb      	ldrb	r3, [r7, #7]
 800481a:	f003 030f 	and.w	r3, r3, #15
 800481e:	3b04      	subs	r3, #4
 8004820:	0112      	lsls	r2, r2, #4
 8004822:	b2d2      	uxtb	r2, r2
 8004824:	440b      	add	r3, r1
 8004826:	761a      	strb	r2, [r3, #24]
}
 8004828:	bf00      	nop
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr
 8004834:	e000e100 	.word	0xe000e100
 8004838:	e000ed00 	.word	0xe000ed00

0800483c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800483c:	b480      	push	{r7}
 800483e:	b089      	sub	sp, #36	; 0x24
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f003 0307 	and.w	r3, r3, #7
 800484e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	f1c3 0307 	rsb	r3, r3, #7
 8004856:	2b04      	cmp	r3, #4
 8004858:	bf28      	it	cs
 800485a:	2304      	movcs	r3, #4
 800485c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	3304      	adds	r3, #4
 8004862:	2b06      	cmp	r3, #6
 8004864:	d902      	bls.n	800486c <NVIC_EncodePriority+0x30>
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	3b03      	subs	r3, #3
 800486a:	e000      	b.n	800486e <NVIC_EncodePriority+0x32>
 800486c:	2300      	movs	r3, #0
 800486e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004870:	f04f 32ff 	mov.w	r2, #4294967295
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	fa02 f303 	lsl.w	r3, r2, r3
 800487a:	43da      	mvns	r2, r3
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	401a      	ands	r2, r3
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004884:	f04f 31ff 	mov.w	r1, #4294967295
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	fa01 f303 	lsl.w	r3, r1, r3
 800488e:	43d9      	mvns	r1, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004894:	4313      	orrs	r3, r2
         );
}
 8004896:	4618      	mov	r0, r3
 8004898:	3724      	adds	r7, #36	; 0x24
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
	...

080048a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	3b01      	subs	r3, #1
 80048b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048b4:	d301      	bcc.n	80048ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80048b6:	2301      	movs	r3, #1
 80048b8:	e00f      	b.n	80048da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80048ba:	4a0a      	ldr	r2, [pc, #40]	; (80048e4 <SysTick_Config+0x40>)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	3b01      	subs	r3, #1
 80048c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80048c2:	210f      	movs	r1, #15
 80048c4:	f04f 30ff 	mov.w	r0, #4294967295
 80048c8:	f7ff ff8e 	bl	80047e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80048cc:	4b05      	ldr	r3, [pc, #20]	; (80048e4 <SysTick_Config+0x40>)
 80048ce:	2200      	movs	r2, #0
 80048d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80048d2:	4b04      	ldr	r3, [pc, #16]	; (80048e4 <SysTick_Config+0x40>)
 80048d4:	2207      	movs	r2, #7
 80048d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3708      	adds	r7, #8
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	e000e010 	.word	0xe000e010

080048e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f7ff ff29 	bl	8004748 <__NVIC_SetPriorityGrouping>
}
 80048f6:	bf00      	nop
 80048f8:	3708      	adds	r7, #8
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}

080048fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80048fe:	b580      	push	{r7, lr}
 8004900:	b086      	sub	sp, #24
 8004902:	af00      	add	r7, sp, #0
 8004904:	4603      	mov	r3, r0
 8004906:	60b9      	str	r1, [r7, #8]
 8004908:	607a      	str	r2, [r7, #4]
 800490a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800490c:	2300      	movs	r3, #0
 800490e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004910:	f7ff ff3e 	bl	8004790 <__NVIC_GetPriorityGrouping>
 8004914:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	68b9      	ldr	r1, [r7, #8]
 800491a:	6978      	ldr	r0, [r7, #20]
 800491c:	f7ff ff8e 	bl	800483c <NVIC_EncodePriority>
 8004920:	4602      	mov	r2, r0
 8004922:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004926:	4611      	mov	r1, r2
 8004928:	4618      	mov	r0, r3
 800492a:	f7ff ff5d 	bl	80047e8 <__NVIC_SetPriority>
}
 800492e:	bf00      	nop
 8004930:	3718      	adds	r7, #24
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}

08004936 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004936:	b580      	push	{r7, lr}
 8004938:	b082      	sub	sp, #8
 800493a:	af00      	add	r7, sp, #0
 800493c:	4603      	mov	r3, r0
 800493e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004944:	4618      	mov	r0, r3
 8004946:	f7ff ff31 	bl	80047ac <__NVIC_EnableIRQ>
}
 800494a:	bf00      	nop
 800494c:	3708      	adds	r7, #8
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}

08004952 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004952:	b580      	push	{r7, lr}
 8004954:	b082      	sub	sp, #8
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f7ff ffa2 	bl	80048a4 <SysTick_Config>
 8004960:	4603      	mov	r3, r0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3708      	adds	r7, #8
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
	...

0800496c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800496c:	b480      	push	{r7}
 800496e:	b089      	sub	sp, #36	; 0x24
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004976:	2300      	movs	r3, #0
 8004978:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800497a:	2300      	movs	r3, #0
 800497c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800497e:	2300      	movs	r3, #0
 8004980:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004982:	2300      	movs	r3, #0
 8004984:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004986:	2300      	movs	r3, #0
 8004988:	61fb      	str	r3, [r7, #28]
 800498a:	e169      	b.n	8004c60 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800498c:	2201      	movs	r2, #1
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	fa02 f303 	lsl.w	r3, r2, r3
 8004994:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	697a      	ldr	r2, [r7, #20]
 800499c:	4013      	ands	r3, r2
 800499e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80049a0:	693a      	ldr	r2, [r7, #16]
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	f040 8158 	bne.w	8004c5a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	f003 0303 	and.w	r3, r3, #3
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d005      	beq.n	80049c2 <HAL_GPIO_Init+0x56>
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	f003 0303 	and.w	r3, r3, #3
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d130      	bne.n	8004a24 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	005b      	lsls	r3, r3, #1
 80049cc:	2203      	movs	r2, #3
 80049ce:	fa02 f303 	lsl.w	r3, r2, r3
 80049d2:	43db      	mvns	r3, r3
 80049d4:	69ba      	ldr	r2, [r7, #24]
 80049d6:	4013      	ands	r3, r2
 80049d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	68da      	ldr	r2, [r3, #12]
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	005b      	lsls	r3, r3, #1
 80049e2:	fa02 f303 	lsl.w	r3, r2, r3
 80049e6:	69ba      	ldr	r2, [r7, #24]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	69ba      	ldr	r2, [r7, #24]
 80049f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80049f8:	2201      	movs	r2, #1
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004a00:	43db      	mvns	r3, r3
 8004a02:	69ba      	ldr	r2, [r7, #24]
 8004a04:	4013      	ands	r3, r2
 8004a06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	091b      	lsrs	r3, r3, #4
 8004a0e:	f003 0201 	and.w	r2, r3, #1
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	fa02 f303 	lsl.w	r3, r2, r3
 8004a18:	69ba      	ldr	r2, [r7, #24]
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	69ba      	ldr	r2, [r7, #24]
 8004a22:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	f003 0303 	and.w	r3, r3, #3
 8004a2c:	2b03      	cmp	r3, #3
 8004a2e:	d017      	beq.n	8004a60 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	005b      	lsls	r3, r3, #1
 8004a3a:	2203      	movs	r2, #3
 8004a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a40:	43db      	mvns	r3, r3
 8004a42:	69ba      	ldr	r2, [r7, #24]
 8004a44:	4013      	ands	r3, r2
 8004a46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	689a      	ldr	r2, [r3, #8]
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	005b      	lsls	r3, r3, #1
 8004a50:	fa02 f303 	lsl.w	r3, r2, r3
 8004a54:	69ba      	ldr	r2, [r7, #24]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	69ba      	ldr	r2, [r7, #24]
 8004a5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f003 0303 	and.w	r3, r3, #3
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d123      	bne.n	8004ab4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	08da      	lsrs	r2, r3, #3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	3208      	adds	r2, #8
 8004a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	f003 0307 	and.w	r3, r3, #7
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	220f      	movs	r2, #15
 8004a84:	fa02 f303 	lsl.w	r3, r2, r3
 8004a88:	43db      	mvns	r3, r3
 8004a8a:	69ba      	ldr	r2, [r7, #24]
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	691a      	ldr	r2, [r3, #16]
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	f003 0307 	and.w	r3, r3, #7
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa0:	69ba      	ldr	r2, [r7, #24]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	08da      	lsrs	r2, r3, #3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	3208      	adds	r2, #8
 8004aae:	69b9      	ldr	r1, [r7, #24]
 8004ab0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	005b      	lsls	r3, r3, #1
 8004abe:	2203      	movs	r2, #3
 8004ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac4:	43db      	mvns	r3, r3
 8004ac6:	69ba      	ldr	r2, [r7, #24]
 8004ac8:	4013      	ands	r3, r2
 8004aca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	f003 0203 	and.w	r2, r3, #3
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	005b      	lsls	r3, r3, #1
 8004ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8004adc:	69ba      	ldr	r2, [r7, #24]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	69ba      	ldr	r2, [r7, #24]
 8004ae6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	f000 80b2 	beq.w	8004c5a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004af6:	4b60      	ldr	r3, [pc, #384]	; (8004c78 <HAL_GPIO_Init+0x30c>)
 8004af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004afa:	4a5f      	ldr	r2, [pc, #380]	; (8004c78 <HAL_GPIO_Init+0x30c>)
 8004afc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b00:	6453      	str	r3, [r2, #68]	; 0x44
 8004b02:	4b5d      	ldr	r3, [pc, #372]	; (8004c78 <HAL_GPIO_Init+0x30c>)
 8004b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b0a:	60fb      	str	r3, [r7, #12]
 8004b0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004b0e:	4a5b      	ldr	r2, [pc, #364]	; (8004c7c <HAL_GPIO_Init+0x310>)
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	089b      	lsrs	r3, r3, #2
 8004b14:	3302      	adds	r3, #2
 8004b16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	f003 0303 	and.w	r3, r3, #3
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	220f      	movs	r2, #15
 8004b26:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2a:	43db      	mvns	r3, r3
 8004b2c:	69ba      	ldr	r2, [r7, #24]
 8004b2e:	4013      	ands	r3, r2
 8004b30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a52      	ldr	r2, [pc, #328]	; (8004c80 <HAL_GPIO_Init+0x314>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d02b      	beq.n	8004b92 <HAL_GPIO_Init+0x226>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a51      	ldr	r2, [pc, #324]	; (8004c84 <HAL_GPIO_Init+0x318>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d025      	beq.n	8004b8e <HAL_GPIO_Init+0x222>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a50      	ldr	r2, [pc, #320]	; (8004c88 <HAL_GPIO_Init+0x31c>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d01f      	beq.n	8004b8a <HAL_GPIO_Init+0x21e>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a4f      	ldr	r2, [pc, #316]	; (8004c8c <HAL_GPIO_Init+0x320>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d019      	beq.n	8004b86 <HAL_GPIO_Init+0x21a>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a4e      	ldr	r2, [pc, #312]	; (8004c90 <HAL_GPIO_Init+0x324>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d013      	beq.n	8004b82 <HAL_GPIO_Init+0x216>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a4d      	ldr	r2, [pc, #308]	; (8004c94 <HAL_GPIO_Init+0x328>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d00d      	beq.n	8004b7e <HAL_GPIO_Init+0x212>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a4c      	ldr	r2, [pc, #304]	; (8004c98 <HAL_GPIO_Init+0x32c>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d007      	beq.n	8004b7a <HAL_GPIO_Init+0x20e>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a4b      	ldr	r2, [pc, #300]	; (8004c9c <HAL_GPIO_Init+0x330>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d101      	bne.n	8004b76 <HAL_GPIO_Init+0x20a>
 8004b72:	2307      	movs	r3, #7
 8004b74:	e00e      	b.n	8004b94 <HAL_GPIO_Init+0x228>
 8004b76:	2308      	movs	r3, #8
 8004b78:	e00c      	b.n	8004b94 <HAL_GPIO_Init+0x228>
 8004b7a:	2306      	movs	r3, #6
 8004b7c:	e00a      	b.n	8004b94 <HAL_GPIO_Init+0x228>
 8004b7e:	2305      	movs	r3, #5
 8004b80:	e008      	b.n	8004b94 <HAL_GPIO_Init+0x228>
 8004b82:	2304      	movs	r3, #4
 8004b84:	e006      	b.n	8004b94 <HAL_GPIO_Init+0x228>
 8004b86:	2303      	movs	r3, #3
 8004b88:	e004      	b.n	8004b94 <HAL_GPIO_Init+0x228>
 8004b8a:	2302      	movs	r3, #2
 8004b8c:	e002      	b.n	8004b94 <HAL_GPIO_Init+0x228>
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e000      	b.n	8004b94 <HAL_GPIO_Init+0x228>
 8004b92:	2300      	movs	r3, #0
 8004b94:	69fa      	ldr	r2, [r7, #28]
 8004b96:	f002 0203 	and.w	r2, r2, #3
 8004b9a:	0092      	lsls	r2, r2, #2
 8004b9c:	4093      	lsls	r3, r2
 8004b9e:	69ba      	ldr	r2, [r7, #24]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004ba4:	4935      	ldr	r1, [pc, #212]	; (8004c7c <HAL_GPIO_Init+0x310>)
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	089b      	lsrs	r3, r3, #2
 8004baa:	3302      	adds	r3, #2
 8004bac:	69ba      	ldr	r2, [r7, #24]
 8004bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004bb2:	4b3b      	ldr	r3, [pc, #236]	; (8004ca0 <HAL_GPIO_Init+0x334>)
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	43db      	mvns	r3, r3
 8004bbc:	69ba      	ldr	r2, [r7, #24]
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d003      	beq.n	8004bd6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004bce:	69ba      	ldr	r2, [r7, #24]
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004bd6:	4a32      	ldr	r2, [pc, #200]	; (8004ca0 <HAL_GPIO_Init+0x334>)
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004bdc:	4b30      	ldr	r3, [pc, #192]	; (8004ca0 <HAL_GPIO_Init+0x334>)
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	43db      	mvns	r3, r3
 8004be6:	69ba      	ldr	r2, [r7, #24]
 8004be8:	4013      	ands	r3, r2
 8004bea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d003      	beq.n	8004c00 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004bf8:	69ba      	ldr	r2, [r7, #24]
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004c00:	4a27      	ldr	r2, [pc, #156]	; (8004ca0 <HAL_GPIO_Init+0x334>)
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004c06:	4b26      	ldr	r3, [pc, #152]	; (8004ca0 <HAL_GPIO_Init+0x334>)
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	43db      	mvns	r3, r3
 8004c10:	69ba      	ldr	r2, [r7, #24]
 8004c12:	4013      	ands	r3, r2
 8004c14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d003      	beq.n	8004c2a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004c22:	69ba      	ldr	r2, [r7, #24]
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004c2a:	4a1d      	ldr	r2, [pc, #116]	; (8004ca0 <HAL_GPIO_Init+0x334>)
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004c30:	4b1b      	ldr	r3, [pc, #108]	; (8004ca0 <HAL_GPIO_Init+0x334>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	43db      	mvns	r3, r3
 8004c3a:	69ba      	ldr	r2, [r7, #24]
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d003      	beq.n	8004c54 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004c4c:	69ba      	ldr	r2, [r7, #24]
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004c54:	4a12      	ldr	r2, [pc, #72]	; (8004ca0 <HAL_GPIO_Init+0x334>)
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	61fb      	str	r3, [r7, #28]
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	2b0f      	cmp	r3, #15
 8004c64:	f67f ae92 	bls.w	800498c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004c68:	bf00      	nop
 8004c6a:	bf00      	nop
 8004c6c:	3724      	adds	r7, #36	; 0x24
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	40023800 	.word	0x40023800
 8004c7c:	40013800 	.word	0x40013800
 8004c80:	40020000 	.word	0x40020000
 8004c84:	40020400 	.word	0x40020400
 8004c88:	40020800 	.word	0x40020800
 8004c8c:	40020c00 	.word	0x40020c00
 8004c90:	40021000 	.word	0x40021000
 8004c94:	40021400 	.word	0x40021400
 8004c98:	40021800 	.word	0x40021800
 8004c9c:	40021c00 	.word	0x40021c00
 8004ca0:	40013c00 	.word	0x40013c00

08004ca4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b085      	sub	sp, #20
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	460b      	mov	r3, r1
 8004cae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	691a      	ldr	r2, [r3, #16]
 8004cb4:	887b      	ldrh	r3, [r7, #2]
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d002      	beq.n	8004cc2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	73fb      	strb	r3, [r7, #15]
 8004cc0:	e001      	b.n	8004cc6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3714      	adds	r7, #20
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr

08004cd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	460b      	mov	r3, r1
 8004cde:	807b      	strh	r3, [r7, #2]
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ce4:	787b      	ldrb	r3, [r7, #1]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d003      	beq.n	8004cf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004cea:	887a      	ldrh	r2, [r7, #2]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004cf0:	e003      	b.n	8004cfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004cf2:	887b      	ldrh	r3, [r7, #2]
 8004cf4:	041a      	lsls	r2, r3, #16
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	619a      	str	r2, [r3, #24]
}
 8004cfa:	bf00      	nop
 8004cfc:	370c      	adds	r7, #12
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
	...

08004d08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	4603      	mov	r3, r0
 8004d10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004d12:	4b08      	ldr	r3, [pc, #32]	; (8004d34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d14:	695a      	ldr	r2, [r3, #20]
 8004d16:	88fb      	ldrh	r3, [r7, #6]
 8004d18:	4013      	ands	r3, r2
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d006      	beq.n	8004d2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004d1e:	4a05      	ldr	r2, [pc, #20]	; (8004d34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d20:	88fb      	ldrh	r3, [r7, #6]
 8004d22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004d24:	88fb      	ldrh	r3, [r7, #6]
 8004d26:	4618      	mov	r0, r3
 8004d28:	f000 f806 	bl	8004d38 <HAL_GPIO_EXTI_Callback>
  }
}
 8004d2c:	bf00      	nop
 8004d2e:	3708      	adds	r7, #8
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	40013c00 	.word	0x40013c00

08004d38 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	4603      	mov	r3, r0
 8004d40:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004d42:	bf00      	nop
 8004d44:	370c      	adds	r7, #12
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr
	...

08004d50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d101      	bne.n	8004d62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e07f      	b.n	8004e62 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d106      	bne.n	8004d7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f7fe fc48 	bl	800360c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2224      	movs	r2, #36	; 0x24
 8004d80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f022 0201 	bic.w	r2, r2, #1
 8004d92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	685a      	ldr	r2, [r3, #4]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004da0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	689a      	ldr	r2, [r3, #8]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004db0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d107      	bne.n	8004dca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	689a      	ldr	r2, [r3, #8]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004dc6:	609a      	str	r2, [r3, #8]
 8004dc8:	e006      	b.n	8004dd8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	689a      	ldr	r2, [r3, #8]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004dd6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d104      	bne.n	8004dea <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004de8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	6859      	ldr	r1, [r3, #4]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	4b1d      	ldr	r3, [pc, #116]	; (8004e6c <HAL_I2C_Init+0x11c>)
 8004df6:	430b      	orrs	r3, r1
 8004df8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68da      	ldr	r2, [r3, #12]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e08:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	691a      	ldr	r2, [r3, #16]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	695b      	ldr	r3, [r3, #20]
 8004e12:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	430a      	orrs	r2, r1
 8004e22:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	69d9      	ldr	r1, [r3, #28]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6a1a      	ldr	r2, [r3, #32]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	430a      	orrs	r2, r1
 8004e32:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f042 0201 	orr.w	r2, r2, #1
 8004e42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2220      	movs	r2, #32
 8004e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004e60:	2300      	movs	r3, #0
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3708      	adds	r7, #8
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	02008000 	.word	0x02008000

08004e70 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b088      	sub	sp, #32
 8004e74:	af02      	add	r7, sp, #8
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	607a      	str	r2, [r7, #4]
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	817b      	strh	r3, [r7, #10]
 8004e80:	4613      	mov	r3, r2
 8004e82:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	2b20      	cmp	r3, #32
 8004e8e:	f040 80da 	bne.w	8005046 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d101      	bne.n	8004ea0 <HAL_I2C_Master_Transmit+0x30>
 8004e9c:	2302      	movs	r3, #2
 8004e9e:	e0d3      	b.n	8005048 <HAL_I2C_Master_Transmit+0x1d8>
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004ea8:	f7ff f824 	bl	8003ef4 <HAL_GetTick>
 8004eac:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	9300      	str	r3, [sp, #0]
 8004eb2:	2319      	movs	r3, #25
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004eba:	68f8      	ldr	r0, [r7, #12]
 8004ebc:	f000 f9f8 	bl	80052b0 <I2C_WaitOnFlagUntilTimeout>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d001      	beq.n	8004eca <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e0be      	b.n	8005048 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2221      	movs	r2, #33	; 0x21
 8004ece:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2210      	movs	r2, #16
 8004ed6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2200      	movs	r2, #0
 8004ede:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	893a      	ldrh	r2, [r7, #8]
 8004eea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	2bff      	cmp	r3, #255	; 0xff
 8004efa:	d90e      	bls.n	8004f1a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	22ff      	movs	r2, #255	; 0xff
 8004f00:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f06:	b2da      	uxtb	r2, r3
 8004f08:	8979      	ldrh	r1, [r7, #10]
 8004f0a:	4b51      	ldr	r3, [pc, #324]	; (8005050 <HAL_I2C_Master_Transmit+0x1e0>)
 8004f0c:	9300      	str	r3, [sp, #0]
 8004f0e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004f12:	68f8      	ldr	r0, [r7, #12]
 8004f14:	f000 fb74 	bl	8005600 <I2C_TransferConfig>
 8004f18:	e06c      	b.n	8004ff4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f1e:	b29a      	uxth	r2, r3
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f28:	b2da      	uxtb	r2, r3
 8004f2a:	8979      	ldrh	r1, [r7, #10]
 8004f2c:	4b48      	ldr	r3, [pc, #288]	; (8005050 <HAL_I2C_Master_Transmit+0x1e0>)
 8004f2e:	9300      	str	r3, [sp, #0]
 8004f30:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f34:	68f8      	ldr	r0, [r7, #12]
 8004f36:	f000 fb63 	bl	8005600 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004f3a:	e05b      	b.n	8004ff4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f3c:	697a      	ldr	r2, [r7, #20]
 8004f3e:	6a39      	ldr	r1, [r7, #32]
 8004f40:	68f8      	ldr	r0, [r7, #12]
 8004f42:	f000 f9f5 	bl	8005330 <I2C_WaitOnTXISFlagUntilTimeout>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d001      	beq.n	8004f50 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e07b      	b.n	8005048 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f54:	781a      	ldrb	r2, [r3, #0]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f60:	1c5a      	adds	r2, r3, #1
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	b29a      	uxth	r2, r3
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	b29a      	uxth	r2, r3
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d034      	beq.n	8004ff4 <HAL_I2C_Master_Transmit+0x184>
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d130      	bne.n	8004ff4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	9300      	str	r3, [sp, #0]
 8004f96:	6a3b      	ldr	r3, [r7, #32]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	2180      	movs	r1, #128	; 0x80
 8004f9c:	68f8      	ldr	r0, [r7, #12]
 8004f9e:	f000 f987 	bl	80052b0 <I2C_WaitOnFlagUntilTimeout>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d001      	beq.n	8004fac <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e04d      	b.n	8005048 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	2bff      	cmp	r3, #255	; 0xff
 8004fb4:	d90e      	bls.n	8004fd4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	22ff      	movs	r2, #255	; 0xff
 8004fba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fc0:	b2da      	uxtb	r2, r3
 8004fc2:	8979      	ldrh	r1, [r7, #10]
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	9300      	str	r3, [sp, #0]
 8004fc8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004fcc:	68f8      	ldr	r0, [r7, #12]
 8004fce:	f000 fb17 	bl	8005600 <I2C_TransferConfig>
 8004fd2:	e00f      	b.n	8004ff4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fd8:	b29a      	uxth	r2, r3
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fe2:	b2da      	uxtb	r2, r3
 8004fe4:	8979      	ldrh	r1, [r7, #10]
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	9300      	str	r3, [sp, #0]
 8004fea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004fee:	68f8      	ldr	r0, [r7, #12]
 8004ff0:	f000 fb06 	bl	8005600 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d19e      	bne.n	8004f3c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ffe:	697a      	ldr	r2, [r7, #20]
 8005000:	6a39      	ldr	r1, [r7, #32]
 8005002:	68f8      	ldr	r0, [r7, #12]
 8005004:	f000 f9d4 	bl	80053b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005008:	4603      	mov	r3, r0
 800500a:	2b00      	cmp	r3, #0
 800500c:	d001      	beq.n	8005012 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e01a      	b.n	8005048 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	2220      	movs	r2, #32
 8005018:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	6859      	ldr	r1, [r3, #4]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	4b0b      	ldr	r3, [pc, #44]	; (8005054 <HAL_I2C_Master_Transmit+0x1e4>)
 8005026:	400b      	ands	r3, r1
 8005028:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2220      	movs	r2, #32
 800502e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2200      	movs	r2, #0
 8005036:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005042:	2300      	movs	r3, #0
 8005044:	e000      	b.n	8005048 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005046:	2302      	movs	r3, #2
  }
}
 8005048:	4618      	mov	r0, r3
 800504a:	3718      	adds	r7, #24
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}
 8005050:	80002000 	.word	0x80002000
 8005054:	fe00e800 	.word	0xfe00e800

08005058 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b08a      	sub	sp, #40	; 0x28
 800505c:	af02      	add	r7, sp, #8
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	607a      	str	r2, [r7, #4]
 8005062:	603b      	str	r3, [r7, #0]
 8005064:	460b      	mov	r3, r1
 8005066:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8005068:	2300      	movs	r3, #0
 800506a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005072:	b2db      	uxtb	r3, r3
 8005074:	2b20      	cmp	r3, #32
 8005076:	f040 80ef 	bne.w	8005258 <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	699b      	ldr	r3, [r3, #24]
 8005080:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005084:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005088:	d101      	bne.n	800508e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800508a:	2302      	movs	r3, #2
 800508c:	e0e5      	b.n	800525a <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005094:	2b01      	cmp	r3, #1
 8005096:	d101      	bne.n	800509c <HAL_I2C_IsDeviceReady+0x44>
 8005098:	2302      	movs	r3, #2
 800509a:	e0de      	b.n	800525a <HAL_I2C_IsDeviceReady+0x202>
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2224      	movs	r2, #36	; 0x24
 80050a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2200      	movs	r2, #0
 80050b0:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	d105      	bne.n	80050c6 <HAL_I2C_IsDeviceReady+0x6e>
 80050ba:	897b      	ldrh	r3, [r7, #10]
 80050bc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80050c0:	4b68      	ldr	r3, [pc, #416]	; (8005264 <HAL_I2C_IsDeviceReady+0x20c>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	e004      	b.n	80050d0 <HAL_I2C_IsDeviceReady+0x78>
 80050c6:	897b      	ldrh	r3, [r7, #10]
 80050c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050cc:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80050d0:	68fa      	ldr	r2, [r7, #12]
 80050d2:	6812      	ldr	r2, [r2, #0]
 80050d4:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80050d6:	f7fe ff0d 	bl	8003ef4 <HAL_GetTick>
 80050da:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	699b      	ldr	r3, [r3, #24]
 80050e2:	f003 0320 	and.w	r3, r3, #32
 80050e6:	2b20      	cmp	r3, #32
 80050e8:	bf0c      	ite	eq
 80050ea:	2301      	moveq	r3, #1
 80050ec:	2300      	movne	r3, #0
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	699b      	ldr	r3, [r3, #24]
 80050f8:	f003 0310 	and.w	r3, r3, #16
 80050fc:	2b10      	cmp	r3, #16
 80050fe:	bf0c      	ite	eq
 8005100:	2301      	moveq	r3, #1
 8005102:	2300      	movne	r3, #0
 8005104:	b2db      	uxtb	r3, r3
 8005106:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005108:	e034      	b.n	8005174 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005110:	d01a      	beq.n	8005148 <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005112:	f7fe feef 	bl	8003ef4 <HAL_GetTick>
 8005116:	4602      	mov	r2, r0
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	683a      	ldr	r2, [r7, #0]
 800511e:	429a      	cmp	r2, r3
 8005120:	d302      	bcc.n	8005128 <HAL_I2C_IsDeviceReady+0xd0>
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d10f      	bne.n	8005148 <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2220      	movs	r2, #32
 800512c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005134:	f043 0220 	orr.w	r2, r3, #32
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2200      	movs	r2, #0
 8005140:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	e088      	b.n	800525a <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	699b      	ldr	r3, [r3, #24]
 800514e:	f003 0320 	and.w	r3, r3, #32
 8005152:	2b20      	cmp	r3, #32
 8005154:	bf0c      	ite	eq
 8005156:	2301      	moveq	r3, #1
 8005158:	2300      	movne	r3, #0
 800515a:	b2db      	uxtb	r3, r3
 800515c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	699b      	ldr	r3, [r3, #24]
 8005164:	f003 0310 	and.w	r3, r3, #16
 8005168:	2b10      	cmp	r3, #16
 800516a:	bf0c      	ite	eq
 800516c:	2301      	moveq	r3, #1
 800516e:	2300      	movne	r3, #0
 8005170:	b2db      	uxtb	r3, r3
 8005172:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005174:	7ffb      	ldrb	r3, [r7, #31]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d102      	bne.n	8005180 <HAL_I2C_IsDeviceReady+0x128>
 800517a:	7fbb      	ldrb	r3, [r7, #30]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d0c4      	beq.n	800510a <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	699b      	ldr	r3, [r3, #24]
 8005186:	f003 0310 	and.w	r3, r3, #16
 800518a:	2b10      	cmp	r3, #16
 800518c:	d01a      	beq.n	80051c4 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	9300      	str	r3, [sp, #0]
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	2200      	movs	r2, #0
 8005196:	2120      	movs	r1, #32
 8005198:	68f8      	ldr	r0, [r7, #12]
 800519a:	f000 f889 	bl	80052b0 <I2C_WaitOnFlagUntilTimeout>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d001      	beq.n	80051a8 <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e058      	b.n	800525a <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	2220      	movs	r2, #32
 80051ae:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2220      	movs	r2, #32
 80051b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80051c0:	2300      	movs	r3, #0
 80051c2:	e04a      	b.n	800525a <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	9300      	str	r3, [sp, #0]
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	2200      	movs	r2, #0
 80051cc:	2120      	movs	r1, #32
 80051ce:	68f8      	ldr	r0, [r7, #12]
 80051d0:	f000 f86e 	bl	80052b0 <I2C_WaitOnFlagUntilTimeout>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d001      	beq.n	80051de <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e03d      	b.n	800525a <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2210      	movs	r2, #16
 80051e4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2220      	movs	r2, #32
 80051ec:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d118      	bne.n	8005228 <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	685a      	ldr	r2, [r3, #4]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005204:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005206:	69bb      	ldr	r3, [r7, #24]
 8005208:	9300      	str	r3, [sp, #0]
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	2200      	movs	r2, #0
 800520e:	2120      	movs	r1, #32
 8005210:	68f8      	ldr	r0, [r7, #12]
 8005212:	f000 f84d 	bl	80052b0 <I2C_WaitOnFlagUntilTimeout>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d001      	beq.n	8005220 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	e01c      	b.n	800525a <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2220      	movs	r2, #32
 8005226:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	3301      	adds	r3, #1
 800522c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	429a      	cmp	r2, r3
 8005234:	f63f af3d 	bhi.w	80050b2 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2220      	movs	r2, #32
 800523c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005244:	f043 0220 	orr.w	r2, r3, #32
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2200      	movs	r2, #0
 8005250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	e000      	b.n	800525a <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 8005258:	2302      	movs	r3, #2
  }
}
 800525a:	4618      	mov	r0, r3
 800525c:	3720      	adds	r7, #32
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	02002000 	.word	0x02002000

08005268 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	699b      	ldr	r3, [r3, #24]
 8005276:	f003 0302 	and.w	r3, r3, #2
 800527a:	2b02      	cmp	r3, #2
 800527c:	d103      	bne.n	8005286 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	2200      	movs	r2, #0
 8005284:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	699b      	ldr	r3, [r3, #24]
 800528c:	f003 0301 	and.w	r3, r3, #1
 8005290:	2b01      	cmp	r3, #1
 8005292:	d007      	beq.n	80052a4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	699a      	ldr	r2, [r3, #24]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f042 0201 	orr.w	r2, r2, #1
 80052a2:	619a      	str	r2, [r3, #24]
  }
}
 80052a4:	bf00      	nop
 80052a6:	370c      	adds	r7, #12
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	603b      	str	r3, [r7, #0]
 80052bc:	4613      	mov	r3, r2
 80052be:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80052c0:	e022      	b.n	8005308 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052c8:	d01e      	beq.n	8005308 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052ca:	f7fe fe13 	bl	8003ef4 <HAL_GetTick>
 80052ce:	4602      	mov	r2, r0
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	1ad3      	subs	r3, r2, r3
 80052d4:	683a      	ldr	r2, [r7, #0]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d302      	bcc.n	80052e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d113      	bne.n	8005308 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052e4:	f043 0220 	orr.w	r2, r3, #32
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2220      	movs	r2, #32
 80052f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2200      	movs	r2, #0
 8005300:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	e00f      	b.n	8005328 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	699a      	ldr	r2, [r3, #24]
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	4013      	ands	r3, r2
 8005312:	68ba      	ldr	r2, [r7, #8]
 8005314:	429a      	cmp	r2, r3
 8005316:	bf0c      	ite	eq
 8005318:	2301      	moveq	r3, #1
 800531a:	2300      	movne	r3, #0
 800531c:	b2db      	uxtb	r3, r3
 800531e:	461a      	mov	r2, r3
 8005320:	79fb      	ldrb	r3, [r7, #7]
 8005322:	429a      	cmp	r2, r3
 8005324:	d0cd      	beq.n	80052c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	3710      	adds	r7, #16
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800533c:	e02c      	b.n	8005398 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	68b9      	ldr	r1, [r7, #8]
 8005342:	68f8      	ldr	r0, [r7, #12]
 8005344:	f000 f870 	bl	8005428 <I2C_IsErrorOccurred>
 8005348:	4603      	mov	r3, r0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d001      	beq.n	8005352 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e02a      	b.n	80053a8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005358:	d01e      	beq.n	8005398 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800535a:	f7fe fdcb 	bl	8003ef4 <HAL_GetTick>
 800535e:	4602      	mov	r2, r0
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	1ad3      	subs	r3, r2, r3
 8005364:	68ba      	ldr	r2, [r7, #8]
 8005366:	429a      	cmp	r2, r3
 8005368:	d302      	bcc.n	8005370 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d113      	bne.n	8005398 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005374:	f043 0220 	orr.w	r2, r3, #32
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2220      	movs	r2, #32
 8005380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2200      	movs	r2, #0
 8005388:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2200      	movs	r2, #0
 8005390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005394:	2301      	movs	r3, #1
 8005396:	e007      	b.n	80053a8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	699b      	ldr	r3, [r3, #24]
 800539e:	f003 0302 	and.w	r3, r3, #2
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	d1cb      	bne.n	800533e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80053a6:	2300      	movs	r3, #0
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3710      	adds	r7, #16
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80053bc:	e028      	b.n	8005410 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	68b9      	ldr	r1, [r7, #8]
 80053c2:	68f8      	ldr	r0, [r7, #12]
 80053c4:	f000 f830 	bl	8005428 <I2C_IsErrorOccurred>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d001      	beq.n	80053d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e026      	b.n	8005420 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053d2:	f7fe fd8f 	bl	8003ef4 <HAL_GetTick>
 80053d6:	4602      	mov	r2, r0
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	1ad3      	subs	r3, r2, r3
 80053dc:	68ba      	ldr	r2, [r7, #8]
 80053de:	429a      	cmp	r2, r3
 80053e0:	d302      	bcc.n	80053e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d113      	bne.n	8005410 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ec:	f043 0220 	orr.w	r2, r3, #32
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2220      	movs	r2, #32
 80053f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2200      	movs	r2, #0
 8005408:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e007      	b.n	8005420 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	699b      	ldr	r3, [r3, #24]
 8005416:	f003 0320 	and.w	r3, r3, #32
 800541a:	2b20      	cmp	r3, #32
 800541c:	d1cf      	bne.n	80053be <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800541e:	2300      	movs	r3, #0
}
 8005420:	4618      	mov	r0, r3
 8005422:	3710      	adds	r7, #16
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b08a      	sub	sp, #40	; 0x28
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005434:	2300      	movs	r3, #0
 8005436:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	699b      	ldr	r3, [r3, #24]
 8005440:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005442:	2300      	movs	r3, #0
 8005444:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800544a:	69bb      	ldr	r3, [r7, #24]
 800544c:	f003 0310 	and.w	r3, r3, #16
 8005450:	2b00      	cmp	r3, #0
 8005452:	d075      	beq.n	8005540 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2210      	movs	r2, #16
 800545a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800545c:	e056      	b.n	800550c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005464:	d052      	beq.n	800550c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005466:	f7fe fd45 	bl	8003ef4 <HAL_GetTick>
 800546a:	4602      	mov	r2, r0
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	1ad3      	subs	r3, r2, r3
 8005470:	68ba      	ldr	r2, [r7, #8]
 8005472:	429a      	cmp	r2, r3
 8005474:	d302      	bcc.n	800547c <I2C_IsErrorOccurred+0x54>
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d147      	bne.n	800550c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005486:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800548e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800549a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800549e:	d12e      	bne.n	80054fe <I2C_IsErrorOccurred+0xd6>
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054a6:	d02a      	beq.n	80054fe <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80054a8:	7cfb      	ldrb	r3, [r7, #19]
 80054aa:	2b20      	cmp	r3, #32
 80054ac:	d027      	beq.n	80054fe <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	685a      	ldr	r2, [r3, #4]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054bc:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80054be:	f7fe fd19 	bl	8003ef4 <HAL_GetTick>
 80054c2:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054c4:	e01b      	b.n	80054fe <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80054c6:	f7fe fd15 	bl	8003ef4 <HAL_GetTick>
 80054ca:	4602      	mov	r2, r0
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	1ad3      	subs	r3, r2, r3
 80054d0:	2b19      	cmp	r3, #25
 80054d2:	d914      	bls.n	80054fe <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054d8:	f043 0220 	orr.w	r2, r3, #32
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2220      	movs	r2, #32
 80054e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	699b      	ldr	r3, [r3, #24]
 8005504:	f003 0320 	and.w	r3, r3, #32
 8005508:	2b20      	cmp	r3, #32
 800550a:	d1dc      	bne.n	80054c6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	699b      	ldr	r3, [r3, #24]
 8005512:	f003 0320 	and.w	r3, r3, #32
 8005516:	2b20      	cmp	r3, #32
 8005518:	d003      	beq.n	8005522 <I2C_IsErrorOccurred+0xfa>
 800551a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800551e:	2b00      	cmp	r3, #0
 8005520:	d09d      	beq.n	800545e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005522:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005526:	2b00      	cmp	r3, #0
 8005528:	d103      	bne.n	8005532 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2220      	movs	r2, #32
 8005530:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005532:	6a3b      	ldr	r3, [r7, #32]
 8005534:	f043 0304 	orr.w	r3, r3, #4
 8005538:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	699b      	ldr	r3, [r3, #24]
 8005546:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800554e:	2b00      	cmp	r3, #0
 8005550:	d00b      	beq.n	800556a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005552:	6a3b      	ldr	r3, [r7, #32]
 8005554:	f043 0301 	orr.w	r3, r3, #1
 8005558:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005562:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005570:	2b00      	cmp	r3, #0
 8005572:	d00b      	beq.n	800558c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005574:	6a3b      	ldr	r3, [r7, #32]
 8005576:	f043 0308 	orr.w	r3, r3, #8
 800557a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005584:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005592:	2b00      	cmp	r3, #0
 8005594:	d00b      	beq.n	80055ae <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005596:	6a3b      	ldr	r3, [r7, #32]
 8005598:	f043 0302 	orr.w	r3, r3, #2
 800559c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055a6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80055ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d01c      	beq.n	80055f0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80055b6:	68f8      	ldr	r0, [r7, #12]
 80055b8:	f7ff fe56 	bl	8005268 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	6859      	ldr	r1, [r3, #4]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	4b0d      	ldr	r3, [pc, #52]	; (80055fc <I2C_IsErrorOccurred+0x1d4>)
 80055c8:	400b      	ands	r3, r1
 80055ca:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055d0:	6a3b      	ldr	r3, [r7, #32]
 80055d2:	431a      	orrs	r2, r3
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2220      	movs	r2, #32
 80055dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80055f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3728      	adds	r7, #40	; 0x28
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	fe00e800 	.word	0xfe00e800

08005600 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005600:	b480      	push	{r7}
 8005602:	b087      	sub	sp, #28
 8005604:	af00      	add	r7, sp, #0
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	607b      	str	r3, [r7, #4]
 800560a:	460b      	mov	r3, r1
 800560c:	817b      	strh	r3, [r7, #10]
 800560e:	4613      	mov	r3, r2
 8005610:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005612:	897b      	ldrh	r3, [r7, #10]
 8005614:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005618:	7a7b      	ldrb	r3, [r7, #9]
 800561a:	041b      	lsls	r3, r3, #16
 800561c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005620:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005626:	6a3b      	ldr	r3, [r7, #32]
 8005628:	4313      	orrs	r3, r2
 800562a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800562e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	685a      	ldr	r2, [r3, #4]
 8005636:	6a3b      	ldr	r3, [r7, #32]
 8005638:	0d5b      	lsrs	r3, r3, #21
 800563a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800563e:	4b08      	ldr	r3, [pc, #32]	; (8005660 <I2C_TransferConfig+0x60>)
 8005640:	430b      	orrs	r3, r1
 8005642:	43db      	mvns	r3, r3
 8005644:	ea02 0103 	and.w	r1, r2, r3
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	697a      	ldr	r2, [r7, #20]
 800564e:	430a      	orrs	r2, r1
 8005650:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005652:	bf00      	nop
 8005654:	371c      	adds	r7, #28
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr
 800565e:	bf00      	nop
 8005660:	03ff63ff 	.word	0x03ff63ff

08005664 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005674:	b2db      	uxtb	r3, r3
 8005676:	2b20      	cmp	r3, #32
 8005678:	d138      	bne.n	80056ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005680:	2b01      	cmp	r3, #1
 8005682:	d101      	bne.n	8005688 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005684:	2302      	movs	r3, #2
 8005686:	e032      	b.n	80056ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2224      	movs	r2, #36	; 0x24
 8005694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f022 0201 	bic.w	r2, r2, #1
 80056a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80056b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	6819      	ldr	r1, [r3, #0]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	683a      	ldr	r2, [r7, #0]
 80056c4:	430a      	orrs	r2, r1
 80056c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f042 0201 	orr.w	r2, r2, #1
 80056d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2220      	movs	r2, #32
 80056dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80056e8:	2300      	movs	r3, #0
 80056ea:	e000      	b.n	80056ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80056ec:	2302      	movs	r3, #2
  }
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	370c      	adds	r7, #12
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr

080056fa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80056fa:	b480      	push	{r7}
 80056fc:	b085      	sub	sp, #20
 80056fe:	af00      	add	r7, sp, #0
 8005700:	6078      	str	r0, [r7, #4]
 8005702:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800570a:	b2db      	uxtb	r3, r3
 800570c:	2b20      	cmp	r3, #32
 800570e:	d139      	bne.n	8005784 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005716:	2b01      	cmp	r3, #1
 8005718:	d101      	bne.n	800571e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800571a:	2302      	movs	r3, #2
 800571c:	e033      	b.n	8005786 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2201      	movs	r2, #1
 8005722:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2224      	movs	r2, #36	; 0x24
 800572a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f022 0201 	bic.w	r2, r2, #1
 800573c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800574c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	021b      	lsls	r3, r3, #8
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	4313      	orrs	r3, r2
 8005756:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f042 0201 	orr.w	r2, r2, #1
 800576e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2220      	movs	r2, #32
 8005774:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005780:	2300      	movs	r3, #0
 8005782:	e000      	b.n	8005786 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005784:	2302      	movs	r3, #2
  }
}
 8005786:	4618      	mov	r0, r3
 8005788:	3714      	adds	r7, #20
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr

08005792 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005792:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005794:	b08f      	sub	sp, #60	; 0x3c
 8005796:	af0a      	add	r7, sp, #40	; 0x28
 8005798:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d101      	bne.n	80057a4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	e116      	b.n	80059d2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d106      	bne.n	80057c4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f7fe f8ea 	bl	8003998 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2203      	movs	r2, #3
 80057c8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d102      	bne.n	80057de <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4618      	mov	r0, r3
 80057e4:	f003 fa9a 	bl	8008d1c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	603b      	str	r3, [r7, #0]
 80057ee:	687e      	ldr	r6, [r7, #4]
 80057f0:	466d      	mov	r5, sp
 80057f2:	f106 0410 	add.w	r4, r6, #16
 80057f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80057fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80057fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80057fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005802:	e885 0003 	stmia.w	r5, {r0, r1}
 8005806:	1d33      	adds	r3, r6, #4
 8005808:	cb0e      	ldmia	r3, {r1, r2, r3}
 800580a:	6838      	ldr	r0, [r7, #0]
 800580c:	f003 f9fe 	bl	8008c0c <USB_CoreInit>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d005      	beq.n	8005822 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2202      	movs	r2, #2
 800581a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e0d7      	b.n	80059d2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	2100      	movs	r1, #0
 8005828:	4618      	mov	r0, r3
 800582a:	f003 fa88 	bl	8008d3e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800582e:	2300      	movs	r3, #0
 8005830:	73fb      	strb	r3, [r7, #15]
 8005832:	e04a      	b.n	80058ca <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005834:	7bfa      	ldrb	r2, [r7, #15]
 8005836:	6879      	ldr	r1, [r7, #4]
 8005838:	4613      	mov	r3, r2
 800583a:	00db      	lsls	r3, r3, #3
 800583c:	1a9b      	subs	r3, r3, r2
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	440b      	add	r3, r1
 8005842:	333d      	adds	r3, #61	; 0x3d
 8005844:	2201      	movs	r2, #1
 8005846:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005848:	7bfa      	ldrb	r2, [r7, #15]
 800584a:	6879      	ldr	r1, [r7, #4]
 800584c:	4613      	mov	r3, r2
 800584e:	00db      	lsls	r3, r3, #3
 8005850:	1a9b      	subs	r3, r3, r2
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	440b      	add	r3, r1
 8005856:	333c      	adds	r3, #60	; 0x3c
 8005858:	7bfa      	ldrb	r2, [r7, #15]
 800585a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800585c:	7bfa      	ldrb	r2, [r7, #15]
 800585e:	7bfb      	ldrb	r3, [r7, #15]
 8005860:	b298      	uxth	r0, r3
 8005862:	6879      	ldr	r1, [r7, #4]
 8005864:	4613      	mov	r3, r2
 8005866:	00db      	lsls	r3, r3, #3
 8005868:	1a9b      	subs	r3, r3, r2
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	440b      	add	r3, r1
 800586e:	3342      	adds	r3, #66	; 0x42
 8005870:	4602      	mov	r2, r0
 8005872:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005874:	7bfa      	ldrb	r2, [r7, #15]
 8005876:	6879      	ldr	r1, [r7, #4]
 8005878:	4613      	mov	r3, r2
 800587a:	00db      	lsls	r3, r3, #3
 800587c:	1a9b      	subs	r3, r3, r2
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	440b      	add	r3, r1
 8005882:	333f      	adds	r3, #63	; 0x3f
 8005884:	2200      	movs	r2, #0
 8005886:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005888:	7bfa      	ldrb	r2, [r7, #15]
 800588a:	6879      	ldr	r1, [r7, #4]
 800588c:	4613      	mov	r3, r2
 800588e:	00db      	lsls	r3, r3, #3
 8005890:	1a9b      	subs	r3, r3, r2
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	440b      	add	r3, r1
 8005896:	3344      	adds	r3, #68	; 0x44
 8005898:	2200      	movs	r2, #0
 800589a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800589c:	7bfa      	ldrb	r2, [r7, #15]
 800589e:	6879      	ldr	r1, [r7, #4]
 80058a0:	4613      	mov	r3, r2
 80058a2:	00db      	lsls	r3, r3, #3
 80058a4:	1a9b      	subs	r3, r3, r2
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	440b      	add	r3, r1
 80058aa:	3348      	adds	r3, #72	; 0x48
 80058ac:	2200      	movs	r2, #0
 80058ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80058b0:	7bfa      	ldrb	r2, [r7, #15]
 80058b2:	6879      	ldr	r1, [r7, #4]
 80058b4:	4613      	mov	r3, r2
 80058b6:	00db      	lsls	r3, r3, #3
 80058b8:	1a9b      	subs	r3, r3, r2
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	440b      	add	r3, r1
 80058be:	3350      	adds	r3, #80	; 0x50
 80058c0:	2200      	movs	r2, #0
 80058c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80058c4:	7bfb      	ldrb	r3, [r7, #15]
 80058c6:	3301      	adds	r3, #1
 80058c8:	73fb      	strb	r3, [r7, #15]
 80058ca:	7bfa      	ldrb	r2, [r7, #15]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d3af      	bcc.n	8005834 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80058d4:	2300      	movs	r3, #0
 80058d6:	73fb      	strb	r3, [r7, #15]
 80058d8:	e044      	b.n	8005964 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80058da:	7bfa      	ldrb	r2, [r7, #15]
 80058dc:	6879      	ldr	r1, [r7, #4]
 80058de:	4613      	mov	r3, r2
 80058e0:	00db      	lsls	r3, r3, #3
 80058e2:	1a9b      	subs	r3, r3, r2
 80058e4:	009b      	lsls	r3, r3, #2
 80058e6:	440b      	add	r3, r1
 80058e8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80058ec:	2200      	movs	r2, #0
 80058ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80058f0:	7bfa      	ldrb	r2, [r7, #15]
 80058f2:	6879      	ldr	r1, [r7, #4]
 80058f4:	4613      	mov	r3, r2
 80058f6:	00db      	lsls	r3, r3, #3
 80058f8:	1a9b      	subs	r3, r3, r2
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	440b      	add	r3, r1
 80058fe:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005902:	7bfa      	ldrb	r2, [r7, #15]
 8005904:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005906:	7bfa      	ldrb	r2, [r7, #15]
 8005908:	6879      	ldr	r1, [r7, #4]
 800590a:	4613      	mov	r3, r2
 800590c:	00db      	lsls	r3, r3, #3
 800590e:	1a9b      	subs	r3, r3, r2
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	440b      	add	r3, r1
 8005914:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005918:	2200      	movs	r2, #0
 800591a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800591c:	7bfa      	ldrb	r2, [r7, #15]
 800591e:	6879      	ldr	r1, [r7, #4]
 8005920:	4613      	mov	r3, r2
 8005922:	00db      	lsls	r3, r3, #3
 8005924:	1a9b      	subs	r3, r3, r2
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	440b      	add	r3, r1
 800592a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800592e:	2200      	movs	r2, #0
 8005930:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005932:	7bfa      	ldrb	r2, [r7, #15]
 8005934:	6879      	ldr	r1, [r7, #4]
 8005936:	4613      	mov	r3, r2
 8005938:	00db      	lsls	r3, r3, #3
 800593a:	1a9b      	subs	r3, r3, r2
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	440b      	add	r3, r1
 8005940:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005944:	2200      	movs	r2, #0
 8005946:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005948:	7bfa      	ldrb	r2, [r7, #15]
 800594a:	6879      	ldr	r1, [r7, #4]
 800594c:	4613      	mov	r3, r2
 800594e:	00db      	lsls	r3, r3, #3
 8005950:	1a9b      	subs	r3, r3, r2
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	440b      	add	r3, r1
 8005956:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800595a:	2200      	movs	r2, #0
 800595c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800595e:	7bfb      	ldrb	r3, [r7, #15]
 8005960:	3301      	adds	r3, #1
 8005962:	73fb      	strb	r3, [r7, #15]
 8005964:	7bfa      	ldrb	r2, [r7, #15]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	429a      	cmp	r2, r3
 800596c:	d3b5      	bcc.n	80058da <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	603b      	str	r3, [r7, #0]
 8005974:	687e      	ldr	r6, [r7, #4]
 8005976:	466d      	mov	r5, sp
 8005978:	f106 0410 	add.w	r4, r6, #16
 800597c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800597e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005980:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005982:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005984:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005988:	e885 0003 	stmia.w	r5, {r0, r1}
 800598c:	1d33      	adds	r3, r6, #4
 800598e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005990:	6838      	ldr	r0, [r7, #0]
 8005992:	f003 fa21 	bl	8008dd8 <USB_DevInit>
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d005      	beq.n	80059a8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2202      	movs	r2, #2
 80059a0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e014      	b.n	80059d2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d102      	bne.n	80059c6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f000 f80b 	bl	80059dc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4618      	mov	r0, r3
 80059cc:	f003 fbeb 	bl	80091a6 <USB_DevDisconnect>

  return HAL_OK;
 80059d0:	2300      	movs	r3, #0
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3714      	adds	r7, #20
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080059dc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80059dc:	b480      	push	{r7}
 80059de:	b085      	sub	sp, #20
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2201      	movs	r2, #1
 80059ee:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	699b      	ldr	r3, [r3, #24]
 80059fe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005a0a:	4b05      	ldr	r3, [pc, #20]	; (8005a20 <HAL_PCDEx_ActivateLPM+0x44>)
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005a12:	2300      	movs	r3, #0
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3714      	adds	r7, #20
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr
 8005a20:	10000003 	.word	0x10000003

08005a24 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005a24:	b480      	push	{r7}
 8005a26:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a28:	4b05      	ldr	r3, [pc, #20]	; (8005a40 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a04      	ldr	r2, [pc, #16]	; (8005a40 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005a2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a32:	6013      	str	r3, [r2, #0]
}
 8005a34:	bf00      	nop
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr
 8005a3e:	bf00      	nop
 8005a40:	40007000 	.word	0x40007000

08005a44 <HAL_PWR_DisableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8005a44:	b480      	push	{r7}
 8005a46:	af00      	add	r7, sp, #0
  /* Disable access to RTC and backup registers */
	CLEAR_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a48:	4b05      	ldr	r3, [pc, #20]	; (8005a60 <HAL_PWR_DisableBkUpAccess+0x1c>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a04      	ldr	r2, [pc, #16]	; (8005a60 <HAL_PWR_DisableBkUpAccess+0x1c>)
 8005a4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a52:	6013      	str	r3, [r2, #0]
}
 8005a54:	bf00      	nop
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr
 8005a5e:	bf00      	nop
 8005a60:	40007000 	.word	0x40007000

08005a64 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b086      	sub	sp, #24
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d101      	bne.n	8005a7a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e291      	b.n	8005f9e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f003 0301 	and.w	r3, r3, #1
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	f000 8087 	beq.w	8005b96 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005a88:	4b96      	ldr	r3, [pc, #600]	; (8005ce4 <HAL_RCC_OscConfig+0x280>)
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	f003 030c 	and.w	r3, r3, #12
 8005a90:	2b04      	cmp	r3, #4
 8005a92:	d00c      	beq.n	8005aae <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a94:	4b93      	ldr	r3, [pc, #588]	; (8005ce4 <HAL_RCC_OscConfig+0x280>)
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	f003 030c 	and.w	r3, r3, #12
 8005a9c:	2b08      	cmp	r3, #8
 8005a9e:	d112      	bne.n	8005ac6 <HAL_RCC_OscConfig+0x62>
 8005aa0:	4b90      	ldr	r3, [pc, #576]	; (8005ce4 <HAL_RCC_OscConfig+0x280>)
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005aa8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005aac:	d10b      	bne.n	8005ac6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005aae:	4b8d      	ldr	r3, [pc, #564]	; (8005ce4 <HAL_RCC_OscConfig+0x280>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d06c      	beq.n	8005b94 <HAL_RCC_OscConfig+0x130>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d168      	bne.n	8005b94 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e26b      	b.n	8005f9e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ace:	d106      	bne.n	8005ade <HAL_RCC_OscConfig+0x7a>
 8005ad0:	4b84      	ldr	r3, [pc, #528]	; (8005ce4 <HAL_RCC_OscConfig+0x280>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a83      	ldr	r2, [pc, #524]	; (8005ce4 <HAL_RCC_OscConfig+0x280>)
 8005ad6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ada:	6013      	str	r3, [r2, #0]
 8005adc:	e02e      	b.n	8005b3c <HAL_RCC_OscConfig+0xd8>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d10c      	bne.n	8005b00 <HAL_RCC_OscConfig+0x9c>
 8005ae6:	4b7f      	ldr	r3, [pc, #508]	; (8005ce4 <HAL_RCC_OscConfig+0x280>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a7e      	ldr	r2, [pc, #504]	; (8005ce4 <HAL_RCC_OscConfig+0x280>)
 8005aec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005af0:	6013      	str	r3, [r2, #0]
 8005af2:	4b7c      	ldr	r3, [pc, #496]	; (8005ce4 <HAL_RCC_OscConfig+0x280>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a7b      	ldr	r2, [pc, #492]	; (8005ce4 <HAL_RCC_OscConfig+0x280>)
 8005af8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005afc:	6013      	str	r3, [r2, #0]
 8005afe:	e01d      	b.n	8005b3c <HAL_RCC_OscConfig+0xd8>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b08:	d10c      	bne.n	8005b24 <HAL_RCC_OscConfig+0xc0>
 8005b0a:	4b76      	ldr	r3, [pc, #472]	; (8005ce4 <HAL_RCC_OscConfig+0x280>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a75      	ldr	r2, [pc, #468]	; (8005ce4 <HAL_RCC_OscConfig+0x280>)
 8005b10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b14:	6013      	str	r3, [r2, #0]
 8005b16:	4b73      	ldr	r3, [pc, #460]	; (8005ce4 <HAL_RCC_OscConfig+0x280>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a72      	ldr	r2, [pc, #456]	; (8005ce4 <HAL_RCC_OscConfig+0x280>)
 8005b1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b20:	6013      	str	r3, [r2, #0]
 8005b22:	e00b      	b.n	8005b3c <HAL_RCC_OscConfig+0xd8>
 8005b24:	4b6f      	ldr	r3, [pc, #444]	; (8005ce4 <HAL_RCC_OscConfig+0x280>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a6e      	ldr	r2, [pc, #440]	; (8005ce4 <HAL_RCC_OscConfig+0x280>)
 8005b2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b2e:	6013      	str	r3, [r2, #0]
 8005b30:	4b6c      	ldr	r3, [pc, #432]	; (8005ce4 <HAL_RCC_OscConfig+0x280>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a6b      	ldr	r2, [pc, #428]	; (8005ce4 <HAL_RCC_OscConfig+0x280>)
 8005b36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d013      	beq.n	8005b6c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b44:	f7fe f9d6 	bl	8003ef4 <HAL_GetTick>
 8005b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b4a:	e008      	b.n	8005b5e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b4c:	f7fe f9d2 	bl	8003ef4 <HAL_GetTick>
 8005b50:	4602      	mov	r2, r0
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	1ad3      	subs	r3, r2, r3
 8005b56:	2b64      	cmp	r3, #100	; 0x64
 8005b58:	d901      	bls.n	8005b5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005b5a:	2303      	movs	r3, #3
 8005b5c:	e21f      	b.n	8005f9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b5e:	4b61      	ldr	r3, [pc, #388]	; (8005ce4 <HAL_RCC_OscConfig+0x280>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d0f0      	beq.n	8005b4c <HAL_RCC_OscConfig+0xe8>
 8005b6a:	e014      	b.n	8005b96 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b6c:	f7fe f9c2 	bl	8003ef4 <HAL_GetTick>
 8005b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b72:	e008      	b.n	8005b86 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b74:	f7fe f9be 	bl	8003ef4 <HAL_GetTick>
 8005b78:	4602      	mov	r2, r0
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	1ad3      	subs	r3, r2, r3
 8005b7e:	2b64      	cmp	r3, #100	; 0x64
 8005b80:	d901      	bls.n	8005b86 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005b82:	2303      	movs	r3, #3
 8005b84:	e20b      	b.n	8005f9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b86:	4b57      	ldr	r3, [pc, #348]	; (8005ce4 <HAL_RCC_OscConfig+0x280>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d1f0      	bne.n	8005b74 <HAL_RCC_OscConfig+0x110>
 8005b92:	e000      	b.n	8005b96 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f003 0302 	and.w	r3, r3, #2
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d069      	beq.n	8005c76 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005ba2:	4b50      	ldr	r3, [pc, #320]	; (8005ce4 <HAL_RCC_OscConfig+0x280>)
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	f003 030c 	and.w	r3, r3, #12
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00b      	beq.n	8005bc6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005bae:	4b4d      	ldr	r3, [pc, #308]	; (8005ce4 <HAL_RCC_OscConfig+0x280>)
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	f003 030c 	and.w	r3, r3, #12
 8005bb6:	2b08      	cmp	r3, #8
 8005bb8:	d11c      	bne.n	8005bf4 <HAL_RCC_OscConfig+0x190>
 8005bba:	4b4a      	ldr	r3, [pc, #296]	; (8005ce4 <HAL_RCC_OscConfig+0x280>)
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d116      	bne.n	8005bf4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bc6:	4b47      	ldr	r3, [pc, #284]	; (8005ce4 <HAL_RCC_OscConfig+0x280>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 0302 	and.w	r3, r3, #2
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d005      	beq.n	8005bde <HAL_RCC_OscConfig+0x17a>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d001      	beq.n	8005bde <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e1df      	b.n	8005f9e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bde:	4b41      	ldr	r3, [pc, #260]	; (8005ce4 <HAL_RCC_OscConfig+0x280>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	00db      	lsls	r3, r3, #3
 8005bec:	493d      	ldr	r1, [pc, #244]	; (8005ce4 <HAL_RCC_OscConfig+0x280>)
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bf2:	e040      	b.n	8005c76 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d023      	beq.n	8005c44 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005bfc:	4b39      	ldr	r3, [pc, #228]	; (8005ce4 <HAL_RCC_OscConfig+0x280>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a38      	ldr	r2, [pc, #224]	; (8005ce4 <HAL_RCC_OscConfig+0x280>)
 8005c02:	f043 0301 	orr.w	r3, r3, #1
 8005c06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c08:	f7fe f974 	bl	8003ef4 <HAL_GetTick>
 8005c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c0e:	e008      	b.n	8005c22 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c10:	f7fe f970 	bl	8003ef4 <HAL_GetTick>
 8005c14:	4602      	mov	r2, r0
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	1ad3      	subs	r3, r2, r3
 8005c1a:	2b02      	cmp	r3, #2
 8005c1c:	d901      	bls.n	8005c22 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005c1e:	2303      	movs	r3, #3
 8005c20:	e1bd      	b.n	8005f9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c22:	4b30      	ldr	r3, [pc, #192]	; (8005ce4 <HAL_RCC_OscConfig+0x280>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f003 0302 	and.w	r3, r3, #2
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d0f0      	beq.n	8005c10 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c2e:	4b2d      	ldr	r3, [pc, #180]	; (8005ce4 <HAL_RCC_OscConfig+0x280>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	691b      	ldr	r3, [r3, #16]
 8005c3a:	00db      	lsls	r3, r3, #3
 8005c3c:	4929      	ldr	r1, [pc, #164]	; (8005ce4 <HAL_RCC_OscConfig+0x280>)
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	600b      	str	r3, [r1, #0]
 8005c42:	e018      	b.n	8005c76 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c44:	4b27      	ldr	r3, [pc, #156]	; (8005ce4 <HAL_RCC_OscConfig+0x280>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a26      	ldr	r2, [pc, #152]	; (8005ce4 <HAL_RCC_OscConfig+0x280>)
 8005c4a:	f023 0301 	bic.w	r3, r3, #1
 8005c4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c50:	f7fe f950 	bl	8003ef4 <HAL_GetTick>
 8005c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c56:	e008      	b.n	8005c6a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c58:	f7fe f94c 	bl	8003ef4 <HAL_GetTick>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	1ad3      	subs	r3, r2, r3
 8005c62:	2b02      	cmp	r3, #2
 8005c64:	d901      	bls.n	8005c6a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e199      	b.n	8005f9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c6a:	4b1e      	ldr	r3, [pc, #120]	; (8005ce4 <HAL_RCC_OscConfig+0x280>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f003 0302 	and.w	r3, r3, #2
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d1f0      	bne.n	8005c58 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 0308 	and.w	r3, r3, #8
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d038      	beq.n	8005cf4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	695b      	ldr	r3, [r3, #20]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d019      	beq.n	8005cbe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c8a:	4b16      	ldr	r3, [pc, #88]	; (8005ce4 <HAL_RCC_OscConfig+0x280>)
 8005c8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c8e:	4a15      	ldr	r2, [pc, #84]	; (8005ce4 <HAL_RCC_OscConfig+0x280>)
 8005c90:	f043 0301 	orr.w	r3, r3, #1
 8005c94:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c96:	f7fe f92d 	bl	8003ef4 <HAL_GetTick>
 8005c9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c9c:	e008      	b.n	8005cb0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c9e:	f7fe f929 	bl	8003ef4 <HAL_GetTick>
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	1ad3      	subs	r3, r2, r3
 8005ca8:	2b02      	cmp	r3, #2
 8005caa:	d901      	bls.n	8005cb0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005cac:	2303      	movs	r3, #3
 8005cae:	e176      	b.n	8005f9e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cb0:	4b0c      	ldr	r3, [pc, #48]	; (8005ce4 <HAL_RCC_OscConfig+0x280>)
 8005cb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cb4:	f003 0302 	and.w	r3, r3, #2
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d0f0      	beq.n	8005c9e <HAL_RCC_OscConfig+0x23a>
 8005cbc:	e01a      	b.n	8005cf4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005cbe:	4b09      	ldr	r3, [pc, #36]	; (8005ce4 <HAL_RCC_OscConfig+0x280>)
 8005cc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cc2:	4a08      	ldr	r2, [pc, #32]	; (8005ce4 <HAL_RCC_OscConfig+0x280>)
 8005cc4:	f023 0301 	bic.w	r3, r3, #1
 8005cc8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cca:	f7fe f913 	bl	8003ef4 <HAL_GetTick>
 8005cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cd0:	e00a      	b.n	8005ce8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005cd2:	f7fe f90f 	bl	8003ef4 <HAL_GetTick>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	1ad3      	subs	r3, r2, r3
 8005cdc:	2b02      	cmp	r3, #2
 8005cde:	d903      	bls.n	8005ce8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005ce0:	2303      	movs	r3, #3
 8005ce2:	e15c      	b.n	8005f9e <HAL_RCC_OscConfig+0x53a>
 8005ce4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ce8:	4b91      	ldr	r3, [pc, #580]	; (8005f30 <HAL_RCC_OscConfig+0x4cc>)
 8005cea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cec:	f003 0302 	and.w	r3, r3, #2
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d1ee      	bne.n	8005cd2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 0304 	and.w	r3, r3, #4
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	f000 80a4 	beq.w	8005e4a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d02:	4b8b      	ldr	r3, [pc, #556]	; (8005f30 <HAL_RCC_OscConfig+0x4cc>)
 8005d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d10d      	bne.n	8005d2a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d0e:	4b88      	ldr	r3, [pc, #544]	; (8005f30 <HAL_RCC_OscConfig+0x4cc>)
 8005d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d12:	4a87      	ldr	r2, [pc, #540]	; (8005f30 <HAL_RCC_OscConfig+0x4cc>)
 8005d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d18:	6413      	str	r3, [r2, #64]	; 0x40
 8005d1a:	4b85      	ldr	r3, [pc, #532]	; (8005f30 <HAL_RCC_OscConfig+0x4cc>)
 8005d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d22:	60bb      	str	r3, [r7, #8]
 8005d24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d26:	2301      	movs	r3, #1
 8005d28:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d2a:	4b82      	ldr	r3, [pc, #520]	; (8005f34 <HAL_RCC_OscConfig+0x4d0>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d118      	bne.n	8005d68 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005d36:	4b7f      	ldr	r3, [pc, #508]	; (8005f34 <HAL_RCC_OscConfig+0x4d0>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a7e      	ldr	r2, [pc, #504]	; (8005f34 <HAL_RCC_OscConfig+0x4d0>)
 8005d3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d42:	f7fe f8d7 	bl	8003ef4 <HAL_GetTick>
 8005d46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d48:	e008      	b.n	8005d5c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d4a:	f7fe f8d3 	bl	8003ef4 <HAL_GetTick>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	1ad3      	subs	r3, r2, r3
 8005d54:	2b64      	cmp	r3, #100	; 0x64
 8005d56:	d901      	bls.n	8005d5c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005d58:	2303      	movs	r3, #3
 8005d5a:	e120      	b.n	8005f9e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d5c:	4b75      	ldr	r3, [pc, #468]	; (8005f34 <HAL_RCC_OscConfig+0x4d0>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d0f0      	beq.n	8005d4a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d106      	bne.n	8005d7e <HAL_RCC_OscConfig+0x31a>
 8005d70:	4b6f      	ldr	r3, [pc, #444]	; (8005f30 <HAL_RCC_OscConfig+0x4cc>)
 8005d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d74:	4a6e      	ldr	r2, [pc, #440]	; (8005f30 <HAL_RCC_OscConfig+0x4cc>)
 8005d76:	f043 0301 	orr.w	r3, r3, #1
 8005d7a:	6713      	str	r3, [r2, #112]	; 0x70
 8005d7c:	e02d      	b.n	8005dda <HAL_RCC_OscConfig+0x376>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d10c      	bne.n	8005da0 <HAL_RCC_OscConfig+0x33c>
 8005d86:	4b6a      	ldr	r3, [pc, #424]	; (8005f30 <HAL_RCC_OscConfig+0x4cc>)
 8005d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d8a:	4a69      	ldr	r2, [pc, #420]	; (8005f30 <HAL_RCC_OscConfig+0x4cc>)
 8005d8c:	f023 0301 	bic.w	r3, r3, #1
 8005d90:	6713      	str	r3, [r2, #112]	; 0x70
 8005d92:	4b67      	ldr	r3, [pc, #412]	; (8005f30 <HAL_RCC_OscConfig+0x4cc>)
 8005d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d96:	4a66      	ldr	r2, [pc, #408]	; (8005f30 <HAL_RCC_OscConfig+0x4cc>)
 8005d98:	f023 0304 	bic.w	r3, r3, #4
 8005d9c:	6713      	str	r3, [r2, #112]	; 0x70
 8005d9e:	e01c      	b.n	8005dda <HAL_RCC_OscConfig+0x376>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	2b05      	cmp	r3, #5
 8005da6:	d10c      	bne.n	8005dc2 <HAL_RCC_OscConfig+0x35e>
 8005da8:	4b61      	ldr	r3, [pc, #388]	; (8005f30 <HAL_RCC_OscConfig+0x4cc>)
 8005daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dac:	4a60      	ldr	r2, [pc, #384]	; (8005f30 <HAL_RCC_OscConfig+0x4cc>)
 8005dae:	f043 0304 	orr.w	r3, r3, #4
 8005db2:	6713      	str	r3, [r2, #112]	; 0x70
 8005db4:	4b5e      	ldr	r3, [pc, #376]	; (8005f30 <HAL_RCC_OscConfig+0x4cc>)
 8005db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005db8:	4a5d      	ldr	r2, [pc, #372]	; (8005f30 <HAL_RCC_OscConfig+0x4cc>)
 8005dba:	f043 0301 	orr.w	r3, r3, #1
 8005dbe:	6713      	str	r3, [r2, #112]	; 0x70
 8005dc0:	e00b      	b.n	8005dda <HAL_RCC_OscConfig+0x376>
 8005dc2:	4b5b      	ldr	r3, [pc, #364]	; (8005f30 <HAL_RCC_OscConfig+0x4cc>)
 8005dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dc6:	4a5a      	ldr	r2, [pc, #360]	; (8005f30 <HAL_RCC_OscConfig+0x4cc>)
 8005dc8:	f023 0301 	bic.w	r3, r3, #1
 8005dcc:	6713      	str	r3, [r2, #112]	; 0x70
 8005dce:	4b58      	ldr	r3, [pc, #352]	; (8005f30 <HAL_RCC_OscConfig+0x4cc>)
 8005dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dd2:	4a57      	ldr	r2, [pc, #348]	; (8005f30 <HAL_RCC_OscConfig+0x4cc>)
 8005dd4:	f023 0304 	bic.w	r3, r3, #4
 8005dd8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d015      	beq.n	8005e0e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005de2:	f7fe f887 	bl	8003ef4 <HAL_GetTick>
 8005de6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005de8:	e00a      	b.n	8005e00 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dea:	f7fe f883 	bl	8003ef4 <HAL_GetTick>
 8005dee:	4602      	mov	r2, r0
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	1ad3      	subs	r3, r2, r3
 8005df4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d901      	bls.n	8005e00 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	e0ce      	b.n	8005f9e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e00:	4b4b      	ldr	r3, [pc, #300]	; (8005f30 <HAL_RCC_OscConfig+0x4cc>)
 8005e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e04:	f003 0302 	and.w	r3, r3, #2
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d0ee      	beq.n	8005dea <HAL_RCC_OscConfig+0x386>
 8005e0c:	e014      	b.n	8005e38 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e0e:	f7fe f871 	bl	8003ef4 <HAL_GetTick>
 8005e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e14:	e00a      	b.n	8005e2c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e16:	f7fe f86d 	bl	8003ef4 <HAL_GetTick>
 8005e1a:	4602      	mov	r2, r0
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	1ad3      	subs	r3, r2, r3
 8005e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d901      	bls.n	8005e2c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005e28:	2303      	movs	r3, #3
 8005e2a:	e0b8      	b.n	8005f9e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e2c:	4b40      	ldr	r3, [pc, #256]	; (8005f30 <HAL_RCC_OscConfig+0x4cc>)
 8005e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e30:	f003 0302 	and.w	r3, r3, #2
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d1ee      	bne.n	8005e16 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005e38:	7dfb      	ldrb	r3, [r7, #23]
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d105      	bne.n	8005e4a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e3e:	4b3c      	ldr	r3, [pc, #240]	; (8005f30 <HAL_RCC_OscConfig+0x4cc>)
 8005e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e42:	4a3b      	ldr	r2, [pc, #236]	; (8005f30 <HAL_RCC_OscConfig+0x4cc>)
 8005e44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e48:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	699b      	ldr	r3, [r3, #24]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	f000 80a4 	beq.w	8005f9c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e54:	4b36      	ldr	r3, [pc, #216]	; (8005f30 <HAL_RCC_OscConfig+0x4cc>)
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	f003 030c 	and.w	r3, r3, #12
 8005e5c:	2b08      	cmp	r3, #8
 8005e5e:	d06b      	beq.n	8005f38 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	699b      	ldr	r3, [r3, #24]
 8005e64:	2b02      	cmp	r3, #2
 8005e66:	d149      	bne.n	8005efc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e68:	4b31      	ldr	r3, [pc, #196]	; (8005f30 <HAL_RCC_OscConfig+0x4cc>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a30      	ldr	r2, [pc, #192]	; (8005f30 <HAL_RCC_OscConfig+0x4cc>)
 8005e6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e74:	f7fe f83e 	bl	8003ef4 <HAL_GetTick>
 8005e78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e7a:	e008      	b.n	8005e8e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e7c:	f7fe f83a 	bl	8003ef4 <HAL_GetTick>
 8005e80:	4602      	mov	r2, r0
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	1ad3      	subs	r3, r2, r3
 8005e86:	2b02      	cmp	r3, #2
 8005e88:	d901      	bls.n	8005e8e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005e8a:	2303      	movs	r3, #3
 8005e8c:	e087      	b.n	8005f9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e8e:	4b28      	ldr	r3, [pc, #160]	; (8005f30 <HAL_RCC_OscConfig+0x4cc>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d1f0      	bne.n	8005e7c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	69da      	ldr	r2, [r3, #28]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a1b      	ldr	r3, [r3, #32]
 8005ea2:	431a      	orrs	r2, r3
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea8:	019b      	lsls	r3, r3, #6
 8005eaa:	431a      	orrs	r2, r3
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb0:	085b      	lsrs	r3, r3, #1
 8005eb2:	3b01      	subs	r3, #1
 8005eb4:	041b      	lsls	r3, r3, #16
 8005eb6:	431a      	orrs	r2, r3
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ebc:	061b      	lsls	r3, r3, #24
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	4a1b      	ldr	r2, [pc, #108]	; (8005f30 <HAL_RCC_OscConfig+0x4cc>)
 8005ec2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ec6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ec8:	4b19      	ldr	r3, [pc, #100]	; (8005f30 <HAL_RCC_OscConfig+0x4cc>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a18      	ldr	r2, [pc, #96]	; (8005f30 <HAL_RCC_OscConfig+0x4cc>)
 8005ece:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ed2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ed4:	f7fe f80e 	bl	8003ef4 <HAL_GetTick>
 8005ed8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005eda:	e008      	b.n	8005eee <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005edc:	f7fe f80a 	bl	8003ef4 <HAL_GetTick>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	1ad3      	subs	r3, r2, r3
 8005ee6:	2b02      	cmp	r3, #2
 8005ee8:	d901      	bls.n	8005eee <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8005eea:	2303      	movs	r3, #3
 8005eec:	e057      	b.n	8005f9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005eee:	4b10      	ldr	r3, [pc, #64]	; (8005f30 <HAL_RCC_OscConfig+0x4cc>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d0f0      	beq.n	8005edc <HAL_RCC_OscConfig+0x478>
 8005efa:	e04f      	b.n	8005f9c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005efc:	4b0c      	ldr	r3, [pc, #48]	; (8005f30 <HAL_RCC_OscConfig+0x4cc>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a0b      	ldr	r2, [pc, #44]	; (8005f30 <HAL_RCC_OscConfig+0x4cc>)
 8005f02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f08:	f7fd fff4 	bl	8003ef4 <HAL_GetTick>
 8005f0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f0e:	e008      	b.n	8005f22 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f10:	f7fd fff0 	bl	8003ef4 <HAL_GetTick>
 8005f14:	4602      	mov	r2, r0
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	2b02      	cmp	r3, #2
 8005f1c:	d901      	bls.n	8005f22 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8005f1e:	2303      	movs	r3, #3
 8005f20:	e03d      	b.n	8005f9e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f22:	4b03      	ldr	r3, [pc, #12]	; (8005f30 <HAL_RCC_OscConfig+0x4cc>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d1f0      	bne.n	8005f10 <HAL_RCC_OscConfig+0x4ac>
 8005f2e:	e035      	b.n	8005f9c <HAL_RCC_OscConfig+0x538>
 8005f30:	40023800 	.word	0x40023800
 8005f34:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005f38:	4b1b      	ldr	r3, [pc, #108]	; (8005fa8 <HAL_RCC_OscConfig+0x544>)
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	699b      	ldr	r3, [r3, #24]
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d028      	beq.n	8005f98 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d121      	bne.n	8005f98 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d11a      	bne.n	8005f98 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f62:	68fa      	ldr	r2, [r7, #12]
 8005f64:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005f68:	4013      	ands	r3, r2
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005f6e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d111      	bne.n	8005f98 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f7e:	085b      	lsrs	r3, r3, #1
 8005f80:	3b01      	subs	r3, #1
 8005f82:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d107      	bne.n	8005f98 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f92:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d001      	beq.n	8005f9c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e000      	b.n	8005f9e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3718      	adds	r7, #24
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	40023800 	.word	0x40023800

08005fac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b084      	sub	sp, #16
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d101      	bne.n	8005fc4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e0d0      	b.n	8006166 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005fc4:	4b6a      	ldr	r3, [pc, #424]	; (8006170 <HAL_RCC_ClockConfig+0x1c4>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f003 030f 	and.w	r3, r3, #15
 8005fcc:	683a      	ldr	r2, [r7, #0]
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d910      	bls.n	8005ff4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fd2:	4b67      	ldr	r3, [pc, #412]	; (8006170 <HAL_RCC_ClockConfig+0x1c4>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f023 020f 	bic.w	r2, r3, #15
 8005fda:	4965      	ldr	r1, [pc, #404]	; (8006170 <HAL_RCC_ClockConfig+0x1c4>)
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fe2:	4b63      	ldr	r3, [pc, #396]	; (8006170 <HAL_RCC_ClockConfig+0x1c4>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f003 030f 	and.w	r3, r3, #15
 8005fea:	683a      	ldr	r2, [r7, #0]
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d001      	beq.n	8005ff4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	e0b8      	b.n	8006166 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f003 0302 	and.w	r3, r3, #2
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d020      	beq.n	8006042 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f003 0304 	and.w	r3, r3, #4
 8006008:	2b00      	cmp	r3, #0
 800600a:	d005      	beq.n	8006018 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800600c:	4b59      	ldr	r3, [pc, #356]	; (8006174 <HAL_RCC_ClockConfig+0x1c8>)
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	4a58      	ldr	r2, [pc, #352]	; (8006174 <HAL_RCC_ClockConfig+0x1c8>)
 8006012:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006016:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 0308 	and.w	r3, r3, #8
 8006020:	2b00      	cmp	r3, #0
 8006022:	d005      	beq.n	8006030 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006024:	4b53      	ldr	r3, [pc, #332]	; (8006174 <HAL_RCC_ClockConfig+0x1c8>)
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	4a52      	ldr	r2, [pc, #328]	; (8006174 <HAL_RCC_ClockConfig+0x1c8>)
 800602a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800602e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006030:	4b50      	ldr	r3, [pc, #320]	; (8006174 <HAL_RCC_ClockConfig+0x1c8>)
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	494d      	ldr	r1, [pc, #308]	; (8006174 <HAL_RCC_ClockConfig+0x1c8>)
 800603e:	4313      	orrs	r3, r2
 8006040:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f003 0301 	and.w	r3, r3, #1
 800604a:	2b00      	cmp	r3, #0
 800604c:	d040      	beq.n	80060d0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	2b01      	cmp	r3, #1
 8006054:	d107      	bne.n	8006066 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006056:	4b47      	ldr	r3, [pc, #284]	; (8006174 <HAL_RCC_ClockConfig+0x1c8>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800605e:	2b00      	cmp	r3, #0
 8006060:	d115      	bne.n	800608e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	e07f      	b.n	8006166 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	2b02      	cmp	r3, #2
 800606c:	d107      	bne.n	800607e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800606e:	4b41      	ldr	r3, [pc, #260]	; (8006174 <HAL_RCC_ClockConfig+0x1c8>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006076:	2b00      	cmp	r3, #0
 8006078:	d109      	bne.n	800608e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	e073      	b.n	8006166 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800607e:	4b3d      	ldr	r3, [pc, #244]	; (8006174 <HAL_RCC_ClockConfig+0x1c8>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f003 0302 	and.w	r3, r3, #2
 8006086:	2b00      	cmp	r3, #0
 8006088:	d101      	bne.n	800608e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	e06b      	b.n	8006166 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800608e:	4b39      	ldr	r3, [pc, #228]	; (8006174 <HAL_RCC_ClockConfig+0x1c8>)
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	f023 0203 	bic.w	r2, r3, #3
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	4936      	ldr	r1, [pc, #216]	; (8006174 <HAL_RCC_ClockConfig+0x1c8>)
 800609c:	4313      	orrs	r3, r2
 800609e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060a0:	f7fd ff28 	bl	8003ef4 <HAL_GetTick>
 80060a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060a6:	e00a      	b.n	80060be <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060a8:	f7fd ff24 	bl	8003ef4 <HAL_GetTick>
 80060ac:	4602      	mov	r2, r0
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	1ad3      	subs	r3, r2, r3
 80060b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d901      	bls.n	80060be <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80060ba:	2303      	movs	r3, #3
 80060bc:	e053      	b.n	8006166 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060be:	4b2d      	ldr	r3, [pc, #180]	; (8006174 <HAL_RCC_ClockConfig+0x1c8>)
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	f003 020c 	and.w	r2, r3, #12
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	009b      	lsls	r3, r3, #2
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d1eb      	bne.n	80060a8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80060d0:	4b27      	ldr	r3, [pc, #156]	; (8006170 <HAL_RCC_ClockConfig+0x1c4>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 030f 	and.w	r3, r3, #15
 80060d8:	683a      	ldr	r2, [r7, #0]
 80060da:	429a      	cmp	r2, r3
 80060dc:	d210      	bcs.n	8006100 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060de:	4b24      	ldr	r3, [pc, #144]	; (8006170 <HAL_RCC_ClockConfig+0x1c4>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f023 020f 	bic.w	r2, r3, #15
 80060e6:	4922      	ldr	r1, [pc, #136]	; (8006170 <HAL_RCC_ClockConfig+0x1c4>)
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060ee:	4b20      	ldr	r3, [pc, #128]	; (8006170 <HAL_RCC_ClockConfig+0x1c4>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f003 030f 	and.w	r3, r3, #15
 80060f6:	683a      	ldr	r2, [r7, #0]
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d001      	beq.n	8006100 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	e032      	b.n	8006166 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 0304 	and.w	r3, r3, #4
 8006108:	2b00      	cmp	r3, #0
 800610a:	d008      	beq.n	800611e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800610c:	4b19      	ldr	r3, [pc, #100]	; (8006174 <HAL_RCC_ClockConfig+0x1c8>)
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	4916      	ldr	r1, [pc, #88]	; (8006174 <HAL_RCC_ClockConfig+0x1c8>)
 800611a:	4313      	orrs	r3, r2
 800611c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f003 0308 	and.w	r3, r3, #8
 8006126:	2b00      	cmp	r3, #0
 8006128:	d009      	beq.n	800613e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800612a:	4b12      	ldr	r3, [pc, #72]	; (8006174 <HAL_RCC_ClockConfig+0x1c8>)
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	691b      	ldr	r3, [r3, #16]
 8006136:	00db      	lsls	r3, r3, #3
 8006138:	490e      	ldr	r1, [pc, #56]	; (8006174 <HAL_RCC_ClockConfig+0x1c8>)
 800613a:	4313      	orrs	r3, r2
 800613c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800613e:	f000 f821 	bl	8006184 <HAL_RCC_GetSysClockFreq>
 8006142:	4602      	mov	r2, r0
 8006144:	4b0b      	ldr	r3, [pc, #44]	; (8006174 <HAL_RCC_ClockConfig+0x1c8>)
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	091b      	lsrs	r3, r3, #4
 800614a:	f003 030f 	and.w	r3, r3, #15
 800614e:	490a      	ldr	r1, [pc, #40]	; (8006178 <HAL_RCC_ClockConfig+0x1cc>)
 8006150:	5ccb      	ldrb	r3, [r1, r3]
 8006152:	fa22 f303 	lsr.w	r3, r2, r3
 8006156:	4a09      	ldr	r2, [pc, #36]	; (800617c <HAL_RCC_ClockConfig+0x1d0>)
 8006158:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800615a:	4b09      	ldr	r3, [pc, #36]	; (8006180 <HAL_RCC_ClockConfig+0x1d4>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4618      	mov	r0, r3
 8006160:	f7fd fe84 	bl	8003e6c <HAL_InitTick>

  return HAL_OK;
 8006164:	2300      	movs	r3, #0
}
 8006166:	4618      	mov	r0, r3
 8006168:	3710      	adds	r7, #16
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
 800616e:	bf00      	nop
 8006170:	40023c00 	.word	0x40023c00
 8006174:	40023800 	.word	0x40023800
 8006178:	0800d570 	.word	0x0800d570
 800617c:	200000bc 	.word	0x200000bc
 8006180:	200000c0 	.word	0x200000c0

08006184 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006184:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006188:	b094      	sub	sp, #80	; 0x50
 800618a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800618c:	2300      	movs	r3, #0
 800618e:	647b      	str	r3, [r7, #68]	; 0x44
 8006190:	2300      	movs	r3, #0
 8006192:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006194:	2300      	movs	r3, #0
 8006196:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8006198:	2300      	movs	r3, #0
 800619a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800619c:	4b79      	ldr	r3, [pc, #484]	; (8006384 <HAL_RCC_GetSysClockFreq+0x200>)
 800619e:	689b      	ldr	r3, [r3, #8]
 80061a0:	f003 030c 	and.w	r3, r3, #12
 80061a4:	2b08      	cmp	r3, #8
 80061a6:	d00d      	beq.n	80061c4 <HAL_RCC_GetSysClockFreq+0x40>
 80061a8:	2b08      	cmp	r3, #8
 80061aa:	f200 80e1 	bhi.w	8006370 <HAL_RCC_GetSysClockFreq+0x1ec>
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d002      	beq.n	80061b8 <HAL_RCC_GetSysClockFreq+0x34>
 80061b2:	2b04      	cmp	r3, #4
 80061b4:	d003      	beq.n	80061be <HAL_RCC_GetSysClockFreq+0x3a>
 80061b6:	e0db      	b.n	8006370 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80061b8:	4b73      	ldr	r3, [pc, #460]	; (8006388 <HAL_RCC_GetSysClockFreq+0x204>)
 80061ba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80061bc:	e0db      	b.n	8006376 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80061be:	4b73      	ldr	r3, [pc, #460]	; (800638c <HAL_RCC_GetSysClockFreq+0x208>)
 80061c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80061c2:	e0d8      	b.n	8006376 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80061c4:	4b6f      	ldr	r3, [pc, #444]	; (8006384 <HAL_RCC_GetSysClockFreq+0x200>)
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061cc:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80061ce:	4b6d      	ldr	r3, [pc, #436]	; (8006384 <HAL_RCC_GetSysClockFreq+0x200>)
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d063      	beq.n	80062a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061da:	4b6a      	ldr	r3, [pc, #424]	; (8006384 <HAL_RCC_GetSysClockFreq+0x200>)
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	099b      	lsrs	r3, r3, #6
 80061e0:	2200      	movs	r2, #0
 80061e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80061e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80061e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061ec:	633b      	str	r3, [r7, #48]	; 0x30
 80061ee:	2300      	movs	r3, #0
 80061f0:	637b      	str	r3, [r7, #52]	; 0x34
 80061f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80061f6:	4622      	mov	r2, r4
 80061f8:	462b      	mov	r3, r5
 80061fa:	f04f 0000 	mov.w	r0, #0
 80061fe:	f04f 0100 	mov.w	r1, #0
 8006202:	0159      	lsls	r1, r3, #5
 8006204:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006208:	0150      	lsls	r0, r2, #5
 800620a:	4602      	mov	r2, r0
 800620c:	460b      	mov	r3, r1
 800620e:	4621      	mov	r1, r4
 8006210:	1a51      	subs	r1, r2, r1
 8006212:	6139      	str	r1, [r7, #16]
 8006214:	4629      	mov	r1, r5
 8006216:	eb63 0301 	sbc.w	r3, r3, r1
 800621a:	617b      	str	r3, [r7, #20]
 800621c:	f04f 0200 	mov.w	r2, #0
 8006220:	f04f 0300 	mov.w	r3, #0
 8006224:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006228:	4659      	mov	r1, fp
 800622a:	018b      	lsls	r3, r1, #6
 800622c:	4651      	mov	r1, sl
 800622e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006232:	4651      	mov	r1, sl
 8006234:	018a      	lsls	r2, r1, #6
 8006236:	4651      	mov	r1, sl
 8006238:	ebb2 0801 	subs.w	r8, r2, r1
 800623c:	4659      	mov	r1, fp
 800623e:	eb63 0901 	sbc.w	r9, r3, r1
 8006242:	f04f 0200 	mov.w	r2, #0
 8006246:	f04f 0300 	mov.w	r3, #0
 800624a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800624e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006252:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006256:	4690      	mov	r8, r2
 8006258:	4699      	mov	r9, r3
 800625a:	4623      	mov	r3, r4
 800625c:	eb18 0303 	adds.w	r3, r8, r3
 8006260:	60bb      	str	r3, [r7, #8]
 8006262:	462b      	mov	r3, r5
 8006264:	eb49 0303 	adc.w	r3, r9, r3
 8006268:	60fb      	str	r3, [r7, #12]
 800626a:	f04f 0200 	mov.w	r2, #0
 800626e:	f04f 0300 	mov.w	r3, #0
 8006272:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006276:	4629      	mov	r1, r5
 8006278:	024b      	lsls	r3, r1, #9
 800627a:	4621      	mov	r1, r4
 800627c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006280:	4621      	mov	r1, r4
 8006282:	024a      	lsls	r2, r1, #9
 8006284:	4610      	mov	r0, r2
 8006286:	4619      	mov	r1, r3
 8006288:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800628a:	2200      	movs	r2, #0
 800628c:	62bb      	str	r3, [r7, #40]	; 0x28
 800628e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006290:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006294:	f7fa f87c 	bl	8000390 <__aeabi_uldivmod>
 8006298:	4602      	mov	r2, r0
 800629a:	460b      	mov	r3, r1
 800629c:	4613      	mov	r3, r2
 800629e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062a0:	e058      	b.n	8006354 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062a2:	4b38      	ldr	r3, [pc, #224]	; (8006384 <HAL_RCC_GetSysClockFreq+0x200>)
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	099b      	lsrs	r3, r3, #6
 80062a8:	2200      	movs	r2, #0
 80062aa:	4618      	mov	r0, r3
 80062ac:	4611      	mov	r1, r2
 80062ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80062b2:	623b      	str	r3, [r7, #32]
 80062b4:	2300      	movs	r3, #0
 80062b6:	627b      	str	r3, [r7, #36]	; 0x24
 80062b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80062bc:	4642      	mov	r2, r8
 80062be:	464b      	mov	r3, r9
 80062c0:	f04f 0000 	mov.w	r0, #0
 80062c4:	f04f 0100 	mov.w	r1, #0
 80062c8:	0159      	lsls	r1, r3, #5
 80062ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80062ce:	0150      	lsls	r0, r2, #5
 80062d0:	4602      	mov	r2, r0
 80062d2:	460b      	mov	r3, r1
 80062d4:	4641      	mov	r1, r8
 80062d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80062da:	4649      	mov	r1, r9
 80062dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80062e0:	f04f 0200 	mov.w	r2, #0
 80062e4:	f04f 0300 	mov.w	r3, #0
 80062e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80062ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80062f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80062f4:	ebb2 040a 	subs.w	r4, r2, sl
 80062f8:	eb63 050b 	sbc.w	r5, r3, fp
 80062fc:	f04f 0200 	mov.w	r2, #0
 8006300:	f04f 0300 	mov.w	r3, #0
 8006304:	00eb      	lsls	r3, r5, #3
 8006306:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800630a:	00e2      	lsls	r2, r4, #3
 800630c:	4614      	mov	r4, r2
 800630e:	461d      	mov	r5, r3
 8006310:	4643      	mov	r3, r8
 8006312:	18e3      	adds	r3, r4, r3
 8006314:	603b      	str	r3, [r7, #0]
 8006316:	464b      	mov	r3, r9
 8006318:	eb45 0303 	adc.w	r3, r5, r3
 800631c:	607b      	str	r3, [r7, #4]
 800631e:	f04f 0200 	mov.w	r2, #0
 8006322:	f04f 0300 	mov.w	r3, #0
 8006326:	e9d7 4500 	ldrd	r4, r5, [r7]
 800632a:	4629      	mov	r1, r5
 800632c:	028b      	lsls	r3, r1, #10
 800632e:	4621      	mov	r1, r4
 8006330:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006334:	4621      	mov	r1, r4
 8006336:	028a      	lsls	r2, r1, #10
 8006338:	4610      	mov	r0, r2
 800633a:	4619      	mov	r1, r3
 800633c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800633e:	2200      	movs	r2, #0
 8006340:	61bb      	str	r3, [r7, #24]
 8006342:	61fa      	str	r2, [r7, #28]
 8006344:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006348:	f7fa f822 	bl	8000390 <__aeabi_uldivmod>
 800634c:	4602      	mov	r2, r0
 800634e:	460b      	mov	r3, r1
 8006350:	4613      	mov	r3, r2
 8006352:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006354:	4b0b      	ldr	r3, [pc, #44]	; (8006384 <HAL_RCC_GetSysClockFreq+0x200>)
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	0c1b      	lsrs	r3, r3, #16
 800635a:	f003 0303 	and.w	r3, r3, #3
 800635e:	3301      	adds	r3, #1
 8006360:	005b      	lsls	r3, r3, #1
 8006362:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8006364:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006366:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006368:	fbb2 f3f3 	udiv	r3, r2, r3
 800636c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800636e:	e002      	b.n	8006376 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006370:	4b05      	ldr	r3, [pc, #20]	; (8006388 <HAL_RCC_GetSysClockFreq+0x204>)
 8006372:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006374:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006376:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006378:	4618      	mov	r0, r3
 800637a:	3750      	adds	r7, #80	; 0x50
 800637c:	46bd      	mov	sp, r7
 800637e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006382:	bf00      	nop
 8006384:	40023800 	.word	0x40023800
 8006388:	00f42400 	.word	0x00f42400
 800638c:	007a1200 	.word	0x007a1200

08006390 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006390:	b480      	push	{r7}
 8006392:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006394:	4b03      	ldr	r3, [pc, #12]	; (80063a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006396:	681b      	ldr	r3, [r3, #0]
}
 8006398:	4618      	mov	r0, r3
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr
 80063a2:	bf00      	nop
 80063a4:	200000bc 	.word	0x200000bc

080063a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80063ac:	f7ff fff0 	bl	8006390 <HAL_RCC_GetHCLKFreq>
 80063b0:	4602      	mov	r2, r0
 80063b2:	4b05      	ldr	r3, [pc, #20]	; (80063c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	0a9b      	lsrs	r3, r3, #10
 80063b8:	f003 0307 	and.w	r3, r3, #7
 80063bc:	4903      	ldr	r1, [pc, #12]	; (80063cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80063be:	5ccb      	ldrb	r3, [r1, r3]
 80063c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	40023800 	.word	0x40023800
 80063cc:	0800d580 	.word	0x0800d580

080063d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80063d4:	f7ff ffdc 	bl	8006390 <HAL_RCC_GetHCLKFreq>
 80063d8:	4602      	mov	r2, r0
 80063da:	4b05      	ldr	r3, [pc, #20]	; (80063f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	0b5b      	lsrs	r3, r3, #13
 80063e0:	f003 0307 	and.w	r3, r3, #7
 80063e4:	4903      	ldr	r1, [pc, #12]	; (80063f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80063e6:	5ccb      	ldrb	r3, [r1, r3]
 80063e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	bd80      	pop	{r7, pc}
 80063f0:	40023800 	.word	0x40023800
 80063f4:	0800d580 	.word	0x0800d580

080063f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b088      	sub	sp, #32
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006400:	2300      	movs	r3, #0
 8006402:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006404:	2300      	movs	r3, #0
 8006406:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 8006408:	2300      	movs	r3, #0
 800640a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800640c:	2300      	movs	r3, #0
 800640e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 0301 	and.w	r3, r3, #1
 8006418:	2b00      	cmp	r3, #0
 800641a:	d012      	beq.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800641c:	4b65      	ldr	r3, [pc, #404]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	4a64      	ldr	r2, [pc, #400]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006422:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006426:	6093      	str	r3, [r2, #8]
 8006428:	4b62      	ldr	r3, [pc, #392]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800642a:	689a      	ldr	r2, [r3, #8]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006430:	4960      	ldr	r1, [pc, #384]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006432:	4313      	orrs	r3, r2
 8006434:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800643a:	2b00      	cmp	r3, #0
 800643c:	d101      	bne.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 800643e:	2301      	movs	r3, #1
 8006440:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800644a:	2b00      	cmp	r3, #0
 800644c:	d017      	beq.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800644e:	4b59      	ldr	r3, [pc, #356]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006450:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006454:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800645c:	4955      	ldr	r1, [pc, #340]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800645e:	4313      	orrs	r3, r2
 8006460:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006468:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800646c:	d101      	bne.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 800646e:	2301      	movs	r3, #1
 8006470:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006476:	2b00      	cmp	r3, #0
 8006478:	d101      	bne.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 800647a:	2301      	movs	r3, #1
 800647c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006486:	2b00      	cmp	r3, #0
 8006488:	d017      	beq.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800648a:	4b4a      	ldr	r3, [pc, #296]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800648c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006490:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006498:	4946      	ldr	r1, [pc, #280]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800649a:	4313      	orrs	r3, r2
 800649c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064a8:	d101      	bne.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 80064aa:	2301      	movs	r3, #1
 80064ac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d101      	bne.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 80064b6:	2301      	movs	r3, #1
 80064b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f003 0320 	and.w	r3, r3, #32
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	f000 808b 	beq.w	80065de <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80064c8:	4b3a      	ldr	r3, [pc, #232]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80064ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064cc:	4a39      	ldr	r2, [pc, #228]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80064ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064d2:	6413      	str	r3, [r2, #64]	; 0x40
 80064d4:	4b37      	ldr	r3, [pc, #220]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80064d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064dc:	60fb      	str	r3, [r7, #12]
 80064de:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80064e0:	4b35      	ldr	r3, [pc, #212]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a34      	ldr	r2, [pc, #208]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80064e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064ec:	f7fd fd02 	bl	8003ef4 <HAL_GetTick>
 80064f0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80064f2:	e008      	b.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064f4:	f7fd fcfe 	bl	8003ef4 <HAL_GetTick>
 80064f8:	4602      	mov	r2, r0
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	2b64      	cmp	r3, #100	; 0x64
 8006500:	d901      	bls.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006502:	2303      	movs	r3, #3
 8006504:	e2bc      	b.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006506:	4b2c      	ldr	r3, [pc, #176]	; (80065b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800650e:	2b00      	cmp	r3, #0
 8006510:	d0f0      	beq.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006512:	4b28      	ldr	r3, [pc, #160]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006516:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800651a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d035      	beq.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006526:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800652a:	693a      	ldr	r2, [r7, #16]
 800652c:	429a      	cmp	r2, r3
 800652e:	d02e      	beq.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006530:	4b20      	ldr	r3, [pc, #128]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006534:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006538:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800653a:	4b1e      	ldr	r3, [pc, #120]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800653c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800653e:	4a1d      	ldr	r2, [pc, #116]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006544:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006546:	4b1b      	ldr	r3, [pc, #108]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800654a:	4a1a      	ldr	r2, [pc, #104]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800654c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006550:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006552:	4a18      	ldr	r2, [pc, #96]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006558:	4b16      	ldr	r3, [pc, #88]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800655a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800655c:	f003 0301 	and.w	r3, r3, #1
 8006560:	2b01      	cmp	r3, #1
 8006562:	d114      	bne.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006564:	f7fd fcc6 	bl	8003ef4 <HAL_GetTick>
 8006568:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800656a:	e00a      	b.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800656c:	f7fd fcc2 	bl	8003ef4 <HAL_GetTick>
 8006570:	4602      	mov	r2, r0
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	1ad3      	subs	r3, r2, r3
 8006576:	f241 3288 	movw	r2, #5000	; 0x1388
 800657a:	4293      	cmp	r3, r2
 800657c:	d901      	bls.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800657e:	2303      	movs	r3, #3
 8006580:	e27e      	b.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x688>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006582:	4b0c      	ldr	r3, [pc, #48]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006586:	f003 0302 	and.w	r3, r3, #2
 800658a:	2b00      	cmp	r3, #0
 800658c:	d0ee      	beq.n	800656c <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006592:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006596:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800659a:	d111      	bne.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 800659c:	4b05      	ldr	r3, [pc, #20]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80065a8:	4b04      	ldr	r3, [pc, #16]	; (80065bc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80065aa:	400b      	ands	r3, r1
 80065ac:	4901      	ldr	r1, [pc, #4]	; (80065b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80065ae:	4313      	orrs	r3, r2
 80065b0:	608b      	str	r3, [r1, #8]
 80065b2:	e00b      	b.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80065b4:	40023800 	.word	0x40023800
 80065b8:	40007000 	.word	0x40007000
 80065bc:	0ffffcff 	.word	0x0ffffcff
 80065c0:	4ba4      	ldr	r3, [pc, #656]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	4aa3      	ldr	r2, [pc, #652]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80065c6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80065ca:	6093      	str	r3, [r2, #8]
 80065cc:	4ba1      	ldr	r3, [pc, #644]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80065ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065d8:	499e      	ldr	r1, [pc, #632]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80065da:	4313      	orrs	r3, r2
 80065dc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f003 0310 	and.w	r3, r3, #16
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d010      	beq.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80065ea:	4b9a      	ldr	r3, [pc, #616]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80065ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065f0:	4a98      	ldr	r2, [pc, #608]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80065f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80065f6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80065fa:	4b96      	ldr	r3, [pc, #600]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80065fc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006604:	4993      	ldr	r1, [pc, #588]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006606:	4313      	orrs	r3, r2
 8006608:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006614:	2b00      	cmp	r3, #0
 8006616:	d00a      	beq.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006618:	4b8e      	ldr	r3, [pc, #568]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800661a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800661e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006626:	498b      	ldr	r1, [pc, #556]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006628:	4313      	orrs	r3, r2
 800662a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00a      	beq.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800663a:	4b86      	ldr	r3, [pc, #536]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800663c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006640:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006648:	4982      	ldr	r1, [pc, #520]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800664a:	4313      	orrs	r3, r2
 800664c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006658:	2b00      	cmp	r3, #0
 800665a:	d00a      	beq.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800665c:	4b7d      	ldr	r3, [pc, #500]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800665e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006662:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800666a:	497a      	ldr	r1, [pc, #488]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800666c:	4313      	orrs	r3, r2
 800666e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800667a:	2b00      	cmp	r3, #0
 800667c:	d00a      	beq.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800667e:	4b75      	ldr	r3, [pc, #468]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006684:	f023 0203 	bic.w	r2, r3, #3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800668c:	4971      	ldr	r1, [pc, #452]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800668e:	4313      	orrs	r3, r2
 8006690:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800669c:	2b00      	cmp	r3, #0
 800669e:	d00a      	beq.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80066a0:	4b6c      	ldr	r3, [pc, #432]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80066a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066a6:	f023 020c 	bic.w	r2, r3, #12
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ae:	4969      	ldr	r1, [pc, #420]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80066b0:	4313      	orrs	r3, r2
 80066b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d00a      	beq.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80066c2:	4b64      	ldr	r3, [pc, #400]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80066c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066c8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066d0:	4960      	ldr	r1, [pc, #384]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80066d2:	4313      	orrs	r3, r2
 80066d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d00a      	beq.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80066e4:	4b5b      	ldr	r3, [pc, #364]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80066e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066f2:	4958      	ldr	r1, [pc, #352]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80066f4:	4313      	orrs	r3, r2
 80066f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006702:	2b00      	cmp	r3, #0
 8006704:	d00a      	beq.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006706:	4b53      	ldr	r3, [pc, #332]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800670c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006714:	494f      	ldr	r1, [pc, #316]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006716:	4313      	orrs	r3, r2
 8006718:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006724:	2b00      	cmp	r3, #0
 8006726:	d00a      	beq.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006728:	4b4a      	ldr	r3, [pc, #296]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800672a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800672e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006736:	4947      	ldr	r1, [pc, #284]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006738:	4313      	orrs	r3, r2
 800673a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006746:	2b00      	cmp	r3, #0
 8006748:	d00a      	beq.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800674a:	4b42      	ldr	r3, [pc, #264]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800674c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006750:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006758:	493e      	ldr	r1, [pc, #248]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800675a:	4313      	orrs	r3, r2
 800675c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006768:	2b00      	cmp	r3, #0
 800676a:	d00a      	beq.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800676c:	4b39      	ldr	r3, [pc, #228]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800676e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006772:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800677a:	4936      	ldr	r1, [pc, #216]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800677c:	4313      	orrs	r3, r2
 800677e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800678a:	2b00      	cmp	r3, #0
 800678c:	d011      	beq.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800678e:	4b31      	ldr	r3, [pc, #196]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006794:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800679c:	492d      	ldr	r1, [pc, #180]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800679e:	4313      	orrs	r3, r2
 80067a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80067ac:	d101      	bne.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 80067ae:	2301      	movs	r3, #1
 80067b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d00a      	beq.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80067be:	4b25      	ldr	r3, [pc, #148]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80067c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067c4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067cc:	4921      	ldr	r1, [pc, #132]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80067ce:	4313      	orrs	r3, r2
 80067d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d00a      	beq.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80067e0:	4b1c      	ldr	r3, [pc, #112]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80067e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067e6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067ee:	4919      	ldr	r1, [pc, #100]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80067f0:	4313      	orrs	r3, r2
 80067f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d00a      	beq.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8006802:	4b14      	ldr	r3, [pc, #80]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006808:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006810:	4910      	ldr	r1, [pc, #64]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006812:	4313      	orrs	r3, r2
 8006814:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006818:	69fb      	ldr	r3, [r7, #28]
 800681a:	2b01      	cmp	r3, #1
 800681c:	d006      	beq.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x434>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006826:	2b00      	cmp	r3, #0
 8006828:	f000 809d 	beq.w	8006966 <HAL_RCCEx_PeriphCLKConfig+0x56e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800682c:	4b09      	ldr	r3, [pc, #36]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a08      	ldr	r2, [pc, #32]	; (8006854 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8006832:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006836:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006838:	f7fd fb5c 	bl	8003ef4 <HAL_GetTick>
 800683c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800683e:	e00b      	b.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006840:	f7fd fb58 	bl	8003ef4 <HAL_GetTick>
 8006844:	4602      	mov	r2, r0
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	1ad3      	subs	r3, r2, r3
 800684a:	2b64      	cmp	r3, #100	; 0x64
 800684c:	d904      	bls.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800684e:	2303      	movs	r3, #3
 8006850:	e116      	b.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x688>
 8006852:	bf00      	nop
 8006854:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006858:	4b8b      	ldr	r3, [pc, #556]	; (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006860:	2b00      	cmp	r3, #0
 8006862:	d1ed      	bne.n	8006840 <HAL_RCCEx_PeriphCLKConfig+0x448>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f003 0301 	and.w	r3, r3, #1
 800686c:	2b00      	cmp	r3, #0
 800686e:	d017      	beq.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006874:	2b00      	cmp	r3, #0
 8006876:	d113      	bne.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006878:	4b83      	ldr	r3, [pc, #524]	; (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800687a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800687e:	0e1b      	lsrs	r3, r3, #24
 8006880:	f003 030f 	and.w	r3, r3, #15
 8006884:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	019a      	lsls	r2, r3, #6
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	061b      	lsls	r3, r3, #24
 8006890:	431a      	orrs	r2, r3
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	071b      	lsls	r3, r3, #28
 8006898:	497b      	ldr	r1, [pc, #492]	; (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800689a:	4313      	orrs	r3, r2
 800689c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d004      	beq.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x4be>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068b4:	d00a      	beq.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d024      	beq.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x514>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068ca:	d11f      	bne.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x514>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80068cc:	4b6e      	ldr	r3, [pc, #440]	; (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80068ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068d2:	0f1b      	lsrs	r3, r3, #28
 80068d4:	f003 0307 	and.w	r3, r3, #7
 80068d8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	019a      	lsls	r2, r3, #6
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	68db      	ldr	r3, [r3, #12]
 80068e4:	061b      	lsls	r3, r3, #24
 80068e6:	431a      	orrs	r2, r3
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	071b      	lsls	r3, r3, #28
 80068ec:	4966      	ldr	r1, [pc, #408]	; (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80068ee:	4313      	orrs	r3, r2
 80068f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80068f4:	4b64      	ldr	r3, [pc, #400]	; (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80068f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068fa:	f023 021f 	bic.w	r2, r3, #31
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	69db      	ldr	r3, [r3, #28]
 8006902:	3b01      	subs	r3, #1
 8006904:	4960      	ldr	r1, [pc, #384]	; (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006906:	4313      	orrs	r3, r2
 8006908:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006914:	2b00      	cmp	r3, #0
 8006916:	d00d      	beq.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0x53c>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	019a      	lsls	r2, r3, #6
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	68db      	ldr	r3, [r3, #12]
 8006922:	061b      	lsls	r3, r3, #24
 8006924:	431a      	orrs	r2, r3
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	071b      	lsls	r3, r3, #28
 800692c:	4956      	ldr	r1, [pc, #344]	; (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800692e:	4313      	orrs	r3, r2
 8006930:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006934:	4b54      	ldr	r3, [pc, #336]	; (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a53      	ldr	r2, [pc, #332]	; (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800693a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800693e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006940:	f7fd fad8 	bl	8003ef4 <HAL_GetTick>
 8006944:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006946:	e008      	b.n	800695a <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006948:	f7fd fad4 	bl	8003ef4 <HAL_GetTick>
 800694c:	4602      	mov	r2, r0
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	1ad3      	subs	r3, r2, r3
 8006952:	2b64      	cmp	r3, #100	; 0x64
 8006954:	d901      	bls.n	800695a <HAL_RCCEx_PeriphCLKConfig+0x562>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006956:	2303      	movs	r3, #3
 8006958:	e092      	b.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800695a:	4b4b      	ldr	r3, [pc, #300]	; (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006962:	2b00      	cmp	r3, #0
 8006964:	d0f0      	beq.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x550>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006966:	69bb      	ldr	r3, [r7, #24]
 8006968:	2b01      	cmp	r3, #1
 800696a:	f040 8088 	bne.w	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x686>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800696e:	4b46      	ldr	r3, [pc, #280]	; (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a45      	ldr	r2, [pc, #276]	; (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006974:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006978:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800697a:	f7fd fabb 	bl	8003ef4 <HAL_GetTick>
 800697e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006980:	e008      	b.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006982:	f7fd fab7 	bl	8003ef4 <HAL_GetTick>
 8006986:	4602      	mov	r2, r0
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	1ad3      	subs	r3, r2, r3
 800698c:	2b64      	cmp	r3, #100	; 0x64
 800698e:	d901      	bls.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006990:	2303      	movs	r3, #3
 8006992:	e075      	b.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006994:	4b3c      	ldr	r3, [pc, #240]	; (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800699c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069a0:	d0ef      	beq.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x58a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d003      	beq.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d009      	beq.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x5d2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d024      	beq.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x614>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d120      	bne.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x614>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80069ca:	4b2f      	ldr	r3, [pc, #188]	; (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80069cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069d0:	0c1b      	lsrs	r3, r3, #16
 80069d2:	f003 0303 	and.w	r3, r3, #3
 80069d6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	691b      	ldr	r3, [r3, #16]
 80069dc:	019a      	lsls	r2, r3, #6
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	041b      	lsls	r3, r3, #16
 80069e2:	431a      	orrs	r2, r3
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	695b      	ldr	r3, [r3, #20]
 80069e8:	061b      	lsls	r3, r3, #24
 80069ea:	4927      	ldr	r1, [pc, #156]	; (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80069ec:	4313      	orrs	r3, r2
 80069ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80069f2:	4b25      	ldr	r3, [pc, #148]	; (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 80069f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069f8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6a1b      	ldr	r3, [r3, #32]
 8006a00:	3b01      	subs	r3, #1
 8006a02:	021b      	lsls	r3, r3, #8
 8006a04:	4920      	ldr	r1, [pc, #128]	; (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006a06:	4313      	orrs	r3, r2
 8006a08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d018      	beq.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x652>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a20:	d113      	bne.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x652>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006a22:	4b19      	ldr	r3, [pc, #100]	; (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a28:	0e1b      	lsrs	r3, r3, #24
 8006a2a:	f003 030f 	and.w	r3, r3, #15
 8006a2e:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	691b      	ldr	r3, [r3, #16]
 8006a34:	019a      	lsls	r2, r3, #6
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	699b      	ldr	r3, [r3, #24]
 8006a3a:	041b      	lsls	r3, r3, #16
 8006a3c:	431a      	orrs	r2, r3
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	061b      	lsls	r3, r3, #24
 8006a42:	4911      	ldr	r1, [pc, #68]	; (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006a44:	4313      	orrs	r3, r2
 8006a46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006a4a:	4b0f      	ldr	r3, [pc, #60]	; (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a0e      	ldr	r2, [pc, #56]	; (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a56:	f7fd fa4d 	bl	8003ef4 <HAL_GetTick>
 8006a5a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006a5c:	e008      	b.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x678>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006a5e:	f7fd fa49 	bl	8003ef4 <HAL_GetTick>
 8006a62:	4602      	mov	r2, r0
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	1ad3      	subs	r3, r2, r3
 8006a68:	2b64      	cmp	r3, #100	; 0x64
 8006a6a:	d901      	bls.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x678>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a6c:	2303      	movs	r3, #3
 8006a6e:	e007      	b.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x688>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006a70:	4b05      	ldr	r3, [pc, #20]	; (8006a88 <HAL_RCCEx_PeriphCLKConfig+0x690>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a7c:	d1ef      	bne.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x666>
      }
    }
  }
  return HAL_OK;
 8006a7e:	2300      	movs	r3, #0
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3720      	adds	r7, #32
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}
 8006a88:	40023800 	.word	0x40023800

08006a8c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b082      	sub	sp, #8
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d101      	bne.n	8006a9e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	e081      	b.n	8006ba2 <HAL_RTC_Init+0x116>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	7f5b      	ldrb	r3, [r3, #29]
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d105      	bne.n	8006ab4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f7fc fe0c 	bl	80036cc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2202      	movs	r2, #2
 8006ab8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	22ca      	movs	r2, #202	; 0xca
 8006ac0:	625a      	str	r2, [r3, #36]	; 0x24
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	2253      	movs	r2, #83	; 0x53
 8006ac8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 f898 	bl	8006c00 <RTC_EnterInitMode>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d008      	beq.n	8006ae8 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	22ff      	movs	r2, #255	; 0xff
 8006adc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2204      	movs	r2, #4
 8006ae2:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e05c      	b.n	8006ba2 <HAL_RTC_Init+0x116>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	6899      	ldr	r1, [r3, #8]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	4b2e      	ldr	r3, [pc, #184]	; (8006bac <HAL_RTC_Init+0x120>)
 8006af4:	400b      	ands	r3, r1
 8006af6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	6899      	ldr	r1, [r3, #8]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	685a      	ldr	r2, [r3, #4]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	691b      	ldr	r3, [r3, #16]
 8006b06:	431a      	orrs	r2, r3
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	695b      	ldr	r3, [r3, #20]
 8006b0c:	431a      	orrs	r2, r3
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	430a      	orrs	r2, r1
 8006b14:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	68d2      	ldr	r2, [r2, #12]
 8006b1e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	6919      	ldr	r1, [r3, #16]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	041a      	lsls	r2, r3, #16
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	430a      	orrs	r2, r1
 8006b32:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	68da      	ldr	r2, [r3, #12]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b42:	60da      	str	r2, [r3, #12]
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	f003 0320 	and.w	r3, r3, #32
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d10e      	bne.n	8006b70 <HAL_RTC_Init+0xe4>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 f82c 	bl	8006bb0 <HAL_RTC_WaitForSynchro>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d008      	beq.n	8006b70 <HAL_RTC_Init+0xe4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	22ff      	movs	r2, #255	; 0xff
 8006b64:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2204      	movs	r2, #4
 8006b6a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	e018      	b.n	8006ba2 <HAL_RTC_Init+0x116>
      }
    }
    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f022 0208 	bic.w	r2, r2, #8
 8006b7e:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	699a      	ldr	r2, [r3, #24]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	430a      	orrs	r2, r1
 8006b90:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	22ff      	movs	r2, #255	; 0xff
 8006b98:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8006ba0:	2300      	movs	r3, #0
  }
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3708      	adds	r7, #8
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	bf00      	nop
 8006bac:	ff8fffbf 	.word	0xff8fffbf

08006bb0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	68da      	ldr	r2, [r3, #12]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006bca:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006bcc:	f7fd f992 	bl	8003ef4 <HAL_GetTick>
 8006bd0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006bd2:	e009      	b.n	8006be8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006bd4:	f7fd f98e 	bl	8003ef4 <HAL_GetTick>
 8006bd8:	4602      	mov	r2, r0
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	1ad3      	subs	r3, r2, r3
 8006bde:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006be2:	d901      	bls.n	8006be8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006be4:	2303      	movs	r3, #3
 8006be6:	e007      	b.n	8006bf8 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	68db      	ldr	r3, [r3, #12]
 8006bee:	f003 0320 	and.w	r3, r3, #32
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d0ee      	beq.n	8006bd4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006bf6:	2300      	movs	r3, #0
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3710      	adds	r7, #16
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b084      	sub	sp, #16
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	68db      	ldr	r3, [r3, #12]
 8006c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d119      	bne.n	8006c4e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f04f 32ff 	mov.w	r2, #4294967295
 8006c22:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006c24:	f7fd f966 	bl	8003ef4 <HAL_GetTick>
 8006c28:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006c2a:	e009      	b.n	8006c40 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006c2c:	f7fd f962 	bl	8003ef4 <HAL_GetTick>
 8006c30:	4602      	mov	r2, r0
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	1ad3      	subs	r3, r2, r3
 8006c36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c3a:	d901      	bls.n	8006c40 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8006c3c:	2303      	movs	r3, #3
 8006c3e:	e007      	b.n	8006c50 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	68db      	ldr	r3, [r3, #12]
 8006c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d0ee      	beq.n	8006c2c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8006c4e:	2300      	movs	r3, #0
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3710      	adds	r7, #16
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b086      	sub	sp, #24
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	60f8      	str	r0, [r7, #12]
 8006c60:	60b9      	str	r1, [r7, #8]
 8006c62:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8006c64:	2300      	movs	r3, #0
 8006c66:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	7f1b      	ldrb	r3, [r3, #28]
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d101      	bne.n	8006c74 <HAL_RTCEx_SetWakeUpTimer+0x1c>
 8006c70:	2302      	movs	r3, #2
 8006c72:	e062      	b.n	8006d3a <HAL_RTCEx_SetWakeUpTimer+0xe2>
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2201      	movs	r2, #1
 8006c78:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2202      	movs	r2, #2
 8006c7e:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	22ca      	movs	r2, #202	; 0xca
 8006c86:	625a      	str	r2, [r3, #36]	; 0x24
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	2253      	movs	r2, #83	; 0x53
 8006c8e:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	689a      	ldr	r2, [r3, #8]
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c9e:	609a      	str	r2, [r3, #8]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006ca0:	f7fd f928 	bl	8003ef4 <HAL_GetTick>
 8006ca4:	6178      	str	r0, [r7, #20]

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if((hrtc->Instance->CR & RTC_CR_WUTE) != RESET)
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d01b      	beq.n	8006cec <HAL_RTCEx_SetWakeUpTimer+0x94>
  {
    /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8006cb4:	e013      	b.n	8006cde <HAL_RTCEx_SetWakeUpTimer+0x86>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006cb6:	f7fd f91d 	bl	8003ef4 <HAL_GetTick>
 8006cba:	4602      	mov	r2, r0
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	1ad3      	subs	r3, r2, r3
 8006cc0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006cc4:	d90b      	bls.n	8006cde <HAL_RTCEx_SetWakeUpTimer+0x86>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	22ff      	movs	r2, #255	; 0xff
 8006ccc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2203      	movs	r2, #3
 8006cd2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8006cda:	2303      	movs	r3, #3
 8006cdc:	e02d      	b.n	8006d3a <HAL_RTCEx_SetWakeUpTimer+0xe2>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == RESET)
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	f003 0304 	and.w	r3, r3, #4
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d0e4      	beq.n	8006cb6 <HAL_RTCEx_SetWakeUpTimer+0x5e>
      }
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	689a      	ldr	r2, [r3, #8]
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f022 0207 	bic.w	r2, r2, #7
 8006cfa:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	6899      	ldr	r1, [r3, #8]
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	430a      	orrs	r2, r1
 8006d0a:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	68ba      	ldr	r2, [r7, #8]
 8006d12:	615a      	str	r2, [r3, #20]

   /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	689a      	ldr	r2, [r3, #8]
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006d22:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	22ff      	movs	r2, #255	; 0xff
 8006d2a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2200      	movs	r2, #0
 8006d36:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8006d38:	2300      	movs	r3, #0
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3718      	adds	r7, #24
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}

08006d42 <HAL_RTCEx_BKUPWrite>:
  *                                 specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8006d42:	b480      	push	{r7}
 8006d44:	b087      	sub	sp, #28
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	60f8      	str	r0, [r7, #12]
 8006d4a:	60b9      	str	r1, [r7, #8]
 8006d4c:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	3350      	adds	r3, #80	; 0x50
 8006d58:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4);
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	697a      	ldr	r2, [r7, #20]
 8006d60:	4413      	add	r3, r2
 8006d62:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	687a      	ldr	r2, [r7, #4]
 8006d68:	601a      	str	r2, [r3, #0]
}
 8006d6a:	bf00      	nop
 8006d6c:	371c      	adds	r7, #28
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d74:	4770      	bx	lr

08006d76 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8006d76:	b480      	push	{r7}
 8006d78:	b085      	sub	sp, #20
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	6078      	str	r0, [r7, #4]
 8006d7e:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0;
 8006d80:	2300      	movs	r3, #0
 8006d82:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	3350      	adds	r3, #80	; 0x50
 8006d8a:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4);
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	68fa      	ldr	r2, [r7, #12]
 8006d92:	4413      	add	r3, r2
 8006d94:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3714      	adds	r7, #20
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr

08006da6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006da6:	b580      	push	{r7, lr}
 8006da8:	b082      	sub	sp, #8
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d101      	bne.n	8006db8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006db4:	2301      	movs	r3, #1
 8006db6:	e049      	b.n	8006e4c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dbe:	b2db      	uxtb	r3, r3
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d106      	bne.n	8006dd2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f7fc fcab 	bl	8003728 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2202      	movs	r2, #2
 8006dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	3304      	adds	r3, #4
 8006de2:	4619      	mov	r1, r3
 8006de4:	4610      	mov	r0, r2
 8006de6:	f000 fdc7 	bl	8007978 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2201      	movs	r2, #1
 8006dee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2201      	movs	r2, #1
 8006df6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2201      	movs	r2, #1
 8006e06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2201      	movs	r2, #1
 8006e16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2201      	movs	r2, #1
 8006e26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2201      	movs	r2, #1
 8006e36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2201      	movs	r2, #1
 8006e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e4a:	2300      	movs	r3, #0
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3708      	adds	r7, #8
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b085      	sub	sp, #20
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d001      	beq.n	8006e6c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e04c      	b.n	8006f06 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2202      	movs	r2, #2
 8006e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a26      	ldr	r2, [pc, #152]	; (8006f14 <HAL_TIM_Base_Start+0xc0>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d022      	beq.n	8006ec4 <HAL_TIM_Base_Start+0x70>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e86:	d01d      	beq.n	8006ec4 <HAL_TIM_Base_Start+0x70>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a22      	ldr	r2, [pc, #136]	; (8006f18 <HAL_TIM_Base_Start+0xc4>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d018      	beq.n	8006ec4 <HAL_TIM_Base_Start+0x70>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a21      	ldr	r2, [pc, #132]	; (8006f1c <HAL_TIM_Base_Start+0xc8>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d013      	beq.n	8006ec4 <HAL_TIM_Base_Start+0x70>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a1f      	ldr	r2, [pc, #124]	; (8006f20 <HAL_TIM_Base_Start+0xcc>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d00e      	beq.n	8006ec4 <HAL_TIM_Base_Start+0x70>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a1e      	ldr	r2, [pc, #120]	; (8006f24 <HAL_TIM_Base_Start+0xd0>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d009      	beq.n	8006ec4 <HAL_TIM_Base_Start+0x70>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a1c      	ldr	r2, [pc, #112]	; (8006f28 <HAL_TIM_Base_Start+0xd4>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d004      	beq.n	8006ec4 <HAL_TIM_Base_Start+0x70>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a1b      	ldr	r2, [pc, #108]	; (8006f2c <HAL_TIM_Base_Start+0xd8>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d115      	bne.n	8006ef0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	689a      	ldr	r2, [r3, #8]
 8006eca:	4b19      	ldr	r3, [pc, #100]	; (8006f30 <HAL_TIM_Base_Start+0xdc>)
 8006ecc:	4013      	ands	r3, r2
 8006ece:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2b06      	cmp	r3, #6
 8006ed4:	d015      	beq.n	8006f02 <HAL_TIM_Base_Start+0xae>
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006edc:	d011      	beq.n	8006f02 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f042 0201 	orr.w	r2, r2, #1
 8006eec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006eee:	e008      	b.n	8006f02 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	f042 0201 	orr.w	r2, r2, #1
 8006efe:	601a      	str	r2, [r3, #0]
 8006f00:	e000      	b.n	8006f04 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f02:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006f04:	2300      	movs	r3, #0
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3714      	adds	r7, #20
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr
 8006f12:	bf00      	nop
 8006f14:	40010000 	.word	0x40010000
 8006f18:	40000400 	.word	0x40000400
 8006f1c:	40000800 	.word	0x40000800
 8006f20:	40000c00 	.word	0x40000c00
 8006f24:	40010400 	.word	0x40010400
 8006f28:	40014000 	.word	0x40014000
 8006f2c:	40001800 	.word	0x40001800
 8006f30:	00010007 	.word	0x00010007

08006f34 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	6a1a      	ldr	r2, [r3, #32]
 8006f42:	f241 1311 	movw	r3, #4369	; 0x1111
 8006f46:	4013      	ands	r3, r2
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d10f      	bne.n	8006f6c <HAL_TIM_Base_Stop+0x38>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	6a1a      	ldr	r2, [r3, #32]
 8006f52:	f240 4344 	movw	r3, #1092	; 0x444
 8006f56:	4013      	ands	r3, r2
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d107      	bne.n	8006f6c <HAL_TIM_Base_Stop+0x38>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f022 0201 	bic.w	r2, r2, #1
 8006f6a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006f74:	2300      	movs	r3, #0
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	370c      	adds	r7, #12
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr
	...

08006f84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b085      	sub	sp, #20
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d001      	beq.n	8006f9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	e054      	b.n	8007046 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2202      	movs	r2, #2
 8006fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	68da      	ldr	r2, [r3, #12]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f042 0201 	orr.w	r2, r2, #1
 8006fb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a26      	ldr	r2, [pc, #152]	; (8007054 <HAL_TIM_Base_Start_IT+0xd0>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d022      	beq.n	8007004 <HAL_TIM_Base_Start_IT+0x80>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fc6:	d01d      	beq.n	8007004 <HAL_TIM_Base_Start_IT+0x80>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a22      	ldr	r2, [pc, #136]	; (8007058 <HAL_TIM_Base_Start_IT+0xd4>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d018      	beq.n	8007004 <HAL_TIM_Base_Start_IT+0x80>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a21      	ldr	r2, [pc, #132]	; (800705c <HAL_TIM_Base_Start_IT+0xd8>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d013      	beq.n	8007004 <HAL_TIM_Base_Start_IT+0x80>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a1f      	ldr	r2, [pc, #124]	; (8007060 <HAL_TIM_Base_Start_IT+0xdc>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d00e      	beq.n	8007004 <HAL_TIM_Base_Start_IT+0x80>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a1e      	ldr	r2, [pc, #120]	; (8007064 <HAL_TIM_Base_Start_IT+0xe0>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d009      	beq.n	8007004 <HAL_TIM_Base_Start_IT+0x80>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a1c      	ldr	r2, [pc, #112]	; (8007068 <HAL_TIM_Base_Start_IT+0xe4>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d004      	beq.n	8007004 <HAL_TIM_Base_Start_IT+0x80>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a1b      	ldr	r2, [pc, #108]	; (800706c <HAL_TIM_Base_Start_IT+0xe8>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d115      	bne.n	8007030 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	689a      	ldr	r2, [r3, #8]
 800700a:	4b19      	ldr	r3, [pc, #100]	; (8007070 <HAL_TIM_Base_Start_IT+0xec>)
 800700c:	4013      	ands	r3, r2
 800700e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2b06      	cmp	r3, #6
 8007014:	d015      	beq.n	8007042 <HAL_TIM_Base_Start_IT+0xbe>
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800701c:	d011      	beq.n	8007042 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f042 0201 	orr.w	r2, r2, #1
 800702c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800702e:	e008      	b.n	8007042 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f042 0201 	orr.w	r2, r2, #1
 800703e:	601a      	str	r2, [r3, #0]
 8007040:	e000      	b.n	8007044 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007042:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007044:	2300      	movs	r3, #0
}
 8007046:	4618      	mov	r0, r3
 8007048:	3714      	adds	r7, #20
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr
 8007052:	bf00      	nop
 8007054:	40010000 	.word	0x40010000
 8007058:	40000400 	.word	0x40000400
 800705c:	40000800 	.word	0x40000800
 8007060:	40000c00 	.word	0x40000c00
 8007064:	40010400 	.word	0x40010400
 8007068:	40014000 	.word	0x40014000
 800706c:	40001800 	.word	0x40001800
 8007070:	00010007 	.word	0x00010007

08007074 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b082      	sub	sp, #8
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d101      	bne.n	8007086 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007082:	2301      	movs	r3, #1
 8007084:	e049      	b.n	800711a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800708c:	b2db      	uxtb	r3, r3
 800708e:	2b00      	cmp	r3, #0
 8007090:	d106      	bne.n	80070a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f7fc fb7e 	bl	800379c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2202      	movs	r2, #2
 80070a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	3304      	adds	r3, #4
 80070b0:	4619      	mov	r1, r3
 80070b2:	4610      	mov	r0, r2
 80070b4:	f000 fc60 	bl	8007978 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2201      	movs	r2, #1
 80070bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2201      	movs	r2, #1
 80070c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2201      	movs	r2, #1
 80070cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2201      	movs	r2, #1
 80070d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2201      	movs	r2, #1
 80070dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2201      	movs	r2, #1
 80070e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2201      	movs	r2, #1
 80070ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2201      	movs	r2, #1
 80070fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2201      	movs	r2, #1
 8007104:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2201      	movs	r2, #1
 800710c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2201      	movs	r2, #1
 8007114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007118:	2300      	movs	r3, #0
}
 800711a:	4618      	mov	r0, r3
 800711c:	3708      	adds	r7, #8
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
	...

08007124 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d109      	bne.n	8007148 <HAL_TIM_PWM_Start+0x24>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800713a:	b2db      	uxtb	r3, r3
 800713c:	2b01      	cmp	r3, #1
 800713e:	bf14      	ite	ne
 8007140:	2301      	movne	r3, #1
 8007142:	2300      	moveq	r3, #0
 8007144:	b2db      	uxtb	r3, r3
 8007146:	e03c      	b.n	80071c2 <HAL_TIM_PWM_Start+0x9e>
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	2b04      	cmp	r3, #4
 800714c:	d109      	bne.n	8007162 <HAL_TIM_PWM_Start+0x3e>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007154:	b2db      	uxtb	r3, r3
 8007156:	2b01      	cmp	r3, #1
 8007158:	bf14      	ite	ne
 800715a:	2301      	movne	r3, #1
 800715c:	2300      	moveq	r3, #0
 800715e:	b2db      	uxtb	r3, r3
 8007160:	e02f      	b.n	80071c2 <HAL_TIM_PWM_Start+0x9e>
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	2b08      	cmp	r3, #8
 8007166:	d109      	bne.n	800717c <HAL_TIM_PWM_Start+0x58>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800716e:	b2db      	uxtb	r3, r3
 8007170:	2b01      	cmp	r3, #1
 8007172:	bf14      	ite	ne
 8007174:	2301      	movne	r3, #1
 8007176:	2300      	moveq	r3, #0
 8007178:	b2db      	uxtb	r3, r3
 800717a:	e022      	b.n	80071c2 <HAL_TIM_PWM_Start+0x9e>
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	2b0c      	cmp	r3, #12
 8007180:	d109      	bne.n	8007196 <HAL_TIM_PWM_Start+0x72>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007188:	b2db      	uxtb	r3, r3
 800718a:	2b01      	cmp	r3, #1
 800718c:	bf14      	ite	ne
 800718e:	2301      	movne	r3, #1
 8007190:	2300      	moveq	r3, #0
 8007192:	b2db      	uxtb	r3, r3
 8007194:	e015      	b.n	80071c2 <HAL_TIM_PWM_Start+0x9e>
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	2b10      	cmp	r3, #16
 800719a:	d109      	bne.n	80071b0 <HAL_TIM_PWM_Start+0x8c>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80071a2:	b2db      	uxtb	r3, r3
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	bf14      	ite	ne
 80071a8:	2301      	movne	r3, #1
 80071aa:	2300      	moveq	r3, #0
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	e008      	b.n	80071c2 <HAL_TIM_PWM_Start+0x9e>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80071b6:	b2db      	uxtb	r3, r3
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	bf14      	ite	ne
 80071bc:	2301      	movne	r3, #1
 80071be:	2300      	moveq	r3, #0
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d001      	beq.n	80071ca <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	e092      	b.n	80072f0 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d104      	bne.n	80071da <HAL_TIM_PWM_Start+0xb6>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2202      	movs	r2, #2
 80071d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071d8:	e023      	b.n	8007222 <HAL_TIM_PWM_Start+0xfe>
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	2b04      	cmp	r3, #4
 80071de:	d104      	bne.n	80071ea <HAL_TIM_PWM_Start+0xc6>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2202      	movs	r2, #2
 80071e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071e8:	e01b      	b.n	8007222 <HAL_TIM_PWM_Start+0xfe>
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	2b08      	cmp	r3, #8
 80071ee:	d104      	bne.n	80071fa <HAL_TIM_PWM_Start+0xd6>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2202      	movs	r2, #2
 80071f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071f8:	e013      	b.n	8007222 <HAL_TIM_PWM_Start+0xfe>
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	2b0c      	cmp	r3, #12
 80071fe:	d104      	bne.n	800720a <HAL_TIM_PWM_Start+0xe6>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2202      	movs	r2, #2
 8007204:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007208:	e00b      	b.n	8007222 <HAL_TIM_PWM_Start+0xfe>
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	2b10      	cmp	r3, #16
 800720e:	d104      	bne.n	800721a <HAL_TIM_PWM_Start+0xf6>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2202      	movs	r2, #2
 8007214:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007218:	e003      	b.n	8007222 <HAL_TIM_PWM_Start+0xfe>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2202      	movs	r2, #2
 800721e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	2201      	movs	r2, #1
 8007228:	6839      	ldr	r1, [r7, #0]
 800722a:	4618      	mov	r0, r3
 800722c:	f000 ff3c 	bl	80080a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a30      	ldr	r2, [pc, #192]	; (80072f8 <HAL_TIM_PWM_Start+0x1d4>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d004      	beq.n	8007244 <HAL_TIM_PWM_Start+0x120>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a2f      	ldr	r2, [pc, #188]	; (80072fc <HAL_TIM_PWM_Start+0x1d8>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d101      	bne.n	8007248 <HAL_TIM_PWM_Start+0x124>
 8007244:	2301      	movs	r3, #1
 8007246:	e000      	b.n	800724a <HAL_TIM_PWM_Start+0x126>
 8007248:	2300      	movs	r3, #0
 800724a:	2b00      	cmp	r3, #0
 800724c:	d007      	beq.n	800725e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800725c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a25      	ldr	r2, [pc, #148]	; (80072f8 <HAL_TIM_PWM_Start+0x1d4>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d022      	beq.n	80072ae <HAL_TIM_PWM_Start+0x18a>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007270:	d01d      	beq.n	80072ae <HAL_TIM_PWM_Start+0x18a>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a22      	ldr	r2, [pc, #136]	; (8007300 <HAL_TIM_PWM_Start+0x1dc>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d018      	beq.n	80072ae <HAL_TIM_PWM_Start+0x18a>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a20      	ldr	r2, [pc, #128]	; (8007304 <HAL_TIM_PWM_Start+0x1e0>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d013      	beq.n	80072ae <HAL_TIM_PWM_Start+0x18a>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a1f      	ldr	r2, [pc, #124]	; (8007308 <HAL_TIM_PWM_Start+0x1e4>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d00e      	beq.n	80072ae <HAL_TIM_PWM_Start+0x18a>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a19      	ldr	r2, [pc, #100]	; (80072fc <HAL_TIM_PWM_Start+0x1d8>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d009      	beq.n	80072ae <HAL_TIM_PWM_Start+0x18a>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a1b      	ldr	r2, [pc, #108]	; (800730c <HAL_TIM_PWM_Start+0x1e8>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d004      	beq.n	80072ae <HAL_TIM_PWM_Start+0x18a>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a19      	ldr	r2, [pc, #100]	; (8007310 <HAL_TIM_PWM_Start+0x1ec>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d115      	bne.n	80072da <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	689a      	ldr	r2, [r3, #8]
 80072b4:	4b17      	ldr	r3, [pc, #92]	; (8007314 <HAL_TIM_PWM_Start+0x1f0>)
 80072b6:	4013      	ands	r3, r2
 80072b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2b06      	cmp	r3, #6
 80072be:	d015      	beq.n	80072ec <HAL_TIM_PWM_Start+0x1c8>
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072c6:	d011      	beq.n	80072ec <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	681a      	ldr	r2, [r3, #0]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f042 0201 	orr.w	r2, r2, #1
 80072d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072d8:	e008      	b.n	80072ec <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	681a      	ldr	r2, [r3, #0]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f042 0201 	orr.w	r2, r2, #1
 80072e8:	601a      	str	r2, [r3, #0]
 80072ea:	e000      	b.n	80072ee <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072ec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80072ee:	2300      	movs	r3, #0
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3710      	adds	r7, #16
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}
 80072f8:	40010000 	.word	0x40010000
 80072fc:	40010400 	.word	0x40010400
 8007300:	40000400 	.word	0x40000400
 8007304:	40000800 	.word	0x40000800
 8007308:	40000c00 	.word	0x40000c00
 800730c:	40014000 	.word	0x40014000
 8007310:	40001800 	.word	0x40001800
 8007314:	00010007 	.word	0x00010007

08007318 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	691b      	ldr	r3, [r3, #16]
 8007326:	f003 0302 	and.w	r3, r3, #2
 800732a:	2b02      	cmp	r3, #2
 800732c:	d122      	bne.n	8007374 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	68db      	ldr	r3, [r3, #12]
 8007334:	f003 0302 	and.w	r3, r3, #2
 8007338:	2b02      	cmp	r3, #2
 800733a:	d11b      	bne.n	8007374 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f06f 0202 	mvn.w	r2, #2
 8007344:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2201      	movs	r2, #1
 800734a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	699b      	ldr	r3, [r3, #24]
 8007352:	f003 0303 	and.w	r3, r3, #3
 8007356:	2b00      	cmp	r3, #0
 8007358:	d003      	beq.n	8007362 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 faee 	bl	800793c <HAL_TIM_IC_CaptureCallback>
 8007360:	e005      	b.n	800736e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 fae0 	bl	8007928 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 faf1 	bl	8007950 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2200      	movs	r2, #0
 8007372:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	691b      	ldr	r3, [r3, #16]
 800737a:	f003 0304 	and.w	r3, r3, #4
 800737e:	2b04      	cmp	r3, #4
 8007380:	d122      	bne.n	80073c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	68db      	ldr	r3, [r3, #12]
 8007388:	f003 0304 	and.w	r3, r3, #4
 800738c:	2b04      	cmp	r3, #4
 800738e:	d11b      	bne.n	80073c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f06f 0204 	mvn.w	r2, #4
 8007398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2202      	movs	r2, #2
 800739e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	699b      	ldr	r3, [r3, #24]
 80073a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d003      	beq.n	80073b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f000 fac4 	bl	800793c <HAL_TIM_IC_CaptureCallback>
 80073b4:	e005      	b.n	80073c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 fab6 	bl	8007928 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f000 fac7 	bl	8007950 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2200      	movs	r2, #0
 80073c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	691b      	ldr	r3, [r3, #16]
 80073ce:	f003 0308 	and.w	r3, r3, #8
 80073d2:	2b08      	cmp	r3, #8
 80073d4:	d122      	bne.n	800741c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	68db      	ldr	r3, [r3, #12]
 80073dc:	f003 0308 	and.w	r3, r3, #8
 80073e0:	2b08      	cmp	r3, #8
 80073e2:	d11b      	bne.n	800741c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f06f 0208 	mvn.w	r2, #8
 80073ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2204      	movs	r2, #4
 80073f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	69db      	ldr	r3, [r3, #28]
 80073fa:	f003 0303 	and.w	r3, r3, #3
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d003      	beq.n	800740a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 fa9a 	bl	800793c <HAL_TIM_IC_CaptureCallback>
 8007408:	e005      	b.n	8007416 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 fa8c 	bl	8007928 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f000 fa9d 	bl	8007950 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	691b      	ldr	r3, [r3, #16]
 8007422:	f003 0310 	and.w	r3, r3, #16
 8007426:	2b10      	cmp	r3, #16
 8007428:	d122      	bne.n	8007470 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	68db      	ldr	r3, [r3, #12]
 8007430:	f003 0310 	and.w	r3, r3, #16
 8007434:	2b10      	cmp	r3, #16
 8007436:	d11b      	bne.n	8007470 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f06f 0210 	mvn.w	r2, #16
 8007440:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2208      	movs	r2, #8
 8007446:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	69db      	ldr	r3, [r3, #28]
 800744e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007452:	2b00      	cmp	r3, #0
 8007454:	d003      	beq.n	800745e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 fa70 	bl	800793c <HAL_TIM_IC_CaptureCallback>
 800745c:	e005      	b.n	800746a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 fa62 	bl	8007928 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 fa73 	bl	8007950 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2200      	movs	r2, #0
 800746e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	691b      	ldr	r3, [r3, #16]
 8007476:	f003 0301 	and.w	r3, r3, #1
 800747a:	2b01      	cmp	r3, #1
 800747c:	d10e      	bne.n	800749c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	f003 0301 	and.w	r3, r3, #1
 8007488:	2b01      	cmp	r3, #1
 800748a:	d107      	bne.n	800749c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f06f 0201 	mvn.w	r2, #1
 8007494:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 fa3c 	bl	8007914 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	691b      	ldr	r3, [r3, #16]
 80074a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074a6:	2b80      	cmp	r3, #128	; 0x80
 80074a8:	d10e      	bne.n	80074c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	68db      	ldr	r3, [r3, #12]
 80074b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074b4:	2b80      	cmp	r3, #128	; 0x80
 80074b6:	d107      	bne.n	80074c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80074c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f000 feae 	bl	8008224 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	691b      	ldr	r3, [r3, #16]
 80074ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074d6:	d10e      	bne.n	80074f6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	68db      	ldr	r3, [r3, #12]
 80074de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074e2:	2b80      	cmp	r3, #128	; 0x80
 80074e4:	d107      	bne.n	80074f6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80074ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 fea1 	bl	8008238 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	691b      	ldr	r3, [r3, #16]
 80074fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007500:	2b40      	cmp	r3, #64	; 0x40
 8007502:	d10e      	bne.n	8007522 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	68db      	ldr	r3, [r3, #12]
 800750a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800750e:	2b40      	cmp	r3, #64	; 0x40
 8007510:	d107      	bne.n	8007522 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800751a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f000 fa21 	bl	8007964 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	691b      	ldr	r3, [r3, #16]
 8007528:	f003 0320 	and.w	r3, r3, #32
 800752c:	2b20      	cmp	r3, #32
 800752e:	d10e      	bne.n	800754e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	68db      	ldr	r3, [r3, #12]
 8007536:	f003 0320 	and.w	r3, r3, #32
 800753a:	2b20      	cmp	r3, #32
 800753c:	d107      	bne.n	800754e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f06f 0220 	mvn.w	r2, #32
 8007546:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 fe61 	bl	8008210 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800754e:	bf00      	nop
 8007550:	3708      	adds	r7, #8
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}
	...

08007558 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b086      	sub	sp, #24
 800755c:	af00      	add	r7, sp, #0
 800755e:	60f8      	str	r0, [r7, #12]
 8007560:	60b9      	str	r1, [r7, #8]
 8007562:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007564:	2300      	movs	r3, #0
 8007566:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800756e:	2b01      	cmp	r3, #1
 8007570:	d101      	bne.n	8007576 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007572:	2302      	movs	r3, #2
 8007574:	e0ff      	b.n	8007776 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2201      	movs	r2, #1
 800757a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2b14      	cmp	r3, #20
 8007582:	f200 80f0 	bhi.w	8007766 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007586:	a201      	add	r2, pc, #4	; (adr r2, 800758c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800758c:	080075e1 	.word	0x080075e1
 8007590:	08007767 	.word	0x08007767
 8007594:	08007767 	.word	0x08007767
 8007598:	08007767 	.word	0x08007767
 800759c:	08007621 	.word	0x08007621
 80075a0:	08007767 	.word	0x08007767
 80075a4:	08007767 	.word	0x08007767
 80075a8:	08007767 	.word	0x08007767
 80075ac:	08007663 	.word	0x08007663
 80075b0:	08007767 	.word	0x08007767
 80075b4:	08007767 	.word	0x08007767
 80075b8:	08007767 	.word	0x08007767
 80075bc:	080076a3 	.word	0x080076a3
 80075c0:	08007767 	.word	0x08007767
 80075c4:	08007767 	.word	0x08007767
 80075c8:	08007767 	.word	0x08007767
 80075cc:	080076e5 	.word	0x080076e5
 80075d0:	08007767 	.word	0x08007767
 80075d4:	08007767 	.word	0x08007767
 80075d8:	08007767 	.word	0x08007767
 80075dc:	08007725 	.word	0x08007725
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	68b9      	ldr	r1, [r7, #8]
 80075e6:	4618      	mov	r0, r3
 80075e8:	f000 fa66 	bl	8007ab8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	699a      	ldr	r2, [r3, #24]
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f042 0208 	orr.w	r2, r2, #8
 80075fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	699a      	ldr	r2, [r3, #24]
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f022 0204 	bic.w	r2, r2, #4
 800760a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	6999      	ldr	r1, [r3, #24]
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	691a      	ldr	r2, [r3, #16]
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	430a      	orrs	r2, r1
 800761c:	619a      	str	r2, [r3, #24]
      break;
 800761e:	e0a5      	b.n	800776c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	68b9      	ldr	r1, [r7, #8]
 8007626:	4618      	mov	r0, r3
 8007628:	f000 fab8 	bl	8007b9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	699a      	ldr	r2, [r3, #24]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800763a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	699a      	ldr	r2, [r3, #24]
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800764a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	6999      	ldr	r1, [r3, #24]
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	691b      	ldr	r3, [r3, #16]
 8007656:	021a      	lsls	r2, r3, #8
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	430a      	orrs	r2, r1
 800765e:	619a      	str	r2, [r3, #24]
      break;
 8007660:	e084      	b.n	800776c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	68b9      	ldr	r1, [r7, #8]
 8007668:	4618      	mov	r0, r3
 800766a:	f000 fb0f 	bl	8007c8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	69da      	ldr	r2, [r3, #28]
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f042 0208 	orr.w	r2, r2, #8
 800767c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	69da      	ldr	r2, [r3, #28]
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f022 0204 	bic.w	r2, r2, #4
 800768c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	69d9      	ldr	r1, [r3, #28]
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	691a      	ldr	r2, [r3, #16]
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	430a      	orrs	r2, r1
 800769e:	61da      	str	r2, [r3, #28]
      break;
 80076a0:	e064      	b.n	800776c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	68b9      	ldr	r1, [r7, #8]
 80076a8:	4618      	mov	r0, r3
 80076aa:	f000 fb65 	bl	8007d78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	69da      	ldr	r2, [r3, #28]
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	69da      	ldr	r2, [r3, #28]
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	69d9      	ldr	r1, [r3, #28]
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	691b      	ldr	r3, [r3, #16]
 80076d8:	021a      	lsls	r2, r3, #8
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	430a      	orrs	r2, r1
 80076e0:	61da      	str	r2, [r3, #28]
      break;
 80076e2:	e043      	b.n	800776c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	68b9      	ldr	r1, [r7, #8]
 80076ea:	4618      	mov	r0, r3
 80076ec:	f000 fb9c 	bl	8007e28 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f042 0208 	orr.w	r2, r2, #8
 80076fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f022 0204 	bic.w	r2, r2, #4
 800770e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	691a      	ldr	r2, [r3, #16]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	430a      	orrs	r2, r1
 8007720:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007722:	e023      	b.n	800776c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	68b9      	ldr	r1, [r7, #8]
 800772a:	4618      	mov	r0, r3
 800772c:	f000 fbce 	bl	8007ecc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800773e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800774e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	691b      	ldr	r3, [r3, #16]
 800775a:	021a      	lsls	r2, r3, #8
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	430a      	orrs	r2, r1
 8007762:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007764:	e002      	b.n	800776c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	75fb      	strb	r3, [r7, #23]
      break;
 800776a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2200      	movs	r2, #0
 8007770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007774:	7dfb      	ldrb	r3, [r7, #23]
}
 8007776:	4618      	mov	r0, r3
 8007778:	3718      	adds	r7, #24
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}
 800777e:	bf00      	nop

08007780 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b084      	sub	sp, #16
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800778a:	2300      	movs	r3, #0
 800778c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007794:	2b01      	cmp	r3, #1
 8007796:	d101      	bne.n	800779c <HAL_TIM_ConfigClockSource+0x1c>
 8007798:	2302      	movs	r3, #2
 800779a:	e0b4      	b.n	8007906 <HAL_TIM_ConfigClockSource+0x186>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2201      	movs	r2, #1
 80077a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2202      	movs	r2, #2
 80077a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	689b      	ldr	r3, [r3, #8]
 80077b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80077b4:	68ba      	ldr	r2, [r7, #8]
 80077b6:	4b56      	ldr	r3, [pc, #344]	; (8007910 <HAL_TIM_ConfigClockSource+0x190>)
 80077b8:	4013      	ands	r3, r2
 80077ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80077c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	68ba      	ldr	r2, [r7, #8]
 80077ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077d4:	d03e      	beq.n	8007854 <HAL_TIM_ConfigClockSource+0xd4>
 80077d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077da:	f200 8087 	bhi.w	80078ec <HAL_TIM_ConfigClockSource+0x16c>
 80077de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077e2:	f000 8086 	beq.w	80078f2 <HAL_TIM_ConfigClockSource+0x172>
 80077e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077ea:	d87f      	bhi.n	80078ec <HAL_TIM_ConfigClockSource+0x16c>
 80077ec:	2b70      	cmp	r3, #112	; 0x70
 80077ee:	d01a      	beq.n	8007826 <HAL_TIM_ConfigClockSource+0xa6>
 80077f0:	2b70      	cmp	r3, #112	; 0x70
 80077f2:	d87b      	bhi.n	80078ec <HAL_TIM_ConfigClockSource+0x16c>
 80077f4:	2b60      	cmp	r3, #96	; 0x60
 80077f6:	d050      	beq.n	800789a <HAL_TIM_ConfigClockSource+0x11a>
 80077f8:	2b60      	cmp	r3, #96	; 0x60
 80077fa:	d877      	bhi.n	80078ec <HAL_TIM_ConfigClockSource+0x16c>
 80077fc:	2b50      	cmp	r3, #80	; 0x50
 80077fe:	d03c      	beq.n	800787a <HAL_TIM_ConfigClockSource+0xfa>
 8007800:	2b50      	cmp	r3, #80	; 0x50
 8007802:	d873      	bhi.n	80078ec <HAL_TIM_ConfigClockSource+0x16c>
 8007804:	2b40      	cmp	r3, #64	; 0x40
 8007806:	d058      	beq.n	80078ba <HAL_TIM_ConfigClockSource+0x13a>
 8007808:	2b40      	cmp	r3, #64	; 0x40
 800780a:	d86f      	bhi.n	80078ec <HAL_TIM_ConfigClockSource+0x16c>
 800780c:	2b30      	cmp	r3, #48	; 0x30
 800780e:	d064      	beq.n	80078da <HAL_TIM_ConfigClockSource+0x15a>
 8007810:	2b30      	cmp	r3, #48	; 0x30
 8007812:	d86b      	bhi.n	80078ec <HAL_TIM_ConfigClockSource+0x16c>
 8007814:	2b20      	cmp	r3, #32
 8007816:	d060      	beq.n	80078da <HAL_TIM_ConfigClockSource+0x15a>
 8007818:	2b20      	cmp	r3, #32
 800781a:	d867      	bhi.n	80078ec <HAL_TIM_ConfigClockSource+0x16c>
 800781c:	2b00      	cmp	r3, #0
 800781e:	d05c      	beq.n	80078da <HAL_TIM_ConfigClockSource+0x15a>
 8007820:	2b10      	cmp	r3, #16
 8007822:	d05a      	beq.n	80078da <HAL_TIM_ConfigClockSource+0x15a>
 8007824:	e062      	b.n	80078ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6818      	ldr	r0, [r3, #0]
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	6899      	ldr	r1, [r3, #8]
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	685a      	ldr	r2, [r3, #4]
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	68db      	ldr	r3, [r3, #12]
 8007836:	f000 fc17 	bl	8008068 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007848:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	68ba      	ldr	r2, [r7, #8]
 8007850:	609a      	str	r2, [r3, #8]
      break;
 8007852:	e04f      	b.n	80078f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6818      	ldr	r0, [r3, #0]
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	6899      	ldr	r1, [r3, #8]
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	685a      	ldr	r2, [r3, #4]
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	68db      	ldr	r3, [r3, #12]
 8007864:	f000 fc00 	bl	8008068 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	689a      	ldr	r2, [r3, #8]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007876:	609a      	str	r2, [r3, #8]
      break;
 8007878:	e03c      	b.n	80078f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6818      	ldr	r0, [r3, #0]
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	6859      	ldr	r1, [r3, #4]
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	68db      	ldr	r3, [r3, #12]
 8007886:	461a      	mov	r2, r3
 8007888:	f000 fb74 	bl	8007f74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	2150      	movs	r1, #80	; 0x50
 8007892:	4618      	mov	r0, r3
 8007894:	f000 fbcd 	bl	8008032 <TIM_ITRx_SetConfig>
      break;
 8007898:	e02c      	b.n	80078f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6818      	ldr	r0, [r3, #0]
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	6859      	ldr	r1, [r3, #4]
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	68db      	ldr	r3, [r3, #12]
 80078a6:	461a      	mov	r2, r3
 80078a8:	f000 fb93 	bl	8007fd2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	2160      	movs	r1, #96	; 0x60
 80078b2:	4618      	mov	r0, r3
 80078b4:	f000 fbbd 	bl	8008032 <TIM_ITRx_SetConfig>
      break;
 80078b8:	e01c      	b.n	80078f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6818      	ldr	r0, [r3, #0]
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	6859      	ldr	r1, [r3, #4]
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	68db      	ldr	r3, [r3, #12]
 80078c6:	461a      	mov	r2, r3
 80078c8:	f000 fb54 	bl	8007f74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	2140      	movs	r1, #64	; 0x40
 80078d2:	4618      	mov	r0, r3
 80078d4:	f000 fbad 	bl	8008032 <TIM_ITRx_SetConfig>
      break;
 80078d8:	e00c      	b.n	80078f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4619      	mov	r1, r3
 80078e4:	4610      	mov	r0, r2
 80078e6:	f000 fba4 	bl	8008032 <TIM_ITRx_SetConfig>
      break;
 80078ea:	e003      	b.n	80078f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80078ec:	2301      	movs	r3, #1
 80078ee:	73fb      	strb	r3, [r7, #15]
      break;
 80078f0:	e000      	b.n	80078f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80078f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2201      	movs	r2, #1
 80078f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2200      	movs	r2, #0
 8007900:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007904:	7bfb      	ldrb	r3, [r7, #15]
}
 8007906:	4618      	mov	r0, r3
 8007908:	3710      	adds	r7, #16
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}
 800790e:	bf00      	nop
 8007910:	fffeff88 	.word	0xfffeff88

08007914 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007914:	b480      	push	{r7}
 8007916:	b083      	sub	sp, #12
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800791c:	bf00      	nop
 800791e:	370c      	adds	r7, #12
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr

08007928 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007928:	b480      	push	{r7}
 800792a:	b083      	sub	sp, #12
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007930:	bf00      	nop
 8007932:	370c      	adds	r7, #12
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr

0800793c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800793c:	b480      	push	{r7}
 800793e:	b083      	sub	sp, #12
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007944:	bf00      	nop
 8007946:	370c      	adds	r7, #12
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr

08007950 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007950:	b480      	push	{r7}
 8007952:	b083      	sub	sp, #12
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007958:	bf00      	nop
 800795a:	370c      	adds	r7, #12
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr

08007964 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007964:	b480      	push	{r7}
 8007966:	b083      	sub	sp, #12
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800796c:	bf00      	nop
 800796e:	370c      	adds	r7, #12
 8007970:	46bd      	mov	sp, r7
 8007972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007976:	4770      	bx	lr

08007978 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007978:	b480      	push	{r7}
 800797a:	b085      	sub	sp, #20
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	4a40      	ldr	r2, [pc, #256]	; (8007a8c <TIM_Base_SetConfig+0x114>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d013      	beq.n	80079b8 <TIM_Base_SetConfig+0x40>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007996:	d00f      	beq.n	80079b8 <TIM_Base_SetConfig+0x40>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	4a3d      	ldr	r2, [pc, #244]	; (8007a90 <TIM_Base_SetConfig+0x118>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d00b      	beq.n	80079b8 <TIM_Base_SetConfig+0x40>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	4a3c      	ldr	r2, [pc, #240]	; (8007a94 <TIM_Base_SetConfig+0x11c>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d007      	beq.n	80079b8 <TIM_Base_SetConfig+0x40>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	4a3b      	ldr	r2, [pc, #236]	; (8007a98 <TIM_Base_SetConfig+0x120>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d003      	beq.n	80079b8 <TIM_Base_SetConfig+0x40>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	4a3a      	ldr	r2, [pc, #232]	; (8007a9c <TIM_Base_SetConfig+0x124>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d108      	bne.n	80079ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	68fa      	ldr	r2, [r7, #12]
 80079c6:	4313      	orrs	r3, r2
 80079c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	4a2f      	ldr	r2, [pc, #188]	; (8007a8c <TIM_Base_SetConfig+0x114>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d02b      	beq.n	8007a2a <TIM_Base_SetConfig+0xb2>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079d8:	d027      	beq.n	8007a2a <TIM_Base_SetConfig+0xb2>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	4a2c      	ldr	r2, [pc, #176]	; (8007a90 <TIM_Base_SetConfig+0x118>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d023      	beq.n	8007a2a <TIM_Base_SetConfig+0xb2>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	4a2b      	ldr	r2, [pc, #172]	; (8007a94 <TIM_Base_SetConfig+0x11c>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d01f      	beq.n	8007a2a <TIM_Base_SetConfig+0xb2>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	4a2a      	ldr	r2, [pc, #168]	; (8007a98 <TIM_Base_SetConfig+0x120>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d01b      	beq.n	8007a2a <TIM_Base_SetConfig+0xb2>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	4a29      	ldr	r2, [pc, #164]	; (8007a9c <TIM_Base_SetConfig+0x124>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d017      	beq.n	8007a2a <TIM_Base_SetConfig+0xb2>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	4a28      	ldr	r2, [pc, #160]	; (8007aa0 <TIM_Base_SetConfig+0x128>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d013      	beq.n	8007a2a <TIM_Base_SetConfig+0xb2>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	4a27      	ldr	r2, [pc, #156]	; (8007aa4 <TIM_Base_SetConfig+0x12c>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d00f      	beq.n	8007a2a <TIM_Base_SetConfig+0xb2>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	4a26      	ldr	r2, [pc, #152]	; (8007aa8 <TIM_Base_SetConfig+0x130>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d00b      	beq.n	8007a2a <TIM_Base_SetConfig+0xb2>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	4a25      	ldr	r2, [pc, #148]	; (8007aac <TIM_Base_SetConfig+0x134>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d007      	beq.n	8007a2a <TIM_Base_SetConfig+0xb2>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	4a24      	ldr	r2, [pc, #144]	; (8007ab0 <TIM_Base_SetConfig+0x138>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d003      	beq.n	8007a2a <TIM_Base_SetConfig+0xb2>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	4a23      	ldr	r2, [pc, #140]	; (8007ab4 <TIM_Base_SetConfig+0x13c>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d108      	bne.n	8007a3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	68db      	ldr	r3, [r3, #12]
 8007a36:	68fa      	ldr	r2, [r7, #12]
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	695b      	ldr	r3, [r3, #20]
 8007a46:	4313      	orrs	r3, r2
 8007a48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	68fa      	ldr	r2, [r7, #12]
 8007a4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	689a      	ldr	r2, [r3, #8]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	681a      	ldr	r2, [r3, #0]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	4a0a      	ldr	r2, [pc, #40]	; (8007a8c <TIM_Base_SetConfig+0x114>)
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d003      	beq.n	8007a70 <TIM_Base_SetConfig+0xf8>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	4a0c      	ldr	r2, [pc, #48]	; (8007a9c <TIM_Base_SetConfig+0x124>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d103      	bne.n	8007a78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	691a      	ldr	r2, [r3, #16]
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	615a      	str	r2, [r3, #20]
}
 8007a7e:	bf00      	nop
 8007a80:	3714      	adds	r7, #20
 8007a82:	46bd      	mov	sp, r7
 8007a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a88:	4770      	bx	lr
 8007a8a:	bf00      	nop
 8007a8c:	40010000 	.word	0x40010000
 8007a90:	40000400 	.word	0x40000400
 8007a94:	40000800 	.word	0x40000800
 8007a98:	40000c00 	.word	0x40000c00
 8007a9c:	40010400 	.word	0x40010400
 8007aa0:	40014000 	.word	0x40014000
 8007aa4:	40014400 	.word	0x40014400
 8007aa8:	40014800 	.word	0x40014800
 8007aac:	40001800 	.word	0x40001800
 8007ab0:	40001c00 	.word	0x40001c00
 8007ab4:	40002000 	.word	0x40002000

08007ab8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b087      	sub	sp, #28
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6a1b      	ldr	r3, [r3, #32]
 8007ac6:	f023 0201 	bic.w	r2, r3, #1
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6a1b      	ldr	r3, [r3, #32]
 8007ad2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	699b      	ldr	r3, [r3, #24]
 8007ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007ae0:	68fa      	ldr	r2, [r7, #12]
 8007ae2:	4b2b      	ldr	r3, [pc, #172]	; (8007b90 <TIM_OC1_SetConfig+0xd8>)
 8007ae4:	4013      	ands	r3, r2
 8007ae6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f023 0303 	bic.w	r3, r3, #3
 8007aee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	68fa      	ldr	r2, [r7, #12]
 8007af6:	4313      	orrs	r3, r2
 8007af8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	f023 0302 	bic.w	r3, r3, #2
 8007b00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	697a      	ldr	r2, [r7, #20]
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	4a21      	ldr	r2, [pc, #132]	; (8007b94 <TIM_OC1_SetConfig+0xdc>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d003      	beq.n	8007b1c <TIM_OC1_SetConfig+0x64>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	4a20      	ldr	r2, [pc, #128]	; (8007b98 <TIM_OC1_SetConfig+0xe0>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d10c      	bne.n	8007b36 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	f023 0308 	bic.w	r3, r3, #8
 8007b22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	697a      	ldr	r2, [r7, #20]
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	f023 0304 	bic.w	r3, r3, #4
 8007b34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	4a16      	ldr	r2, [pc, #88]	; (8007b94 <TIM_OC1_SetConfig+0xdc>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d003      	beq.n	8007b46 <TIM_OC1_SetConfig+0x8e>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	4a15      	ldr	r2, [pc, #84]	; (8007b98 <TIM_OC1_SetConfig+0xe0>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d111      	bne.n	8007b6a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	695b      	ldr	r3, [r3, #20]
 8007b5a:	693a      	ldr	r2, [r7, #16]
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	699b      	ldr	r3, [r3, #24]
 8007b64:	693a      	ldr	r2, [r7, #16]
 8007b66:	4313      	orrs	r3, r2
 8007b68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	693a      	ldr	r2, [r7, #16]
 8007b6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	68fa      	ldr	r2, [r7, #12]
 8007b74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	685a      	ldr	r2, [r3, #4]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	697a      	ldr	r2, [r7, #20]
 8007b82:	621a      	str	r2, [r3, #32]
}
 8007b84:	bf00      	nop
 8007b86:	371c      	adds	r7, #28
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr
 8007b90:	fffeff8f 	.word	0xfffeff8f
 8007b94:	40010000 	.word	0x40010000
 8007b98:	40010400 	.word	0x40010400

08007b9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b087      	sub	sp, #28
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6a1b      	ldr	r3, [r3, #32]
 8007baa:	f023 0210 	bic.w	r2, r3, #16
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6a1b      	ldr	r3, [r3, #32]
 8007bb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	699b      	ldr	r3, [r3, #24]
 8007bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007bc4:	68fa      	ldr	r2, [r7, #12]
 8007bc6:	4b2e      	ldr	r3, [pc, #184]	; (8007c80 <TIM_OC2_SetConfig+0xe4>)
 8007bc8:	4013      	ands	r3, r2
 8007bca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	021b      	lsls	r3, r3, #8
 8007bda:	68fa      	ldr	r2, [r7, #12]
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	f023 0320 	bic.w	r3, r3, #32
 8007be6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	689b      	ldr	r3, [r3, #8]
 8007bec:	011b      	lsls	r3, r3, #4
 8007bee:	697a      	ldr	r2, [r7, #20]
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	4a23      	ldr	r2, [pc, #140]	; (8007c84 <TIM_OC2_SetConfig+0xe8>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d003      	beq.n	8007c04 <TIM_OC2_SetConfig+0x68>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	4a22      	ldr	r2, [pc, #136]	; (8007c88 <TIM_OC2_SetConfig+0xec>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d10d      	bne.n	8007c20 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	68db      	ldr	r3, [r3, #12]
 8007c10:	011b      	lsls	r3, r3, #4
 8007c12:	697a      	ldr	r2, [r7, #20]
 8007c14:	4313      	orrs	r3, r2
 8007c16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c1e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	4a18      	ldr	r2, [pc, #96]	; (8007c84 <TIM_OC2_SetConfig+0xe8>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d003      	beq.n	8007c30 <TIM_OC2_SetConfig+0x94>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	4a17      	ldr	r2, [pc, #92]	; (8007c88 <TIM_OC2_SetConfig+0xec>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d113      	bne.n	8007c58 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	695b      	ldr	r3, [r3, #20]
 8007c44:	009b      	lsls	r3, r3, #2
 8007c46:	693a      	ldr	r2, [r7, #16]
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	699b      	ldr	r3, [r3, #24]
 8007c50:	009b      	lsls	r3, r3, #2
 8007c52:	693a      	ldr	r2, [r7, #16]
 8007c54:	4313      	orrs	r3, r2
 8007c56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	693a      	ldr	r2, [r7, #16]
 8007c5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	68fa      	ldr	r2, [r7, #12]
 8007c62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	685a      	ldr	r2, [r3, #4]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	697a      	ldr	r2, [r7, #20]
 8007c70:	621a      	str	r2, [r3, #32]
}
 8007c72:	bf00      	nop
 8007c74:	371c      	adds	r7, #28
 8007c76:	46bd      	mov	sp, r7
 8007c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7c:	4770      	bx	lr
 8007c7e:	bf00      	nop
 8007c80:	feff8fff 	.word	0xfeff8fff
 8007c84:	40010000 	.word	0x40010000
 8007c88:	40010400 	.word	0x40010400

08007c8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b087      	sub	sp, #28
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
 8007c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6a1b      	ldr	r3, [r3, #32]
 8007c9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6a1b      	ldr	r3, [r3, #32]
 8007ca6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	69db      	ldr	r3, [r3, #28]
 8007cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007cb4:	68fa      	ldr	r2, [r7, #12]
 8007cb6:	4b2d      	ldr	r3, [pc, #180]	; (8007d6c <TIM_OC3_SetConfig+0xe0>)
 8007cb8:	4013      	ands	r3, r2
 8007cba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f023 0303 	bic.w	r3, r3, #3
 8007cc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	68fa      	ldr	r2, [r7, #12]
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007cd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	689b      	ldr	r3, [r3, #8]
 8007cda:	021b      	lsls	r3, r3, #8
 8007cdc:	697a      	ldr	r2, [r7, #20]
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	4a22      	ldr	r2, [pc, #136]	; (8007d70 <TIM_OC3_SetConfig+0xe4>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d003      	beq.n	8007cf2 <TIM_OC3_SetConfig+0x66>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	4a21      	ldr	r2, [pc, #132]	; (8007d74 <TIM_OC3_SetConfig+0xe8>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d10d      	bne.n	8007d0e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007cf8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	68db      	ldr	r3, [r3, #12]
 8007cfe:	021b      	lsls	r3, r3, #8
 8007d00:	697a      	ldr	r2, [r7, #20]
 8007d02:	4313      	orrs	r3, r2
 8007d04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007d0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	4a17      	ldr	r2, [pc, #92]	; (8007d70 <TIM_OC3_SetConfig+0xe4>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d003      	beq.n	8007d1e <TIM_OC3_SetConfig+0x92>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	4a16      	ldr	r2, [pc, #88]	; (8007d74 <TIM_OC3_SetConfig+0xe8>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d113      	bne.n	8007d46 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	695b      	ldr	r3, [r3, #20]
 8007d32:	011b      	lsls	r3, r3, #4
 8007d34:	693a      	ldr	r2, [r7, #16]
 8007d36:	4313      	orrs	r3, r2
 8007d38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	699b      	ldr	r3, [r3, #24]
 8007d3e:	011b      	lsls	r3, r3, #4
 8007d40:	693a      	ldr	r2, [r7, #16]
 8007d42:	4313      	orrs	r3, r2
 8007d44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	693a      	ldr	r2, [r7, #16]
 8007d4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	68fa      	ldr	r2, [r7, #12]
 8007d50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	685a      	ldr	r2, [r3, #4]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	697a      	ldr	r2, [r7, #20]
 8007d5e:	621a      	str	r2, [r3, #32]
}
 8007d60:	bf00      	nop
 8007d62:	371c      	adds	r7, #28
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr
 8007d6c:	fffeff8f 	.word	0xfffeff8f
 8007d70:	40010000 	.word	0x40010000
 8007d74:	40010400 	.word	0x40010400

08007d78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b087      	sub	sp, #28
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6a1b      	ldr	r3, [r3, #32]
 8007d86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6a1b      	ldr	r3, [r3, #32]
 8007d92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	69db      	ldr	r3, [r3, #28]
 8007d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007da0:	68fa      	ldr	r2, [r7, #12]
 8007da2:	4b1e      	ldr	r3, [pc, #120]	; (8007e1c <TIM_OC4_SetConfig+0xa4>)
 8007da4:	4013      	ands	r3, r2
 8007da6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007dae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	021b      	lsls	r3, r3, #8
 8007db6:	68fa      	ldr	r2, [r7, #12]
 8007db8:	4313      	orrs	r3, r2
 8007dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007dc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	689b      	ldr	r3, [r3, #8]
 8007dc8:	031b      	lsls	r3, r3, #12
 8007dca:	693a      	ldr	r2, [r7, #16]
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	4a13      	ldr	r2, [pc, #76]	; (8007e20 <TIM_OC4_SetConfig+0xa8>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d003      	beq.n	8007de0 <TIM_OC4_SetConfig+0x68>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	4a12      	ldr	r2, [pc, #72]	; (8007e24 <TIM_OC4_SetConfig+0xac>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d109      	bne.n	8007df4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007de6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	695b      	ldr	r3, [r3, #20]
 8007dec:	019b      	lsls	r3, r3, #6
 8007dee:	697a      	ldr	r2, [r7, #20]
 8007df0:	4313      	orrs	r3, r2
 8007df2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	697a      	ldr	r2, [r7, #20]
 8007df8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	68fa      	ldr	r2, [r7, #12]
 8007dfe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	685a      	ldr	r2, [r3, #4]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	693a      	ldr	r2, [r7, #16]
 8007e0c:	621a      	str	r2, [r3, #32]
}
 8007e0e:	bf00      	nop
 8007e10:	371c      	adds	r7, #28
 8007e12:	46bd      	mov	sp, r7
 8007e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e18:	4770      	bx	lr
 8007e1a:	bf00      	nop
 8007e1c:	feff8fff 	.word	0xfeff8fff
 8007e20:	40010000 	.word	0x40010000
 8007e24:	40010400 	.word	0x40010400

08007e28 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b087      	sub	sp, #28
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6a1b      	ldr	r3, [r3, #32]
 8007e36:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6a1b      	ldr	r3, [r3, #32]
 8007e42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007e50:	68fa      	ldr	r2, [r7, #12]
 8007e52:	4b1b      	ldr	r3, [pc, #108]	; (8007ec0 <TIM_OC5_SetConfig+0x98>)
 8007e54:	4013      	ands	r3, r2
 8007e56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	68fa      	ldr	r2, [r7, #12]
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007e68:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	689b      	ldr	r3, [r3, #8]
 8007e6e:	041b      	lsls	r3, r3, #16
 8007e70:	693a      	ldr	r2, [r7, #16]
 8007e72:	4313      	orrs	r3, r2
 8007e74:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	4a12      	ldr	r2, [pc, #72]	; (8007ec4 <TIM_OC5_SetConfig+0x9c>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d003      	beq.n	8007e86 <TIM_OC5_SetConfig+0x5e>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	4a11      	ldr	r2, [pc, #68]	; (8007ec8 <TIM_OC5_SetConfig+0xa0>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d109      	bne.n	8007e9a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e8c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	695b      	ldr	r3, [r3, #20]
 8007e92:	021b      	lsls	r3, r3, #8
 8007e94:	697a      	ldr	r2, [r7, #20]
 8007e96:	4313      	orrs	r3, r2
 8007e98:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	697a      	ldr	r2, [r7, #20]
 8007e9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	68fa      	ldr	r2, [r7, #12]
 8007ea4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	685a      	ldr	r2, [r3, #4]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	693a      	ldr	r2, [r7, #16]
 8007eb2:	621a      	str	r2, [r3, #32]
}
 8007eb4:	bf00      	nop
 8007eb6:	371c      	adds	r7, #28
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr
 8007ec0:	fffeff8f 	.word	0xfffeff8f
 8007ec4:	40010000 	.word	0x40010000
 8007ec8:	40010400 	.word	0x40010400

08007ecc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b087      	sub	sp, #28
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6a1b      	ldr	r3, [r3, #32]
 8007eda:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6a1b      	ldr	r3, [r3, #32]
 8007ee6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007ef4:	68fa      	ldr	r2, [r7, #12]
 8007ef6:	4b1c      	ldr	r3, [pc, #112]	; (8007f68 <TIM_OC6_SetConfig+0x9c>)
 8007ef8:	4013      	ands	r3, r2
 8007efa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	021b      	lsls	r3, r3, #8
 8007f02:	68fa      	ldr	r2, [r7, #12]
 8007f04:	4313      	orrs	r3, r2
 8007f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007f0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	689b      	ldr	r3, [r3, #8]
 8007f14:	051b      	lsls	r3, r3, #20
 8007f16:	693a      	ldr	r2, [r7, #16]
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	4a13      	ldr	r2, [pc, #76]	; (8007f6c <TIM_OC6_SetConfig+0xa0>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d003      	beq.n	8007f2c <TIM_OC6_SetConfig+0x60>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	4a12      	ldr	r2, [pc, #72]	; (8007f70 <TIM_OC6_SetConfig+0xa4>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d109      	bne.n	8007f40 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f32:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	695b      	ldr	r3, [r3, #20]
 8007f38:	029b      	lsls	r3, r3, #10
 8007f3a:	697a      	ldr	r2, [r7, #20]
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	697a      	ldr	r2, [r7, #20]
 8007f44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	68fa      	ldr	r2, [r7, #12]
 8007f4a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	685a      	ldr	r2, [r3, #4]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	693a      	ldr	r2, [r7, #16]
 8007f58:	621a      	str	r2, [r3, #32]
}
 8007f5a:	bf00      	nop
 8007f5c:	371c      	adds	r7, #28
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f64:	4770      	bx	lr
 8007f66:	bf00      	nop
 8007f68:	feff8fff 	.word	0xfeff8fff
 8007f6c:	40010000 	.word	0x40010000
 8007f70:	40010400 	.word	0x40010400

08007f74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b087      	sub	sp, #28
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	60f8      	str	r0, [r7, #12]
 8007f7c:	60b9      	str	r1, [r7, #8]
 8007f7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	6a1b      	ldr	r3, [r3, #32]
 8007f84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	6a1b      	ldr	r3, [r3, #32]
 8007f8a:	f023 0201 	bic.w	r2, r3, #1
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	699b      	ldr	r3, [r3, #24]
 8007f96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007f9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	011b      	lsls	r3, r3, #4
 8007fa4:	693a      	ldr	r2, [r7, #16]
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	f023 030a 	bic.w	r3, r3, #10
 8007fb0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007fb2:	697a      	ldr	r2, [r7, #20]
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	693a      	ldr	r2, [r7, #16]
 8007fbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	697a      	ldr	r2, [r7, #20]
 8007fc4:	621a      	str	r2, [r3, #32]
}
 8007fc6:	bf00      	nop
 8007fc8:	371c      	adds	r7, #28
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd0:	4770      	bx	lr

08007fd2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007fd2:	b480      	push	{r7}
 8007fd4:	b087      	sub	sp, #28
 8007fd6:	af00      	add	r7, sp, #0
 8007fd8:	60f8      	str	r0, [r7, #12]
 8007fda:	60b9      	str	r1, [r7, #8]
 8007fdc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	6a1b      	ldr	r3, [r3, #32]
 8007fe2:	f023 0210 	bic.w	r2, r3, #16
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	699b      	ldr	r3, [r3, #24]
 8007fee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	6a1b      	ldr	r3, [r3, #32]
 8007ff4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007ffc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	031b      	lsls	r3, r3, #12
 8008002:	697a      	ldr	r2, [r7, #20]
 8008004:	4313      	orrs	r3, r2
 8008006:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800800e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	011b      	lsls	r3, r3, #4
 8008014:	693a      	ldr	r2, [r7, #16]
 8008016:	4313      	orrs	r3, r2
 8008018:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	697a      	ldr	r2, [r7, #20]
 800801e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	693a      	ldr	r2, [r7, #16]
 8008024:	621a      	str	r2, [r3, #32]
}
 8008026:	bf00      	nop
 8008028:	371c      	adds	r7, #28
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr

08008032 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008032:	b480      	push	{r7}
 8008034:	b085      	sub	sp, #20
 8008036:	af00      	add	r7, sp, #0
 8008038:	6078      	str	r0, [r7, #4]
 800803a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	689b      	ldr	r3, [r3, #8]
 8008040:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008048:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800804a:	683a      	ldr	r2, [r7, #0]
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	4313      	orrs	r3, r2
 8008050:	f043 0307 	orr.w	r3, r3, #7
 8008054:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	68fa      	ldr	r2, [r7, #12]
 800805a:	609a      	str	r2, [r3, #8]
}
 800805c:	bf00      	nop
 800805e:	3714      	adds	r7, #20
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr

08008068 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008068:	b480      	push	{r7}
 800806a:	b087      	sub	sp, #28
 800806c:	af00      	add	r7, sp, #0
 800806e:	60f8      	str	r0, [r7, #12]
 8008070:	60b9      	str	r1, [r7, #8]
 8008072:	607a      	str	r2, [r7, #4]
 8008074:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008082:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	021a      	lsls	r2, r3, #8
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	431a      	orrs	r2, r3
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	4313      	orrs	r3, r2
 8008090:	697a      	ldr	r2, [r7, #20]
 8008092:	4313      	orrs	r3, r2
 8008094:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	697a      	ldr	r2, [r7, #20]
 800809a:	609a      	str	r2, [r3, #8]
}
 800809c:	bf00      	nop
 800809e:	371c      	adds	r7, #28
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr

080080a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b087      	sub	sp, #28
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	60f8      	str	r0, [r7, #12]
 80080b0:	60b9      	str	r1, [r7, #8]
 80080b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	f003 031f 	and.w	r3, r3, #31
 80080ba:	2201      	movs	r2, #1
 80080bc:	fa02 f303 	lsl.w	r3, r2, r3
 80080c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	6a1a      	ldr	r2, [r3, #32]
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	43db      	mvns	r3, r3
 80080ca:	401a      	ands	r2, r3
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	6a1a      	ldr	r2, [r3, #32]
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	f003 031f 	and.w	r3, r3, #31
 80080da:	6879      	ldr	r1, [r7, #4]
 80080dc:	fa01 f303 	lsl.w	r3, r1, r3
 80080e0:	431a      	orrs	r2, r3
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	621a      	str	r2, [r3, #32]
}
 80080e6:	bf00      	nop
 80080e8:	371c      	adds	r7, #28
 80080ea:	46bd      	mov	sp, r7
 80080ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f0:	4770      	bx	lr
	...

080080f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b085      	sub	sp, #20
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008104:	2b01      	cmp	r3, #1
 8008106:	d101      	bne.n	800810c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008108:	2302      	movs	r3, #2
 800810a:	e06d      	b.n	80081e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2201      	movs	r2, #1
 8008110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2202      	movs	r2, #2
 8008118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	689b      	ldr	r3, [r3, #8]
 800812a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a30      	ldr	r2, [pc, #192]	; (80081f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d004      	beq.n	8008140 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a2f      	ldr	r2, [pc, #188]	; (80081f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d108      	bne.n	8008152 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008146:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	68fa      	ldr	r2, [r7, #12]
 800814e:	4313      	orrs	r3, r2
 8008150:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008158:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	68fa      	ldr	r2, [r7, #12]
 8008160:	4313      	orrs	r3, r2
 8008162:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	68fa      	ldr	r2, [r7, #12]
 800816a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a20      	ldr	r2, [pc, #128]	; (80081f4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d022      	beq.n	80081bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800817e:	d01d      	beq.n	80081bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a1d      	ldr	r2, [pc, #116]	; (80081fc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d018      	beq.n	80081bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a1c      	ldr	r2, [pc, #112]	; (8008200 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d013      	beq.n	80081bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a1a      	ldr	r2, [pc, #104]	; (8008204 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d00e      	beq.n	80081bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a15      	ldr	r2, [pc, #84]	; (80081f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d009      	beq.n	80081bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a16      	ldr	r2, [pc, #88]	; (8008208 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d004      	beq.n	80081bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a15      	ldr	r2, [pc, #84]	; (800820c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d10c      	bne.n	80081d6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	689b      	ldr	r3, [r3, #8]
 80081c8:	68ba      	ldr	r2, [r7, #8]
 80081ca:	4313      	orrs	r3, r2
 80081cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	68ba      	ldr	r2, [r7, #8]
 80081d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2201      	movs	r2, #1
 80081da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2200      	movs	r2, #0
 80081e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80081e6:	2300      	movs	r3, #0
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3714      	adds	r7, #20
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr
 80081f4:	40010000 	.word	0x40010000
 80081f8:	40010400 	.word	0x40010400
 80081fc:	40000400 	.word	0x40000400
 8008200:	40000800 	.word	0x40000800
 8008204:	40000c00 	.word	0x40000c00
 8008208:	40014000 	.word	0x40014000
 800820c:	40001800 	.word	0x40001800

08008210 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008210:	b480      	push	{r7}
 8008212:	b083      	sub	sp, #12
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008218:	bf00      	nop
 800821a:	370c      	adds	r7, #12
 800821c:	46bd      	mov	sp, r7
 800821e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008222:	4770      	bx	lr

08008224 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008224:	b480      	push	{r7}
 8008226:	b083      	sub	sp, #12
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800822c:	bf00      	nop
 800822e:	370c      	adds	r7, #12
 8008230:	46bd      	mov	sp, r7
 8008232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008236:	4770      	bx	lr

08008238 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008238:	b480      	push	{r7}
 800823a:	b083      	sub	sp, #12
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008240:	bf00      	nop
 8008242:	370c      	adds	r7, #12
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr

0800824c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b082      	sub	sp, #8
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d101      	bne.n	800825e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800825a:	2301      	movs	r3, #1
 800825c:	e040      	b.n	80082e0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008262:	2b00      	cmp	r3, #0
 8008264:	d106      	bne.n	8008274 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2200      	movs	r2, #0
 800826a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f7fb faec 	bl	800384c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2224      	movs	r2, #36	; 0x24
 8008278:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	681a      	ldr	r2, [r3, #0]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f022 0201 	bic.w	r2, r2, #1
 8008288:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f000 f8c0 	bl	8008410 <UART_SetConfig>
 8008290:	4603      	mov	r3, r0
 8008292:	2b01      	cmp	r3, #1
 8008294:	d101      	bne.n	800829a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008296:	2301      	movs	r3, #1
 8008298:	e022      	b.n	80082e0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d002      	beq.n	80082a8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f000 fb18 	bl	80088d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	685a      	ldr	r2, [r3, #4]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80082b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	689a      	ldr	r2, [r3, #8]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80082c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	681a      	ldr	r2, [r3, #0]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f042 0201 	orr.w	r2, r2, #1
 80082d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 fb9f 	bl	8008a1c <UART_CheckIdleState>
 80082de:	4603      	mov	r3, r0
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3708      	adds	r7, #8
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b08a      	sub	sp, #40	; 0x28
 80082ec:	af02      	add	r7, sp, #8
 80082ee:	60f8      	str	r0, [r7, #12]
 80082f0:	60b9      	str	r1, [r7, #8]
 80082f2:	603b      	str	r3, [r7, #0]
 80082f4:	4613      	mov	r3, r2
 80082f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80082fc:	2b20      	cmp	r3, #32
 80082fe:	f040 8081 	bne.w	8008404 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d002      	beq.n	800830e <HAL_UART_Transmit+0x26>
 8008308:	88fb      	ldrh	r3, [r7, #6]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d101      	bne.n	8008312 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800830e:	2301      	movs	r3, #1
 8008310:	e079      	b.n	8008406 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008318:	2b01      	cmp	r3, #1
 800831a:	d101      	bne.n	8008320 <HAL_UART_Transmit+0x38>
 800831c:	2302      	movs	r3, #2
 800831e:	e072      	b.n	8008406 <HAL_UART_Transmit+0x11e>
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	2201      	movs	r2, #1
 8008324:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	2200      	movs	r2, #0
 800832c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2221      	movs	r2, #33	; 0x21
 8008334:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008336:	f7fb fddd 	bl	8003ef4 <HAL_GetTick>
 800833a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	88fa      	ldrh	r2, [r7, #6]
 8008340:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	88fa      	ldrh	r2, [r7, #6]
 8008348:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	689b      	ldr	r3, [r3, #8]
 8008350:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008354:	d108      	bne.n	8008368 <HAL_UART_Transmit+0x80>
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	691b      	ldr	r3, [r3, #16]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d104      	bne.n	8008368 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800835e:	2300      	movs	r3, #0
 8008360:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	61bb      	str	r3, [r7, #24]
 8008366:	e003      	b.n	8008370 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800836c:	2300      	movs	r3, #0
 800836e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2200      	movs	r2, #0
 8008374:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8008378:	e02c      	b.n	80083d4 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	9300      	str	r3, [sp, #0]
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	2200      	movs	r2, #0
 8008382:	2180      	movs	r1, #128	; 0x80
 8008384:	68f8      	ldr	r0, [r7, #12]
 8008386:	f000 fb7c 	bl	8008a82 <UART_WaitOnFlagUntilTimeout>
 800838a:	4603      	mov	r3, r0
 800838c:	2b00      	cmp	r3, #0
 800838e:	d001      	beq.n	8008394 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8008390:	2303      	movs	r3, #3
 8008392:	e038      	b.n	8008406 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8008394:	69fb      	ldr	r3, [r7, #28]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d10b      	bne.n	80083b2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800839a:	69bb      	ldr	r3, [r7, #24]
 800839c:	881b      	ldrh	r3, [r3, #0]
 800839e:	461a      	mov	r2, r3
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80083a8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80083aa:	69bb      	ldr	r3, [r7, #24]
 80083ac:	3302      	adds	r3, #2
 80083ae:	61bb      	str	r3, [r7, #24]
 80083b0:	e007      	b.n	80083c2 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80083b2:	69fb      	ldr	r3, [r7, #28]
 80083b4:	781a      	ldrb	r2, [r3, #0]
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80083bc:	69fb      	ldr	r3, [r7, #28]
 80083be:	3301      	adds	r3, #1
 80083c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80083c8:	b29b      	uxth	r3, r3
 80083ca:	3b01      	subs	r3, #1
 80083cc:	b29a      	uxth	r2, r3
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80083da:	b29b      	uxth	r3, r3
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d1cc      	bne.n	800837a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	9300      	str	r3, [sp, #0]
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	2200      	movs	r2, #0
 80083e8:	2140      	movs	r1, #64	; 0x40
 80083ea:	68f8      	ldr	r0, [r7, #12]
 80083ec:	f000 fb49 	bl	8008a82 <UART_WaitOnFlagUntilTimeout>
 80083f0:	4603      	mov	r3, r0
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d001      	beq.n	80083fa <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80083f6:	2303      	movs	r3, #3
 80083f8:	e005      	b.n	8008406 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	2220      	movs	r2, #32
 80083fe:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8008400:	2300      	movs	r3, #0
 8008402:	e000      	b.n	8008406 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8008404:	2302      	movs	r3, #2
  }
}
 8008406:	4618      	mov	r0, r3
 8008408:	3720      	adds	r7, #32
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}
	...

08008410 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b088      	sub	sp, #32
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008418:	2300      	movs	r3, #0
 800841a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	689a      	ldr	r2, [r3, #8]
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	691b      	ldr	r3, [r3, #16]
 8008424:	431a      	orrs	r2, r3
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	695b      	ldr	r3, [r3, #20]
 800842a:	431a      	orrs	r2, r3
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	69db      	ldr	r3, [r3, #28]
 8008430:	4313      	orrs	r3, r2
 8008432:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	681a      	ldr	r2, [r3, #0]
 800843a:	4ba6      	ldr	r3, [pc, #664]	; (80086d4 <UART_SetConfig+0x2c4>)
 800843c:	4013      	ands	r3, r2
 800843e:	687a      	ldr	r2, [r7, #4]
 8008440:	6812      	ldr	r2, [r2, #0]
 8008442:	6979      	ldr	r1, [r7, #20]
 8008444:	430b      	orrs	r3, r1
 8008446:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	68da      	ldr	r2, [r3, #12]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	430a      	orrs	r2, r1
 800845c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	699b      	ldr	r3, [r3, #24]
 8008462:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6a1b      	ldr	r3, [r3, #32]
 8008468:	697a      	ldr	r2, [r7, #20]
 800846a:	4313      	orrs	r3, r2
 800846c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	689b      	ldr	r3, [r3, #8]
 8008474:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	697a      	ldr	r2, [r7, #20]
 800847e:	430a      	orrs	r2, r1
 8008480:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a94      	ldr	r2, [pc, #592]	; (80086d8 <UART_SetConfig+0x2c8>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d120      	bne.n	80084ce <UART_SetConfig+0xbe>
 800848c:	4b93      	ldr	r3, [pc, #588]	; (80086dc <UART_SetConfig+0x2cc>)
 800848e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008492:	f003 0303 	and.w	r3, r3, #3
 8008496:	2b03      	cmp	r3, #3
 8008498:	d816      	bhi.n	80084c8 <UART_SetConfig+0xb8>
 800849a:	a201      	add	r2, pc, #4	; (adr r2, 80084a0 <UART_SetConfig+0x90>)
 800849c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084a0:	080084b1 	.word	0x080084b1
 80084a4:	080084bd 	.word	0x080084bd
 80084a8:	080084b7 	.word	0x080084b7
 80084ac:	080084c3 	.word	0x080084c3
 80084b0:	2301      	movs	r3, #1
 80084b2:	77fb      	strb	r3, [r7, #31]
 80084b4:	e150      	b.n	8008758 <UART_SetConfig+0x348>
 80084b6:	2302      	movs	r3, #2
 80084b8:	77fb      	strb	r3, [r7, #31]
 80084ba:	e14d      	b.n	8008758 <UART_SetConfig+0x348>
 80084bc:	2304      	movs	r3, #4
 80084be:	77fb      	strb	r3, [r7, #31]
 80084c0:	e14a      	b.n	8008758 <UART_SetConfig+0x348>
 80084c2:	2308      	movs	r3, #8
 80084c4:	77fb      	strb	r3, [r7, #31]
 80084c6:	e147      	b.n	8008758 <UART_SetConfig+0x348>
 80084c8:	2310      	movs	r3, #16
 80084ca:	77fb      	strb	r3, [r7, #31]
 80084cc:	e144      	b.n	8008758 <UART_SetConfig+0x348>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	4a83      	ldr	r2, [pc, #524]	; (80086e0 <UART_SetConfig+0x2d0>)
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d132      	bne.n	800853e <UART_SetConfig+0x12e>
 80084d8:	4b80      	ldr	r3, [pc, #512]	; (80086dc <UART_SetConfig+0x2cc>)
 80084da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084de:	f003 030c 	and.w	r3, r3, #12
 80084e2:	2b0c      	cmp	r3, #12
 80084e4:	d828      	bhi.n	8008538 <UART_SetConfig+0x128>
 80084e6:	a201      	add	r2, pc, #4	; (adr r2, 80084ec <UART_SetConfig+0xdc>)
 80084e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ec:	08008521 	.word	0x08008521
 80084f0:	08008539 	.word	0x08008539
 80084f4:	08008539 	.word	0x08008539
 80084f8:	08008539 	.word	0x08008539
 80084fc:	0800852d 	.word	0x0800852d
 8008500:	08008539 	.word	0x08008539
 8008504:	08008539 	.word	0x08008539
 8008508:	08008539 	.word	0x08008539
 800850c:	08008527 	.word	0x08008527
 8008510:	08008539 	.word	0x08008539
 8008514:	08008539 	.word	0x08008539
 8008518:	08008539 	.word	0x08008539
 800851c:	08008533 	.word	0x08008533
 8008520:	2300      	movs	r3, #0
 8008522:	77fb      	strb	r3, [r7, #31]
 8008524:	e118      	b.n	8008758 <UART_SetConfig+0x348>
 8008526:	2302      	movs	r3, #2
 8008528:	77fb      	strb	r3, [r7, #31]
 800852a:	e115      	b.n	8008758 <UART_SetConfig+0x348>
 800852c:	2304      	movs	r3, #4
 800852e:	77fb      	strb	r3, [r7, #31]
 8008530:	e112      	b.n	8008758 <UART_SetConfig+0x348>
 8008532:	2308      	movs	r3, #8
 8008534:	77fb      	strb	r3, [r7, #31]
 8008536:	e10f      	b.n	8008758 <UART_SetConfig+0x348>
 8008538:	2310      	movs	r3, #16
 800853a:	77fb      	strb	r3, [r7, #31]
 800853c:	e10c      	b.n	8008758 <UART_SetConfig+0x348>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4a68      	ldr	r2, [pc, #416]	; (80086e4 <UART_SetConfig+0x2d4>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d120      	bne.n	800858a <UART_SetConfig+0x17a>
 8008548:	4b64      	ldr	r3, [pc, #400]	; (80086dc <UART_SetConfig+0x2cc>)
 800854a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800854e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008552:	2b30      	cmp	r3, #48	; 0x30
 8008554:	d013      	beq.n	800857e <UART_SetConfig+0x16e>
 8008556:	2b30      	cmp	r3, #48	; 0x30
 8008558:	d814      	bhi.n	8008584 <UART_SetConfig+0x174>
 800855a:	2b20      	cmp	r3, #32
 800855c:	d009      	beq.n	8008572 <UART_SetConfig+0x162>
 800855e:	2b20      	cmp	r3, #32
 8008560:	d810      	bhi.n	8008584 <UART_SetConfig+0x174>
 8008562:	2b00      	cmp	r3, #0
 8008564:	d002      	beq.n	800856c <UART_SetConfig+0x15c>
 8008566:	2b10      	cmp	r3, #16
 8008568:	d006      	beq.n	8008578 <UART_SetConfig+0x168>
 800856a:	e00b      	b.n	8008584 <UART_SetConfig+0x174>
 800856c:	2300      	movs	r3, #0
 800856e:	77fb      	strb	r3, [r7, #31]
 8008570:	e0f2      	b.n	8008758 <UART_SetConfig+0x348>
 8008572:	2302      	movs	r3, #2
 8008574:	77fb      	strb	r3, [r7, #31]
 8008576:	e0ef      	b.n	8008758 <UART_SetConfig+0x348>
 8008578:	2304      	movs	r3, #4
 800857a:	77fb      	strb	r3, [r7, #31]
 800857c:	e0ec      	b.n	8008758 <UART_SetConfig+0x348>
 800857e:	2308      	movs	r3, #8
 8008580:	77fb      	strb	r3, [r7, #31]
 8008582:	e0e9      	b.n	8008758 <UART_SetConfig+0x348>
 8008584:	2310      	movs	r3, #16
 8008586:	77fb      	strb	r3, [r7, #31]
 8008588:	e0e6      	b.n	8008758 <UART_SetConfig+0x348>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4a56      	ldr	r2, [pc, #344]	; (80086e8 <UART_SetConfig+0x2d8>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d120      	bne.n	80085d6 <UART_SetConfig+0x1c6>
 8008594:	4b51      	ldr	r3, [pc, #324]	; (80086dc <UART_SetConfig+0x2cc>)
 8008596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800859a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800859e:	2bc0      	cmp	r3, #192	; 0xc0
 80085a0:	d013      	beq.n	80085ca <UART_SetConfig+0x1ba>
 80085a2:	2bc0      	cmp	r3, #192	; 0xc0
 80085a4:	d814      	bhi.n	80085d0 <UART_SetConfig+0x1c0>
 80085a6:	2b80      	cmp	r3, #128	; 0x80
 80085a8:	d009      	beq.n	80085be <UART_SetConfig+0x1ae>
 80085aa:	2b80      	cmp	r3, #128	; 0x80
 80085ac:	d810      	bhi.n	80085d0 <UART_SetConfig+0x1c0>
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d002      	beq.n	80085b8 <UART_SetConfig+0x1a8>
 80085b2:	2b40      	cmp	r3, #64	; 0x40
 80085b4:	d006      	beq.n	80085c4 <UART_SetConfig+0x1b4>
 80085b6:	e00b      	b.n	80085d0 <UART_SetConfig+0x1c0>
 80085b8:	2300      	movs	r3, #0
 80085ba:	77fb      	strb	r3, [r7, #31]
 80085bc:	e0cc      	b.n	8008758 <UART_SetConfig+0x348>
 80085be:	2302      	movs	r3, #2
 80085c0:	77fb      	strb	r3, [r7, #31]
 80085c2:	e0c9      	b.n	8008758 <UART_SetConfig+0x348>
 80085c4:	2304      	movs	r3, #4
 80085c6:	77fb      	strb	r3, [r7, #31]
 80085c8:	e0c6      	b.n	8008758 <UART_SetConfig+0x348>
 80085ca:	2308      	movs	r3, #8
 80085cc:	77fb      	strb	r3, [r7, #31]
 80085ce:	e0c3      	b.n	8008758 <UART_SetConfig+0x348>
 80085d0:	2310      	movs	r3, #16
 80085d2:	77fb      	strb	r3, [r7, #31]
 80085d4:	e0c0      	b.n	8008758 <UART_SetConfig+0x348>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4a44      	ldr	r2, [pc, #272]	; (80086ec <UART_SetConfig+0x2dc>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d125      	bne.n	800862c <UART_SetConfig+0x21c>
 80085e0:	4b3e      	ldr	r3, [pc, #248]	; (80086dc <UART_SetConfig+0x2cc>)
 80085e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80085ee:	d017      	beq.n	8008620 <UART_SetConfig+0x210>
 80085f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80085f4:	d817      	bhi.n	8008626 <UART_SetConfig+0x216>
 80085f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085fa:	d00b      	beq.n	8008614 <UART_SetConfig+0x204>
 80085fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008600:	d811      	bhi.n	8008626 <UART_SetConfig+0x216>
 8008602:	2b00      	cmp	r3, #0
 8008604:	d003      	beq.n	800860e <UART_SetConfig+0x1fe>
 8008606:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800860a:	d006      	beq.n	800861a <UART_SetConfig+0x20a>
 800860c:	e00b      	b.n	8008626 <UART_SetConfig+0x216>
 800860e:	2300      	movs	r3, #0
 8008610:	77fb      	strb	r3, [r7, #31]
 8008612:	e0a1      	b.n	8008758 <UART_SetConfig+0x348>
 8008614:	2302      	movs	r3, #2
 8008616:	77fb      	strb	r3, [r7, #31]
 8008618:	e09e      	b.n	8008758 <UART_SetConfig+0x348>
 800861a:	2304      	movs	r3, #4
 800861c:	77fb      	strb	r3, [r7, #31]
 800861e:	e09b      	b.n	8008758 <UART_SetConfig+0x348>
 8008620:	2308      	movs	r3, #8
 8008622:	77fb      	strb	r3, [r7, #31]
 8008624:	e098      	b.n	8008758 <UART_SetConfig+0x348>
 8008626:	2310      	movs	r3, #16
 8008628:	77fb      	strb	r3, [r7, #31]
 800862a:	e095      	b.n	8008758 <UART_SetConfig+0x348>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a2f      	ldr	r2, [pc, #188]	; (80086f0 <UART_SetConfig+0x2e0>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d125      	bne.n	8008682 <UART_SetConfig+0x272>
 8008636:	4b29      	ldr	r3, [pc, #164]	; (80086dc <UART_SetConfig+0x2cc>)
 8008638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800863c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008640:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008644:	d017      	beq.n	8008676 <UART_SetConfig+0x266>
 8008646:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800864a:	d817      	bhi.n	800867c <UART_SetConfig+0x26c>
 800864c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008650:	d00b      	beq.n	800866a <UART_SetConfig+0x25a>
 8008652:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008656:	d811      	bhi.n	800867c <UART_SetConfig+0x26c>
 8008658:	2b00      	cmp	r3, #0
 800865a:	d003      	beq.n	8008664 <UART_SetConfig+0x254>
 800865c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008660:	d006      	beq.n	8008670 <UART_SetConfig+0x260>
 8008662:	e00b      	b.n	800867c <UART_SetConfig+0x26c>
 8008664:	2301      	movs	r3, #1
 8008666:	77fb      	strb	r3, [r7, #31]
 8008668:	e076      	b.n	8008758 <UART_SetConfig+0x348>
 800866a:	2302      	movs	r3, #2
 800866c:	77fb      	strb	r3, [r7, #31]
 800866e:	e073      	b.n	8008758 <UART_SetConfig+0x348>
 8008670:	2304      	movs	r3, #4
 8008672:	77fb      	strb	r3, [r7, #31]
 8008674:	e070      	b.n	8008758 <UART_SetConfig+0x348>
 8008676:	2308      	movs	r3, #8
 8008678:	77fb      	strb	r3, [r7, #31]
 800867a:	e06d      	b.n	8008758 <UART_SetConfig+0x348>
 800867c:	2310      	movs	r3, #16
 800867e:	77fb      	strb	r3, [r7, #31]
 8008680:	e06a      	b.n	8008758 <UART_SetConfig+0x348>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4a1b      	ldr	r2, [pc, #108]	; (80086f4 <UART_SetConfig+0x2e4>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d138      	bne.n	80086fe <UART_SetConfig+0x2ee>
 800868c:	4b13      	ldr	r3, [pc, #76]	; (80086dc <UART_SetConfig+0x2cc>)
 800868e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008692:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008696:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800869a:	d017      	beq.n	80086cc <UART_SetConfig+0x2bc>
 800869c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80086a0:	d82a      	bhi.n	80086f8 <UART_SetConfig+0x2e8>
 80086a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086a6:	d00b      	beq.n	80086c0 <UART_SetConfig+0x2b0>
 80086a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086ac:	d824      	bhi.n	80086f8 <UART_SetConfig+0x2e8>
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d003      	beq.n	80086ba <UART_SetConfig+0x2aa>
 80086b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086b6:	d006      	beq.n	80086c6 <UART_SetConfig+0x2b6>
 80086b8:	e01e      	b.n	80086f8 <UART_SetConfig+0x2e8>
 80086ba:	2300      	movs	r3, #0
 80086bc:	77fb      	strb	r3, [r7, #31]
 80086be:	e04b      	b.n	8008758 <UART_SetConfig+0x348>
 80086c0:	2302      	movs	r3, #2
 80086c2:	77fb      	strb	r3, [r7, #31]
 80086c4:	e048      	b.n	8008758 <UART_SetConfig+0x348>
 80086c6:	2304      	movs	r3, #4
 80086c8:	77fb      	strb	r3, [r7, #31]
 80086ca:	e045      	b.n	8008758 <UART_SetConfig+0x348>
 80086cc:	2308      	movs	r3, #8
 80086ce:	77fb      	strb	r3, [r7, #31]
 80086d0:	e042      	b.n	8008758 <UART_SetConfig+0x348>
 80086d2:	bf00      	nop
 80086d4:	efff69f3 	.word	0xefff69f3
 80086d8:	40011000 	.word	0x40011000
 80086dc:	40023800 	.word	0x40023800
 80086e0:	40004400 	.word	0x40004400
 80086e4:	40004800 	.word	0x40004800
 80086e8:	40004c00 	.word	0x40004c00
 80086ec:	40005000 	.word	0x40005000
 80086f0:	40011400 	.word	0x40011400
 80086f4:	40007800 	.word	0x40007800
 80086f8:	2310      	movs	r3, #16
 80086fa:	77fb      	strb	r3, [r7, #31]
 80086fc:	e02c      	b.n	8008758 <UART_SetConfig+0x348>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4a72      	ldr	r2, [pc, #456]	; (80088cc <UART_SetConfig+0x4bc>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d125      	bne.n	8008754 <UART_SetConfig+0x344>
 8008708:	4b71      	ldr	r3, [pc, #452]	; (80088d0 <UART_SetConfig+0x4c0>)
 800870a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800870e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008712:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008716:	d017      	beq.n	8008748 <UART_SetConfig+0x338>
 8008718:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800871c:	d817      	bhi.n	800874e <UART_SetConfig+0x33e>
 800871e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008722:	d00b      	beq.n	800873c <UART_SetConfig+0x32c>
 8008724:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008728:	d811      	bhi.n	800874e <UART_SetConfig+0x33e>
 800872a:	2b00      	cmp	r3, #0
 800872c:	d003      	beq.n	8008736 <UART_SetConfig+0x326>
 800872e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008732:	d006      	beq.n	8008742 <UART_SetConfig+0x332>
 8008734:	e00b      	b.n	800874e <UART_SetConfig+0x33e>
 8008736:	2300      	movs	r3, #0
 8008738:	77fb      	strb	r3, [r7, #31]
 800873a:	e00d      	b.n	8008758 <UART_SetConfig+0x348>
 800873c:	2302      	movs	r3, #2
 800873e:	77fb      	strb	r3, [r7, #31]
 8008740:	e00a      	b.n	8008758 <UART_SetConfig+0x348>
 8008742:	2304      	movs	r3, #4
 8008744:	77fb      	strb	r3, [r7, #31]
 8008746:	e007      	b.n	8008758 <UART_SetConfig+0x348>
 8008748:	2308      	movs	r3, #8
 800874a:	77fb      	strb	r3, [r7, #31]
 800874c:	e004      	b.n	8008758 <UART_SetConfig+0x348>
 800874e:	2310      	movs	r3, #16
 8008750:	77fb      	strb	r3, [r7, #31]
 8008752:	e001      	b.n	8008758 <UART_SetConfig+0x348>
 8008754:	2310      	movs	r3, #16
 8008756:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	69db      	ldr	r3, [r3, #28]
 800875c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008760:	d15b      	bne.n	800881a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8008762:	7ffb      	ldrb	r3, [r7, #31]
 8008764:	2b08      	cmp	r3, #8
 8008766:	d828      	bhi.n	80087ba <UART_SetConfig+0x3aa>
 8008768:	a201      	add	r2, pc, #4	; (adr r2, 8008770 <UART_SetConfig+0x360>)
 800876a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800876e:	bf00      	nop
 8008770:	08008795 	.word	0x08008795
 8008774:	0800879d 	.word	0x0800879d
 8008778:	080087a5 	.word	0x080087a5
 800877c:	080087bb 	.word	0x080087bb
 8008780:	080087ab 	.word	0x080087ab
 8008784:	080087bb 	.word	0x080087bb
 8008788:	080087bb 	.word	0x080087bb
 800878c:	080087bb 	.word	0x080087bb
 8008790:	080087b3 	.word	0x080087b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008794:	f7fd fe08 	bl	80063a8 <HAL_RCC_GetPCLK1Freq>
 8008798:	61b8      	str	r0, [r7, #24]
        break;
 800879a:	e013      	b.n	80087c4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800879c:	f7fd fe18 	bl	80063d0 <HAL_RCC_GetPCLK2Freq>
 80087a0:	61b8      	str	r0, [r7, #24]
        break;
 80087a2:	e00f      	b.n	80087c4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80087a4:	4b4b      	ldr	r3, [pc, #300]	; (80088d4 <UART_SetConfig+0x4c4>)
 80087a6:	61bb      	str	r3, [r7, #24]
        break;
 80087a8:	e00c      	b.n	80087c4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80087aa:	f7fd fceb 	bl	8006184 <HAL_RCC_GetSysClockFreq>
 80087ae:	61b8      	str	r0, [r7, #24]
        break;
 80087b0:	e008      	b.n	80087c4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80087b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087b6:	61bb      	str	r3, [r7, #24]
        break;
 80087b8:	e004      	b.n	80087c4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80087ba:	2300      	movs	r3, #0
 80087bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80087be:	2301      	movs	r3, #1
 80087c0:	77bb      	strb	r3, [r7, #30]
        break;
 80087c2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80087c4:	69bb      	ldr	r3, [r7, #24]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d074      	beq.n	80088b4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80087ca:	69bb      	ldr	r3, [r7, #24]
 80087cc:	005a      	lsls	r2, r3, #1
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	685b      	ldr	r3, [r3, #4]
 80087d2:	085b      	lsrs	r3, r3, #1
 80087d4:	441a      	add	r2, r3
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	685b      	ldr	r3, [r3, #4]
 80087da:	fbb2 f3f3 	udiv	r3, r2, r3
 80087de:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	2b0f      	cmp	r3, #15
 80087e4:	d916      	bls.n	8008814 <UART_SetConfig+0x404>
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087ec:	d212      	bcs.n	8008814 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80087ee:	693b      	ldr	r3, [r7, #16]
 80087f0:	b29b      	uxth	r3, r3
 80087f2:	f023 030f 	bic.w	r3, r3, #15
 80087f6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80087f8:	693b      	ldr	r3, [r7, #16]
 80087fa:	085b      	lsrs	r3, r3, #1
 80087fc:	b29b      	uxth	r3, r3
 80087fe:	f003 0307 	and.w	r3, r3, #7
 8008802:	b29a      	uxth	r2, r3
 8008804:	89fb      	ldrh	r3, [r7, #14]
 8008806:	4313      	orrs	r3, r2
 8008808:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	89fa      	ldrh	r2, [r7, #14]
 8008810:	60da      	str	r2, [r3, #12]
 8008812:	e04f      	b.n	80088b4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008814:	2301      	movs	r3, #1
 8008816:	77bb      	strb	r3, [r7, #30]
 8008818:	e04c      	b.n	80088b4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800881a:	7ffb      	ldrb	r3, [r7, #31]
 800881c:	2b08      	cmp	r3, #8
 800881e:	d828      	bhi.n	8008872 <UART_SetConfig+0x462>
 8008820:	a201      	add	r2, pc, #4	; (adr r2, 8008828 <UART_SetConfig+0x418>)
 8008822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008826:	bf00      	nop
 8008828:	0800884d 	.word	0x0800884d
 800882c:	08008855 	.word	0x08008855
 8008830:	0800885d 	.word	0x0800885d
 8008834:	08008873 	.word	0x08008873
 8008838:	08008863 	.word	0x08008863
 800883c:	08008873 	.word	0x08008873
 8008840:	08008873 	.word	0x08008873
 8008844:	08008873 	.word	0x08008873
 8008848:	0800886b 	.word	0x0800886b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800884c:	f7fd fdac 	bl	80063a8 <HAL_RCC_GetPCLK1Freq>
 8008850:	61b8      	str	r0, [r7, #24]
        break;
 8008852:	e013      	b.n	800887c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008854:	f7fd fdbc 	bl	80063d0 <HAL_RCC_GetPCLK2Freq>
 8008858:	61b8      	str	r0, [r7, #24]
        break;
 800885a:	e00f      	b.n	800887c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800885c:	4b1d      	ldr	r3, [pc, #116]	; (80088d4 <UART_SetConfig+0x4c4>)
 800885e:	61bb      	str	r3, [r7, #24]
        break;
 8008860:	e00c      	b.n	800887c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008862:	f7fd fc8f 	bl	8006184 <HAL_RCC_GetSysClockFreq>
 8008866:	61b8      	str	r0, [r7, #24]
        break;
 8008868:	e008      	b.n	800887c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800886a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800886e:	61bb      	str	r3, [r7, #24]
        break;
 8008870:	e004      	b.n	800887c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8008872:	2300      	movs	r3, #0
 8008874:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008876:	2301      	movs	r3, #1
 8008878:	77bb      	strb	r3, [r7, #30]
        break;
 800887a:	bf00      	nop
    }

    if (pclk != 0U)
 800887c:	69bb      	ldr	r3, [r7, #24]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d018      	beq.n	80088b4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	685b      	ldr	r3, [r3, #4]
 8008886:	085a      	lsrs	r2, r3, #1
 8008888:	69bb      	ldr	r3, [r7, #24]
 800888a:	441a      	add	r2, r3
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	685b      	ldr	r3, [r3, #4]
 8008890:	fbb2 f3f3 	udiv	r3, r2, r3
 8008894:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	2b0f      	cmp	r3, #15
 800889a:	d909      	bls.n	80088b0 <UART_SetConfig+0x4a0>
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088a2:	d205      	bcs.n	80088b0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80088a4:	693b      	ldr	r3, [r7, #16]
 80088a6:	b29a      	uxth	r2, r3
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	60da      	str	r2, [r3, #12]
 80088ae:	e001      	b.n	80088b4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80088b0:	2301      	movs	r3, #1
 80088b2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2200      	movs	r2, #0
 80088b8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2200      	movs	r2, #0
 80088be:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80088c0:	7fbb      	ldrb	r3, [r7, #30]
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3720      	adds	r7, #32
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}
 80088ca:	bf00      	nop
 80088cc:	40007c00 	.word	0x40007c00
 80088d0:	40023800 	.word	0x40023800
 80088d4:	00f42400 	.word	0x00f42400

080088d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80088d8:	b480      	push	{r7}
 80088da:	b083      	sub	sp, #12
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e4:	f003 0301 	and.w	r3, r3, #1
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d00a      	beq.n	8008902 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	430a      	orrs	r2, r1
 8008900:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008906:	f003 0302 	and.w	r3, r3, #2
 800890a:	2b00      	cmp	r3, #0
 800890c:	d00a      	beq.n	8008924 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	430a      	orrs	r2, r1
 8008922:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008928:	f003 0304 	and.w	r3, r3, #4
 800892c:	2b00      	cmp	r3, #0
 800892e:	d00a      	beq.n	8008946 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	685b      	ldr	r3, [r3, #4]
 8008936:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	430a      	orrs	r2, r1
 8008944:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800894a:	f003 0308 	and.w	r3, r3, #8
 800894e:	2b00      	cmp	r3, #0
 8008950:	d00a      	beq.n	8008968 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	430a      	orrs	r2, r1
 8008966:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800896c:	f003 0310 	and.w	r3, r3, #16
 8008970:	2b00      	cmp	r3, #0
 8008972:	d00a      	beq.n	800898a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	689b      	ldr	r3, [r3, #8]
 800897a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	430a      	orrs	r2, r1
 8008988:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800898e:	f003 0320 	and.w	r3, r3, #32
 8008992:	2b00      	cmp	r3, #0
 8008994:	d00a      	beq.n	80089ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	689b      	ldr	r3, [r3, #8]
 800899c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	430a      	orrs	r2, r1
 80089aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d01a      	beq.n	80089ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	430a      	orrs	r2, r1
 80089cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089d6:	d10a      	bne.n	80089ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	685b      	ldr	r3, [r3, #4]
 80089de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	430a      	orrs	r2, r1
 80089ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d00a      	beq.n	8008a10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	685b      	ldr	r3, [r3, #4]
 8008a00:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	430a      	orrs	r2, r1
 8008a0e:	605a      	str	r2, [r3, #4]
  }
}
 8008a10:	bf00      	nop
 8008a12:	370c      	adds	r7, #12
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr

08008a1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b086      	sub	sp, #24
 8008a20:	af02      	add	r7, sp, #8
 8008a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2200      	movs	r2, #0
 8008a28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008a2c:	f7fb fa62 	bl	8003ef4 <HAL_GetTick>
 8008a30:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f003 0308 	and.w	r3, r3, #8
 8008a3c:	2b08      	cmp	r3, #8
 8008a3e:	d10e      	bne.n	8008a5e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a44:	9300      	str	r3, [sp, #0]
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f000 f817 	bl	8008a82 <UART_WaitOnFlagUntilTimeout>
 8008a54:	4603      	mov	r3, r0
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d001      	beq.n	8008a5e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008a5a:	2303      	movs	r3, #3
 8008a5c:	e00d      	b.n	8008a7a <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2220      	movs	r2, #32
 8008a62:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2220      	movs	r2, #32
 8008a68:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2200      	movs	r2, #0
 8008a74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008a78:	2300      	movs	r3, #0
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3710      	adds	r7, #16
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}

08008a82 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008a82:	b580      	push	{r7, lr}
 8008a84:	b09c      	sub	sp, #112	; 0x70
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	60f8      	str	r0, [r7, #12]
 8008a8a:	60b9      	str	r1, [r7, #8]
 8008a8c:	603b      	str	r3, [r7, #0]
 8008a8e:	4613      	mov	r3, r2
 8008a90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a92:	e0a5      	b.n	8008be0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a9a:	f000 80a1 	beq.w	8008be0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a9e:	f7fb fa29 	bl	8003ef4 <HAL_GetTick>
 8008aa2:	4602      	mov	r2, r0
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	1ad3      	subs	r3, r2, r3
 8008aa8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008aaa:	429a      	cmp	r2, r3
 8008aac:	d302      	bcc.n	8008ab4 <UART_WaitOnFlagUntilTimeout+0x32>
 8008aae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d13e      	bne.n	8008b32 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008abc:	e853 3f00 	ldrex	r3, [r3]
 8008ac0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008ac2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ac4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008ac8:	667b      	str	r3, [r7, #100]	; 0x64
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	461a      	mov	r2, r3
 8008ad0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ad2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ad4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ad6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008ad8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008ada:	e841 2300 	strex	r3, r2, [r1]
 8008ade:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008ae0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d1e6      	bne.n	8008ab4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	3308      	adds	r3, #8
 8008aec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008af0:	e853 3f00 	ldrex	r3, [r3]
 8008af4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008af8:	f023 0301 	bic.w	r3, r3, #1
 8008afc:	663b      	str	r3, [r7, #96]	; 0x60
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	3308      	adds	r3, #8
 8008b04:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008b06:	64ba      	str	r2, [r7, #72]	; 0x48
 8008b08:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b0a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008b0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b0e:	e841 2300 	strex	r3, r2, [r1]
 8008b12:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008b14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d1e5      	bne.n	8008ae6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	2220      	movs	r2, #32
 8008b1e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2220      	movs	r2, #32
 8008b24:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008b2e:	2303      	movs	r3, #3
 8008b30:	e067      	b.n	8008c02 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f003 0304 	and.w	r3, r3, #4
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d04f      	beq.n	8008be0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	69db      	ldr	r3, [r3, #28]
 8008b46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b4e:	d147      	bne.n	8008be0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008b58:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b62:	e853 3f00 	ldrex	r3, [r3]
 8008b66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b6a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008b6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	461a      	mov	r2, r3
 8008b76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b78:	637b      	str	r3, [r7, #52]	; 0x34
 8008b7a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b7c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008b7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b80:	e841 2300 	strex	r3, r2, [r1]
 8008b84:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d1e6      	bne.n	8008b5a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	3308      	adds	r3, #8
 8008b92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	e853 3f00 	ldrex	r3, [r3]
 8008b9a:	613b      	str	r3, [r7, #16]
   return(result);
 8008b9c:	693b      	ldr	r3, [r7, #16]
 8008b9e:	f023 0301 	bic.w	r3, r3, #1
 8008ba2:	66bb      	str	r3, [r7, #104]	; 0x68
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	3308      	adds	r3, #8
 8008baa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008bac:	623a      	str	r2, [r7, #32]
 8008bae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bb0:	69f9      	ldr	r1, [r7, #28]
 8008bb2:	6a3a      	ldr	r2, [r7, #32]
 8008bb4:	e841 2300 	strex	r3, r2, [r1]
 8008bb8:	61bb      	str	r3, [r7, #24]
   return(result);
 8008bba:	69bb      	ldr	r3, [r7, #24]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d1e5      	bne.n	8008b8c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	2220      	movs	r2, #32
 8008bc4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	2220      	movs	r2, #32
 8008bca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	2220      	movs	r2, #32
 8008bd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008bdc:	2303      	movs	r3, #3
 8008bde:	e010      	b.n	8008c02 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	69da      	ldr	r2, [r3, #28]
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	4013      	ands	r3, r2
 8008bea:	68ba      	ldr	r2, [r7, #8]
 8008bec:	429a      	cmp	r2, r3
 8008bee:	bf0c      	ite	eq
 8008bf0:	2301      	moveq	r3, #1
 8008bf2:	2300      	movne	r3, #0
 8008bf4:	b2db      	uxtb	r3, r3
 8008bf6:	461a      	mov	r2, r3
 8008bf8:	79fb      	ldrb	r3, [r7, #7]
 8008bfa:	429a      	cmp	r2, r3
 8008bfc:	f43f af4a 	beq.w	8008a94 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008c00:	2300      	movs	r3, #0
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3770      	adds	r7, #112	; 0x70
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}
	...

08008c0c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008c0c:	b084      	sub	sp, #16
 8008c0e:	b580      	push	{r7, lr}
 8008c10:	b084      	sub	sp, #16
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	6078      	str	r0, [r7, #4]
 8008c16:	f107 001c 	add.w	r0, r7, #28
 8008c1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	d126      	bne.n	8008c72 <USB_CoreInit+0x66>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c28:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	68da      	ldr	r2, [r3, #12]
 8008c34:	4b38      	ldr	r3, [pc, #224]	; (8008d18 <USB_CoreInit+0x10c>)
 8008c36:	4013      	ands	r3, r2
 8008c38:	687a      	ldr	r2, [r7, #4]
 8008c3a:	60d3      	str	r3, [r2, #12]

#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	68db      	ldr	r3, [r3, #12]
 8008c40:	f043 0210 	orr.w	r2, r3, #16
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	60da      	str	r2, [r3, #12]
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	68db      	ldr	r3, [r3, #12]
 8008c4c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008c54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c56:	2b01      	cmp	r3, #1
 8008c58:	d105      	bne.n	8008c66 <USB_CoreInit+0x5a>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	68db      	ldr	r3, [r3, #12]
 8008c5e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f000 facc 	bl	8009204 <USB_CoreReset>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	73fb      	strb	r3, [r7, #15]
 8008c70:	e03a      	b.n	8008ce8 <USB_CoreInit+0xdc>
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8008c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c74:	2b03      	cmp	r3, #3
 8008c76:	d126      	bne.n	8008cc6 <USB_CoreInit+0xba>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c7c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The UTMI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	68da      	ldr	r2, [r3, #12]
 8008c88:	4b23      	ldr	r3, [pc, #140]	; (8008d18 <USB_CoreInit+0x10c>)
 8008c8a:	4013      	ands	r3, r2
 8008c8c:	687a      	ldr	r2, [r7, #4]
 8008c8e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	68db      	ldr	r3, [r3, #12]
 8008c94:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	60da      	str	r2, [r3, #12]

    /* Select UTMI Interface */
    USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	68db      	ldr	r3, [r3, #12]
 8008ca0:	f023 0210 	bic.w	r2, r3, #16
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	60da      	str	r2, [r3, #12]
    {
      return HAL_ERROR;
    }
#endif /* USBPHYC */

    if (cfg.use_external_vbus == 1U)
 8008ca8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008caa:	2b01      	cmp	r3, #1
 8008cac:	d105      	bne.n	8008cba <USB_CoreInit+0xae>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	68db      	ldr	r3, [r3, #12]
 8008cb2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f000 faa2 	bl	8009204 <USB_CoreReset>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	73fb      	strb	r3, [r7, #15]
 8008cc4:	e010      	b.n	8008ce8 <USB_CoreInit+0xdc>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	68db      	ldr	r3, [r3, #12]
 8008cca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f000 fa96 	bl	8009204 <USB_CoreReset>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ce0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8008ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cea:	2b01      	cmp	r3, #1
 8008cec:	d10b      	bne.n	8008d06 <USB_CoreInit+0xfa>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	689b      	ldr	r3, [r3, #8]
 8008cf2:	f043 0206 	orr.w	r2, r3, #6
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	689b      	ldr	r3, [r3, #8]
 8008cfe:	f043 0220 	orr.w	r2, r3, #32
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3710      	adds	r7, #16
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008d12:	b004      	add	sp, #16
 8008d14:	4770      	bx	lr
 8008d16:	bf00      	nop
 8008d18:	ffbdffbf 	.word	0xffbdffbf

08008d1c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b083      	sub	sp, #12
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	689b      	ldr	r3, [r3, #8]
 8008d28:	f023 0201 	bic.w	r2, r3, #1
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008d30:	2300      	movs	r3, #0
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	370c      	adds	r7, #12
 8008d36:	46bd      	mov	sp, r7
 8008d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3c:	4770      	bx	lr

08008d3e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008d3e:	b580      	push	{r7, lr}
 8008d40:	b084      	sub	sp, #16
 8008d42:	af00      	add	r7, sp, #0
 8008d44:	6078      	str	r0, [r7, #4]
 8008d46:	460b      	mov	r3, r1
 8008d48:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	68db      	ldr	r3, [r3, #12]
 8008d52:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008d5a:	78fb      	ldrb	r3, [r7, #3]
 8008d5c:	2b01      	cmp	r3, #1
 8008d5e:	d115      	bne.n	8008d8c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	68db      	ldr	r3, [r3, #12]
 8008d64:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008d6c:	2001      	movs	r0, #1
 8008d6e:	f7fb f8cd 	bl	8003f0c <HAL_Delay>
      ms++;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	3301      	adds	r3, #1
 8008d76:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f000 fa35 	bl	80091e8 <USB_GetMode>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	2b01      	cmp	r3, #1
 8008d82:	d01e      	beq.n	8008dc2 <USB_SetCurrentMode+0x84>
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	2b31      	cmp	r3, #49	; 0x31
 8008d88:	d9f0      	bls.n	8008d6c <USB_SetCurrentMode+0x2e>
 8008d8a:	e01a      	b.n	8008dc2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008d8c:	78fb      	ldrb	r3, [r7, #3]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d115      	bne.n	8008dbe <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	68db      	ldr	r3, [r3, #12]
 8008d96:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008d9e:	2001      	movs	r0, #1
 8008da0:	f7fb f8b4 	bl	8003f0c <HAL_Delay>
      ms++;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	3301      	adds	r3, #1
 8008da8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f000 fa1c 	bl	80091e8 <USB_GetMode>
 8008db0:	4603      	mov	r3, r0
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d005      	beq.n	8008dc2 <USB_SetCurrentMode+0x84>
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	2b31      	cmp	r3, #49	; 0x31
 8008dba:	d9f0      	bls.n	8008d9e <USB_SetCurrentMode+0x60>
 8008dbc:	e001      	b.n	8008dc2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	e005      	b.n	8008dce <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2b32      	cmp	r3, #50	; 0x32
 8008dc6:	d101      	bne.n	8008dcc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008dc8:	2301      	movs	r3, #1
 8008dca:	e000      	b.n	8008dce <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008dcc:	2300      	movs	r3, #0
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	3710      	adds	r7, #16
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}
	...

08008dd8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008dd8:	b084      	sub	sp, #16
 8008dda:	b580      	push	{r7, lr}
 8008ddc:	b086      	sub	sp, #24
 8008dde:	af00      	add	r7, sp, #0
 8008de0:	6078      	str	r0, [r7, #4]
 8008de2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008de6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008dea:	2300      	movs	r3, #0
 8008dec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008df2:	2300      	movs	r3, #0
 8008df4:	613b      	str	r3, [r7, #16]
 8008df6:	e009      	b.n	8008e0c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008df8:	687a      	ldr	r2, [r7, #4]
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	3340      	adds	r3, #64	; 0x40
 8008dfe:	009b      	lsls	r3, r3, #2
 8008e00:	4413      	add	r3, r2
 8008e02:	2200      	movs	r2, #0
 8008e04:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	3301      	adds	r3, #1
 8008e0a:	613b      	str	r3, [r7, #16]
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	2b0e      	cmp	r3, #14
 8008e10:	d9f2      	bls.n	8008df8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008e12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d11c      	bne.n	8008e52 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e1e:	685b      	ldr	r3, [r3, #4]
 8008e20:	68fa      	ldr	r2, [r7, #12]
 8008e22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e26:	f043 0302 	orr.w	r3, r3, #2
 8008e2a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e30:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	601a      	str	r2, [r3, #0]
 8008e50:	e005      	b.n	8008e5e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e56:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008e64:	461a      	mov	r2, r3
 8008e66:	2300      	movs	r3, #0
 8008e68:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e70:	4619      	mov	r1, r3
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e78:	461a      	mov	r2, r3
 8008e7a:	680b      	ldr	r3, [r1, #0]
 8008e7c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e80:	2b01      	cmp	r3, #1
 8008e82:	d10c      	bne.n	8008e9e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d104      	bne.n	8008e94 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008e8a:	2100      	movs	r1, #0
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f000 f971 	bl	8009174 <USB_SetDevSpeed>
 8008e92:	e018      	b.n	8008ec6 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008e94:	2101      	movs	r1, #1
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 f96c 	bl	8009174 <USB_SetDevSpeed>
 8008e9c:	e013      	b.n	8008ec6 <USB_DevInit+0xee>
    }
  }
#if defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx)
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8008e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ea0:	2b03      	cmp	r3, #3
 8008ea2:	d10c      	bne.n	8008ebe <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d104      	bne.n	8008eb4 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008eaa:	2100      	movs	r1, #0
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f000 f961 	bl	8009174 <USB_SetDevSpeed>
 8008eb2:	e008      	b.n	8008ec6 <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008eb4:	2101      	movs	r1, #1
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f000 f95c 	bl	8009174 <USB_SetDevSpeed>
 8008ebc:	e003      	b.n	8008ec6 <USB_DevInit+0xee>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008ebe:	2103      	movs	r1, #3
 8008ec0:	6878      	ldr	r0, [r7, #4]
 8008ec2:	f000 f957 	bl	8009174 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008ec6:	2110      	movs	r1, #16
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f000 f8f3 	bl	80090b4 <USB_FlushTxFifo>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d001      	beq.n	8008ed8 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f000 f91d 	bl	8009118 <USB_FlushRxFifo>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d001      	beq.n	8008ee8 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008eee:	461a      	mov	r2, r3
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008efa:	461a      	mov	r2, r3
 8008efc:	2300      	movs	r3, #0
 8008efe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f06:	461a      	mov	r2, r3
 8008f08:	2300      	movs	r3, #0
 8008f0a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	613b      	str	r3, [r7, #16]
 8008f10:	e043      	b.n	8008f9a <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	015a      	lsls	r2, r3, #5
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	4413      	add	r3, r2
 8008f1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f28:	d118      	bne.n	8008f5c <USB_DevInit+0x184>
    {
      if (i == 0U)
 8008f2a:	693b      	ldr	r3, [r7, #16]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d10a      	bne.n	8008f46 <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	015a      	lsls	r2, r3, #5
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	4413      	add	r3, r2
 8008f38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f3c:	461a      	mov	r2, r3
 8008f3e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008f42:	6013      	str	r3, [r2, #0]
 8008f44:	e013      	b.n	8008f6e <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	015a      	lsls	r2, r3, #5
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	4413      	add	r3, r2
 8008f4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f52:	461a      	mov	r2, r3
 8008f54:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008f58:	6013      	str	r3, [r2, #0]
 8008f5a:	e008      	b.n	8008f6e <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	015a      	lsls	r2, r3, #5
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	4413      	add	r3, r2
 8008f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f68:	461a      	mov	r2, r3
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	015a      	lsls	r2, r3, #5
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	4413      	add	r3, r2
 8008f76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f7a:	461a      	mov	r2, r3
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	015a      	lsls	r2, r3, #5
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	4413      	add	r3, r2
 8008f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f8c:	461a      	mov	r2, r3
 8008f8e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008f92:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	3301      	adds	r3, #1
 8008f98:	613b      	str	r3, [r7, #16]
 8008f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f9c:	693a      	ldr	r2, [r7, #16]
 8008f9e:	429a      	cmp	r2, r3
 8008fa0:	d3b7      	bcc.n	8008f12 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	613b      	str	r3, [r7, #16]
 8008fa6:	e043      	b.n	8009030 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008fa8:	693b      	ldr	r3, [r7, #16]
 8008faa:	015a      	lsls	r2, r3, #5
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	4413      	add	r3, r2
 8008fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008fba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008fbe:	d118      	bne.n	8008ff2 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8008fc0:	693b      	ldr	r3, [r7, #16]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d10a      	bne.n	8008fdc <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	015a      	lsls	r2, r3, #5
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	4413      	add	r3, r2
 8008fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fd2:	461a      	mov	r2, r3
 8008fd4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008fd8:	6013      	str	r3, [r2, #0]
 8008fda:	e013      	b.n	8009004 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008fdc:	693b      	ldr	r3, [r7, #16]
 8008fde:	015a      	lsls	r2, r3, #5
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	4413      	add	r3, r2
 8008fe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fe8:	461a      	mov	r2, r3
 8008fea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008fee:	6013      	str	r3, [r2, #0]
 8008ff0:	e008      	b.n	8009004 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	015a      	lsls	r2, r3, #5
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	4413      	add	r3, r2
 8008ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ffe:	461a      	mov	r2, r3
 8009000:	2300      	movs	r3, #0
 8009002:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	015a      	lsls	r2, r3, #5
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	4413      	add	r3, r2
 800900c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009010:	461a      	mov	r2, r3
 8009012:	2300      	movs	r3, #0
 8009014:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009016:	693b      	ldr	r3, [r7, #16]
 8009018:	015a      	lsls	r2, r3, #5
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	4413      	add	r3, r2
 800901e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009022:	461a      	mov	r2, r3
 8009024:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009028:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	3301      	adds	r3, #1
 800902e:	613b      	str	r3, [r7, #16]
 8009030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009032:	693a      	ldr	r2, [r7, #16]
 8009034:	429a      	cmp	r2, r3
 8009036:	d3b7      	bcc.n	8008fa8 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800903e:	691b      	ldr	r3, [r3, #16]
 8009040:	68fa      	ldr	r2, [r7, #12]
 8009042:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009046:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800904a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2200      	movs	r2, #0
 8009050:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009058:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800905a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800905c:	2b00      	cmp	r3, #0
 800905e:	d105      	bne.n	800906c <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	699b      	ldr	r3, [r3, #24]
 8009064:	f043 0210 	orr.w	r2, r3, #16
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	699a      	ldr	r2, [r3, #24]
 8009070:	4b0e      	ldr	r3, [pc, #56]	; (80090ac <USB_DevInit+0x2d4>)
 8009072:	4313      	orrs	r3, r2
 8009074:	687a      	ldr	r2, [r7, #4]
 8009076:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800907a:	2b00      	cmp	r3, #0
 800907c:	d005      	beq.n	800908a <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	699b      	ldr	r3, [r3, #24]
 8009082:	f043 0208 	orr.w	r2, r3, #8
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800908a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800908c:	2b01      	cmp	r3, #1
 800908e:	d105      	bne.n	800909c <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	699a      	ldr	r2, [r3, #24]
 8009094:	4b06      	ldr	r3, [pc, #24]	; (80090b0 <USB_DevInit+0x2d8>)
 8009096:	4313      	orrs	r3, r2
 8009098:	687a      	ldr	r2, [r7, #4]
 800909a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800909c:	7dfb      	ldrb	r3, [r7, #23]
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3718      	adds	r7, #24
 80090a2:	46bd      	mov	sp, r7
 80090a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80090a8:	b004      	add	sp, #16
 80090aa:	4770      	bx	lr
 80090ac:	803c3800 	.word	0x803c3800
 80090b0:	40000004 	.word	0x40000004

080090b4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80090b4:	b480      	push	{r7}
 80090b6:	b085      	sub	sp, #20
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80090be:	2300      	movs	r3, #0
 80090c0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	3301      	adds	r3, #1
 80090c6:	60fb      	str	r3, [r7, #12]
 80090c8:	4a12      	ldr	r2, [pc, #72]	; (8009114 <USB_FlushTxFifo+0x60>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d901      	bls.n	80090d2 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80090ce:	2303      	movs	r3, #3
 80090d0:	e01a      	b.n	8009108 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	691b      	ldr	r3, [r3, #16]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	daf3      	bge.n	80090c2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80090da:	2300      	movs	r3, #0
 80090dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	019b      	lsls	r3, r3, #6
 80090e2:	f043 0220 	orr.w	r2, r3, #32
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	3301      	adds	r3, #1
 80090ee:	60fb      	str	r3, [r7, #12]
 80090f0:	4a08      	ldr	r2, [pc, #32]	; (8009114 <USB_FlushTxFifo+0x60>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d901      	bls.n	80090fa <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 80090f6:	2303      	movs	r3, #3
 80090f8:	e006      	b.n	8009108 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	691b      	ldr	r3, [r3, #16]
 80090fe:	f003 0320 	and.w	r3, r3, #32
 8009102:	2b20      	cmp	r3, #32
 8009104:	d0f1      	beq.n	80090ea <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8009106:	2300      	movs	r3, #0
}
 8009108:	4618      	mov	r0, r3
 800910a:	3714      	adds	r7, #20
 800910c:	46bd      	mov	sp, r7
 800910e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009112:	4770      	bx	lr
 8009114:	00030d40 	.word	0x00030d40

08009118 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009118:	b480      	push	{r7}
 800911a:	b085      	sub	sp, #20
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009120:	2300      	movs	r3, #0
 8009122:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	3301      	adds	r3, #1
 8009128:	60fb      	str	r3, [r7, #12]
 800912a:	4a11      	ldr	r2, [pc, #68]	; (8009170 <USB_FlushRxFifo+0x58>)
 800912c:	4293      	cmp	r3, r2
 800912e:	d901      	bls.n	8009134 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8009130:	2303      	movs	r3, #3
 8009132:	e017      	b.n	8009164 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	691b      	ldr	r3, [r3, #16]
 8009138:	2b00      	cmp	r3, #0
 800913a:	daf3      	bge.n	8009124 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800913c:	2300      	movs	r3, #0
 800913e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2210      	movs	r2, #16
 8009144:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	3301      	adds	r3, #1
 800914a:	60fb      	str	r3, [r7, #12]
 800914c:	4a08      	ldr	r2, [pc, #32]	; (8009170 <USB_FlushRxFifo+0x58>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d901      	bls.n	8009156 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8009152:	2303      	movs	r3, #3
 8009154:	e006      	b.n	8009164 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	691b      	ldr	r3, [r3, #16]
 800915a:	f003 0310 	and.w	r3, r3, #16
 800915e:	2b10      	cmp	r3, #16
 8009160:	d0f1      	beq.n	8009146 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8009162:	2300      	movs	r3, #0
}
 8009164:	4618      	mov	r0, r3
 8009166:	3714      	adds	r7, #20
 8009168:	46bd      	mov	sp, r7
 800916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916e:	4770      	bx	lr
 8009170:	00030d40 	.word	0x00030d40

08009174 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009174:	b480      	push	{r7}
 8009176:	b085      	sub	sp, #20
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	460b      	mov	r3, r1
 800917e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800918a:	681a      	ldr	r2, [r3, #0]
 800918c:	78fb      	ldrb	r3, [r7, #3]
 800918e:	68f9      	ldr	r1, [r7, #12]
 8009190:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009194:	4313      	orrs	r3, r2
 8009196:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009198:	2300      	movs	r3, #0
}
 800919a:	4618      	mov	r0, r3
 800919c:	3714      	adds	r7, #20
 800919e:	46bd      	mov	sp, r7
 80091a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a4:	4770      	bx	lr

080091a6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80091a6:	b480      	push	{r7}
 80091a8:	b085      	sub	sp, #20
 80091aa:	af00      	add	r7, sp, #0
 80091ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	68fa      	ldr	r2, [r7, #12]
 80091bc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80091c0:	f023 0303 	bic.w	r3, r3, #3
 80091c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091cc:	685b      	ldr	r3, [r3, #4]
 80091ce:	68fa      	ldr	r2, [r7, #12]
 80091d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80091d4:	f043 0302 	orr.w	r3, r3, #2
 80091d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80091da:	2300      	movs	r3, #0
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3714      	adds	r7, #20
 80091e0:	46bd      	mov	sp, r7
 80091e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e6:	4770      	bx	lr

080091e8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b083      	sub	sp, #12
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	695b      	ldr	r3, [r3, #20]
 80091f4:	f003 0301 	and.w	r3, r3, #1
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	370c      	adds	r7, #12
 80091fc:	46bd      	mov	sp, r7
 80091fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009202:	4770      	bx	lr

08009204 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009204:	b480      	push	{r7}
 8009206:	b085      	sub	sp, #20
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800920c:	2300      	movs	r3, #0
 800920e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	3301      	adds	r3, #1
 8009214:	60fb      	str	r3, [r7, #12]
 8009216:	4a13      	ldr	r2, [pc, #76]	; (8009264 <USB_CoreReset+0x60>)
 8009218:	4293      	cmp	r3, r2
 800921a:	d901      	bls.n	8009220 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800921c:	2303      	movs	r3, #3
 800921e:	e01a      	b.n	8009256 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	691b      	ldr	r3, [r3, #16]
 8009224:	2b00      	cmp	r3, #0
 8009226:	daf3      	bge.n	8009210 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009228:	2300      	movs	r3, #0
 800922a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	691b      	ldr	r3, [r3, #16]
 8009230:	f043 0201 	orr.w	r2, r3, #1
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	3301      	adds	r3, #1
 800923c:	60fb      	str	r3, [r7, #12]
 800923e:	4a09      	ldr	r2, [pc, #36]	; (8009264 <USB_CoreReset+0x60>)
 8009240:	4293      	cmp	r3, r2
 8009242:	d901      	bls.n	8009248 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8009244:	2303      	movs	r3, #3
 8009246:	e006      	b.n	8009256 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	691b      	ldr	r3, [r3, #16]
 800924c:	f003 0301 	and.w	r3, r3, #1
 8009250:	2b01      	cmp	r3, #1
 8009252:	d0f1      	beq.n	8009238 <USB_CoreReset+0x34>

  return HAL_OK;
 8009254:	2300      	movs	r3, #0
}
 8009256:	4618      	mov	r0, r3
 8009258:	3714      	adds	r7, #20
 800925a:	46bd      	mov	sp, r7
 800925c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009260:	4770      	bx	lr
 8009262:	bf00      	nop
 8009264:	00030d40 	.word	0x00030d40

08009268 <__errno>:
 8009268:	4b01      	ldr	r3, [pc, #4]	; (8009270 <__errno+0x8>)
 800926a:	6818      	ldr	r0, [r3, #0]
 800926c:	4770      	bx	lr
 800926e:	bf00      	nop
 8009270:	200000c8 	.word	0x200000c8

08009274 <__libc_init_array>:
 8009274:	b570      	push	{r4, r5, r6, lr}
 8009276:	4d0d      	ldr	r5, [pc, #52]	; (80092ac <__libc_init_array+0x38>)
 8009278:	4c0d      	ldr	r4, [pc, #52]	; (80092b0 <__libc_init_array+0x3c>)
 800927a:	1b64      	subs	r4, r4, r5
 800927c:	10a4      	asrs	r4, r4, #2
 800927e:	2600      	movs	r6, #0
 8009280:	42a6      	cmp	r6, r4
 8009282:	d109      	bne.n	8009298 <__libc_init_array+0x24>
 8009284:	4d0b      	ldr	r5, [pc, #44]	; (80092b4 <__libc_init_array+0x40>)
 8009286:	4c0c      	ldr	r4, [pc, #48]	; (80092b8 <__libc_init_array+0x44>)
 8009288:	f002 fdec 	bl	800be64 <_init>
 800928c:	1b64      	subs	r4, r4, r5
 800928e:	10a4      	asrs	r4, r4, #2
 8009290:	2600      	movs	r6, #0
 8009292:	42a6      	cmp	r6, r4
 8009294:	d105      	bne.n	80092a2 <__libc_init_array+0x2e>
 8009296:	bd70      	pop	{r4, r5, r6, pc}
 8009298:	f855 3b04 	ldr.w	r3, [r5], #4
 800929c:	4798      	blx	r3
 800929e:	3601      	adds	r6, #1
 80092a0:	e7ee      	b.n	8009280 <__libc_init_array+0xc>
 80092a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80092a6:	4798      	blx	r3
 80092a8:	3601      	adds	r6, #1
 80092aa:	e7f2      	b.n	8009292 <__libc_init_array+0x1e>
 80092ac:	0800d8f0 	.word	0x0800d8f0
 80092b0:	0800d8f0 	.word	0x0800d8f0
 80092b4:	0800d8f0 	.word	0x0800d8f0
 80092b8:	0800d8f4 	.word	0x0800d8f4

080092bc <localtime>:
 80092bc:	b538      	push	{r3, r4, r5, lr}
 80092be:	4b0b      	ldr	r3, [pc, #44]	; (80092ec <localtime+0x30>)
 80092c0:	681d      	ldr	r5, [r3, #0]
 80092c2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80092c4:	4604      	mov	r4, r0
 80092c6:	b953      	cbnz	r3, 80092de <localtime+0x22>
 80092c8:	2024      	movs	r0, #36	; 0x24
 80092ca:	f000 f909 	bl	80094e0 <malloc>
 80092ce:	4602      	mov	r2, r0
 80092d0:	63e8      	str	r0, [r5, #60]	; 0x3c
 80092d2:	b920      	cbnz	r0, 80092de <localtime+0x22>
 80092d4:	4b06      	ldr	r3, [pc, #24]	; (80092f0 <localtime+0x34>)
 80092d6:	4807      	ldr	r0, [pc, #28]	; (80092f4 <localtime+0x38>)
 80092d8:	2132      	movs	r1, #50	; 0x32
 80092da:	f000 ff0b 	bl	800a0f4 <__assert_func>
 80092de:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 80092e0:	4620      	mov	r0, r4
 80092e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092e6:	f000 b807 	b.w	80092f8 <localtime_r>
 80092ea:	bf00      	nop
 80092ec:	200000c8 	.word	0x200000c8
 80092f0:	0800d58c 	.word	0x0800d58c
 80092f4:	0800d5a3 	.word	0x0800d5a3

080092f8 <localtime_r>:
 80092f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80092fc:	4680      	mov	r8, r0
 80092fe:	9101      	str	r1, [sp, #4]
 8009300:	f000 ff80 	bl	800a204 <__gettzinfo>
 8009304:	9901      	ldr	r1, [sp, #4]
 8009306:	4605      	mov	r5, r0
 8009308:	4640      	mov	r0, r8
 800930a:	f000 ff7f 	bl	800a20c <gmtime_r>
 800930e:	6943      	ldr	r3, [r0, #20]
 8009310:	0799      	lsls	r1, r3, #30
 8009312:	4604      	mov	r4, r0
 8009314:	f203 776c 	addw	r7, r3, #1900	; 0x76c
 8009318:	d105      	bne.n	8009326 <localtime_r+0x2e>
 800931a:	2264      	movs	r2, #100	; 0x64
 800931c:	fb97 f3f2 	sdiv	r3, r7, r2
 8009320:	fb02 7313 	mls	r3, r2, r3, r7
 8009324:	bb73      	cbnz	r3, 8009384 <localtime_r+0x8c>
 8009326:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800932a:	fb97 f6f3 	sdiv	r6, r7, r3
 800932e:	fb03 7616 	mls	r6, r3, r6, r7
 8009332:	fab6 f386 	clz	r3, r6
 8009336:	095b      	lsrs	r3, r3, #5
 8009338:	4e67      	ldr	r6, [pc, #412]	; (80094d8 <localtime_r+0x1e0>)
 800933a:	2230      	movs	r2, #48	; 0x30
 800933c:	fb02 6603 	mla	r6, r2, r3, r6
 8009340:	f000 fd46 	bl	8009dd0 <__tz_lock>
 8009344:	f000 fd50 	bl	8009de8 <_tzset_unlocked>
 8009348:	4b64      	ldr	r3, [pc, #400]	; (80094dc <localtime_r+0x1e4>)
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	b34b      	cbz	r3, 80093a2 <localtime_r+0xaa>
 800934e:	686b      	ldr	r3, [r5, #4]
 8009350:	42bb      	cmp	r3, r7
 8009352:	d119      	bne.n	8009388 <localtime_r+0x90>
 8009354:	682f      	ldr	r7, [r5, #0]
 8009356:	e9d8 2300 	ldrd	r2, r3, [r8]
 800935a:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 800935e:	b9df      	cbnz	r7, 8009398 <localtime_r+0xa0>
 8009360:	4282      	cmp	r2, r0
 8009362:	eb73 0101 	sbcs.w	r1, r3, r1
 8009366:	da23      	bge.n	80093b0 <localtime_r+0xb8>
 8009368:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 800936c:	4282      	cmp	r2, r0
 800936e:	eb73 0701 	sbcs.w	r7, r3, r1
 8009372:	bfb4      	ite	lt
 8009374:	2701      	movlt	r7, #1
 8009376:	2700      	movge	r7, #0
 8009378:	4282      	cmp	r2, r0
 800937a:	418b      	sbcs	r3, r1
 800937c:	6227      	str	r7, [r4, #32]
 800937e:	db19      	blt.n	80093b4 <localtime_r+0xbc>
 8009380:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8009382:	e018      	b.n	80093b6 <localtime_r+0xbe>
 8009384:	2301      	movs	r3, #1
 8009386:	e7d7      	b.n	8009338 <localtime_r+0x40>
 8009388:	4638      	mov	r0, r7
 800938a:	f000 fc77 	bl	8009c7c <__tzcalc_limits>
 800938e:	2800      	cmp	r0, #0
 8009390:	d1e0      	bne.n	8009354 <localtime_r+0x5c>
 8009392:	f04f 33ff 	mov.w	r3, #4294967295
 8009396:	e004      	b.n	80093a2 <localtime_r+0xaa>
 8009398:	4282      	cmp	r2, r0
 800939a:	eb73 0101 	sbcs.w	r1, r3, r1
 800939e:	da02      	bge.n	80093a6 <localtime_r+0xae>
 80093a0:	2300      	movs	r3, #0
 80093a2:	6223      	str	r3, [r4, #32]
 80093a4:	e7ec      	b.n	8009380 <localtime_r+0x88>
 80093a6:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 80093aa:	4282      	cmp	r2, r0
 80093ac:	418b      	sbcs	r3, r1
 80093ae:	daf7      	bge.n	80093a0 <localtime_r+0xa8>
 80093b0:	2301      	movs	r3, #1
 80093b2:	6223      	str	r3, [r4, #32]
 80093b4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80093b6:	6861      	ldr	r1, [r4, #4]
 80093b8:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80093bc:	203c      	movs	r0, #60	; 0x3c
 80093be:	fb93 f5f2 	sdiv	r5, r3, r2
 80093c2:	fb02 3315 	mls	r3, r2, r5, r3
 80093c6:	fb93 f2f0 	sdiv	r2, r3, r0
 80093ca:	fb00 3012 	mls	r0, r0, r2, r3
 80093ce:	6823      	ldr	r3, [r4, #0]
 80093d0:	1a89      	subs	r1, r1, r2
 80093d2:	68a2      	ldr	r2, [r4, #8]
 80093d4:	6061      	str	r1, [r4, #4]
 80093d6:	1a1b      	subs	r3, r3, r0
 80093d8:	1b52      	subs	r2, r2, r5
 80093da:	2b3b      	cmp	r3, #59	; 0x3b
 80093dc:	6023      	str	r3, [r4, #0]
 80093de:	60a2      	str	r2, [r4, #8]
 80093e0:	dd35      	ble.n	800944e <localtime_r+0x156>
 80093e2:	3101      	adds	r1, #1
 80093e4:	6061      	str	r1, [r4, #4]
 80093e6:	3b3c      	subs	r3, #60	; 0x3c
 80093e8:	6023      	str	r3, [r4, #0]
 80093ea:	6863      	ldr	r3, [r4, #4]
 80093ec:	2b3b      	cmp	r3, #59	; 0x3b
 80093ee:	dd34      	ble.n	800945a <localtime_r+0x162>
 80093f0:	3201      	adds	r2, #1
 80093f2:	60a2      	str	r2, [r4, #8]
 80093f4:	3b3c      	subs	r3, #60	; 0x3c
 80093f6:	6063      	str	r3, [r4, #4]
 80093f8:	68a3      	ldr	r3, [r4, #8]
 80093fa:	2b17      	cmp	r3, #23
 80093fc:	dd33      	ble.n	8009466 <localtime_r+0x16e>
 80093fe:	69e2      	ldr	r2, [r4, #28]
 8009400:	3201      	adds	r2, #1
 8009402:	61e2      	str	r2, [r4, #28]
 8009404:	69a2      	ldr	r2, [r4, #24]
 8009406:	3201      	adds	r2, #1
 8009408:	2a06      	cmp	r2, #6
 800940a:	bfc8      	it	gt
 800940c:	2200      	movgt	r2, #0
 800940e:	61a2      	str	r2, [r4, #24]
 8009410:	68e2      	ldr	r2, [r4, #12]
 8009412:	3b18      	subs	r3, #24
 8009414:	3201      	adds	r2, #1
 8009416:	60a3      	str	r3, [r4, #8]
 8009418:	6923      	ldr	r3, [r4, #16]
 800941a:	60e2      	str	r2, [r4, #12]
 800941c:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8009420:	428a      	cmp	r2, r1
 8009422:	dd0e      	ble.n	8009442 <localtime_r+0x14a>
 8009424:	2b0b      	cmp	r3, #11
 8009426:	eba2 0201 	sub.w	r2, r2, r1
 800942a:	60e2      	str	r2, [r4, #12]
 800942c:	f103 0201 	add.w	r2, r3, #1
 8009430:	bf09      	itett	eq
 8009432:	6963      	ldreq	r3, [r4, #20]
 8009434:	6122      	strne	r2, [r4, #16]
 8009436:	2200      	moveq	r2, #0
 8009438:	3301      	addeq	r3, #1
 800943a:	bf02      	ittt	eq
 800943c:	6122      	streq	r2, [r4, #16]
 800943e:	6163      	streq	r3, [r4, #20]
 8009440:	61e2      	streq	r2, [r4, #28]
 8009442:	f000 fccb 	bl	8009ddc <__tz_unlock>
 8009446:	4620      	mov	r0, r4
 8009448:	b002      	add	sp, #8
 800944a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800944e:	2b00      	cmp	r3, #0
 8009450:	dacb      	bge.n	80093ea <localtime_r+0xf2>
 8009452:	3901      	subs	r1, #1
 8009454:	6061      	str	r1, [r4, #4]
 8009456:	333c      	adds	r3, #60	; 0x3c
 8009458:	e7c6      	b.n	80093e8 <localtime_r+0xf0>
 800945a:	2b00      	cmp	r3, #0
 800945c:	dacc      	bge.n	80093f8 <localtime_r+0x100>
 800945e:	3a01      	subs	r2, #1
 8009460:	60a2      	str	r2, [r4, #8]
 8009462:	333c      	adds	r3, #60	; 0x3c
 8009464:	e7c7      	b.n	80093f6 <localtime_r+0xfe>
 8009466:	2b00      	cmp	r3, #0
 8009468:	daeb      	bge.n	8009442 <localtime_r+0x14a>
 800946a:	69e2      	ldr	r2, [r4, #28]
 800946c:	3a01      	subs	r2, #1
 800946e:	61e2      	str	r2, [r4, #28]
 8009470:	69a2      	ldr	r2, [r4, #24]
 8009472:	3a01      	subs	r2, #1
 8009474:	bf48      	it	mi
 8009476:	2206      	movmi	r2, #6
 8009478:	61a2      	str	r2, [r4, #24]
 800947a:	68e2      	ldr	r2, [r4, #12]
 800947c:	3318      	adds	r3, #24
 800947e:	3a01      	subs	r2, #1
 8009480:	60e2      	str	r2, [r4, #12]
 8009482:	60a3      	str	r3, [r4, #8]
 8009484:	2a00      	cmp	r2, #0
 8009486:	d1dc      	bne.n	8009442 <localtime_r+0x14a>
 8009488:	6923      	ldr	r3, [r4, #16]
 800948a:	3b01      	subs	r3, #1
 800948c:	d405      	bmi.n	800949a <localtime_r+0x1a2>
 800948e:	6123      	str	r3, [r4, #16]
 8009490:	6923      	ldr	r3, [r4, #16]
 8009492:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8009496:	60e3      	str	r3, [r4, #12]
 8009498:	e7d3      	b.n	8009442 <localtime_r+0x14a>
 800949a:	230b      	movs	r3, #11
 800949c:	6123      	str	r3, [r4, #16]
 800949e:	6963      	ldr	r3, [r4, #20]
 80094a0:	1e5a      	subs	r2, r3, #1
 80094a2:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80094a6:	6162      	str	r2, [r4, #20]
 80094a8:	079a      	lsls	r2, r3, #30
 80094aa:	d105      	bne.n	80094b8 <localtime_r+0x1c0>
 80094ac:	2164      	movs	r1, #100	; 0x64
 80094ae:	fb93 f2f1 	sdiv	r2, r3, r1
 80094b2:	fb01 3212 	mls	r2, r1, r2, r3
 80094b6:	b962      	cbnz	r2, 80094d2 <localtime_r+0x1da>
 80094b8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80094bc:	fb93 f1f2 	sdiv	r1, r3, r2
 80094c0:	fb02 3311 	mls	r3, r2, r1, r3
 80094c4:	fab3 f383 	clz	r3, r3
 80094c8:	095b      	lsrs	r3, r3, #5
 80094ca:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80094ce:	61e3      	str	r3, [r4, #28]
 80094d0:	e7de      	b.n	8009490 <localtime_r+0x198>
 80094d2:	2301      	movs	r3, #1
 80094d4:	e7f9      	b.n	80094ca <localtime_r+0x1d2>
 80094d6:	bf00      	nop
 80094d8:	0800d660 	.word	0x0800d660
 80094dc:	20000e58 	.word	0x20000e58

080094e0 <malloc>:
 80094e0:	4b02      	ldr	r3, [pc, #8]	; (80094ec <malloc+0xc>)
 80094e2:	4601      	mov	r1, r0
 80094e4:	6818      	ldr	r0, [r3, #0]
 80094e6:	f000 baf1 	b.w	8009acc <_malloc_r>
 80094ea:	bf00      	nop
 80094ec:	200000c8 	.word	0x200000c8

080094f0 <free>:
 80094f0:	4b02      	ldr	r3, [pc, #8]	; (80094fc <free+0xc>)
 80094f2:	4601      	mov	r1, r0
 80094f4:	6818      	ldr	r0, [r3, #0]
 80094f6:	f000 ba7d 	b.w	80099f4 <_free_r>
 80094fa:	bf00      	nop
 80094fc:	200000c8 	.word	0x200000c8

08009500 <memset>:
 8009500:	4402      	add	r2, r0
 8009502:	4603      	mov	r3, r0
 8009504:	4293      	cmp	r3, r2
 8009506:	d100      	bne.n	800950a <memset+0xa>
 8009508:	4770      	bx	lr
 800950a:	f803 1b01 	strb.w	r1, [r3], #1
 800950e:	e7f9      	b.n	8009504 <memset+0x4>

08009510 <validate_structure>:
 8009510:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009512:	6801      	ldr	r1, [r0, #0]
 8009514:	293b      	cmp	r1, #59	; 0x3b
 8009516:	4604      	mov	r4, r0
 8009518:	d911      	bls.n	800953e <validate_structure+0x2e>
 800951a:	223c      	movs	r2, #60	; 0x3c
 800951c:	4668      	mov	r0, sp
 800951e:	f000 fe07 	bl	800a130 <div>
 8009522:	9a01      	ldr	r2, [sp, #4]
 8009524:	6863      	ldr	r3, [r4, #4]
 8009526:	9900      	ldr	r1, [sp, #0]
 8009528:	2a00      	cmp	r2, #0
 800952a:	440b      	add	r3, r1
 800952c:	6063      	str	r3, [r4, #4]
 800952e:	bfbb      	ittet	lt
 8009530:	323c      	addlt	r2, #60	; 0x3c
 8009532:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8009536:	6022      	strge	r2, [r4, #0]
 8009538:	6022      	strlt	r2, [r4, #0]
 800953a:	bfb8      	it	lt
 800953c:	6063      	strlt	r3, [r4, #4]
 800953e:	6861      	ldr	r1, [r4, #4]
 8009540:	293b      	cmp	r1, #59	; 0x3b
 8009542:	d911      	bls.n	8009568 <validate_structure+0x58>
 8009544:	223c      	movs	r2, #60	; 0x3c
 8009546:	4668      	mov	r0, sp
 8009548:	f000 fdf2 	bl	800a130 <div>
 800954c:	9a01      	ldr	r2, [sp, #4]
 800954e:	68a3      	ldr	r3, [r4, #8]
 8009550:	9900      	ldr	r1, [sp, #0]
 8009552:	2a00      	cmp	r2, #0
 8009554:	440b      	add	r3, r1
 8009556:	60a3      	str	r3, [r4, #8]
 8009558:	bfbb      	ittet	lt
 800955a:	323c      	addlt	r2, #60	; 0x3c
 800955c:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8009560:	6062      	strge	r2, [r4, #4]
 8009562:	6062      	strlt	r2, [r4, #4]
 8009564:	bfb8      	it	lt
 8009566:	60a3      	strlt	r3, [r4, #8]
 8009568:	68a1      	ldr	r1, [r4, #8]
 800956a:	2917      	cmp	r1, #23
 800956c:	d911      	bls.n	8009592 <validate_structure+0x82>
 800956e:	2218      	movs	r2, #24
 8009570:	4668      	mov	r0, sp
 8009572:	f000 fddd 	bl	800a130 <div>
 8009576:	9a01      	ldr	r2, [sp, #4]
 8009578:	68e3      	ldr	r3, [r4, #12]
 800957a:	9900      	ldr	r1, [sp, #0]
 800957c:	2a00      	cmp	r2, #0
 800957e:	440b      	add	r3, r1
 8009580:	60e3      	str	r3, [r4, #12]
 8009582:	bfbb      	ittet	lt
 8009584:	3218      	addlt	r2, #24
 8009586:	f103 33ff 	addlt.w	r3, r3, #4294967295
 800958a:	60a2      	strge	r2, [r4, #8]
 800958c:	60a2      	strlt	r2, [r4, #8]
 800958e:	bfb8      	it	lt
 8009590:	60e3      	strlt	r3, [r4, #12]
 8009592:	6921      	ldr	r1, [r4, #16]
 8009594:	290b      	cmp	r1, #11
 8009596:	d911      	bls.n	80095bc <validate_structure+0xac>
 8009598:	220c      	movs	r2, #12
 800959a:	4668      	mov	r0, sp
 800959c:	f000 fdc8 	bl	800a130 <div>
 80095a0:	9a01      	ldr	r2, [sp, #4]
 80095a2:	6963      	ldr	r3, [r4, #20]
 80095a4:	9900      	ldr	r1, [sp, #0]
 80095a6:	2a00      	cmp	r2, #0
 80095a8:	440b      	add	r3, r1
 80095aa:	6163      	str	r3, [r4, #20]
 80095ac:	bfbb      	ittet	lt
 80095ae:	320c      	addlt	r2, #12
 80095b0:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80095b4:	6122      	strge	r2, [r4, #16]
 80095b6:	6122      	strlt	r2, [r4, #16]
 80095b8:	bfb8      	it	lt
 80095ba:	6163      	strlt	r3, [r4, #20]
 80095bc:	6963      	ldr	r3, [r4, #20]
 80095be:	0798      	lsls	r0, r3, #30
 80095c0:	d120      	bne.n	8009604 <validate_structure+0xf4>
 80095c2:	2164      	movs	r1, #100	; 0x64
 80095c4:	fb93 f2f1 	sdiv	r2, r3, r1
 80095c8:	fb01 3212 	mls	r2, r1, r2, r3
 80095cc:	b9e2      	cbnz	r2, 8009608 <validate_structure+0xf8>
 80095ce:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80095d2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80095d6:	fb93 f1f2 	sdiv	r1, r3, r2
 80095da:	fb02 3311 	mls	r3, r2, r1, r3
 80095de:	2b00      	cmp	r3, #0
 80095e0:	bf14      	ite	ne
 80095e2:	231c      	movne	r3, #28
 80095e4:	231d      	moveq	r3, #29
 80095e6:	68e2      	ldr	r2, [r4, #12]
 80095e8:	2a00      	cmp	r2, #0
 80095ea:	dc0f      	bgt.n	800960c <validate_structure+0xfc>
 80095ec:	4f33      	ldr	r7, [pc, #204]	; (80096bc <validate_structure+0x1ac>)
 80095ee:	260b      	movs	r6, #11
 80095f0:	2064      	movs	r0, #100	; 0x64
 80095f2:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80095f6:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 80095fa:	f1bc 0f00 	cmp.w	ip, #0
 80095fe:	dd31      	ble.n	8009664 <validate_structure+0x154>
 8009600:	b003      	add	sp, #12
 8009602:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009604:	231c      	movs	r3, #28
 8009606:	e7ee      	b.n	80095e6 <validate_structure+0xd6>
 8009608:	231d      	movs	r3, #29
 800960a:	e7ec      	b.n	80095e6 <validate_structure+0xd6>
 800960c:	4e2b      	ldr	r6, [pc, #172]	; (80096bc <validate_structure+0x1ac>)
 800960e:	2700      	movs	r7, #0
 8009610:	2064      	movs	r0, #100	; 0x64
 8009612:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8009616:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 800961a:	2a01      	cmp	r2, #1
 800961c:	bf14      	ite	ne
 800961e:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 8009622:	469c      	moveq	ip, r3
 8009624:	4561      	cmp	r1, ip
 8009626:	ddeb      	ble.n	8009600 <validate_structure+0xf0>
 8009628:	3201      	adds	r2, #1
 800962a:	eba1 010c 	sub.w	r1, r1, ip
 800962e:	2a0c      	cmp	r2, #12
 8009630:	60e1      	str	r1, [r4, #12]
 8009632:	6122      	str	r2, [r4, #16]
 8009634:	d1ef      	bne.n	8009616 <validate_structure+0x106>
 8009636:	6963      	ldr	r3, [r4, #20]
 8009638:	1c5a      	adds	r2, r3, #1
 800963a:	0791      	lsls	r1, r2, #30
 800963c:	e9c4 7204 	strd	r7, r2, [r4, #16]
 8009640:	d137      	bne.n	80096b2 <validate_structure+0x1a2>
 8009642:	fb92 f1f0 	sdiv	r1, r2, r0
 8009646:	fb00 2211 	mls	r2, r0, r1, r2
 800964a:	2a00      	cmp	r2, #0
 800964c:	d133      	bne.n	80096b6 <validate_structure+0x1a6>
 800964e:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 8009652:	fb93 f2f5 	sdiv	r2, r3, r5
 8009656:	fb05 3312 	mls	r3, r5, r2, r3
 800965a:	2b00      	cmp	r3, #0
 800965c:	bf14      	ite	ne
 800965e:	231c      	movne	r3, #28
 8009660:	231d      	moveq	r3, #29
 8009662:	e7d8      	b.n	8009616 <validate_structure+0x106>
 8009664:	6921      	ldr	r1, [r4, #16]
 8009666:	3901      	subs	r1, #1
 8009668:	6121      	str	r1, [r4, #16]
 800966a:	3101      	adds	r1, #1
 800966c:	d114      	bne.n	8009698 <validate_structure+0x188>
 800966e:	6963      	ldr	r3, [r4, #20]
 8009670:	1e5a      	subs	r2, r3, #1
 8009672:	0791      	lsls	r1, r2, #30
 8009674:	e9c4 6204 	strd	r6, r2, [r4, #16]
 8009678:	d117      	bne.n	80096aa <validate_structure+0x19a>
 800967a:	fb92 f1f0 	sdiv	r1, r2, r0
 800967e:	fb00 2211 	mls	r2, r0, r1, r2
 8009682:	b9a2      	cbnz	r2, 80096ae <validate_structure+0x19e>
 8009684:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8009688:	fb93 f2f5 	sdiv	r2, r3, r5
 800968c:	fb05 3312 	mls	r3, r5, r2, r3
 8009690:	2b00      	cmp	r3, #0
 8009692:	bf14      	ite	ne
 8009694:	231c      	movne	r3, #28
 8009696:	231d      	moveq	r3, #29
 8009698:	6922      	ldr	r2, [r4, #16]
 800969a:	2a01      	cmp	r2, #1
 800969c:	bf14      	ite	ne
 800969e:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 80096a2:	461a      	moveq	r2, r3
 80096a4:	4462      	add	r2, ip
 80096a6:	60e2      	str	r2, [r4, #12]
 80096a8:	e7a5      	b.n	80095f6 <validate_structure+0xe6>
 80096aa:	231c      	movs	r3, #28
 80096ac:	e7f4      	b.n	8009698 <validate_structure+0x188>
 80096ae:	231d      	movs	r3, #29
 80096b0:	e7f2      	b.n	8009698 <validate_structure+0x188>
 80096b2:	231c      	movs	r3, #28
 80096b4:	e7af      	b.n	8009616 <validate_structure+0x106>
 80096b6:	231d      	movs	r3, #29
 80096b8:	e7ad      	b.n	8009616 <validate_structure+0x106>
 80096ba:	bf00      	nop
 80096bc:	0800d600 	.word	0x0800d600

080096c0 <mktime>:
 80096c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096c4:	b085      	sub	sp, #20
 80096c6:	4607      	mov	r7, r0
 80096c8:	f000 fd9c 	bl	800a204 <__gettzinfo>
 80096cc:	4681      	mov	r9, r0
 80096ce:	4638      	mov	r0, r7
 80096d0:	f7ff ff1e 	bl	8009510 <validate_structure>
 80096d4:	e9d7 4000 	ldrd	r4, r0, [r7]
 80096d8:	233c      	movs	r3, #60	; 0x3c
 80096da:	fb03 4400 	mla	r4, r3, r0, r4
 80096de:	68b8      	ldr	r0, [r7, #8]
 80096e0:	4abc      	ldr	r2, [pc, #752]	; (80099d4 <mktime+0x314>)
 80096e2:	697e      	ldr	r6, [r7, #20]
 80096e4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80096e8:	fb03 4400 	mla	r4, r3, r0, r4
 80096ec:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 80096f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80096f4:	3d01      	subs	r5, #1
 80096f6:	2b01      	cmp	r3, #1
 80096f8:	4415      	add	r5, r2
 80096fa:	dd11      	ble.n	8009720 <mktime+0x60>
 80096fc:	07b1      	lsls	r1, r6, #30
 80096fe:	d10f      	bne.n	8009720 <mktime+0x60>
 8009700:	2264      	movs	r2, #100	; 0x64
 8009702:	fb96 f3f2 	sdiv	r3, r6, r2
 8009706:	fb02 6313 	mls	r3, r2, r3, r6
 800970a:	b943      	cbnz	r3, 800971e <mktime+0x5e>
 800970c:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8009710:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8009714:	fb93 f1f2 	sdiv	r1, r3, r2
 8009718:	fb02 3311 	mls	r3, r2, r1, r3
 800971c:	b903      	cbnz	r3, 8009720 <mktime+0x60>
 800971e:	3501      	adds	r5, #1
 8009720:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 8009724:	3310      	adds	r3, #16
 8009726:	f644 6220 	movw	r2, #20000	; 0x4e20
 800972a:	4293      	cmp	r3, r2
 800972c:	61fd      	str	r5, [r7, #28]
 800972e:	f200 815d 	bhi.w	80099ec <mktime+0x32c>
 8009732:	2e46      	cmp	r6, #70	; 0x46
 8009734:	dd71      	ble.n	800981a <mktime+0x15a>
 8009736:	2346      	movs	r3, #70	; 0x46
 8009738:	f240 1c6d 	movw	ip, #365	; 0x16d
 800973c:	2164      	movs	r1, #100	; 0x64
 800973e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8009742:	079a      	lsls	r2, r3, #30
 8009744:	d163      	bne.n	800980e <mktime+0x14e>
 8009746:	fb93 f2f1 	sdiv	r2, r3, r1
 800974a:	fb01 3212 	mls	r2, r1, r2, r3
 800974e:	2a00      	cmp	r2, #0
 8009750:	d160      	bne.n	8009814 <mktime+0x154>
 8009752:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 8009756:	fb92 fef0 	sdiv	lr, r2, r0
 800975a:	fb00 221e 	mls	r2, r0, lr, r2
 800975e:	2a00      	cmp	r2, #0
 8009760:	bf14      	ite	ne
 8009762:	4662      	movne	r2, ip
 8009764:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8009768:	3301      	adds	r3, #1
 800976a:	429e      	cmp	r6, r3
 800976c:	4415      	add	r5, r2
 800976e:	d1e8      	bne.n	8009742 <mktime+0x82>
 8009770:	4b99      	ldr	r3, [pc, #612]	; (80099d8 <mktime+0x318>)
 8009772:	ea4f 78e4 	mov.w	r8, r4, asr #31
 8009776:	fbc5 4803 	smlal	r4, r8, r5, r3
 800977a:	f000 fb29 	bl	8009dd0 <__tz_lock>
 800977e:	f000 fb33 	bl	8009de8 <_tzset_unlocked>
 8009782:	4b96      	ldr	r3, [pc, #600]	; (80099dc <mktime+0x31c>)
 8009784:	f8d3 b000 	ldr.w	fp, [r3]
 8009788:	f1bb 0f00 	cmp.w	fp, #0
 800978c:	d039      	beq.n	8009802 <mktime+0x142>
 800978e:	f8d7 b020 	ldr.w	fp, [r7, #32]
 8009792:	6978      	ldr	r0, [r7, #20]
 8009794:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8009798:	f1bb 0f01 	cmp.w	fp, #1
 800979c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80097a0:	46da      	mov	sl, fp
 80097a2:	bfa8      	it	ge
 80097a4:	f04f 0a01 	movge.w	sl, #1
 80097a8:	4283      	cmp	r3, r0
 80097aa:	d178      	bne.n	800989e <mktime+0x1de>
 80097ac:	e9d9 3208 	ldrd	r3, r2, [r9, #32]
 80097b0:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 80097b4:	f8d9 e04c 	ldr.w	lr, [r9, #76]	; 0x4c
 80097b8:	1a5b      	subs	r3, r3, r1
 80097ba:	9302      	str	r3, [sp, #8]
 80097bc:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
 80097c0:	9303      	str	r3, [sp, #12]
 80097c2:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 80097c6:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 80097ca:	9301      	str	r3, [sp, #4]
 80097cc:	ebb3 0c02 	subs.w	ip, r3, r2
 80097d0:	eb6e 70e2 	sbc.w	r0, lr, r2, asr #31
 80097d4:	4564      	cmp	r4, ip
 80097d6:	eb78 0300 	sbcs.w	r3, r8, r0
 80097da:	da66      	bge.n	80098aa <mktime+0x1ea>
 80097dc:	f8d9 3000 	ldr.w	r3, [r9]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d06f      	beq.n	80098c4 <mktime+0x204>
 80097e4:	9b02      	ldr	r3, [sp, #8]
 80097e6:	429c      	cmp	r4, r3
 80097e8:	9b03      	ldr	r3, [sp, #12]
 80097ea:	eb78 0303 	sbcs.w	r3, r8, r3
 80097ee:	db03      	blt.n	80097f8 <mktime+0x138>
 80097f0:	4564      	cmp	r4, ip
 80097f2:	eb78 0300 	sbcs.w	r3, r8, r0
 80097f6:	db6b      	blt.n	80098d0 <mktime+0x210>
 80097f8:	f1bb 0f00 	cmp.w	fp, #0
 80097fc:	f04f 0b00 	mov.w	fp, #0
 8009800:	da6b      	bge.n	80098da <mktime+0x21a>
 8009802:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 8009806:	190c      	adds	r4, r1, r4
 8009808:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 800980c:	e0a9      	b.n	8009962 <mktime+0x2a2>
 800980e:	f240 126d 	movw	r2, #365	; 0x16d
 8009812:	e7a9      	b.n	8009768 <mktime+0xa8>
 8009814:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8009818:	e7a6      	b.n	8009768 <mktime+0xa8>
 800981a:	d0a9      	beq.n	8009770 <mktime+0xb0>
 800981c:	2345      	movs	r3, #69	; 0x45
 800981e:	f240 1c6d 	movw	ip, #365	; 0x16d
 8009822:	2164      	movs	r1, #100	; 0x64
 8009824:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8009828:	e012      	b.n	8009850 <mktime+0x190>
 800982a:	bb62      	cbnz	r2, 8009886 <mktime+0x1c6>
 800982c:	fb93 f2f1 	sdiv	r2, r3, r1
 8009830:	fb01 3212 	mls	r2, r1, r2, r3
 8009834:	bb52      	cbnz	r2, 800988c <mktime+0x1cc>
 8009836:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 800983a:	fb92 fef0 	sdiv	lr, r2, r0
 800983e:	fb00 221e 	mls	r2, r0, lr, r2
 8009842:	2a00      	cmp	r2, #0
 8009844:	bf14      	ite	ne
 8009846:	4662      	movne	r2, ip
 8009848:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 800984c:	1aad      	subs	r5, r5, r2
 800984e:	3b01      	subs	r3, #1
 8009850:	429e      	cmp	r6, r3
 8009852:	f003 0203 	and.w	r2, r3, #3
 8009856:	dbe8      	blt.n	800982a <mktime+0x16a>
 8009858:	b9da      	cbnz	r2, 8009892 <mktime+0x1d2>
 800985a:	2264      	movs	r2, #100	; 0x64
 800985c:	fb96 f3f2 	sdiv	r3, r6, r2
 8009860:	fb02 6313 	mls	r3, r2, r3, r6
 8009864:	b9c3      	cbnz	r3, 8009898 <mktime+0x1d8>
 8009866:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 800986a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800986e:	fb93 f1f2 	sdiv	r1, r3, r2
 8009872:	fb02 3311 	mls	r3, r2, r1, r3
 8009876:	2b00      	cmp	r3, #0
 8009878:	f240 136d 	movw	r3, #365	; 0x16d
 800987c:	bf08      	it	eq
 800987e:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8009882:	1aed      	subs	r5, r5, r3
 8009884:	e774      	b.n	8009770 <mktime+0xb0>
 8009886:	f240 126d 	movw	r2, #365	; 0x16d
 800988a:	e7df      	b.n	800984c <mktime+0x18c>
 800988c:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8009890:	e7dc      	b.n	800984c <mktime+0x18c>
 8009892:	f240 136d 	movw	r3, #365	; 0x16d
 8009896:	e7f4      	b.n	8009882 <mktime+0x1c2>
 8009898:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 800989c:	e7f1      	b.n	8009882 <mktime+0x1c2>
 800989e:	f000 f9ed 	bl	8009c7c <__tzcalc_limits>
 80098a2:	2800      	cmp	r0, #0
 80098a4:	d182      	bne.n	80097ac <mktime+0xec>
 80098a6:	46d3      	mov	fp, sl
 80098a8:	e050      	b.n	800994c <mktime+0x28c>
 80098aa:	9b01      	ldr	r3, [sp, #4]
 80098ac:	1a5b      	subs	r3, r3, r1
 80098ae:	9301      	str	r3, [sp, #4]
 80098b0:	ea4f 73e1 	mov.w	r3, r1, asr #31
 80098b4:	eb6e 0e03 	sbc.w	lr, lr, r3
 80098b8:	9b01      	ldr	r3, [sp, #4]
 80098ba:	429c      	cmp	r4, r3
 80098bc:	eb78 030e 	sbcs.w	r3, r8, lr
 80098c0:	dbf1      	blt.n	80098a6 <mktime+0x1e6>
 80098c2:	e78b      	b.n	80097dc <mktime+0x11c>
 80098c4:	9b02      	ldr	r3, [sp, #8]
 80098c6:	429c      	cmp	r4, r3
 80098c8:	9b03      	ldr	r3, [sp, #12]
 80098ca:	eb78 0303 	sbcs.w	r3, r8, r3
 80098ce:	db8f      	blt.n	80097f0 <mktime+0x130>
 80098d0:	f1bb 0f00 	cmp.w	fp, #0
 80098d4:	db3e      	blt.n	8009954 <mktime+0x294>
 80098d6:	f04f 0b01 	mov.w	fp, #1
 80098da:	ea8a 0a0b 	eor.w	sl, sl, fp
 80098de:	f1ba 0f01 	cmp.w	sl, #1
 80098e2:	d133      	bne.n	800994c <mktime+0x28c>
 80098e4:	f1bb 0f00 	cmp.w	fp, #0
 80098e8:	d04e      	beq.n	8009988 <mktime+0x2c8>
 80098ea:	1a52      	subs	r2, r2, r1
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 80098f2:	4413      	add	r3, r2
 80098f4:	1914      	adds	r4, r2, r4
 80098f6:	603b      	str	r3, [r7, #0]
 80098f8:	4638      	mov	r0, r7
 80098fa:	eb48 78e2 	adc.w	r8, r8, r2, asr #31
 80098fe:	f7ff fe07 	bl	8009510 <validate_structure>
 8009902:	68fa      	ldr	r2, [r7, #12]
 8009904:	ebb2 020a 	subs.w	r2, r2, sl
 8009908:	d020      	beq.n	800994c <mktime+0x28c>
 800990a:	2a01      	cmp	r2, #1
 800990c:	dc3e      	bgt.n	800998c <mktime+0x2cc>
 800990e:	1c90      	adds	r0, r2, #2
 8009910:	bfd8      	it	le
 8009912:	2201      	movle	r2, #1
 8009914:	69fb      	ldr	r3, [r7, #28]
 8009916:	18d3      	adds	r3, r2, r3
 8009918:	4415      	add	r5, r2
 800991a:	d540      	bpl.n	800999e <mktime+0x2de>
 800991c:	1e73      	subs	r3, r6, #1
 800991e:	0799      	lsls	r1, r3, #30
 8009920:	d137      	bne.n	8009992 <mktime+0x2d2>
 8009922:	2264      	movs	r2, #100	; 0x64
 8009924:	fb93 f1f2 	sdiv	r1, r3, r2
 8009928:	fb02 3311 	mls	r3, r2, r1, r3
 800992c:	bba3      	cbnz	r3, 8009998 <mktime+0x2d8>
 800992e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8009932:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 8009936:	fb96 f2f3 	sdiv	r2, r6, r3
 800993a:	fb03 6612 	mls	r6, r3, r2, r6
 800993e:	2e00      	cmp	r6, #0
 8009940:	f240 136d 	movw	r3, #365	; 0x16d
 8009944:	bf18      	it	ne
 8009946:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 800994a:	61fb      	str	r3, [r7, #28]
 800994c:	f1bb 0f01 	cmp.w	fp, #1
 8009950:	f47f af57 	bne.w	8009802 <mktime+0x142>
 8009954:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 8009958:	190c      	adds	r4, r1, r4
 800995a:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 800995e:	f04f 0b01 	mov.w	fp, #1
 8009962:	f000 fa3b 	bl	8009ddc <__tz_unlock>
 8009966:	3504      	adds	r5, #4
 8009968:	2307      	movs	r3, #7
 800996a:	fb95 f3f3 	sdiv	r3, r5, r3
 800996e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8009972:	1aed      	subs	r5, r5, r3
 8009974:	bf48      	it	mi
 8009976:	3507      	addmi	r5, #7
 8009978:	f8c7 b020 	str.w	fp, [r7, #32]
 800997c:	61bd      	str	r5, [r7, #24]
 800997e:	4620      	mov	r0, r4
 8009980:	4641      	mov	r1, r8
 8009982:	b005      	add	sp, #20
 8009984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009988:	1a8a      	subs	r2, r1, r2
 800998a:	e7af      	b.n	80098ec <mktime+0x22c>
 800998c:	f04f 32ff 	mov.w	r2, #4294967295
 8009990:	e7c0      	b.n	8009914 <mktime+0x254>
 8009992:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8009996:	e7d8      	b.n	800994a <mktime+0x28a>
 8009998:	f240 136d 	movw	r3, #365	; 0x16d
 800999c:	e7d5      	b.n	800994a <mktime+0x28a>
 800999e:	07b2      	lsls	r2, r6, #30
 80099a0:	d11e      	bne.n	80099e0 <mktime+0x320>
 80099a2:	2164      	movs	r1, #100	; 0x64
 80099a4:	fb96 f2f1 	sdiv	r2, r6, r1
 80099a8:	fb01 6212 	mls	r2, r1, r2, r6
 80099ac:	b9da      	cbnz	r2, 80099e6 <mktime+0x326>
 80099ae:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80099b2:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 80099b6:	fb96 f1f2 	sdiv	r1, r6, r2
 80099ba:	fb02 6611 	mls	r6, r2, r1, r6
 80099be:	2e00      	cmp	r6, #0
 80099c0:	f240 126d 	movw	r2, #365	; 0x16d
 80099c4:	bf08      	it	eq
 80099c6:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80099ca:	4293      	cmp	r3, r2
 80099cc:	bfa8      	it	ge
 80099ce:	1a9b      	subge	r3, r3, r2
 80099d0:	e7bb      	b.n	800994a <mktime+0x28a>
 80099d2:	bf00      	nop
 80099d4:	0800d630 	.word	0x0800d630
 80099d8:	00015180 	.word	0x00015180
 80099dc:	20000e58 	.word	0x20000e58
 80099e0:	f240 126d 	movw	r2, #365	; 0x16d
 80099e4:	e7f1      	b.n	80099ca <mktime+0x30a>
 80099e6:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80099ea:	e7ee      	b.n	80099ca <mktime+0x30a>
 80099ec:	f04f 34ff 	mov.w	r4, #4294967295
 80099f0:	46a0      	mov	r8, r4
 80099f2:	e7c4      	b.n	800997e <mktime+0x2be>

080099f4 <_free_r>:
 80099f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80099f6:	2900      	cmp	r1, #0
 80099f8:	d044      	beq.n	8009a84 <_free_r+0x90>
 80099fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099fe:	9001      	str	r0, [sp, #4]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	f1a1 0404 	sub.w	r4, r1, #4
 8009a06:	bfb8      	it	lt
 8009a08:	18e4      	addlt	r4, r4, r3
 8009a0a:	f000 fcb1 	bl	800a370 <__malloc_lock>
 8009a0e:	4a1e      	ldr	r2, [pc, #120]	; (8009a88 <_free_r+0x94>)
 8009a10:	9801      	ldr	r0, [sp, #4]
 8009a12:	6813      	ldr	r3, [r2, #0]
 8009a14:	b933      	cbnz	r3, 8009a24 <_free_r+0x30>
 8009a16:	6063      	str	r3, [r4, #4]
 8009a18:	6014      	str	r4, [r2, #0]
 8009a1a:	b003      	add	sp, #12
 8009a1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009a20:	f000 bcac 	b.w	800a37c <__malloc_unlock>
 8009a24:	42a3      	cmp	r3, r4
 8009a26:	d908      	bls.n	8009a3a <_free_r+0x46>
 8009a28:	6825      	ldr	r5, [r4, #0]
 8009a2a:	1961      	adds	r1, r4, r5
 8009a2c:	428b      	cmp	r3, r1
 8009a2e:	bf01      	itttt	eq
 8009a30:	6819      	ldreq	r1, [r3, #0]
 8009a32:	685b      	ldreq	r3, [r3, #4]
 8009a34:	1949      	addeq	r1, r1, r5
 8009a36:	6021      	streq	r1, [r4, #0]
 8009a38:	e7ed      	b.n	8009a16 <_free_r+0x22>
 8009a3a:	461a      	mov	r2, r3
 8009a3c:	685b      	ldr	r3, [r3, #4]
 8009a3e:	b10b      	cbz	r3, 8009a44 <_free_r+0x50>
 8009a40:	42a3      	cmp	r3, r4
 8009a42:	d9fa      	bls.n	8009a3a <_free_r+0x46>
 8009a44:	6811      	ldr	r1, [r2, #0]
 8009a46:	1855      	adds	r5, r2, r1
 8009a48:	42a5      	cmp	r5, r4
 8009a4a:	d10b      	bne.n	8009a64 <_free_r+0x70>
 8009a4c:	6824      	ldr	r4, [r4, #0]
 8009a4e:	4421      	add	r1, r4
 8009a50:	1854      	adds	r4, r2, r1
 8009a52:	42a3      	cmp	r3, r4
 8009a54:	6011      	str	r1, [r2, #0]
 8009a56:	d1e0      	bne.n	8009a1a <_free_r+0x26>
 8009a58:	681c      	ldr	r4, [r3, #0]
 8009a5a:	685b      	ldr	r3, [r3, #4]
 8009a5c:	6053      	str	r3, [r2, #4]
 8009a5e:	4421      	add	r1, r4
 8009a60:	6011      	str	r1, [r2, #0]
 8009a62:	e7da      	b.n	8009a1a <_free_r+0x26>
 8009a64:	d902      	bls.n	8009a6c <_free_r+0x78>
 8009a66:	230c      	movs	r3, #12
 8009a68:	6003      	str	r3, [r0, #0]
 8009a6a:	e7d6      	b.n	8009a1a <_free_r+0x26>
 8009a6c:	6825      	ldr	r5, [r4, #0]
 8009a6e:	1961      	adds	r1, r4, r5
 8009a70:	428b      	cmp	r3, r1
 8009a72:	bf04      	itt	eq
 8009a74:	6819      	ldreq	r1, [r3, #0]
 8009a76:	685b      	ldreq	r3, [r3, #4]
 8009a78:	6063      	str	r3, [r4, #4]
 8009a7a:	bf04      	itt	eq
 8009a7c:	1949      	addeq	r1, r1, r5
 8009a7e:	6021      	streq	r1, [r4, #0]
 8009a80:	6054      	str	r4, [r2, #4]
 8009a82:	e7ca      	b.n	8009a1a <_free_r+0x26>
 8009a84:	b003      	add	sp, #12
 8009a86:	bd30      	pop	{r4, r5, pc}
 8009a88:	20000e34 	.word	0x20000e34

08009a8c <sbrk_aligned>:
 8009a8c:	b570      	push	{r4, r5, r6, lr}
 8009a8e:	4e0e      	ldr	r6, [pc, #56]	; (8009ac8 <sbrk_aligned+0x3c>)
 8009a90:	460c      	mov	r4, r1
 8009a92:	6831      	ldr	r1, [r6, #0]
 8009a94:	4605      	mov	r5, r0
 8009a96:	b911      	cbnz	r1, 8009a9e <sbrk_aligned+0x12>
 8009a98:	f000 f88c 	bl	8009bb4 <_sbrk_r>
 8009a9c:	6030      	str	r0, [r6, #0]
 8009a9e:	4621      	mov	r1, r4
 8009aa0:	4628      	mov	r0, r5
 8009aa2:	f000 f887 	bl	8009bb4 <_sbrk_r>
 8009aa6:	1c43      	adds	r3, r0, #1
 8009aa8:	d00a      	beq.n	8009ac0 <sbrk_aligned+0x34>
 8009aaa:	1cc4      	adds	r4, r0, #3
 8009aac:	f024 0403 	bic.w	r4, r4, #3
 8009ab0:	42a0      	cmp	r0, r4
 8009ab2:	d007      	beq.n	8009ac4 <sbrk_aligned+0x38>
 8009ab4:	1a21      	subs	r1, r4, r0
 8009ab6:	4628      	mov	r0, r5
 8009ab8:	f000 f87c 	bl	8009bb4 <_sbrk_r>
 8009abc:	3001      	adds	r0, #1
 8009abe:	d101      	bne.n	8009ac4 <sbrk_aligned+0x38>
 8009ac0:	f04f 34ff 	mov.w	r4, #4294967295
 8009ac4:	4620      	mov	r0, r4
 8009ac6:	bd70      	pop	{r4, r5, r6, pc}
 8009ac8:	20000e38 	.word	0x20000e38

08009acc <_malloc_r>:
 8009acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ad0:	1ccd      	adds	r5, r1, #3
 8009ad2:	f025 0503 	bic.w	r5, r5, #3
 8009ad6:	3508      	adds	r5, #8
 8009ad8:	2d0c      	cmp	r5, #12
 8009ada:	bf38      	it	cc
 8009adc:	250c      	movcc	r5, #12
 8009ade:	2d00      	cmp	r5, #0
 8009ae0:	4607      	mov	r7, r0
 8009ae2:	db01      	blt.n	8009ae8 <_malloc_r+0x1c>
 8009ae4:	42a9      	cmp	r1, r5
 8009ae6:	d905      	bls.n	8009af4 <_malloc_r+0x28>
 8009ae8:	230c      	movs	r3, #12
 8009aea:	603b      	str	r3, [r7, #0]
 8009aec:	2600      	movs	r6, #0
 8009aee:	4630      	mov	r0, r6
 8009af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009af4:	4e2e      	ldr	r6, [pc, #184]	; (8009bb0 <_malloc_r+0xe4>)
 8009af6:	f000 fc3b 	bl	800a370 <__malloc_lock>
 8009afa:	6833      	ldr	r3, [r6, #0]
 8009afc:	461c      	mov	r4, r3
 8009afe:	bb34      	cbnz	r4, 8009b4e <_malloc_r+0x82>
 8009b00:	4629      	mov	r1, r5
 8009b02:	4638      	mov	r0, r7
 8009b04:	f7ff ffc2 	bl	8009a8c <sbrk_aligned>
 8009b08:	1c43      	adds	r3, r0, #1
 8009b0a:	4604      	mov	r4, r0
 8009b0c:	d14d      	bne.n	8009baa <_malloc_r+0xde>
 8009b0e:	6834      	ldr	r4, [r6, #0]
 8009b10:	4626      	mov	r6, r4
 8009b12:	2e00      	cmp	r6, #0
 8009b14:	d140      	bne.n	8009b98 <_malloc_r+0xcc>
 8009b16:	6823      	ldr	r3, [r4, #0]
 8009b18:	4631      	mov	r1, r6
 8009b1a:	4638      	mov	r0, r7
 8009b1c:	eb04 0803 	add.w	r8, r4, r3
 8009b20:	f000 f848 	bl	8009bb4 <_sbrk_r>
 8009b24:	4580      	cmp	r8, r0
 8009b26:	d13a      	bne.n	8009b9e <_malloc_r+0xd2>
 8009b28:	6821      	ldr	r1, [r4, #0]
 8009b2a:	3503      	adds	r5, #3
 8009b2c:	1a6d      	subs	r5, r5, r1
 8009b2e:	f025 0503 	bic.w	r5, r5, #3
 8009b32:	3508      	adds	r5, #8
 8009b34:	2d0c      	cmp	r5, #12
 8009b36:	bf38      	it	cc
 8009b38:	250c      	movcc	r5, #12
 8009b3a:	4629      	mov	r1, r5
 8009b3c:	4638      	mov	r0, r7
 8009b3e:	f7ff ffa5 	bl	8009a8c <sbrk_aligned>
 8009b42:	3001      	adds	r0, #1
 8009b44:	d02b      	beq.n	8009b9e <_malloc_r+0xd2>
 8009b46:	6823      	ldr	r3, [r4, #0]
 8009b48:	442b      	add	r3, r5
 8009b4a:	6023      	str	r3, [r4, #0]
 8009b4c:	e00e      	b.n	8009b6c <_malloc_r+0xa0>
 8009b4e:	6822      	ldr	r2, [r4, #0]
 8009b50:	1b52      	subs	r2, r2, r5
 8009b52:	d41e      	bmi.n	8009b92 <_malloc_r+0xc6>
 8009b54:	2a0b      	cmp	r2, #11
 8009b56:	d916      	bls.n	8009b86 <_malloc_r+0xba>
 8009b58:	1961      	adds	r1, r4, r5
 8009b5a:	42a3      	cmp	r3, r4
 8009b5c:	6025      	str	r5, [r4, #0]
 8009b5e:	bf18      	it	ne
 8009b60:	6059      	strne	r1, [r3, #4]
 8009b62:	6863      	ldr	r3, [r4, #4]
 8009b64:	bf08      	it	eq
 8009b66:	6031      	streq	r1, [r6, #0]
 8009b68:	5162      	str	r2, [r4, r5]
 8009b6a:	604b      	str	r3, [r1, #4]
 8009b6c:	4638      	mov	r0, r7
 8009b6e:	f104 060b 	add.w	r6, r4, #11
 8009b72:	f000 fc03 	bl	800a37c <__malloc_unlock>
 8009b76:	f026 0607 	bic.w	r6, r6, #7
 8009b7a:	1d23      	adds	r3, r4, #4
 8009b7c:	1af2      	subs	r2, r6, r3
 8009b7e:	d0b6      	beq.n	8009aee <_malloc_r+0x22>
 8009b80:	1b9b      	subs	r3, r3, r6
 8009b82:	50a3      	str	r3, [r4, r2]
 8009b84:	e7b3      	b.n	8009aee <_malloc_r+0x22>
 8009b86:	6862      	ldr	r2, [r4, #4]
 8009b88:	42a3      	cmp	r3, r4
 8009b8a:	bf0c      	ite	eq
 8009b8c:	6032      	streq	r2, [r6, #0]
 8009b8e:	605a      	strne	r2, [r3, #4]
 8009b90:	e7ec      	b.n	8009b6c <_malloc_r+0xa0>
 8009b92:	4623      	mov	r3, r4
 8009b94:	6864      	ldr	r4, [r4, #4]
 8009b96:	e7b2      	b.n	8009afe <_malloc_r+0x32>
 8009b98:	4634      	mov	r4, r6
 8009b9a:	6876      	ldr	r6, [r6, #4]
 8009b9c:	e7b9      	b.n	8009b12 <_malloc_r+0x46>
 8009b9e:	230c      	movs	r3, #12
 8009ba0:	603b      	str	r3, [r7, #0]
 8009ba2:	4638      	mov	r0, r7
 8009ba4:	f000 fbea 	bl	800a37c <__malloc_unlock>
 8009ba8:	e7a1      	b.n	8009aee <_malloc_r+0x22>
 8009baa:	6025      	str	r5, [r4, #0]
 8009bac:	e7de      	b.n	8009b6c <_malloc_r+0xa0>
 8009bae:	bf00      	nop
 8009bb0:	20000e34 	.word	0x20000e34

08009bb4 <_sbrk_r>:
 8009bb4:	b538      	push	{r3, r4, r5, lr}
 8009bb6:	4d06      	ldr	r5, [pc, #24]	; (8009bd0 <_sbrk_r+0x1c>)
 8009bb8:	2300      	movs	r3, #0
 8009bba:	4604      	mov	r4, r0
 8009bbc:	4608      	mov	r0, r1
 8009bbe:	602b      	str	r3, [r5, #0]
 8009bc0:	f7fa f8d6 	bl	8003d70 <_sbrk>
 8009bc4:	1c43      	adds	r3, r0, #1
 8009bc6:	d102      	bne.n	8009bce <_sbrk_r+0x1a>
 8009bc8:	682b      	ldr	r3, [r5, #0]
 8009bca:	b103      	cbz	r3, 8009bce <_sbrk_r+0x1a>
 8009bcc:	6023      	str	r3, [r4, #0]
 8009bce:	bd38      	pop	{r3, r4, r5, pc}
 8009bd0:	20000e68 	.word	0x20000e68

08009bd4 <sniprintf>:
 8009bd4:	b40c      	push	{r2, r3}
 8009bd6:	b530      	push	{r4, r5, lr}
 8009bd8:	4b17      	ldr	r3, [pc, #92]	; (8009c38 <sniprintf+0x64>)
 8009bda:	1e0c      	subs	r4, r1, #0
 8009bdc:	681d      	ldr	r5, [r3, #0]
 8009bde:	b09d      	sub	sp, #116	; 0x74
 8009be0:	da08      	bge.n	8009bf4 <sniprintf+0x20>
 8009be2:	238b      	movs	r3, #139	; 0x8b
 8009be4:	602b      	str	r3, [r5, #0]
 8009be6:	f04f 30ff 	mov.w	r0, #4294967295
 8009bea:	b01d      	add	sp, #116	; 0x74
 8009bec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009bf0:	b002      	add	sp, #8
 8009bf2:	4770      	bx	lr
 8009bf4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009bf8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009bfc:	bf14      	ite	ne
 8009bfe:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009c02:	4623      	moveq	r3, r4
 8009c04:	9304      	str	r3, [sp, #16]
 8009c06:	9307      	str	r3, [sp, #28]
 8009c08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009c0c:	9002      	str	r0, [sp, #8]
 8009c0e:	9006      	str	r0, [sp, #24]
 8009c10:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009c14:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009c16:	ab21      	add	r3, sp, #132	; 0x84
 8009c18:	a902      	add	r1, sp, #8
 8009c1a:	4628      	mov	r0, r5
 8009c1c:	9301      	str	r3, [sp, #4]
 8009c1e:	f000 fc0f 	bl	800a440 <_svfiprintf_r>
 8009c22:	1c43      	adds	r3, r0, #1
 8009c24:	bfbc      	itt	lt
 8009c26:	238b      	movlt	r3, #139	; 0x8b
 8009c28:	602b      	strlt	r3, [r5, #0]
 8009c2a:	2c00      	cmp	r4, #0
 8009c2c:	d0dd      	beq.n	8009bea <sniprintf+0x16>
 8009c2e:	9b02      	ldr	r3, [sp, #8]
 8009c30:	2200      	movs	r2, #0
 8009c32:	701a      	strb	r2, [r3, #0]
 8009c34:	e7d9      	b.n	8009bea <sniprintf+0x16>
 8009c36:	bf00      	nop
 8009c38:	200000c8 	.word	0x200000c8

08009c3c <siprintf>:
 8009c3c:	b40e      	push	{r1, r2, r3}
 8009c3e:	b500      	push	{lr}
 8009c40:	b09c      	sub	sp, #112	; 0x70
 8009c42:	ab1d      	add	r3, sp, #116	; 0x74
 8009c44:	9002      	str	r0, [sp, #8]
 8009c46:	9006      	str	r0, [sp, #24]
 8009c48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009c4c:	4809      	ldr	r0, [pc, #36]	; (8009c74 <siprintf+0x38>)
 8009c4e:	9107      	str	r1, [sp, #28]
 8009c50:	9104      	str	r1, [sp, #16]
 8009c52:	4909      	ldr	r1, [pc, #36]	; (8009c78 <siprintf+0x3c>)
 8009c54:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c58:	9105      	str	r1, [sp, #20]
 8009c5a:	6800      	ldr	r0, [r0, #0]
 8009c5c:	9301      	str	r3, [sp, #4]
 8009c5e:	a902      	add	r1, sp, #8
 8009c60:	f000 fbee 	bl	800a440 <_svfiprintf_r>
 8009c64:	9b02      	ldr	r3, [sp, #8]
 8009c66:	2200      	movs	r2, #0
 8009c68:	701a      	strb	r2, [r3, #0]
 8009c6a:	b01c      	add	sp, #112	; 0x70
 8009c6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c70:	b003      	add	sp, #12
 8009c72:	4770      	bx	lr
 8009c74:	200000c8 	.word	0x200000c8
 8009c78:	ffff0208 	.word	0xffff0208

08009c7c <__tzcalc_limits>:
 8009c7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c80:	4605      	mov	r5, r0
 8009c82:	f000 fabf 	bl	800a204 <__gettzinfo>
 8009c86:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8009c8a:	429d      	cmp	r5, r3
 8009c8c:	f340 8099 	ble.w	8009dc2 <__tzcalc_limits+0x146>
 8009c90:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 8009c94:	18ac      	adds	r4, r5, r2
 8009c96:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 8009c9a:	f240 126d 	movw	r2, #365	; 0x16d
 8009c9e:	10a4      	asrs	r4, r4, #2
 8009ca0:	fb02 4403 	mla	r4, r2, r3, r4
 8009ca4:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8009ca8:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 8009cac:	fb93 f3f2 	sdiv	r3, r3, r2
 8009cb0:	441c      	add	r4, r3
 8009cb2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8009cb6:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 8009cba:	fb95 fcf3 	sdiv	ip, r5, r3
 8009cbe:	fb03 5c1c 	mls	ip, r3, ip, r5
 8009cc2:	186a      	adds	r2, r5, r1
 8009cc4:	fabc f68c 	clz	r6, ip
 8009cc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8009ccc:	f005 0303 	and.w	r3, r5, #3
 8009cd0:	4414      	add	r4, r2
 8009cd2:	2264      	movs	r2, #100	; 0x64
 8009cd4:	6045      	str	r5, [r0, #4]
 8009cd6:	fb95 f7f2 	sdiv	r7, r5, r2
 8009cda:	0976      	lsrs	r6, r6, #5
 8009cdc:	fb02 5717 	mls	r7, r2, r7, r5
 8009ce0:	4601      	mov	r1, r0
 8009ce2:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 8009ce6:	9300      	str	r3, [sp, #0]
 8009ce8:	f04f 0a07 	mov.w	sl, #7
 8009cec:	7a0d      	ldrb	r5, [r1, #8]
 8009cee:	694b      	ldr	r3, [r1, #20]
 8009cf0:	2d4a      	cmp	r5, #74	; 0x4a
 8009cf2:	d12d      	bne.n	8009d50 <__tzcalc_limits+0xd4>
 8009cf4:	9a00      	ldr	r2, [sp, #0]
 8009cf6:	eb04 0e03 	add.w	lr, r4, r3
 8009cfa:	b902      	cbnz	r2, 8009cfe <__tzcalc_limits+0x82>
 8009cfc:	b917      	cbnz	r7, 8009d04 <__tzcalc_limits+0x88>
 8009cfe:	f1bc 0f00 	cmp.w	ip, #0
 8009d02:	d123      	bne.n	8009d4c <__tzcalc_limits+0xd0>
 8009d04:	2b3b      	cmp	r3, #59	; 0x3b
 8009d06:	bfd4      	ite	le
 8009d08:	2300      	movle	r3, #0
 8009d0a:	2301      	movgt	r3, #1
 8009d0c:	4473      	add	r3, lr
 8009d0e:	3b01      	subs	r3, #1
 8009d10:	698d      	ldr	r5, [r1, #24]
 8009d12:	4a2d      	ldr	r2, [pc, #180]	; (8009dc8 <__tzcalc_limits+0x14c>)
 8009d14:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 8009d18:	fbc3 5e02 	smlal	r5, lr, r3, r2
 8009d1c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8009d1e:	18ed      	adds	r5, r5, r3
 8009d20:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 8009d24:	e9c1 5308 	strd	r5, r3, [r1, #32]
 8009d28:	3128      	adds	r1, #40	; 0x28
 8009d2a:	458b      	cmp	fp, r1
 8009d2c:	d1de      	bne.n	8009cec <__tzcalc_limits+0x70>
 8009d2e:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 8009d32:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 8009d36:	428c      	cmp	r4, r1
 8009d38:	eb72 0303 	sbcs.w	r3, r2, r3
 8009d3c:	bfb4      	ite	lt
 8009d3e:	2301      	movlt	r3, #1
 8009d40:	2300      	movge	r3, #0
 8009d42:	6003      	str	r3, [r0, #0]
 8009d44:	2001      	movs	r0, #1
 8009d46:	b003      	add	sp, #12
 8009d48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	e7dd      	b.n	8009d0c <__tzcalc_limits+0x90>
 8009d50:	2d44      	cmp	r5, #68	; 0x44
 8009d52:	d101      	bne.n	8009d58 <__tzcalc_limits+0xdc>
 8009d54:	4423      	add	r3, r4
 8009d56:	e7db      	b.n	8009d10 <__tzcalc_limits+0x94>
 8009d58:	9a00      	ldr	r2, [sp, #0]
 8009d5a:	bb62      	cbnz	r2, 8009db6 <__tzcalc_limits+0x13a>
 8009d5c:	2f00      	cmp	r7, #0
 8009d5e:	bf0c      	ite	eq
 8009d60:	4635      	moveq	r5, r6
 8009d62:	2501      	movne	r5, #1
 8009d64:	68ca      	ldr	r2, [r1, #12]
 8009d66:	9201      	str	r2, [sp, #4]
 8009d68:	4a18      	ldr	r2, [pc, #96]	; (8009dcc <__tzcalc_limits+0x150>)
 8009d6a:	f04f 0930 	mov.w	r9, #48	; 0x30
 8009d6e:	fb09 2505 	mla	r5, r9, r5, r2
 8009d72:	46a6      	mov	lr, r4
 8009d74:	f04f 0800 	mov.w	r8, #0
 8009d78:	3d04      	subs	r5, #4
 8009d7a:	9a01      	ldr	r2, [sp, #4]
 8009d7c:	f108 0801 	add.w	r8, r8, #1
 8009d80:	4542      	cmp	r2, r8
 8009d82:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 8009d86:	dc18      	bgt.n	8009dba <__tzcalc_limits+0x13e>
 8009d88:	f10e 0504 	add.w	r5, lr, #4
 8009d8c:	fb95 f8fa 	sdiv	r8, r5, sl
 8009d90:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 8009d94:	eba5 0808 	sub.w	r8, r5, r8
 8009d98:	ebb3 0808 	subs.w	r8, r3, r8
 8009d9c:	690b      	ldr	r3, [r1, #16]
 8009d9e:	f103 33ff 	add.w	r3, r3, #4294967295
 8009da2:	bf48      	it	mi
 8009da4:	f108 0807 	addmi.w	r8, r8, #7
 8009da8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8009dac:	4443      	add	r3, r8
 8009dae:	454b      	cmp	r3, r9
 8009db0:	da05      	bge.n	8009dbe <__tzcalc_limits+0x142>
 8009db2:	4473      	add	r3, lr
 8009db4:	e7ac      	b.n	8009d10 <__tzcalc_limits+0x94>
 8009db6:	4635      	mov	r5, r6
 8009db8:	e7d4      	b.n	8009d64 <__tzcalc_limits+0xe8>
 8009dba:	44ce      	add	lr, r9
 8009dbc:	e7dd      	b.n	8009d7a <__tzcalc_limits+0xfe>
 8009dbe:	3b07      	subs	r3, #7
 8009dc0:	e7f5      	b.n	8009dae <__tzcalc_limits+0x132>
 8009dc2:	2000      	movs	r0, #0
 8009dc4:	e7bf      	b.n	8009d46 <__tzcalc_limits+0xca>
 8009dc6:	bf00      	nop
 8009dc8:	00015180 	.word	0x00015180
 8009dcc:	0800d660 	.word	0x0800d660

08009dd0 <__tz_lock>:
 8009dd0:	4801      	ldr	r0, [pc, #4]	; (8009dd8 <__tz_lock+0x8>)
 8009dd2:	f000 bac8 	b.w	800a366 <__retarget_lock_acquire>
 8009dd6:	bf00      	nop
 8009dd8:	20000e64 	.word	0x20000e64

08009ddc <__tz_unlock>:
 8009ddc:	4801      	ldr	r0, [pc, #4]	; (8009de4 <__tz_unlock+0x8>)
 8009dde:	f000 bac4 	b.w	800a36a <__retarget_lock_release>
 8009de2:	bf00      	nop
 8009de4:	20000e64 	.word	0x20000e64

08009de8 <_tzset_unlocked>:
 8009de8:	4b01      	ldr	r3, [pc, #4]	; (8009df0 <_tzset_unlocked+0x8>)
 8009dea:	6818      	ldr	r0, [r3, #0]
 8009dec:	f000 b802 	b.w	8009df4 <_tzset_unlocked_r>
 8009df0:	200000c8 	.word	0x200000c8

08009df4 <_tzset_unlocked_r>:
 8009df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009df8:	b08d      	sub	sp, #52	; 0x34
 8009dfa:	4607      	mov	r7, r0
 8009dfc:	f000 fa02 	bl	800a204 <__gettzinfo>
 8009e00:	49b0      	ldr	r1, [pc, #704]	; (800a0c4 <_tzset_unlocked_r+0x2d0>)
 8009e02:	4eb1      	ldr	r6, [pc, #708]	; (800a0c8 <_tzset_unlocked_r+0x2d4>)
 8009e04:	4605      	mov	r5, r0
 8009e06:	4638      	mov	r0, r7
 8009e08:	f000 f9f4 	bl	800a1f4 <_getenv_r>
 8009e0c:	4604      	mov	r4, r0
 8009e0e:	b970      	cbnz	r0, 8009e2e <_tzset_unlocked_r+0x3a>
 8009e10:	4bae      	ldr	r3, [pc, #696]	; (800a0cc <_tzset_unlocked_r+0x2d8>)
 8009e12:	4aaf      	ldr	r2, [pc, #700]	; (800a0d0 <_tzset_unlocked_r+0x2dc>)
 8009e14:	6018      	str	r0, [r3, #0]
 8009e16:	4baf      	ldr	r3, [pc, #700]	; (800a0d4 <_tzset_unlocked_r+0x2e0>)
 8009e18:	6018      	str	r0, [r3, #0]
 8009e1a:	4baf      	ldr	r3, [pc, #700]	; (800a0d8 <_tzset_unlocked_r+0x2e4>)
 8009e1c:	6830      	ldr	r0, [r6, #0]
 8009e1e:	e9c3 2200 	strd	r2, r2, [r3]
 8009e22:	f7ff fb65 	bl	80094f0 <free>
 8009e26:	6034      	str	r4, [r6, #0]
 8009e28:	b00d      	add	sp, #52	; 0x34
 8009e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e2e:	6831      	ldr	r1, [r6, #0]
 8009e30:	2900      	cmp	r1, #0
 8009e32:	d162      	bne.n	8009efa <_tzset_unlocked_r+0x106>
 8009e34:	6830      	ldr	r0, [r6, #0]
 8009e36:	f7ff fb5b 	bl	80094f0 <free>
 8009e3a:	4620      	mov	r0, r4
 8009e3c:	f7f6 f9f0 	bl	8000220 <strlen>
 8009e40:	1c41      	adds	r1, r0, #1
 8009e42:	4638      	mov	r0, r7
 8009e44:	f7ff fe42 	bl	8009acc <_malloc_r>
 8009e48:	6030      	str	r0, [r6, #0]
 8009e4a:	2800      	cmp	r0, #0
 8009e4c:	d15a      	bne.n	8009f04 <_tzset_unlocked_r+0x110>
 8009e4e:	7823      	ldrb	r3, [r4, #0]
 8009e50:	4aa2      	ldr	r2, [pc, #648]	; (800a0dc <_tzset_unlocked_r+0x2e8>)
 8009e52:	49a3      	ldr	r1, [pc, #652]	; (800a0e0 <_tzset_unlocked_r+0x2ec>)
 8009e54:	2b3a      	cmp	r3, #58	; 0x3a
 8009e56:	bf08      	it	eq
 8009e58:	3401      	addeq	r4, #1
 8009e5a:	ae0a      	add	r6, sp, #40	; 0x28
 8009e5c:	4633      	mov	r3, r6
 8009e5e:	4620      	mov	r0, r4
 8009e60:	f000 fedc 	bl	800ac1c <siscanf>
 8009e64:	2800      	cmp	r0, #0
 8009e66:	dddf      	ble.n	8009e28 <_tzset_unlocked_r+0x34>
 8009e68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e6a:	18e7      	adds	r7, r4, r3
 8009e6c:	5ce3      	ldrb	r3, [r4, r3]
 8009e6e:	2b2d      	cmp	r3, #45	; 0x2d
 8009e70:	d14c      	bne.n	8009f0c <_tzset_unlocked_r+0x118>
 8009e72:	3701      	adds	r7, #1
 8009e74:	f04f 38ff 	mov.w	r8, #4294967295
 8009e78:	f10d 0a20 	add.w	sl, sp, #32
 8009e7c:	f10d 0b1e 	add.w	fp, sp, #30
 8009e80:	2400      	movs	r4, #0
 8009e82:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8009e86:	4997      	ldr	r1, [pc, #604]	; (800a0e4 <_tzset_unlocked_r+0x2f0>)
 8009e88:	9603      	str	r6, [sp, #12]
 8009e8a:	f8cd b000 	str.w	fp, [sp]
 8009e8e:	4633      	mov	r3, r6
 8009e90:	aa07      	add	r2, sp, #28
 8009e92:	4638      	mov	r0, r7
 8009e94:	f8ad 401e 	strh.w	r4, [sp, #30]
 8009e98:	f8ad 4020 	strh.w	r4, [sp, #32]
 8009e9c:	f000 febe 	bl	800ac1c <siscanf>
 8009ea0:	42a0      	cmp	r0, r4
 8009ea2:	ddc1      	ble.n	8009e28 <_tzset_unlocked_r+0x34>
 8009ea4:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8009ea8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8009eac:	f8df 9240 	ldr.w	r9, [pc, #576]	; 800a0f0 <_tzset_unlocked_r+0x2fc>
 8009eb0:	213c      	movs	r1, #60	; 0x3c
 8009eb2:	fb01 3302 	mla	r3, r1, r2, r3
 8009eb6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8009eba:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8009ebe:	fb01 3302 	mla	r3, r1, r2, r3
 8009ec2:	fb08 f303 	mul.w	r3, r8, r3
 8009ec6:	f8df 8210 	ldr.w	r8, [pc, #528]	; 800a0d8 <_tzset_unlocked_r+0x2e4>
 8009eca:	62ab      	str	r3, [r5, #40]	; 0x28
 8009ecc:	4b83      	ldr	r3, [pc, #524]	; (800a0dc <_tzset_unlocked_r+0x2e8>)
 8009ece:	f8c8 3000 	str.w	r3, [r8]
 8009ed2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ed4:	4982      	ldr	r1, [pc, #520]	; (800a0e0 <_tzset_unlocked_r+0x2ec>)
 8009ed6:	441f      	add	r7, r3
 8009ed8:	464a      	mov	r2, r9
 8009eda:	4633      	mov	r3, r6
 8009edc:	4638      	mov	r0, r7
 8009ede:	f000 fe9d 	bl	800ac1c <siscanf>
 8009ee2:	42a0      	cmp	r0, r4
 8009ee4:	dc18      	bgt.n	8009f18 <_tzset_unlocked_r+0x124>
 8009ee6:	f8d8 3000 	ldr.w	r3, [r8]
 8009eea:	f8c8 3004 	str.w	r3, [r8, #4]
 8009eee:	4b77      	ldr	r3, [pc, #476]	; (800a0cc <_tzset_unlocked_r+0x2d8>)
 8009ef0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8009ef2:	601a      	str	r2, [r3, #0]
 8009ef4:	4b77      	ldr	r3, [pc, #476]	; (800a0d4 <_tzset_unlocked_r+0x2e0>)
 8009ef6:	601c      	str	r4, [r3, #0]
 8009ef8:	e796      	b.n	8009e28 <_tzset_unlocked_r+0x34>
 8009efa:	f7f6 f999 	bl	8000230 <strcmp>
 8009efe:	2800      	cmp	r0, #0
 8009f00:	d198      	bne.n	8009e34 <_tzset_unlocked_r+0x40>
 8009f02:	e791      	b.n	8009e28 <_tzset_unlocked_r+0x34>
 8009f04:	4621      	mov	r1, r4
 8009f06:	f000 fefa 	bl	800acfe <strcpy>
 8009f0a:	e7a0      	b.n	8009e4e <_tzset_unlocked_r+0x5a>
 8009f0c:	2b2b      	cmp	r3, #43	; 0x2b
 8009f0e:	bf08      	it	eq
 8009f10:	3701      	addeq	r7, #1
 8009f12:	f04f 0801 	mov.w	r8, #1
 8009f16:	e7af      	b.n	8009e78 <_tzset_unlocked_r+0x84>
 8009f18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f1a:	f8c8 9004 	str.w	r9, [r8, #4]
 8009f1e:	18fc      	adds	r4, r7, r3
 8009f20:	5cfb      	ldrb	r3, [r7, r3]
 8009f22:	2b2d      	cmp	r3, #45	; 0x2d
 8009f24:	f040 808b 	bne.w	800a03e <_tzset_unlocked_r+0x24a>
 8009f28:	3401      	adds	r4, #1
 8009f2a:	f04f 37ff 	mov.w	r7, #4294967295
 8009f2e:	2300      	movs	r3, #0
 8009f30:	f8ad 301c 	strh.w	r3, [sp, #28]
 8009f34:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009f38:	f8ad 3020 	strh.w	r3, [sp, #32]
 8009f3c:	930a      	str	r3, [sp, #40]	; 0x28
 8009f3e:	e9cd a602 	strd	sl, r6, [sp, #8]
 8009f42:	e9cd b600 	strd	fp, r6, [sp]
 8009f46:	4967      	ldr	r1, [pc, #412]	; (800a0e4 <_tzset_unlocked_r+0x2f0>)
 8009f48:	4633      	mov	r3, r6
 8009f4a:	aa07      	add	r2, sp, #28
 8009f4c:	4620      	mov	r0, r4
 8009f4e:	f000 fe65 	bl	800ac1c <siscanf>
 8009f52:	2800      	cmp	r0, #0
 8009f54:	dc78      	bgt.n	800a048 <_tzset_unlocked_r+0x254>
 8009f56:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8009f58:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8009f5c:	652b      	str	r3, [r5, #80]	; 0x50
 8009f5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f60:	462f      	mov	r7, r5
 8009f62:	441c      	add	r4, r3
 8009f64:	f04f 0900 	mov.w	r9, #0
 8009f68:	7823      	ldrb	r3, [r4, #0]
 8009f6a:	2b2c      	cmp	r3, #44	; 0x2c
 8009f6c:	bf08      	it	eq
 8009f6e:	3401      	addeq	r4, #1
 8009f70:	f894 8000 	ldrb.w	r8, [r4]
 8009f74:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8009f78:	d178      	bne.n	800a06c <_tzset_unlocked_r+0x278>
 8009f7a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8009f7e:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8009f82:	ab09      	add	r3, sp, #36	; 0x24
 8009f84:	9300      	str	r3, [sp, #0]
 8009f86:	4958      	ldr	r1, [pc, #352]	; (800a0e8 <_tzset_unlocked_r+0x2f4>)
 8009f88:	9603      	str	r6, [sp, #12]
 8009f8a:	4633      	mov	r3, r6
 8009f8c:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8009f90:	4620      	mov	r0, r4
 8009f92:	f000 fe43 	bl	800ac1c <siscanf>
 8009f96:	2803      	cmp	r0, #3
 8009f98:	f47f af46 	bne.w	8009e28 <_tzset_unlocked_r+0x34>
 8009f9c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8009fa0:	1e4b      	subs	r3, r1, #1
 8009fa2:	2b0b      	cmp	r3, #11
 8009fa4:	f63f af40 	bhi.w	8009e28 <_tzset_unlocked_r+0x34>
 8009fa8:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8009fac:	1e53      	subs	r3, r2, #1
 8009fae:	2b04      	cmp	r3, #4
 8009fb0:	f63f af3a 	bhi.w	8009e28 <_tzset_unlocked_r+0x34>
 8009fb4:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8009fb8:	2b06      	cmp	r3, #6
 8009fba:	f63f af35 	bhi.w	8009e28 <_tzset_unlocked_r+0x34>
 8009fbe:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8009fc2:	f887 8008 	strb.w	r8, [r7, #8]
 8009fc6:	617b      	str	r3, [r7, #20]
 8009fc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fca:	eb04 0803 	add.w	r8, r4, r3
 8009fce:	2302      	movs	r3, #2
 8009fd0:	f8ad 301c 	strh.w	r3, [sp, #28]
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	f8ad 301e 	strh.w	r3, [sp, #30]
 8009fda:	f8ad 3020 	strh.w	r3, [sp, #32]
 8009fde:	930a      	str	r3, [sp, #40]	; 0x28
 8009fe0:	f898 3000 	ldrb.w	r3, [r8]
 8009fe4:	2b2f      	cmp	r3, #47	; 0x2f
 8009fe6:	d109      	bne.n	8009ffc <_tzset_unlocked_r+0x208>
 8009fe8:	e9cd a602 	strd	sl, r6, [sp, #8]
 8009fec:	e9cd b600 	strd	fp, r6, [sp]
 8009ff0:	493e      	ldr	r1, [pc, #248]	; (800a0ec <_tzset_unlocked_r+0x2f8>)
 8009ff2:	4633      	mov	r3, r6
 8009ff4:	aa07      	add	r2, sp, #28
 8009ff6:	4640      	mov	r0, r8
 8009ff8:	f000 fe10 	bl	800ac1c <siscanf>
 8009ffc:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800a000:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800a004:	213c      	movs	r1, #60	; 0x3c
 800a006:	fb01 3302 	mla	r3, r1, r2, r3
 800a00a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800a00e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800a012:	fb01 3302 	mla	r3, r1, r2, r3
 800a016:	61bb      	str	r3, [r7, #24]
 800a018:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a01a:	3728      	adds	r7, #40	; 0x28
 800a01c:	4444      	add	r4, r8
 800a01e:	f1b9 0f00 	cmp.w	r9, #0
 800a022:	d020      	beq.n	800a066 <_tzset_unlocked_r+0x272>
 800a024:	6868      	ldr	r0, [r5, #4]
 800a026:	f7ff fe29 	bl	8009c7c <__tzcalc_limits>
 800a02a:	4b28      	ldr	r3, [pc, #160]	; (800a0cc <_tzset_unlocked_r+0x2d8>)
 800a02c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800a02e:	601a      	str	r2, [r3, #0]
 800a030:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800a032:	1a9b      	subs	r3, r3, r2
 800a034:	4a27      	ldr	r2, [pc, #156]	; (800a0d4 <_tzset_unlocked_r+0x2e0>)
 800a036:	bf18      	it	ne
 800a038:	2301      	movne	r3, #1
 800a03a:	6013      	str	r3, [r2, #0]
 800a03c:	e6f4      	b.n	8009e28 <_tzset_unlocked_r+0x34>
 800a03e:	2b2b      	cmp	r3, #43	; 0x2b
 800a040:	bf08      	it	eq
 800a042:	3401      	addeq	r4, #1
 800a044:	2701      	movs	r7, #1
 800a046:	e772      	b.n	8009f2e <_tzset_unlocked_r+0x13a>
 800a048:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800a04c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800a050:	213c      	movs	r1, #60	; 0x3c
 800a052:	fb01 3302 	mla	r3, r1, r2, r3
 800a056:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800a05a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800a05e:	fb01 3302 	mla	r3, r1, r2, r3
 800a062:	437b      	muls	r3, r7
 800a064:	e77a      	b.n	8009f5c <_tzset_unlocked_r+0x168>
 800a066:	f04f 0901 	mov.w	r9, #1
 800a06a:	e77d      	b.n	8009f68 <_tzset_unlocked_r+0x174>
 800a06c:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 800a070:	bf06      	itte	eq
 800a072:	3401      	addeq	r4, #1
 800a074:	4643      	moveq	r3, r8
 800a076:	2344      	movne	r3, #68	; 0x44
 800a078:	220a      	movs	r2, #10
 800a07a:	a90b      	add	r1, sp, #44	; 0x2c
 800a07c:	4620      	mov	r0, r4
 800a07e:	9305      	str	r3, [sp, #20]
 800a080:	f000 fece 	bl	800ae20 <strtoul>
 800a084:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800a088:	9b05      	ldr	r3, [sp, #20]
 800a08a:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 800a08e:	45a0      	cmp	r8, r4
 800a090:	d114      	bne.n	800a0bc <_tzset_unlocked_r+0x2c8>
 800a092:	234d      	movs	r3, #77	; 0x4d
 800a094:	f1b9 0f00 	cmp.w	r9, #0
 800a098:	d107      	bne.n	800a0aa <_tzset_unlocked_r+0x2b6>
 800a09a:	722b      	strb	r3, [r5, #8]
 800a09c:	2103      	movs	r1, #3
 800a09e:	2302      	movs	r3, #2
 800a0a0:	e9c5 1303 	strd	r1, r3, [r5, #12]
 800a0a4:	f8c5 9014 	str.w	r9, [r5, #20]
 800a0a8:	e791      	b.n	8009fce <_tzset_unlocked_r+0x1da>
 800a0aa:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 800a0ae:	220b      	movs	r2, #11
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	63eb      	str	r3, [r5, #60]	; 0x3c
 800a0ba:	e788      	b.n	8009fce <_tzset_unlocked_r+0x1da>
 800a0bc:	b280      	uxth	r0, r0
 800a0be:	723b      	strb	r3, [r7, #8]
 800a0c0:	6178      	str	r0, [r7, #20]
 800a0c2:	e784      	b.n	8009fce <_tzset_unlocked_r+0x1da>
 800a0c4:	0800d6c0 	.word	0x0800d6c0
 800a0c8:	20000e54 	.word	0x20000e54
 800a0cc:	20000e5c 	.word	0x20000e5c
 800a0d0:	0800d6c3 	.word	0x0800d6c3
 800a0d4:	20000e58 	.word	0x20000e58
 800a0d8:	2000012c 	.word	0x2000012c
 800a0dc:	20000e47 	.word	0x20000e47
 800a0e0:	0800d6c7 	.word	0x0800d6c7
 800a0e4:	0800d6ea 	.word	0x0800d6ea
 800a0e8:	0800d6d6 	.word	0x0800d6d6
 800a0ec:	0800d6e9 	.word	0x0800d6e9
 800a0f0:	20000e3c 	.word	0x20000e3c

0800a0f4 <__assert_func>:
 800a0f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a0f6:	4614      	mov	r4, r2
 800a0f8:	461a      	mov	r2, r3
 800a0fa:	4b09      	ldr	r3, [pc, #36]	; (800a120 <__assert_func+0x2c>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	4605      	mov	r5, r0
 800a100:	68d8      	ldr	r0, [r3, #12]
 800a102:	b14c      	cbz	r4, 800a118 <__assert_func+0x24>
 800a104:	4b07      	ldr	r3, [pc, #28]	; (800a124 <__assert_func+0x30>)
 800a106:	9100      	str	r1, [sp, #0]
 800a108:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a10c:	4906      	ldr	r1, [pc, #24]	; (800a128 <__assert_func+0x34>)
 800a10e:	462b      	mov	r3, r5
 800a110:	f000 f822 	bl	800a158 <fiprintf>
 800a114:	f000 ff60 	bl	800afd8 <abort>
 800a118:	4b04      	ldr	r3, [pc, #16]	; (800a12c <__assert_func+0x38>)
 800a11a:	461c      	mov	r4, r3
 800a11c:	e7f3      	b.n	800a106 <__assert_func+0x12>
 800a11e:	bf00      	nop
 800a120:	200000c8 	.word	0x200000c8
 800a124:	0800d6fc 	.word	0x0800d6fc
 800a128:	0800d709 	.word	0x0800d709
 800a12c:	0800d737 	.word	0x0800d737

0800a130 <div>:
 800a130:	2900      	cmp	r1, #0
 800a132:	b510      	push	{r4, lr}
 800a134:	fb91 f4f2 	sdiv	r4, r1, r2
 800a138:	fb02 1314 	mls	r3, r2, r4, r1
 800a13c:	db06      	blt.n	800a14c <div+0x1c>
 800a13e:	2b00      	cmp	r3, #0
 800a140:	da01      	bge.n	800a146 <div+0x16>
 800a142:	3401      	adds	r4, #1
 800a144:	1a9b      	subs	r3, r3, r2
 800a146:	e9c0 4300 	strd	r4, r3, [r0]
 800a14a:	bd10      	pop	{r4, pc}
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	bfc4      	itt	gt
 800a150:	f104 34ff 	addgt.w	r4, r4, #4294967295
 800a154:	189b      	addgt	r3, r3, r2
 800a156:	e7f6      	b.n	800a146 <div+0x16>

0800a158 <fiprintf>:
 800a158:	b40e      	push	{r1, r2, r3}
 800a15a:	b503      	push	{r0, r1, lr}
 800a15c:	4601      	mov	r1, r0
 800a15e:	ab03      	add	r3, sp, #12
 800a160:	4805      	ldr	r0, [pc, #20]	; (800a178 <fiprintf+0x20>)
 800a162:	f853 2b04 	ldr.w	r2, [r3], #4
 800a166:	6800      	ldr	r0, [r0, #0]
 800a168:	9301      	str	r3, [sp, #4]
 800a16a:	f000 fa93 	bl	800a694 <_vfiprintf_r>
 800a16e:	b002      	add	sp, #8
 800a170:	f85d eb04 	ldr.w	lr, [sp], #4
 800a174:	b003      	add	sp, #12
 800a176:	4770      	bx	lr
 800a178:	200000c8 	.word	0x200000c8

0800a17c <_findenv_r>:
 800a17c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a180:	f8df a06c 	ldr.w	sl, [pc, #108]	; 800a1f0 <_findenv_r+0x74>
 800a184:	4607      	mov	r7, r0
 800a186:	4689      	mov	r9, r1
 800a188:	4616      	mov	r6, r2
 800a18a:	f000 ff3d 	bl	800b008 <__env_lock>
 800a18e:	f8da 4000 	ldr.w	r4, [sl]
 800a192:	b134      	cbz	r4, 800a1a2 <_findenv_r+0x26>
 800a194:	464b      	mov	r3, r9
 800a196:	4698      	mov	r8, r3
 800a198:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a19c:	b13a      	cbz	r2, 800a1ae <_findenv_r+0x32>
 800a19e:	2a3d      	cmp	r2, #61	; 0x3d
 800a1a0:	d1f9      	bne.n	800a196 <_findenv_r+0x1a>
 800a1a2:	4638      	mov	r0, r7
 800a1a4:	f000 ff36 	bl	800b014 <__env_unlock>
 800a1a8:	2000      	movs	r0, #0
 800a1aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1ae:	eba8 0809 	sub.w	r8, r8, r9
 800a1b2:	46a3      	mov	fp, r4
 800a1b4:	f854 0b04 	ldr.w	r0, [r4], #4
 800a1b8:	2800      	cmp	r0, #0
 800a1ba:	d0f2      	beq.n	800a1a2 <_findenv_r+0x26>
 800a1bc:	4642      	mov	r2, r8
 800a1be:	4649      	mov	r1, r9
 800a1c0:	f000 fda5 	bl	800ad0e <strncmp>
 800a1c4:	2800      	cmp	r0, #0
 800a1c6:	d1f4      	bne.n	800a1b2 <_findenv_r+0x36>
 800a1c8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a1cc:	eb03 0508 	add.w	r5, r3, r8
 800a1d0:	f813 3008 	ldrb.w	r3, [r3, r8]
 800a1d4:	2b3d      	cmp	r3, #61	; 0x3d
 800a1d6:	d1ec      	bne.n	800a1b2 <_findenv_r+0x36>
 800a1d8:	f8da 3000 	ldr.w	r3, [sl]
 800a1dc:	ebab 0303 	sub.w	r3, fp, r3
 800a1e0:	109b      	asrs	r3, r3, #2
 800a1e2:	4638      	mov	r0, r7
 800a1e4:	6033      	str	r3, [r6, #0]
 800a1e6:	f000 ff15 	bl	800b014 <__env_unlock>
 800a1ea:	1c68      	adds	r0, r5, #1
 800a1ec:	e7dd      	b.n	800a1aa <_findenv_r+0x2e>
 800a1ee:	bf00      	nop
 800a1f0:	200000b8 	.word	0x200000b8

0800a1f4 <_getenv_r>:
 800a1f4:	b507      	push	{r0, r1, r2, lr}
 800a1f6:	aa01      	add	r2, sp, #4
 800a1f8:	f7ff ffc0 	bl	800a17c <_findenv_r>
 800a1fc:	b003      	add	sp, #12
 800a1fe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800a204 <__gettzinfo>:
 800a204:	4800      	ldr	r0, [pc, #0]	; (800a208 <__gettzinfo+0x4>)
 800a206:	4770      	bx	lr
 800a208:	20000138 	.word	0x20000138

0800a20c <gmtime_r>:
 800a20c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a210:	e9d0 6700 	ldrd	r6, r7, [r0]
 800a214:	460c      	mov	r4, r1
 800a216:	4a4f      	ldr	r2, [pc, #316]	; (800a354 <gmtime_r+0x148>)
 800a218:	2300      	movs	r3, #0
 800a21a:	4630      	mov	r0, r6
 800a21c:	4639      	mov	r1, r7
 800a21e:	f7f6 f867 	bl	80002f0 <__aeabi_ldivmod>
 800a222:	4639      	mov	r1, r7
 800a224:	4605      	mov	r5, r0
 800a226:	4a4b      	ldr	r2, [pc, #300]	; (800a354 <gmtime_r+0x148>)
 800a228:	4630      	mov	r0, r6
 800a22a:	2300      	movs	r3, #0
 800a22c:	f7f6 f860 	bl	80002f0 <__aeabi_ldivmod>
 800a230:	2a00      	cmp	r2, #0
 800a232:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 800a236:	bfb7      	itett	lt
 800a238:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 800a23c:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 800a240:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 800a244:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 800a248:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 800a24c:	fbb2 f1f0 	udiv	r1, r2, r0
 800a250:	fb00 2211 	mls	r2, r0, r1, r2
 800a254:	203c      	movs	r0, #60	; 0x3c
 800a256:	60a1      	str	r1, [r4, #8]
 800a258:	fbb2 f1f0 	udiv	r1, r2, r0
 800a25c:	fb00 2211 	mls	r2, r0, r1, r2
 800a260:	6061      	str	r1, [r4, #4]
 800a262:	6022      	str	r2, [r4, #0]
 800a264:	2107      	movs	r1, #7
 800a266:	1cda      	adds	r2, r3, #3
 800a268:	fb92 f1f1 	sdiv	r1, r2, r1
 800a26c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800a270:	1a52      	subs	r2, r2, r1
 800a272:	bf48      	it	mi
 800a274:	3207      	addmi	r2, #7
 800a276:	4d38      	ldr	r5, [pc, #224]	; (800a358 <gmtime_r+0x14c>)
 800a278:	4838      	ldr	r0, [pc, #224]	; (800a35c <gmtime_r+0x150>)
 800a27a:	61a2      	str	r2, [r4, #24]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	bfb7      	itett	lt
 800a280:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 800a284:	fb93 f5f5 	sdivge	r5, r3, r5
 800a288:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 800a28c:	fb92 f5f5 	sdivlt	r5, r2, r5
 800a290:	fb00 3005 	mla	r0, r0, r5, r3
 800a294:	f648 62ac 	movw	r2, #36524	; 0x8eac
 800a298:	fbb0 f2f2 	udiv	r2, r0, r2
 800a29c:	4402      	add	r2, r0
 800a29e:	f240 53b4 	movw	r3, #1460	; 0x5b4
 800a2a2:	fbb0 f1f3 	udiv	r1, r0, r3
 800a2a6:	1a52      	subs	r2, r2, r1
 800a2a8:	f240 1c6d 	movw	ip, #365	; 0x16d
 800a2ac:	492c      	ldr	r1, [pc, #176]	; (800a360 <gmtime_r+0x154>)
 800a2ae:	fbb0 f1f1 	udiv	r1, r0, r1
 800a2b2:	2764      	movs	r7, #100	; 0x64
 800a2b4:	1a52      	subs	r2, r2, r1
 800a2b6:	fbb2 f1fc 	udiv	r1, r2, ip
 800a2ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2be:	fbb1 f6f7 	udiv	r6, r1, r7
 800a2c2:	1af3      	subs	r3, r6, r3
 800a2c4:	4403      	add	r3, r0
 800a2c6:	fb0c 3311 	mls	r3, ip, r1, r3
 800a2ca:	2299      	movs	r2, #153	; 0x99
 800a2cc:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 800a2d0:	f10e 0e02 	add.w	lr, lr, #2
 800a2d4:	f103 0c01 	add.w	ip, r3, #1
 800a2d8:	fbbe f0f2 	udiv	r0, lr, r2
 800a2dc:	4342      	muls	r2, r0
 800a2de:	3202      	adds	r2, #2
 800a2e0:	f04f 0805 	mov.w	r8, #5
 800a2e4:	fbb2 f2f8 	udiv	r2, r2, r8
 800a2e8:	ebac 0c02 	sub.w	ip, ip, r2
 800a2ec:	f240 52f9 	movw	r2, #1529	; 0x5f9
 800a2f0:	4596      	cmp	lr, r2
 800a2f2:	bf94      	ite	ls
 800a2f4:	2202      	movls	r2, #2
 800a2f6:	f06f 0209 	mvnhi.w	r2, #9
 800a2fa:	4410      	add	r0, r2
 800a2fc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800a300:	fb02 1505 	mla	r5, r2, r5, r1
 800a304:	2801      	cmp	r0, #1
 800a306:	bf98      	it	ls
 800a308:	3501      	addls	r5, #1
 800a30a:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800a30e:	d30d      	bcc.n	800a32c <gmtime_r+0x120>
 800a310:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800a314:	61e3      	str	r3, [r4, #28]
 800a316:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 800a31a:	2300      	movs	r3, #0
 800a31c:	e9c4 0504 	strd	r0, r5, [r4, #16]
 800a320:	f8c4 c00c 	str.w	ip, [r4, #12]
 800a324:	6223      	str	r3, [r4, #32]
 800a326:	4620      	mov	r0, r4
 800a328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a32c:	078a      	lsls	r2, r1, #30
 800a32e:	d102      	bne.n	800a336 <gmtime_r+0x12a>
 800a330:	fb07 1616 	mls	r6, r7, r6, r1
 800a334:	b95e      	cbnz	r6, 800a34e <gmtime_r+0x142>
 800a336:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800a33a:	fbb1 f6f2 	udiv	r6, r1, r2
 800a33e:	fb02 1216 	mls	r2, r2, r6, r1
 800a342:	fab2 f282 	clz	r2, r2
 800a346:	0952      	lsrs	r2, r2, #5
 800a348:	333b      	adds	r3, #59	; 0x3b
 800a34a:	4413      	add	r3, r2
 800a34c:	e7e2      	b.n	800a314 <gmtime_r+0x108>
 800a34e:	2201      	movs	r2, #1
 800a350:	e7fa      	b.n	800a348 <gmtime_r+0x13c>
 800a352:	bf00      	nop
 800a354:	00015180 	.word	0x00015180
 800a358:	00023ab1 	.word	0x00023ab1
 800a35c:	fffdc54f 	.word	0xfffdc54f
 800a360:	00023ab0 	.word	0x00023ab0

0800a364 <__retarget_lock_init_recursive>:
 800a364:	4770      	bx	lr

0800a366 <__retarget_lock_acquire>:
 800a366:	4770      	bx	lr

0800a368 <__retarget_lock_acquire_recursive>:
 800a368:	4770      	bx	lr

0800a36a <__retarget_lock_release>:
 800a36a:	4770      	bx	lr

0800a36c <__retarget_lock_release_recursive>:
 800a36c:	4770      	bx	lr
	...

0800a370 <__malloc_lock>:
 800a370:	4801      	ldr	r0, [pc, #4]	; (800a378 <__malloc_lock+0x8>)
 800a372:	f7ff bff9 	b.w	800a368 <__retarget_lock_acquire_recursive>
 800a376:	bf00      	nop
 800a378:	20000e61 	.word	0x20000e61

0800a37c <__malloc_unlock>:
 800a37c:	4801      	ldr	r0, [pc, #4]	; (800a384 <__malloc_unlock+0x8>)
 800a37e:	f7ff bff5 	b.w	800a36c <__retarget_lock_release_recursive>
 800a382:	bf00      	nop
 800a384:	20000e61 	.word	0x20000e61

0800a388 <__ssputs_r>:
 800a388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a38c:	688e      	ldr	r6, [r1, #8]
 800a38e:	429e      	cmp	r6, r3
 800a390:	4682      	mov	sl, r0
 800a392:	460c      	mov	r4, r1
 800a394:	4690      	mov	r8, r2
 800a396:	461f      	mov	r7, r3
 800a398:	d838      	bhi.n	800a40c <__ssputs_r+0x84>
 800a39a:	898a      	ldrh	r2, [r1, #12]
 800a39c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a3a0:	d032      	beq.n	800a408 <__ssputs_r+0x80>
 800a3a2:	6825      	ldr	r5, [r4, #0]
 800a3a4:	6909      	ldr	r1, [r1, #16]
 800a3a6:	eba5 0901 	sub.w	r9, r5, r1
 800a3aa:	6965      	ldr	r5, [r4, #20]
 800a3ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a3b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a3b4:	3301      	adds	r3, #1
 800a3b6:	444b      	add	r3, r9
 800a3b8:	106d      	asrs	r5, r5, #1
 800a3ba:	429d      	cmp	r5, r3
 800a3bc:	bf38      	it	cc
 800a3be:	461d      	movcc	r5, r3
 800a3c0:	0553      	lsls	r3, r2, #21
 800a3c2:	d531      	bpl.n	800a428 <__ssputs_r+0xa0>
 800a3c4:	4629      	mov	r1, r5
 800a3c6:	f7ff fb81 	bl	8009acc <_malloc_r>
 800a3ca:	4606      	mov	r6, r0
 800a3cc:	b950      	cbnz	r0, 800a3e4 <__ssputs_r+0x5c>
 800a3ce:	230c      	movs	r3, #12
 800a3d0:	f8ca 3000 	str.w	r3, [sl]
 800a3d4:	89a3      	ldrh	r3, [r4, #12]
 800a3d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3da:	81a3      	strh	r3, [r4, #12]
 800a3dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a3e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3e4:	6921      	ldr	r1, [r4, #16]
 800a3e6:	464a      	mov	r2, r9
 800a3e8:	f001 f84a 	bl	800b480 <memcpy>
 800a3ec:	89a3      	ldrh	r3, [r4, #12]
 800a3ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a3f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3f6:	81a3      	strh	r3, [r4, #12]
 800a3f8:	6126      	str	r6, [r4, #16]
 800a3fa:	6165      	str	r5, [r4, #20]
 800a3fc:	444e      	add	r6, r9
 800a3fe:	eba5 0509 	sub.w	r5, r5, r9
 800a402:	6026      	str	r6, [r4, #0]
 800a404:	60a5      	str	r5, [r4, #8]
 800a406:	463e      	mov	r6, r7
 800a408:	42be      	cmp	r6, r7
 800a40a:	d900      	bls.n	800a40e <__ssputs_r+0x86>
 800a40c:	463e      	mov	r6, r7
 800a40e:	6820      	ldr	r0, [r4, #0]
 800a410:	4632      	mov	r2, r6
 800a412:	4641      	mov	r1, r8
 800a414:	f001 f842 	bl	800b49c <memmove>
 800a418:	68a3      	ldr	r3, [r4, #8]
 800a41a:	1b9b      	subs	r3, r3, r6
 800a41c:	60a3      	str	r3, [r4, #8]
 800a41e:	6823      	ldr	r3, [r4, #0]
 800a420:	4433      	add	r3, r6
 800a422:	6023      	str	r3, [r4, #0]
 800a424:	2000      	movs	r0, #0
 800a426:	e7db      	b.n	800a3e0 <__ssputs_r+0x58>
 800a428:	462a      	mov	r2, r5
 800a42a:	f001 f851 	bl	800b4d0 <_realloc_r>
 800a42e:	4606      	mov	r6, r0
 800a430:	2800      	cmp	r0, #0
 800a432:	d1e1      	bne.n	800a3f8 <__ssputs_r+0x70>
 800a434:	6921      	ldr	r1, [r4, #16]
 800a436:	4650      	mov	r0, sl
 800a438:	f7ff fadc 	bl	80099f4 <_free_r>
 800a43c:	e7c7      	b.n	800a3ce <__ssputs_r+0x46>
	...

0800a440 <_svfiprintf_r>:
 800a440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a444:	4698      	mov	r8, r3
 800a446:	898b      	ldrh	r3, [r1, #12]
 800a448:	061b      	lsls	r3, r3, #24
 800a44a:	b09d      	sub	sp, #116	; 0x74
 800a44c:	4607      	mov	r7, r0
 800a44e:	460d      	mov	r5, r1
 800a450:	4614      	mov	r4, r2
 800a452:	d50e      	bpl.n	800a472 <_svfiprintf_r+0x32>
 800a454:	690b      	ldr	r3, [r1, #16]
 800a456:	b963      	cbnz	r3, 800a472 <_svfiprintf_r+0x32>
 800a458:	2140      	movs	r1, #64	; 0x40
 800a45a:	f7ff fb37 	bl	8009acc <_malloc_r>
 800a45e:	6028      	str	r0, [r5, #0]
 800a460:	6128      	str	r0, [r5, #16]
 800a462:	b920      	cbnz	r0, 800a46e <_svfiprintf_r+0x2e>
 800a464:	230c      	movs	r3, #12
 800a466:	603b      	str	r3, [r7, #0]
 800a468:	f04f 30ff 	mov.w	r0, #4294967295
 800a46c:	e0d1      	b.n	800a612 <_svfiprintf_r+0x1d2>
 800a46e:	2340      	movs	r3, #64	; 0x40
 800a470:	616b      	str	r3, [r5, #20]
 800a472:	2300      	movs	r3, #0
 800a474:	9309      	str	r3, [sp, #36]	; 0x24
 800a476:	2320      	movs	r3, #32
 800a478:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a47c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a480:	2330      	movs	r3, #48	; 0x30
 800a482:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a62c <_svfiprintf_r+0x1ec>
 800a486:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a48a:	f04f 0901 	mov.w	r9, #1
 800a48e:	4623      	mov	r3, r4
 800a490:	469a      	mov	sl, r3
 800a492:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a496:	b10a      	cbz	r2, 800a49c <_svfiprintf_r+0x5c>
 800a498:	2a25      	cmp	r2, #37	; 0x25
 800a49a:	d1f9      	bne.n	800a490 <_svfiprintf_r+0x50>
 800a49c:	ebba 0b04 	subs.w	fp, sl, r4
 800a4a0:	d00b      	beq.n	800a4ba <_svfiprintf_r+0x7a>
 800a4a2:	465b      	mov	r3, fp
 800a4a4:	4622      	mov	r2, r4
 800a4a6:	4629      	mov	r1, r5
 800a4a8:	4638      	mov	r0, r7
 800a4aa:	f7ff ff6d 	bl	800a388 <__ssputs_r>
 800a4ae:	3001      	adds	r0, #1
 800a4b0:	f000 80aa 	beq.w	800a608 <_svfiprintf_r+0x1c8>
 800a4b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4b6:	445a      	add	r2, fp
 800a4b8:	9209      	str	r2, [sp, #36]	; 0x24
 800a4ba:	f89a 3000 	ldrb.w	r3, [sl]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	f000 80a2 	beq.w	800a608 <_svfiprintf_r+0x1c8>
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	f04f 32ff 	mov.w	r2, #4294967295
 800a4ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4ce:	f10a 0a01 	add.w	sl, sl, #1
 800a4d2:	9304      	str	r3, [sp, #16]
 800a4d4:	9307      	str	r3, [sp, #28]
 800a4d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a4da:	931a      	str	r3, [sp, #104]	; 0x68
 800a4dc:	4654      	mov	r4, sl
 800a4de:	2205      	movs	r2, #5
 800a4e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4e4:	4851      	ldr	r0, [pc, #324]	; (800a62c <_svfiprintf_r+0x1ec>)
 800a4e6:	f7f5 feb3 	bl	8000250 <memchr>
 800a4ea:	9a04      	ldr	r2, [sp, #16]
 800a4ec:	b9d8      	cbnz	r0, 800a526 <_svfiprintf_r+0xe6>
 800a4ee:	06d0      	lsls	r0, r2, #27
 800a4f0:	bf44      	itt	mi
 800a4f2:	2320      	movmi	r3, #32
 800a4f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4f8:	0711      	lsls	r1, r2, #28
 800a4fa:	bf44      	itt	mi
 800a4fc:	232b      	movmi	r3, #43	; 0x2b
 800a4fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a502:	f89a 3000 	ldrb.w	r3, [sl]
 800a506:	2b2a      	cmp	r3, #42	; 0x2a
 800a508:	d015      	beq.n	800a536 <_svfiprintf_r+0xf6>
 800a50a:	9a07      	ldr	r2, [sp, #28]
 800a50c:	4654      	mov	r4, sl
 800a50e:	2000      	movs	r0, #0
 800a510:	f04f 0c0a 	mov.w	ip, #10
 800a514:	4621      	mov	r1, r4
 800a516:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a51a:	3b30      	subs	r3, #48	; 0x30
 800a51c:	2b09      	cmp	r3, #9
 800a51e:	d94e      	bls.n	800a5be <_svfiprintf_r+0x17e>
 800a520:	b1b0      	cbz	r0, 800a550 <_svfiprintf_r+0x110>
 800a522:	9207      	str	r2, [sp, #28]
 800a524:	e014      	b.n	800a550 <_svfiprintf_r+0x110>
 800a526:	eba0 0308 	sub.w	r3, r0, r8
 800a52a:	fa09 f303 	lsl.w	r3, r9, r3
 800a52e:	4313      	orrs	r3, r2
 800a530:	9304      	str	r3, [sp, #16]
 800a532:	46a2      	mov	sl, r4
 800a534:	e7d2      	b.n	800a4dc <_svfiprintf_r+0x9c>
 800a536:	9b03      	ldr	r3, [sp, #12]
 800a538:	1d19      	adds	r1, r3, #4
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	9103      	str	r1, [sp, #12]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	bfbb      	ittet	lt
 800a542:	425b      	neglt	r3, r3
 800a544:	f042 0202 	orrlt.w	r2, r2, #2
 800a548:	9307      	strge	r3, [sp, #28]
 800a54a:	9307      	strlt	r3, [sp, #28]
 800a54c:	bfb8      	it	lt
 800a54e:	9204      	strlt	r2, [sp, #16]
 800a550:	7823      	ldrb	r3, [r4, #0]
 800a552:	2b2e      	cmp	r3, #46	; 0x2e
 800a554:	d10c      	bne.n	800a570 <_svfiprintf_r+0x130>
 800a556:	7863      	ldrb	r3, [r4, #1]
 800a558:	2b2a      	cmp	r3, #42	; 0x2a
 800a55a:	d135      	bne.n	800a5c8 <_svfiprintf_r+0x188>
 800a55c:	9b03      	ldr	r3, [sp, #12]
 800a55e:	1d1a      	adds	r2, r3, #4
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	9203      	str	r2, [sp, #12]
 800a564:	2b00      	cmp	r3, #0
 800a566:	bfb8      	it	lt
 800a568:	f04f 33ff 	movlt.w	r3, #4294967295
 800a56c:	3402      	adds	r4, #2
 800a56e:	9305      	str	r3, [sp, #20]
 800a570:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a63c <_svfiprintf_r+0x1fc>
 800a574:	7821      	ldrb	r1, [r4, #0]
 800a576:	2203      	movs	r2, #3
 800a578:	4650      	mov	r0, sl
 800a57a:	f7f5 fe69 	bl	8000250 <memchr>
 800a57e:	b140      	cbz	r0, 800a592 <_svfiprintf_r+0x152>
 800a580:	2340      	movs	r3, #64	; 0x40
 800a582:	eba0 000a 	sub.w	r0, r0, sl
 800a586:	fa03 f000 	lsl.w	r0, r3, r0
 800a58a:	9b04      	ldr	r3, [sp, #16]
 800a58c:	4303      	orrs	r3, r0
 800a58e:	3401      	adds	r4, #1
 800a590:	9304      	str	r3, [sp, #16]
 800a592:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a596:	4826      	ldr	r0, [pc, #152]	; (800a630 <_svfiprintf_r+0x1f0>)
 800a598:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a59c:	2206      	movs	r2, #6
 800a59e:	f7f5 fe57 	bl	8000250 <memchr>
 800a5a2:	2800      	cmp	r0, #0
 800a5a4:	d038      	beq.n	800a618 <_svfiprintf_r+0x1d8>
 800a5a6:	4b23      	ldr	r3, [pc, #140]	; (800a634 <_svfiprintf_r+0x1f4>)
 800a5a8:	bb1b      	cbnz	r3, 800a5f2 <_svfiprintf_r+0x1b2>
 800a5aa:	9b03      	ldr	r3, [sp, #12]
 800a5ac:	3307      	adds	r3, #7
 800a5ae:	f023 0307 	bic.w	r3, r3, #7
 800a5b2:	3308      	adds	r3, #8
 800a5b4:	9303      	str	r3, [sp, #12]
 800a5b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5b8:	4433      	add	r3, r6
 800a5ba:	9309      	str	r3, [sp, #36]	; 0x24
 800a5bc:	e767      	b.n	800a48e <_svfiprintf_r+0x4e>
 800a5be:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5c2:	460c      	mov	r4, r1
 800a5c4:	2001      	movs	r0, #1
 800a5c6:	e7a5      	b.n	800a514 <_svfiprintf_r+0xd4>
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	3401      	adds	r4, #1
 800a5cc:	9305      	str	r3, [sp, #20]
 800a5ce:	4619      	mov	r1, r3
 800a5d0:	f04f 0c0a 	mov.w	ip, #10
 800a5d4:	4620      	mov	r0, r4
 800a5d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5da:	3a30      	subs	r2, #48	; 0x30
 800a5dc:	2a09      	cmp	r2, #9
 800a5de:	d903      	bls.n	800a5e8 <_svfiprintf_r+0x1a8>
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d0c5      	beq.n	800a570 <_svfiprintf_r+0x130>
 800a5e4:	9105      	str	r1, [sp, #20]
 800a5e6:	e7c3      	b.n	800a570 <_svfiprintf_r+0x130>
 800a5e8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5ec:	4604      	mov	r4, r0
 800a5ee:	2301      	movs	r3, #1
 800a5f0:	e7f0      	b.n	800a5d4 <_svfiprintf_r+0x194>
 800a5f2:	ab03      	add	r3, sp, #12
 800a5f4:	9300      	str	r3, [sp, #0]
 800a5f6:	462a      	mov	r2, r5
 800a5f8:	4b0f      	ldr	r3, [pc, #60]	; (800a638 <_svfiprintf_r+0x1f8>)
 800a5fa:	a904      	add	r1, sp, #16
 800a5fc:	4638      	mov	r0, r7
 800a5fe:	f3af 8000 	nop.w
 800a602:	1c42      	adds	r2, r0, #1
 800a604:	4606      	mov	r6, r0
 800a606:	d1d6      	bne.n	800a5b6 <_svfiprintf_r+0x176>
 800a608:	89ab      	ldrh	r3, [r5, #12]
 800a60a:	065b      	lsls	r3, r3, #25
 800a60c:	f53f af2c 	bmi.w	800a468 <_svfiprintf_r+0x28>
 800a610:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a612:	b01d      	add	sp, #116	; 0x74
 800a614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a618:	ab03      	add	r3, sp, #12
 800a61a:	9300      	str	r3, [sp, #0]
 800a61c:	462a      	mov	r2, r5
 800a61e:	4b06      	ldr	r3, [pc, #24]	; (800a638 <_svfiprintf_r+0x1f8>)
 800a620:	a904      	add	r1, sp, #16
 800a622:	4638      	mov	r0, r7
 800a624:	f000 f9d4 	bl	800a9d0 <_printf_i>
 800a628:	e7eb      	b.n	800a602 <_svfiprintf_r+0x1c2>
 800a62a:	bf00      	nop
 800a62c:	0800d738 	.word	0x0800d738
 800a630:	0800d742 	.word	0x0800d742
 800a634:	00000000 	.word	0x00000000
 800a638:	0800a389 	.word	0x0800a389
 800a63c:	0800d73e 	.word	0x0800d73e

0800a640 <__sfputc_r>:
 800a640:	6893      	ldr	r3, [r2, #8]
 800a642:	3b01      	subs	r3, #1
 800a644:	2b00      	cmp	r3, #0
 800a646:	b410      	push	{r4}
 800a648:	6093      	str	r3, [r2, #8]
 800a64a:	da08      	bge.n	800a65e <__sfputc_r+0x1e>
 800a64c:	6994      	ldr	r4, [r2, #24]
 800a64e:	42a3      	cmp	r3, r4
 800a650:	db01      	blt.n	800a656 <__sfputc_r+0x16>
 800a652:	290a      	cmp	r1, #10
 800a654:	d103      	bne.n	800a65e <__sfputc_r+0x1e>
 800a656:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a65a:	f000 bbeb 	b.w	800ae34 <__swbuf_r>
 800a65e:	6813      	ldr	r3, [r2, #0]
 800a660:	1c58      	adds	r0, r3, #1
 800a662:	6010      	str	r0, [r2, #0]
 800a664:	7019      	strb	r1, [r3, #0]
 800a666:	4608      	mov	r0, r1
 800a668:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a66c:	4770      	bx	lr

0800a66e <__sfputs_r>:
 800a66e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a670:	4606      	mov	r6, r0
 800a672:	460f      	mov	r7, r1
 800a674:	4614      	mov	r4, r2
 800a676:	18d5      	adds	r5, r2, r3
 800a678:	42ac      	cmp	r4, r5
 800a67a:	d101      	bne.n	800a680 <__sfputs_r+0x12>
 800a67c:	2000      	movs	r0, #0
 800a67e:	e007      	b.n	800a690 <__sfputs_r+0x22>
 800a680:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a684:	463a      	mov	r2, r7
 800a686:	4630      	mov	r0, r6
 800a688:	f7ff ffda 	bl	800a640 <__sfputc_r>
 800a68c:	1c43      	adds	r3, r0, #1
 800a68e:	d1f3      	bne.n	800a678 <__sfputs_r+0xa>
 800a690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a694 <_vfiprintf_r>:
 800a694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a698:	460d      	mov	r5, r1
 800a69a:	b09d      	sub	sp, #116	; 0x74
 800a69c:	4614      	mov	r4, r2
 800a69e:	4698      	mov	r8, r3
 800a6a0:	4606      	mov	r6, r0
 800a6a2:	b118      	cbz	r0, 800a6ac <_vfiprintf_r+0x18>
 800a6a4:	6983      	ldr	r3, [r0, #24]
 800a6a6:	b90b      	cbnz	r3, 800a6ac <_vfiprintf_r+0x18>
 800a6a8:	f000 fdd4 	bl	800b254 <__sinit>
 800a6ac:	4b89      	ldr	r3, [pc, #548]	; (800a8d4 <_vfiprintf_r+0x240>)
 800a6ae:	429d      	cmp	r5, r3
 800a6b0:	d11b      	bne.n	800a6ea <_vfiprintf_r+0x56>
 800a6b2:	6875      	ldr	r5, [r6, #4]
 800a6b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6b6:	07d9      	lsls	r1, r3, #31
 800a6b8:	d405      	bmi.n	800a6c6 <_vfiprintf_r+0x32>
 800a6ba:	89ab      	ldrh	r3, [r5, #12]
 800a6bc:	059a      	lsls	r2, r3, #22
 800a6be:	d402      	bmi.n	800a6c6 <_vfiprintf_r+0x32>
 800a6c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a6c2:	f7ff fe51 	bl	800a368 <__retarget_lock_acquire_recursive>
 800a6c6:	89ab      	ldrh	r3, [r5, #12]
 800a6c8:	071b      	lsls	r3, r3, #28
 800a6ca:	d501      	bpl.n	800a6d0 <_vfiprintf_r+0x3c>
 800a6cc:	692b      	ldr	r3, [r5, #16]
 800a6ce:	b9eb      	cbnz	r3, 800a70c <_vfiprintf_r+0x78>
 800a6d0:	4629      	mov	r1, r5
 800a6d2:	4630      	mov	r0, r6
 800a6d4:	f000 fc12 	bl	800aefc <__swsetup_r>
 800a6d8:	b1c0      	cbz	r0, 800a70c <_vfiprintf_r+0x78>
 800a6da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6dc:	07dc      	lsls	r4, r3, #31
 800a6de:	d50e      	bpl.n	800a6fe <_vfiprintf_r+0x6a>
 800a6e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a6e4:	b01d      	add	sp, #116	; 0x74
 800a6e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6ea:	4b7b      	ldr	r3, [pc, #492]	; (800a8d8 <_vfiprintf_r+0x244>)
 800a6ec:	429d      	cmp	r5, r3
 800a6ee:	d101      	bne.n	800a6f4 <_vfiprintf_r+0x60>
 800a6f0:	68b5      	ldr	r5, [r6, #8]
 800a6f2:	e7df      	b.n	800a6b4 <_vfiprintf_r+0x20>
 800a6f4:	4b79      	ldr	r3, [pc, #484]	; (800a8dc <_vfiprintf_r+0x248>)
 800a6f6:	429d      	cmp	r5, r3
 800a6f8:	bf08      	it	eq
 800a6fa:	68f5      	ldreq	r5, [r6, #12]
 800a6fc:	e7da      	b.n	800a6b4 <_vfiprintf_r+0x20>
 800a6fe:	89ab      	ldrh	r3, [r5, #12]
 800a700:	0598      	lsls	r0, r3, #22
 800a702:	d4ed      	bmi.n	800a6e0 <_vfiprintf_r+0x4c>
 800a704:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a706:	f7ff fe31 	bl	800a36c <__retarget_lock_release_recursive>
 800a70a:	e7e9      	b.n	800a6e0 <_vfiprintf_r+0x4c>
 800a70c:	2300      	movs	r3, #0
 800a70e:	9309      	str	r3, [sp, #36]	; 0x24
 800a710:	2320      	movs	r3, #32
 800a712:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a716:	f8cd 800c 	str.w	r8, [sp, #12]
 800a71a:	2330      	movs	r3, #48	; 0x30
 800a71c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a8e0 <_vfiprintf_r+0x24c>
 800a720:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a724:	f04f 0901 	mov.w	r9, #1
 800a728:	4623      	mov	r3, r4
 800a72a:	469a      	mov	sl, r3
 800a72c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a730:	b10a      	cbz	r2, 800a736 <_vfiprintf_r+0xa2>
 800a732:	2a25      	cmp	r2, #37	; 0x25
 800a734:	d1f9      	bne.n	800a72a <_vfiprintf_r+0x96>
 800a736:	ebba 0b04 	subs.w	fp, sl, r4
 800a73a:	d00b      	beq.n	800a754 <_vfiprintf_r+0xc0>
 800a73c:	465b      	mov	r3, fp
 800a73e:	4622      	mov	r2, r4
 800a740:	4629      	mov	r1, r5
 800a742:	4630      	mov	r0, r6
 800a744:	f7ff ff93 	bl	800a66e <__sfputs_r>
 800a748:	3001      	adds	r0, #1
 800a74a:	f000 80aa 	beq.w	800a8a2 <_vfiprintf_r+0x20e>
 800a74e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a750:	445a      	add	r2, fp
 800a752:	9209      	str	r2, [sp, #36]	; 0x24
 800a754:	f89a 3000 	ldrb.w	r3, [sl]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	f000 80a2 	beq.w	800a8a2 <_vfiprintf_r+0x20e>
 800a75e:	2300      	movs	r3, #0
 800a760:	f04f 32ff 	mov.w	r2, #4294967295
 800a764:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a768:	f10a 0a01 	add.w	sl, sl, #1
 800a76c:	9304      	str	r3, [sp, #16]
 800a76e:	9307      	str	r3, [sp, #28]
 800a770:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a774:	931a      	str	r3, [sp, #104]	; 0x68
 800a776:	4654      	mov	r4, sl
 800a778:	2205      	movs	r2, #5
 800a77a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a77e:	4858      	ldr	r0, [pc, #352]	; (800a8e0 <_vfiprintf_r+0x24c>)
 800a780:	f7f5 fd66 	bl	8000250 <memchr>
 800a784:	9a04      	ldr	r2, [sp, #16]
 800a786:	b9d8      	cbnz	r0, 800a7c0 <_vfiprintf_r+0x12c>
 800a788:	06d1      	lsls	r1, r2, #27
 800a78a:	bf44      	itt	mi
 800a78c:	2320      	movmi	r3, #32
 800a78e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a792:	0713      	lsls	r3, r2, #28
 800a794:	bf44      	itt	mi
 800a796:	232b      	movmi	r3, #43	; 0x2b
 800a798:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a79c:	f89a 3000 	ldrb.w	r3, [sl]
 800a7a0:	2b2a      	cmp	r3, #42	; 0x2a
 800a7a2:	d015      	beq.n	800a7d0 <_vfiprintf_r+0x13c>
 800a7a4:	9a07      	ldr	r2, [sp, #28]
 800a7a6:	4654      	mov	r4, sl
 800a7a8:	2000      	movs	r0, #0
 800a7aa:	f04f 0c0a 	mov.w	ip, #10
 800a7ae:	4621      	mov	r1, r4
 800a7b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7b4:	3b30      	subs	r3, #48	; 0x30
 800a7b6:	2b09      	cmp	r3, #9
 800a7b8:	d94e      	bls.n	800a858 <_vfiprintf_r+0x1c4>
 800a7ba:	b1b0      	cbz	r0, 800a7ea <_vfiprintf_r+0x156>
 800a7bc:	9207      	str	r2, [sp, #28]
 800a7be:	e014      	b.n	800a7ea <_vfiprintf_r+0x156>
 800a7c0:	eba0 0308 	sub.w	r3, r0, r8
 800a7c4:	fa09 f303 	lsl.w	r3, r9, r3
 800a7c8:	4313      	orrs	r3, r2
 800a7ca:	9304      	str	r3, [sp, #16]
 800a7cc:	46a2      	mov	sl, r4
 800a7ce:	e7d2      	b.n	800a776 <_vfiprintf_r+0xe2>
 800a7d0:	9b03      	ldr	r3, [sp, #12]
 800a7d2:	1d19      	adds	r1, r3, #4
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	9103      	str	r1, [sp, #12]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	bfbb      	ittet	lt
 800a7dc:	425b      	neglt	r3, r3
 800a7de:	f042 0202 	orrlt.w	r2, r2, #2
 800a7e2:	9307      	strge	r3, [sp, #28]
 800a7e4:	9307      	strlt	r3, [sp, #28]
 800a7e6:	bfb8      	it	lt
 800a7e8:	9204      	strlt	r2, [sp, #16]
 800a7ea:	7823      	ldrb	r3, [r4, #0]
 800a7ec:	2b2e      	cmp	r3, #46	; 0x2e
 800a7ee:	d10c      	bne.n	800a80a <_vfiprintf_r+0x176>
 800a7f0:	7863      	ldrb	r3, [r4, #1]
 800a7f2:	2b2a      	cmp	r3, #42	; 0x2a
 800a7f4:	d135      	bne.n	800a862 <_vfiprintf_r+0x1ce>
 800a7f6:	9b03      	ldr	r3, [sp, #12]
 800a7f8:	1d1a      	adds	r2, r3, #4
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	9203      	str	r2, [sp, #12]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	bfb8      	it	lt
 800a802:	f04f 33ff 	movlt.w	r3, #4294967295
 800a806:	3402      	adds	r4, #2
 800a808:	9305      	str	r3, [sp, #20]
 800a80a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a8f0 <_vfiprintf_r+0x25c>
 800a80e:	7821      	ldrb	r1, [r4, #0]
 800a810:	2203      	movs	r2, #3
 800a812:	4650      	mov	r0, sl
 800a814:	f7f5 fd1c 	bl	8000250 <memchr>
 800a818:	b140      	cbz	r0, 800a82c <_vfiprintf_r+0x198>
 800a81a:	2340      	movs	r3, #64	; 0x40
 800a81c:	eba0 000a 	sub.w	r0, r0, sl
 800a820:	fa03 f000 	lsl.w	r0, r3, r0
 800a824:	9b04      	ldr	r3, [sp, #16]
 800a826:	4303      	orrs	r3, r0
 800a828:	3401      	adds	r4, #1
 800a82a:	9304      	str	r3, [sp, #16]
 800a82c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a830:	482c      	ldr	r0, [pc, #176]	; (800a8e4 <_vfiprintf_r+0x250>)
 800a832:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a836:	2206      	movs	r2, #6
 800a838:	f7f5 fd0a 	bl	8000250 <memchr>
 800a83c:	2800      	cmp	r0, #0
 800a83e:	d03f      	beq.n	800a8c0 <_vfiprintf_r+0x22c>
 800a840:	4b29      	ldr	r3, [pc, #164]	; (800a8e8 <_vfiprintf_r+0x254>)
 800a842:	bb1b      	cbnz	r3, 800a88c <_vfiprintf_r+0x1f8>
 800a844:	9b03      	ldr	r3, [sp, #12]
 800a846:	3307      	adds	r3, #7
 800a848:	f023 0307 	bic.w	r3, r3, #7
 800a84c:	3308      	adds	r3, #8
 800a84e:	9303      	str	r3, [sp, #12]
 800a850:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a852:	443b      	add	r3, r7
 800a854:	9309      	str	r3, [sp, #36]	; 0x24
 800a856:	e767      	b.n	800a728 <_vfiprintf_r+0x94>
 800a858:	fb0c 3202 	mla	r2, ip, r2, r3
 800a85c:	460c      	mov	r4, r1
 800a85e:	2001      	movs	r0, #1
 800a860:	e7a5      	b.n	800a7ae <_vfiprintf_r+0x11a>
 800a862:	2300      	movs	r3, #0
 800a864:	3401      	adds	r4, #1
 800a866:	9305      	str	r3, [sp, #20]
 800a868:	4619      	mov	r1, r3
 800a86a:	f04f 0c0a 	mov.w	ip, #10
 800a86e:	4620      	mov	r0, r4
 800a870:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a874:	3a30      	subs	r2, #48	; 0x30
 800a876:	2a09      	cmp	r2, #9
 800a878:	d903      	bls.n	800a882 <_vfiprintf_r+0x1ee>
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d0c5      	beq.n	800a80a <_vfiprintf_r+0x176>
 800a87e:	9105      	str	r1, [sp, #20]
 800a880:	e7c3      	b.n	800a80a <_vfiprintf_r+0x176>
 800a882:	fb0c 2101 	mla	r1, ip, r1, r2
 800a886:	4604      	mov	r4, r0
 800a888:	2301      	movs	r3, #1
 800a88a:	e7f0      	b.n	800a86e <_vfiprintf_r+0x1da>
 800a88c:	ab03      	add	r3, sp, #12
 800a88e:	9300      	str	r3, [sp, #0]
 800a890:	462a      	mov	r2, r5
 800a892:	4b16      	ldr	r3, [pc, #88]	; (800a8ec <_vfiprintf_r+0x258>)
 800a894:	a904      	add	r1, sp, #16
 800a896:	4630      	mov	r0, r6
 800a898:	f3af 8000 	nop.w
 800a89c:	4607      	mov	r7, r0
 800a89e:	1c78      	adds	r0, r7, #1
 800a8a0:	d1d6      	bne.n	800a850 <_vfiprintf_r+0x1bc>
 800a8a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8a4:	07d9      	lsls	r1, r3, #31
 800a8a6:	d405      	bmi.n	800a8b4 <_vfiprintf_r+0x220>
 800a8a8:	89ab      	ldrh	r3, [r5, #12]
 800a8aa:	059a      	lsls	r2, r3, #22
 800a8ac:	d402      	bmi.n	800a8b4 <_vfiprintf_r+0x220>
 800a8ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8b0:	f7ff fd5c 	bl	800a36c <__retarget_lock_release_recursive>
 800a8b4:	89ab      	ldrh	r3, [r5, #12]
 800a8b6:	065b      	lsls	r3, r3, #25
 800a8b8:	f53f af12 	bmi.w	800a6e0 <_vfiprintf_r+0x4c>
 800a8bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a8be:	e711      	b.n	800a6e4 <_vfiprintf_r+0x50>
 800a8c0:	ab03      	add	r3, sp, #12
 800a8c2:	9300      	str	r3, [sp, #0]
 800a8c4:	462a      	mov	r2, r5
 800a8c6:	4b09      	ldr	r3, [pc, #36]	; (800a8ec <_vfiprintf_r+0x258>)
 800a8c8:	a904      	add	r1, sp, #16
 800a8ca:	4630      	mov	r0, r6
 800a8cc:	f000 f880 	bl	800a9d0 <_printf_i>
 800a8d0:	e7e4      	b.n	800a89c <_vfiprintf_r+0x208>
 800a8d2:	bf00      	nop
 800a8d4:	0800d88c 	.word	0x0800d88c
 800a8d8:	0800d8ac 	.word	0x0800d8ac
 800a8dc:	0800d86c 	.word	0x0800d86c
 800a8e0:	0800d738 	.word	0x0800d738
 800a8e4:	0800d742 	.word	0x0800d742
 800a8e8:	00000000 	.word	0x00000000
 800a8ec:	0800a66f 	.word	0x0800a66f
 800a8f0:	0800d73e 	.word	0x0800d73e

0800a8f4 <_printf_common>:
 800a8f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8f8:	4616      	mov	r6, r2
 800a8fa:	4699      	mov	r9, r3
 800a8fc:	688a      	ldr	r2, [r1, #8]
 800a8fe:	690b      	ldr	r3, [r1, #16]
 800a900:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a904:	4293      	cmp	r3, r2
 800a906:	bfb8      	it	lt
 800a908:	4613      	movlt	r3, r2
 800a90a:	6033      	str	r3, [r6, #0]
 800a90c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a910:	4607      	mov	r7, r0
 800a912:	460c      	mov	r4, r1
 800a914:	b10a      	cbz	r2, 800a91a <_printf_common+0x26>
 800a916:	3301      	adds	r3, #1
 800a918:	6033      	str	r3, [r6, #0]
 800a91a:	6823      	ldr	r3, [r4, #0]
 800a91c:	0699      	lsls	r1, r3, #26
 800a91e:	bf42      	ittt	mi
 800a920:	6833      	ldrmi	r3, [r6, #0]
 800a922:	3302      	addmi	r3, #2
 800a924:	6033      	strmi	r3, [r6, #0]
 800a926:	6825      	ldr	r5, [r4, #0]
 800a928:	f015 0506 	ands.w	r5, r5, #6
 800a92c:	d106      	bne.n	800a93c <_printf_common+0x48>
 800a92e:	f104 0a19 	add.w	sl, r4, #25
 800a932:	68e3      	ldr	r3, [r4, #12]
 800a934:	6832      	ldr	r2, [r6, #0]
 800a936:	1a9b      	subs	r3, r3, r2
 800a938:	42ab      	cmp	r3, r5
 800a93a:	dc26      	bgt.n	800a98a <_printf_common+0x96>
 800a93c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a940:	1e13      	subs	r3, r2, #0
 800a942:	6822      	ldr	r2, [r4, #0]
 800a944:	bf18      	it	ne
 800a946:	2301      	movne	r3, #1
 800a948:	0692      	lsls	r2, r2, #26
 800a94a:	d42b      	bmi.n	800a9a4 <_printf_common+0xb0>
 800a94c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a950:	4649      	mov	r1, r9
 800a952:	4638      	mov	r0, r7
 800a954:	47c0      	blx	r8
 800a956:	3001      	adds	r0, #1
 800a958:	d01e      	beq.n	800a998 <_printf_common+0xa4>
 800a95a:	6823      	ldr	r3, [r4, #0]
 800a95c:	68e5      	ldr	r5, [r4, #12]
 800a95e:	6832      	ldr	r2, [r6, #0]
 800a960:	f003 0306 	and.w	r3, r3, #6
 800a964:	2b04      	cmp	r3, #4
 800a966:	bf08      	it	eq
 800a968:	1aad      	subeq	r5, r5, r2
 800a96a:	68a3      	ldr	r3, [r4, #8]
 800a96c:	6922      	ldr	r2, [r4, #16]
 800a96e:	bf0c      	ite	eq
 800a970:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a974:	2500      	movne	r5, #0
 800a976:	4293      	cmp	r3, r2
 800a978:	bfc4      	itt	gt
 800a97a:	1a9b      	subgt	r3, r3, r2
 800a97c:	18ed      	addgt	r5, r5, r3
 800a97e:	2600      	movs	r6, #0
 800a980:	341a      	adds	r4, #26
 800a982:	42b5      	cmp	r5, r6
 800a984:	d11a      	bne.n	800a9bc <_printf_common+0xc8>
 800a986:	2000      	movs	r0, #0
 800a988:	e008      	b.n	800a99c <_printf_common+0xa8>
 800a98a:	2301      	movs	r3, #1
 800a98c:	4652      	mov	r2, sl
 800a98e:	4649      	mov	r1, r9
 800a990:	4638      	mov	r0, r7
 800a992:	47c0      	blx	r8
 800a994:	3001      	adds	r0, #1
 800a996:	d103      	bne.n	800a9a0 <_printf_common+0xac>
 800a998:	f04f 30ff 	mov.w	r0, #4294967295
 800a99c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9a0:	3501      	adds	r5, #1
 800a9a2:	e7c6      	b.n	800a932 <_printf_common+0x3e>
 800a9a4:	18e1      	adds	r1, r4, r3
 800a9a6:	1c5a      	adds	r2, r3, #1
 800a9a8:	2030      	movs	r0, #48	; 0x30
 800a9aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a9ae:	4422      	add	r2, r4
 800a9b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a9b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a9b8:	3302      	adds	r3, #2
 800a9ba:	e7c7      	b.n	800a94c <_printf_common+0x58>
 800a9bc:	2301      	movs	r3, #1
 800a9be:	4622      	mov	r2, r4
 800a9c0:	4649      	mov	r1, r9
 800a9c2:	4638      	mov	r0, r7
 800a9c4:	47c0      	blx	r8
 800a9c6:	3001      	adds	r0, #1
 800a9c8:	d0e6      	beq.n	800a998 <_printf_common+0xa4>
 800a9ca:	3601      	adds	r6, #1
 800a9cc:	e7d9      	b.n	800a982 <_printf_common+0x8e>
	...

0800a9d0 <_printf_i>:
 800a9d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a9d4:	7e0f      	ldrb	r7, [r1, #24]
 800a9d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a9d8:	2f78      	cmp	r7, #120	; 0x78
 800a9da:	4691      	mov	r9, r2
 800a9dc:	4680      	mov	r8, r0
 800a9de:	460c      	mov	r4, r1
 800a9e0:	469a      	mov	sl, r3
 800a9e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a9e6:	d807      	bhi.n	800a9f8 <_printf_i+0x28>
 800a9e8:	2f62      	cmp	r7, #98	; 0x62
 800a9ea:	d80a      	bhi.n	800aa02 <_printf_i+0x32>
 800a9ec:	2f00      	cmp	r7, #0
 800a9ee:	f000 80d8 	beq.w	800aba2 <_printf_i+0x1d2>
 800a9f2:	2f58      	cmp	r7, #88	; 0x58
 800a9f4:	f000 80a3 	beq.w	800ab3e <_printf_i+0x16e>
 800a9f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a9fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aa00:	e03a      	b.n	800aa78 <_printf_i+0xa8>
 800aa02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aa06:	2b15      	cmp	r3, #21
 800aa08:	d8f6      	bhi.n	800a9f8 <_printf_i+0x28>
 800aa0a:	a101      	add	r1, pc, #4	; (adr r1, 800aa10 <_printf_i+0x40>)
 800aa0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aa10:	0800aa69 	.word	0x0800aa69
 800aa14:	0800aa7d 	.word	0x0800aa7d
 800aa18:	0800a9f9 	.word	0x0800a9f9
 800aa1c:	0800a9f9 	.word	0x0800a9f9
 800aa20:	0800a9f9 	.word	0x0800a9f9
 800aa24:	0800a9f9 	.word	0x0800a9f9
 800aa28:	0800aa7d 	.word	0x0800aa7d
 800aa2c:	0800a9f9 	.word	0x0800a9f9
 800aa30:	0800a9f9 	.word	0x0800a9f9
 800aa34:	0800a9f9 	.word	0x0800a9f9
 800aa38:	0800a9f9 	.word	0x0800a9f9
 800aa3c:	0800ab89 	.word	0x0800ab89
 800aa40:	0800aaad 	.word	0x0800aaad
 800aa44:	0800ab6b 	.word	0x0800ab6b
 800aa48:	0800a9f9 	.word	0x0800a9f9
 800aa4c:	0800a9f9 	.word	0x0800a9f9
 800aa50:	0800abab 	.word	0x0800abab
 800aa54:	0800a9f9 	.word	0x0800a9f9
 800aa58:	0800aaad 	.word	0x0800aaad
 800aa5c:	0800a9f9 	.word	0x0800a9f9
 800aa60:	0800a9f9 	.word	0x0800a9f9
 800aa64:	0800ab73 	.word	0x0800ab73
 800aa68:	682b      	ldr	r3, [r5, #0]
 800aa6a:	1d1a      	adds	r2, r3, #4
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	602a      	str	r2, [r5, #0]
 800aa70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aa78:	2301      	movs	r3, #1
 800aa7a:	e0a3      	b.n	800abc4 <_printf_i+0x1f4>
 800aa7c:	6820      	ldr	r0, [r4, #0]
 800aa7e:	6829      	ldr	r1, [r5, #0]
 800aa80:	0606      	lsls	r6, r0, #24
 800aa82:	f101 0304 	add.w	r3, r1, #4
 800aa86:	d50a      	bpl.n	800aa9e <_printf_i+0xce>
 800aa88:	680e      	ldr	r6, [r1, #0]
 800aa8a:	602b      	str	r3, [r5, #0]
 800aa8c:	2e00      	cmp	r6, #0
 800aa8e:	da03      	bge.n	800aa98 <_printf_i+0xc8>
 800aa90:	232d      	movs	r3, #45	; 0x2d
 800aa92:	4276      	negs	r6, r6
 800aa94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa98:	485e      	ldr	r0, [pc, #376]	; (800ac14 <_printf_i+0x244>)
 800aa9a:	230a      	movs	r3, #10
 800aa9c:	e019      	b.n	800aad2 <_printf_i+0x102>
 800aa9e:	680e      	ldr	r6, [r1, #0]
 800aaa0:	602b      	str	r3, [r5, #0]
 800aaa2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800aaa6:	bf18      	it	ne
 800aaa8:	b236      	sxthne	r6, r6
 800aaaa:	e7ef      	b.n	800aa8c <_printf_i+0xbc>
 800aaac:	682b      	ldr	r3, [r5, #0]
 800aaae:	6820      	ldr	r0, [r4, #0]
 800aab0:	1d19      	adds	r1, r3, #4
 800aab2:	6029      	str	r1, [r5, #0]
 800aab4:	0601      	lsls	r1, r0, #24
 800aab6:	d501      	bpl.n	800aabc <_printf_i+0xec>
 800aab8:	681e      	ldr	r6, [r3, #0]
 800aaba:	e002      	b.n	800aac2 <_printf_i+0xf2>
 800aabc:	0646      	lsls	r6, r0, #25
 800aabe:	d5fb      	bpl.n	800aab8 <_printf_i+0xe8>
 800aac0:	881e      	ldrh	r6, [r3, #0]
 800aac2:	4854      	ldr	r0, [pc, #336]	; (800ac14 <_printf_i+0x244>)
 800aac4:	2f6f      	cmp	r7, #111	; 0x6f
 800aac6:	bf0c      	ite	eq
 800aac8:	2308      	moveq	r3, #8
 800aaca:	230a      	movne	r3, #10
 800aacc:	2100      	movs	r1, #0
 800aace:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aad2:	6865      	ldr	r5, [r4, #4]
 800aad4:	60a5      	str	r5, [r4, #8]
 800aad6:	2d00      	cmp	r5, #0
 800aad8:	bfa2      	ittt	ge
 800aada:	6821      	ldrge	r1, [r4, #0]
 800aadc:	f021 0104 	bicge.w	r1, r1, #4
 800aae0:	6021      	strge	r1, [r4, #0]
 800aae2:	b90e      	cbnz	r6, 800aae8 <_printf_i+0x118>
 800aae4:	2d00      	cmp	r5, #0
 800aae6:	d04d      	beq.n	800ab84 <_printf_i+0x1b4>
 800aae8:	4615      	mov	r5, r2
 800aaea:	fbb6 f1f3 	udiv	r1, r6, r3
 800aaee:	fb03 6711 	mls	r7, r3, r1, r6
 800aaf2:	5dc7      	ldrb	r7, [r0, r7]
 800aaf4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800aaf8:	4637      	mov	r7, r6
 800aafa:	42bb      	cmp	r3, r7
 800aafc:	460e      	mov	r6, r1
 800aafe:	d9f4      	bls.n	800aaea <_printf_i+0x11a>
 800ab00:	2b08      	cmp	r3, #8
 800ab02:	d10b      	bne.n	800ab1c <_printf_i+0x14c>
 800ab04:	6823      	ldr	r3, [r4, #0]
 800ab06:	07de      	lsls	r6, r3, #31
 800ab08:	d508      	bpl.n	800ab1c <_printf_i+0x14c>
 800ab0a:	6923      	ldr	r3, [r4, #16]
 800ab0c:	6861      	ldr	r1, [r4, #4]
 800ab0e:	4299      	cmp	r1, r3
 800ab10:	bfde      	ittt	le
 800ab12:	2330      	movle	r3, #48	; 0x30
 800ab14:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ab18:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ab1c:	1b52      	subs	r2, r2, r5
 800ab1e:	6122      	str	r2, [r4, #16]
 800ab20:	f8cd a000 	str.w	sl, [sp]
 800ab24:	464b      	mov	r3, r9
 800ab26:	aa03      	add	r2, sp, #12
 800ab28:	4621      	mov	r1, r4
 800ab2a:	4640      	mov	r0, r8
 800ab2c:	f7ff fee2 	bl	800a8f4 <_printf_common>
 800ab30:	3001      	adds	r0, #1
 800ab32:	d14c      	bne.n	800abce <_printf_i+0x1fe>
 800ab34:	f04f 30ff 	mov.w	r0, #4294967295
 800ab38:	b004      	add	sp, #16
 800ab3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab3e:	4835      	ldr	r0, [pc, #212]	; (800ac14 <_printf_i+0x244>)
 800ab40:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ab44:	6829      	ldr	r1, [r5, #0]
 800ab46:	6823      	ldr	r3, [r4, #0]
 800ab48:	f851 6b04 	ldr.w	r6, [r1], #4
 800ab4c:	6029      	str	r1, [r5, #0]
 800ab4e:	061d      	lsls	r5, r3, #24
 800ab50:	d514      	bpl.n	800ab7c <_printf_i+0x1ac>
 800ab52:	07df      	lsls	r7, r3, #31
 800ab54:	bf44      	itt	mi
 800ab56:	f043 0320 	orrmi.w	r3, r3, #32
 800ab5a:	6023      	strmi	r3, [r4, #0]
 800ab5c:	b91e      	cbnz	r6, 800ab66 <_printf_i+0x196>
 800ab5e:	6823      	ldr	r3, [r4, #0]
 800ab60:	f023 0320 	bic.w	r3, r3, #32
 800ab64:	6023      	str	r3, [r4, #0]
 800ab66:	2310      	movs	r3, #16
 800ab68:	e7b0      	b.n	800aacc <_printf_i+0xfc>
 800ab6a:	6823      	ldr	r3, [r4, #0]
 800ab6c:	f043 0320 	orr.w	r3, r3, #32
 800ab70:	6023      	str	r3, [r4, #0]
 800ab72:	2378      	movs	r3, #120	; 0x78
 800ab74:	4828      	ldr	r0, [pc, #160]	; (800ac18 <_printf_i+0x248>)
 800ab76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ab7a:	e7e3      	b.n	800ab44 <_printf_i+0x174>
 800ab7c:	0659      	lsls	r1, r3, #25
 800ab7e:	bf48      	it	mi
 800ab80:	b2b6      	uxthmi	r6, r6
 800ab82:	e7e6      	b.n	800ab52 <_printf_i+0x182>
 800ab84:	4615      	mov	r5, r2
 800ab86:	e7bb      	b.n	800ab00 <_printf_i+0x130>
 800ab88:	682b      	ldr	r3, [r5, #0]
 800ab8a:	6826      	ldr	r6, [r4, #0]
 800ab8c:	6961      	ldr	r1, [r4, #20]
 800ab8e:	1d18      	adds	r0, r3, #4
 800ab90:	6028      	str	r0, [r5, #0]
 800ab92:	0635      	lsls	r5, r6, #24
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	d501      	bpl.n	800ab9c <_printf_i+0x1cc>
 800ab98:	6019      	str	r1, [r3, #0]
 800ab9a:	e002      	b.n	800aba2 <_printf_i+0x1d2>
 800ab9c:	0670      	lsls	r0, r6, #25
 800ab9e:	d5fb      	bpl.n	800ab98 <_printf_i+0x1c8>
 800aba0:	8019      	strh	r1, [r3, #0]
 800aba2:	2300      	movs	r3, #0
 800aba4:	6123      	str	r3, [r4, #16]
 800aba6:	4615      	mov	r5, r2
 800aba8:	e7ba      	b.n	800ab20 <_printf_i+0x150>
 800abaa:	682b      	ldr	r3, [r5, #0]
 800abac:	1d1a      	adds	r2, r3, #4
 800abae:	602a      	str	r2, [r5, #0]
 800abb0:	681d      	ldr	r5, [r3, #0]
 800abb2:	6862      	ldr	r2, [r4, #4]
 800abb4:	2100      	movs	r1, #0
 800abb6:	4628      	mov	r0, r5
 800abb8:	f7f5 fb4a 	bl	8000250 <memchr>
 800abbc:	b108      	cbz	r0, 800abc2 <_printf_i+0x1f2>
 800abbe:	1b40      	subs	r0, r0, r5
 800abc0:	6060      	str	r0, [r4, #4]
 800abc2:	6863      	ldr	r3, [r4, #4]
 800abc4:	6123      	str	r3, [r4, #16]
 800abc6:	2300      	movs	r3, #0
 800abc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800abcc:	e7a8      	b.n	800ab20 <_printf_i+0x150>
 800abce:	6923      	ldr	r3, [r4, #16]
 800abd0:	462a      	mov	r2, r5
 800abd2:	4649      	mov	r1, r9
 800abd4:	4640      	mov	r0, r8
 800abd6:	47d0      	blx	sl
 800abd8:	3001      	adds	r0, #1
 800abda:	d0ab      	beq.n	800ab34 <_printf_i+0x164>
 800abdc:	6823      	ldr	r3, [r4, #0]
 800abde:	079b      	lsls	r3, r3, #30
 800abe0:	d413      	bmi.n	800ac0a <_printf_i+0x23a>
 800abe2:	68e0      	ldr	r0, [r4, #12]
 800abe4:	9b03      	ldr	r3, [sp, #12]
 800abe6:	4298      	cmp	r0, r3
 800abe8:	bfb8      	it	lt
 800abea:	4618      	movlt	r0, r3
 800abec:	e7a4      	b.n	800ab38 <_printf_i+0x168>
 800abee:	2301      	movs	r3, #1
 800abf0:	4632      	mov	r2, r6
 800abf2:	4649      	mov	r1, r9
 800abf4:	4640      	mov	r0, r8
 800abf6:	47d0      	blx	sl
 800abf8:	3001      	adds	r0, #1
 800abfa:	d09b      	beq.n	800ab34 <_printf_i+0x164>
 800abfc:	3501      	adds	r5, #1
 800abfe:	68e3      	ldr	r3, [r4, #12]
 800ac00:	9903      	ldr	r1, [sp, #12]
 800ac02:	1a5b      	subs	r3, r3, r1
 800ac04:	42ab      	cmp	r3, r5
 800ac06:	dcf2      	bgt.n	800abee <_printf_i+0x21e>
 800ac08:	e7eb      	b.n	800abe2 <_printf_i+0x212>
 800ac0a:	2500      	movs	r5, #0
 800ac0c:	f104 0619 	add.w	r6, r4, #25
 800ac10:	e7f5      	b.n	800abfe <_printf_i+0x22e>
 800ac12:	bf00      	nop
 800ac14:	0800d749 	.word	0x0800d749
 800ac18:	0800d75a 	.word	0x0800d75a

0800ac1c <siscanf>:
 800ac1c:	b40e      	push	{r1, r2, r3}
 800ac1e:	b510      	push	{r4, lr}
 800ac20:	b09f      	sub	sp, #124	; 0x7c
 800ac22:	ac21      	add	r4, sp, #132	; 0x84
 800ac24:	f44f 7101 	mov.w	r1, #516	; 0x204
 800ac28:	f854 2b04 	ldr.w	r2, [r4], #4
 800ac2c:	9201      	str	r2, [sp, #4]
 800ac2e:	f8ad 101c 	strh.w	r1, [sp, #28]
 800ac32:	9004      	str	r0, [sp, #16]
 800ac34:	9008      	str	r0, [sp, #32]
 800ac36:	f7f5 faf3 	bl	8000220 <strlen>
 800ac3a:	4b0c      	ldr	r3, [pc, #48]	; (800ac6c <siscanf+0x50>)
 800ac3c:	9005      	str	r0, [sp, #20]
 800ac3e:	9009      	str	r0, [sp, #36]	; 0x24
 800ac40:	930d      	str	r3, [sp, #52]	; 0x34
 800ac42:	480b      	ldr	r0, [pc, #44]	; (800ac70 <siscanf+0x54>)
 800ac44:	9a01      	ldr	r2, [sp, #4]
 800ac46:	6800      	ldr	r0, [r0, #0]
 800ac48:	9403      	str	r4, [sp, #12]
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	9311      	str	r3, [sp, #68]	; 0x44
 800ac4e:	9316      	str	r3, [sp, #88]	; 0x58
 800ac50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ac54:	f8ad 301e 	strh.w	r3, [sp, #30]
 800ac58:	a904      	add	r1, sp, #16
 800ac5a:	4623      	mov	r3, r4
 800ac5c:	f000 fcc2 	bl	800b5e4 <__ssvfiscanf_r>
 800ac60:	b01f      	add	sp, #124	; 0x7c
 800ac62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac66:	b003      	add	sp, #12
 800ac68:	4770      	bx	lr
 800ac6a:	bf00      	nop
 800ac6c:	0800ac97 	.word	0x0800ac97
 800ac70:	200000c8 	.word	0x200000c8

0800ac74 <__sread>:
 800ac74:	b510      	push	{r4, lr}
 800ac76:	460c      	mov	r4, r1
 800ac78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac7c:	f000 ff7c 	bl	800bb78 <_read_r>
 800ac80:	2800      	cmp	r0, #0
 800ac82:	bfab      	itete	ge
 800ac84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ac86:	89a3      	ldrhlt	r3, [r4, #12]
 800ac88:	181b      	addge	r3, r3, r0
 800ac8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ac8e:	bfac      	ite	ge
 800ac90:	6563      	strge	r3, [r4, #84]	; 0x54
 800ac92:	81a3      	strhlt	r3, [r4, #12]
 800ac94:	bd10      	pop	{r4, pc}

0800ac96 <__seofread>:
 800ac96:	2000      	movs	r0, #0
 800ac98:	4770      	bx	lr

0800ac9a <__swrite>:
 800ac9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac9e:	461f      	mov	r7, r3
 800aca0:	898b      	ldrh	r3, [r1, #12]
 800aca2:	05db      	lsls	r3, r3, #23
 800aca4:	4605      	mov	r5, r0
 800aca6:	460c      	mov	r4, r1
 800aca8:	4616      	mov	r6, r2
 800acaa:	d505      	bpl.n	800acb8 <__swrite+0x1e>
 800acac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acb0:	2302      	movs	r3, #2
 800acb2:	2200      	movs	r2, #0
 800acb4:	f000 fb6c 	bl	800b390 <_lseek_r>
 800acb8:	89a3      	ldrh	r3, [r4, #12]
 800acba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800acbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800acc2:	81a3      	strh	r3, [r4, #12]
 800acc4:	4632      	mov	r2, r6
 800acc6:	463b      	mov	r3, r7
 800acc8:	4628      	mov	r0, r5
 800acca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800acce:	f000 b903 	b.w	800aed8 <_write_r>

0800acd2 <__sseek>:
 800acd2:	b510      	push	{r4, lr}
 800acd4:	460c      	mov	r4, r1
 800acd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acda:	f000 fb59 	bl	800b390 <_lseek_r>
 800acde:	1c43      	adds	r3, r0, #1
 800ace0:	89a3      	ldrh	r3, [r4, #12]
 800ace2:	bf15      	itete	ne
 800ace4:	6560      	strne	r0, [r4, #84]	; 0x54
 800ace6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800acea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800acee:	81a3      	strheq	r3, [r4, #12]
 800acf0:	bf18      	it	ne
 800acf2:	81a3      	strhne	r3, [r4, #12]
 800acf4:	bd10      	pop	{r4, pc}

0800acf6 <__sclose>:
 800acf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acfa:	f000 b975 	b.w	800afe8 <_close_r>

0800acfe <strcpy>:
 800acfe:	4603      	mov	r3, r0
 800ad00:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ad04:	f803 2b01 	strb.w	r2, [r3], #1
 800ad08:	2a00      	cmp	r2, #0
 800ad0a:	d1f9      	bne.n	800ad00 <strcpy+0x2>
 800ad0c:	4770      	bx	lr

0800ad0e <strncmp>:
 800ad0e:	b510      	push	{r4, lr}
 800ad10:	b17a      	cbz	r2, 800ad32 <strncmp+0x24>
 800ad12:	4603      	mov	r3, r0
 800ad14:	3901      	subs	r1, #1
 800ad16:	1884      	adds	r4, r0, r2
 800ad18:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ad1c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ad20:	4290      	cmp	r0, r2
 800ad22:	d101      	bne.n	800ad28 <strncmp+0x1a>
 800ad24:	42a3      	cmp	r3, r4
 800ad26:	d101      	bne.n	800ad2c <strncmp+0x1e>
 800ad28:	1a80      	subs	r0, r0, r2
 800ad2a:	bd10      	pop	{r4, pc}
 800ad2c:	2800      	cmp	r0, #0
 800ad2e:	d1f3      	bne.n	800ad18 <strncmp+0xa>
 800ad30:	e7fa      	b.n	800ad28 <strncmp+0x1a>
 800ad32:	4610      	mov	r0, r2
 800ad34:	e7f9      	b.n	800ad2a <strncmp+0x1c>
	...

0800ad38 <_strtoul_l.constprop.0>:
 800ad38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ad3c:	4f36      	ldr	r7, [pc, #216]	; (800ae18 <_strtoul_l.constprop.0+0xe0>)
 800ad3e:	4686      	mov	lr, r0
 800ad40:	460d      	mov	r5, r1
 800ad42:	4628      	mov	r0, r5
 800ad44:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ad48:	5de6      	ldrb	r6, [r4, r7]
 800ad4a:	f016 0608 	ands.w	r6, r6, #8
 800ad4e:	d1f8      	bne.n	800ad42 <_strtoul_l.constprop.0+0xa>
 800ad50:	2c2d      	cmp	r4, #45	; 0x2d
 800ad52:	d12f      	bne.n	800adb4 <_strtoul_l.constprop.0+0x7c>
 800ad54:	782c      	ldrb	r4, [r5, #0]
 800ad56:	2601      	movs	r6, #1
 800ad58:	1c85      	adds	r5, r0, #2
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d057      	beq.n	800ae0e <_strtoul_l.constprop.0+0xd6>
 800ad5e:	2b10      	cmp	r3, #16
 800ad60:	d109      	bne.n	800ad76 <_strtoul_l.constprop.0+0x3e>
 800ad62:	2c30      	cmp	r4, #48	; 0x30
 800ad64:	d107      	bne.n	800ad76 <_strtoul_l.constprop.0+0x3e>
 800ad66:	7828      	ldrb	r0, [r5, #0]
 800ad68:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ad6c:	2858      	cmp	r0, #88	; 0x58
 800ad6e:	d149      	bne.n	800ae04 <_strtoul_l.constprop.0+0xcc>
 800ad70:	786c      	ldrb	r4, [r5, #1]
 800ad72:	2310      	movs	r3, #16
 800ad74:	3502      	adds	r5, #2
 800ad76:	f04f 38ff 	mov.w	r8, #4294967295
 800ad7a:	2700      	movs	r7, #0
 800ad7c:	fbb8 f8f3 	udiv	r8, r8, r3
 800ad80:	fb03 f908 	mul.w	r9, r3, r8
 800ad84:	ea6f 0909 	mvn.w	r9, r9
 800ad88:	4638      	mov	r0, r7
 800ad8a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800ad8e:	f1bc 0f09 	cmp.w	ip, #9
 800ad92:	d814      	bhi.n	800adbe <_strtoul_l.constprop.0+0x86>
 800ad94:	4664      	mov	r4, ip
 800ad96:	42a3      	cmp	r3, r4
 800ad98:	dd22      	ble.n	800ade0 <_strtoul_l.constprop.0+0xa8>
 800ad9a:	2f00      	cmp	r7, #0
 800ad9c:	db1d      	blt.n	800adda <_strtoul_l.constprop.0+0xa2>
 800ad9e:	4580      	cmp	r8, r0
 800ada0:	d31b      	bcc.n	800adda <_strtoul_l.constprop.0+0xa2>
 800ada2:	d101      	bne.n	800ada8 <_strtoul_l.constprop.0+0x70>
 800ada4:	45a1      	cmp	r9, r4
 800ada6:	db18      	blt.n	800adda <_strtoul_l.constprop.0+0xa2>
 800ada8:	fb00 4003 	mla	r0, r0, r3, r4
 800adac:	2701      	movs	r7, #1
 800adae:	f815 4b01 	ldrb.w	r4, [r5], #1
 800adb2:	e7ea      	b.n	800ad8a <_strtoul_l.constprop.0+0x52>
 800adb4:	2c2b      	cmp	r4, #43	; 0x2b
 800adb6:	bf04      	itt	eq
 800adb8:	782c      	ldrbeq	r4, [r5, #0]
 800adba:	1c85      	addeq	r5, r0, #2
 800adbc:	e7cd      	b.n	800ad5a <_strtoul_l.constprop.0+0x22>
 800adbe:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800adc2:	f1bc 0f19 	cmp.w	ip, #25
 800adc6:	d801      	bhi.n	800adcc <_strtoul_l.constprop.0+0x94>
 800adc8:	3c37      	subs	r4, #55	; 0x37
 800adca:	e7e4      	b.n	800ad96 <_strtoul_l.constprop.0+0x5e>
 800adcc:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800add0:	f1bc 0f19 	cmp.w	ip, #25
 800add4:	d804      	bhi.n	800ade0 <_strtoul_l.constprop.0+0xa8>
 800add6:	3c57      	subs	r4, #87	; 0x57
 800add8:	e7dd      	b.n	800ad96 <_strtoul_l.constprop.0+0x5e>
 800adda:	f04f 37ff 	mov.w	r7, #4294967295
 800adde:	e7e6      	b.n	800adae <_strtoul_l.constprop.0+0x76>
 800ade0:	2f00      	cmp	r7, #0
 800ade2:	da07      	bge.n	800adf4 <_strtoul_l.constprop.0+0xbc>
 800ade4:	2322      	movs	r3, #34	; 0x22
 800ade6:	f8ce 3000 	str.w	r3, [lr]
 800adea:	f04f 30ff 	mov.w	r0, #4294967295
 800adee:	b932      	cbnz	r2, 800adfe <_strtoul_l.constprop.0+0xc6>
 800adf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800adf4:	b106      	cbz	r6, 800adf8 <_strtoul_l.constprop.0+0xc0>
 800adf6:	4240      	negs	r0, r0
 800adf8:	2a00      	cmp	r2, #0
 800adfa:	d0f9      	beq.n	800adf0 <_strtoul_l.constprop.0+0xb8>
 800adfc:	b107      	cbz	r7, 800ae00 <_strtoul_l.constprop.0+0xc8>
 800adfe:	1e69      	subs	r1, r5, #1
 800ae00:	6011      	str	r1, [r2, #0]
 800ae02:	e7f5      	b.n	800adf0 <_strtoul_l.constprop.0+0xb8>
 800ae04:	2430      	movs	r4, #48	; 0x30
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d1b5      	bne.n	800ad76 <_strtoul_l.constprop.0+0x3e>
 800ae0a:	2308      	movs	r3, #8
 800ae0c:	e7b3      	b.n	800ad76 <_strtoul_l.constprop.0+0x3e>
 800ae0e:	2c30      	cmp	r4, #48	; 0x30
 800ae10:	d0a9      	beq.n	800ad66 <_strtoul_l.constprop.0+0x2e>
 800ae12:	230a      	movs	r3, #10
 800ae14:	e7af      	b.n	800ad76 <_strtoul_l.constprop.0+0x3e>
 800ae16:	bf00      	nop
 800ae18:	0800d76c 	.word	0x0800d76c

0800ae1c <_strtoul_r>:
 800ae1c:	f7ff bf8c 	b.w	800ad38 <_strtoul_l.constprop.0>

0800ae20 <strtoul>:
 800ae20:	4613      	mov	r3, r2
 800ae22:	460a      	mov	r2, r1
 800ae24:	4601      	mov	r1, r0
 800ae26:	4802      	ldr	r0, [pc, #8]	; (800ae30 <strtoul+0x10>)
 800ae28:	6800      	ldr	r0, [r0, #0]
 800ae2a:	f7ff bf85 	b.w	800ad38 <_strtoul_l.constprop.0>
 800ae2e:	bf00      	nop
 800ae30:	200000c8 	.word	0x200000c8

0800ae34 <__swbuf_r>:
 800ae34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae36:	460e      	mov	r6, r1
 800ae38:	4614      	mov	r4, r2
 800ae3a:	4605      	mov	r5, r0
 800ae3c:	b118      	cbz	r0, 800ae46 <__swbuf_r+0x12>
 800ae3e:	6983      	ldr	r3, [r0, #24]
 800ae40:	b90b      	cbnz	r3, 800ae46 <__swbuf_r+0x12>
 800ae42:	f000 fa07 	bl	800b254 <__sinit>
 800ae46:	4b21      	ldr	r3, [pc, #132]	; (800aecc <__swbuf_r+0x98>)
 800ae48:	429c      	cmp	r4, r3
 800ae4a:	d12b      	bne.n	800aea4 <__swbuf_r+0x70>
 800ae4c:	686c      	ldr	r4, [r5, #4]
 800ae4e:	69a3      	ldr	r3, [r4, #24]
 800ae50:	60a3      	str	r3, [r4, #8]
 800ae52:	89a3      	ldrh	r3, [r4, #12]
 800ae54:	071a      	lsls	r2, r3, #28
 800ae56:	d52f      	bpl.n	800aeb8 <__swbuf_r+0x84>
 800ae58:	6923      	ldr	r3, [r4, #16]
 800ae5a:	b36b      	cbz	r3, 800aeb8 <__swbuf_r+0x84>
 800ae5c:	6923      	ldr	r3, [r4, #16]
 800ae5e:	6820      	ldr	r0, [r4, #0]
 800ae60:	1ac0      	subs	r0, r0, r3
 800ae62:	6963      	ldr	r3, [r4, #20]
 800ae64:	b2f6      	uxtb	r6, r6
 800ae66:	4283      	cmp	r3, r0
 800ae68:	4637      	mov	r7, r6
 800ae6a:	dc04      	bgt.n	800ae76 <__swbuf_r+0x42>
 800ae6c:	4621      	mov	r1, r4
 800ae6e:	4628      	mov	r0, r5
 800ae70:	f000 f95c 	bl	800b12c <_fflush_r>
 800ae74:	bb30      	cbnz	r0, 800aec4 <__swbuf_r+0x90>
 800ae76:	68a3      	ldr	r3, [r4, #8]
 800ae78:	3b01      	subs	r3, #1
 800ae7a:	60a3      	str	r3, [r4, #8]
 800ae7c:	6823      	ldr	r3, [r4, #0]
 800ae7e:	1c5a      	adds	r2, r3, #1
 800ae80:	6022      	str	r2, [r4, #0]
 800ae82:	701e      	strb	r6, [r3, #0]
 800ae84:	6963      	ldr	r3, [r4, #20]
 800ae86:	3001      	adds	r0, #1
 800ae88:	4283      	cmp	r3, r0
 800ae8a:	d004      	beq.n	800ae96 <__swbuf_r+0x62>
 800ae8c:	89a3      	ldrh	r3, [r4, #12]
 800ae8e:	07db      	lsls	r3, r3, #31
 800ae90:	d506      	bpl.n	800aea0 <__swbuf_r+0x6c>
 800ae92:	2e0a      	cmp	r6, #10
 800ae94:	d104      	bne.n	800aea0 <__swbuf_r+0x6c>
 800ae96:	4621      	mov	r1, r4
 800ae98:	4628      	mov	r0, r5
 800ae9a:	f000 f947 	bl	800b12c <_fflush_r>
 800ae9e:	b988      	cbnz	r0, 800aec4 <__swbuf_r+0x90>
 800aea0:	4638      	mov	r0, r7
 800aea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aea4:	4b0a      	ldr	r3, [pc, #40]	; (800aed0 <__swbuf_r+0x9c>)
 800aea6:	429c      	cmp	r4, r3
 800aea8:	d101      	bne.n	800aeae <__swbuf_r+0x7a>
 800aeaa:	68ac      	ldr	r4, [r5, #8]
 800aeac:	e7cf      	b.n	800ae4e <__swbuf_r+0x1a>
 800aeae:	4b09      	ldr	r3, [pc, #36]	; (800aed4 <__swbuf_r+0xa0>)
 800aeb0:	429c      	cmp	r4, r3
 800aeb2:	bf08      	it	eq
 800aeb4:	68ec      	ldreq	r4, [r5, #12]
 800aeb6:	e7ca      	b.n	800ae4e <__swbuf_r+0x1a>
 800aeb8:	4621      	mov	r1, r4
 800aeba:	4628      	mov	r0, r5
 800aebc:	f000 f81e 	bl	800aefc <__swsetup_r>
 800aec0:	2800      	cmp	r0, #0
 800aec2:	d0cb      	beq.n	800ae5c <__swbuf_r+0x28>
 800aec4:	f04f 37ff 	mov.w	r7, #4294967295
 800aec8:	e7ea      	b.n	800aea0 <__swbuf_r+0x6c>
 800aeca:	bf00      	nop
 800aecc:	0800d88c 	.word	0x0800d88c
 800aed0:	0800d8ac 	.word	0x0800d8ac
 800aed4:	0800d86c 	.word	0x0800d86c

0800aed8 <_write_r>:
 800aed8:	b538      	push	{r3, r4, r5, lr}
 800aeda:	4d07      	ldr	r5, [pc, #28]	; (800aef8 <_write_r+0x20>)
 800aedc:	4604      	mov	r4, r0
 800aede:	4608      	mov	r0, r1
 800aee0:	4611      	mov	r1, r2
 800aee2:	2200      	movs	r2, #0
 800aee4:	602a      	str	r2, [r5, #0]
 800aee6:	461a      	mov	r2, r3
 800aee8:	f7f8 fef1 	bl	8003cce <_write>
 800aeec:	1c43      	adds	r3, r0, #1
 800aeee:	d102      	bne.n	800aef6 <_write_r+0x1e>
 800aef0:	682b      	ldr	r3, [r5, #0]
 800aef2:	b103      	cbz	r3, 800aef6 <_write_r+0x1e>
 800aef4:	6023      	str	r3, [r4, #0]
 800aef6:	bd38      	pop	{r3, r4, r5, pc}
 800aef8:	20000e68 	.word	0x20000e68

0800aefc <__swsetup_r>:
 800aefc:	4b32      	ldr	r3, [pc, #200]	; (800afc8 <__swsetup_r+0xcc>)
 800aefe:	b570      	push	{r4, r5, r6, lr}
 800af00:	681d      	ldr	r5, [r3, #0]
 800af02:	4606      	mov	r6, r0
 800af04:	460c      	mov	r4, r1
 800af06:	b125      	cbz	r5, 800af12 <__swsetup_r+0x16>
 800af08:	69ab      	ldr	r3, [r5, #24]
 800af0a:	b913      	cbnz	r3, 800af12 <__swsetup_r+0x16>
 800af0c:	4628      	mov	r0, r5
 800af0e:	f000 f9a1 	bl	800b254 <__sinit>
 800af12:	4b2e      	ldr	r3, [pc, #184]	; (800afcc <__swsetup_r+0xd0>)
 800af14:	429c      	cmp	r4, r3
 800af16:	d10f      	bne.n	800af38 <__swsetup_r+0x3c>
 800af18:	686c      	ldr	r4, [r5, #4]
 800af1a:	89a3      	ldrh	r3, [r4, #12]
 800af1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800af20:	0719      	lsls	r1, r3, #28
 800af22:	d42c      	bmi.n	800af7e <__swsetup_r+0x82>
 800af24:	06dd      	lsls	r5, r3, #27
 800af26:	d411      	bmi.n	800af4c <__swsetup_r+0x50>
 800af28:	2309      	movs	r3, #9
 800af2a:	6033      	str	r3, [r6, #0]
 800af2c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800af30:	81a3      	strh	r3, [r4, #12]
 800af32:	f04f 30ff 	mov.w	r0, #4294967295
 800af36:	e03e      	b.n	800afb6 <__swsetup_r+0xba>
 800af38:	4b25      	ldr	r3, [pc, #148]	; (800afd0 <__swsetup_r+0xd4>)
 800af3a:	429c      	cmp	r4, r3
 800af3c:	d101      	bne.n	800af42 <__swsetup_r+0x46>
 800af3e:	68ac      	ldr	r4, [r5, #8]
 800af40:	e7eb      	b.n	800af1a <__swsetup_r+0x1e>
 800af42:	4b24      	ldr	r3, [pc, #144]	; (800afd4 <__swsetup_r+0xd8>)
 800af44:	429c      	cmp	r4, r3
 800af46:	bf08      	it	eq
 800af48:	68ec      	ldreq	r4, [r5, #12]
 800af4a:	e7e6      	b.n	800af1a <__swsetup_r+0x1e>
 800af4c:	0758      	lsls	r0, r3, #29
 800af4e:	d512      	bpl.n	800af76 <__swsetup_r+0x7a>
 800af50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af52:	b141      	cbz	r1, 800af66 <__swsetup_r+0x6a>
 800af54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af58:	4299      	cmp	r1, r3
 800af5a:	d002      	beq.n	800af62 <__swsetup_r+0x66>
 800af5c:	4630      	mov	r0, r6
 800af5e:	f7fe fd49 	bl	80099f4 <_free_r>
 800af62:	2300      	movs	r3, #0
 800af64:	6363      	str	r3, [r4, #52]	; 0x34
 800af66:	89a3      	ldrh	r3, [r4, #12]
 800af68:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800af6c:	81a3      	strh	r3, [r4, #12]
 800af6e:	2300      	movs	r3, #0
 800af70:	6063      	str	r3, [r4, #4]
 800af72:	6923      	ldr	r3, [r4, #16]
 800af74:	6023      	str	r3, [r4, #0]
 800af76:	89a3      	ldrh	r3, [r4, #12]
 800af78:	f043 0308 	orr.w	r3, r3, #8
 800af7c:	81a3      	strh	r3, [r4, #12]
 800af7e:	6923      	ldr	r3, [r4, #16]
 800af80:	b94b      	cbnz	r3, 800af96 <__swsetup_r+0x9a>
 800af82:	89a3      	ldrh	r3, [r4, #12]
 800af84:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800af88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af8c:	d003      	beq.n	800af96 <__swsetup_r+0x9a>
 800af8e:	4621      	mov	r1, r4
 800af90:	4630      	mov	r0, r6
 800af92:	f000 fa35 	bl	800b400 <__smakebuf_r>
 800af96:	89a0      	ldrh	r0, [r4, #12]
 800af98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800af9c:	f010 0301 	ands.w	r3, r0, #1
 800afa0:	d00a      	beq.n	800afb8 <__swsetup_r+0xbc>
 800afa2:	2300      	movs	r3, #0
 800afa4:	60a3      	str	r3, [r4, #8]
 800afa6:	6963      	ldr	r3, [r4, #20]
 800afa8:	425b      	negs	r3, r3
 800afaa:	61a3      	str	r3, [r4, #24]
 800afac:	6923      	ldr	r3, [r4, #16]
 800afae:	b943      	cbnz	r3, 800afc2 <__swsetup_r+0xc6>
 800afb0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800afb4:	d1ba      	bne.n	800af2c <__swsetup_r+0x30>
 800afb6:	bd70      	pop	{r4, r5, r6, pc}
 800afb8:	0781      	lsls	r1, r0, #30
 800afba:	bf58      	it	pl
 800afbc:	6963      	ldrpl	r3, [r4, #20]
 800afbe:	60a3      	str	r3, [r4, #8]
 800afc0:	e7f4      	b.n	800afac <__swsetup_r+0xb0>
 800afc2:	2000      	movs	r0, #0
 800afc4:	e7f7      	b.n	800afb6 <__swsetup_r+0xba>
 800afc6:	bf00      	nop
 800afc8:	200000c8 	.word	0x200000c8
 800afcc:	0800d88c 	.word	0x0800d88c
 800afd0:	0800d8ac 	.word	0x0800d8ac
 800afd4:	0800d86c 	.word	0x0800d86c

0800afd8 <abort>:
 800afd8:	b508      	push	{r3, lr}
 800afda:	2006      	movs	r0, #6
 800afdc:	f000 fe3e 	bl	800bc5c <raise>
 800afe0:	2001      	movs	r0, #1
 800afe2:	f7f8 fe4d 	bl	8003c80 <_exit>
	...

0800afe8 <_close_r>:
 800afe8:	b538      	push	{r3, r4, r5, lr}
 800afea:	4d06      	ldr	r5, [pc, #24]	; (800b004 <_close_r+0x1c>)
 800afec:	2300      	movs	r3, #0
 800afee:	4604      	mov	r4, r0
 800aff0:	4608      	mov	r0, r1
 800aff2:	602b      	str	r3, [r5, #0]
 800aff4:	f7f8 fe87 	bl	8003d06 <_close>
 800aff8:	1c43      	adds	r3, r0, #1
 800affa:	d102      	bne.n	800b002 <_close_r+0x1a>
 800affc:	682b      	ldr	r3, [r5, #0]
 800affe:	b103      	cbz	r3, 800b002 <_close_r+0x1a>
 800b000:	6023      	str	r3, [r4, #0]
 800b002:	bd38      	pop	{r3, r4, r5, pc}
 800b004:	20000e68 	.word	0x20000e68

0800b008 <__env_lock>:
 800b008:	4801      	ldr	r0, [pc, #4]	; (800b010 <__env_lock+0x8>)
 800b00a:	f7ff b9ad 	b.w	800a368 <__retarget_lock_acquire_recursive>
 800b00e:	bf00      	nop
 800b010:	20000e60 	.word	0x20000e60

0800b014 <__env_unlock>:
 800b014:	4801      	ldr	r0, [pc, #4]	; (800b01c <__env_unlock+0x8>)
 800b016:	f7ff b9a9 	b.w	800a36c <__retarget_lock_release_recursive>
 800b01a:	bf00      	nop
 800b01c:	20000e60 	.word	0x20000e60

0800b020 <__sflush_r>:
 800b020:	898a      	ldrh	r2, [r1, #12]
 800b022:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b026:	4605      	mov	r5, r0
 800b028:	0710      	lsls	r0, r2, #28
 800b02a:	460c      	mov	r4, r1
 800b02c:	d458      	bmi.n	800b0e0 <__sflush_r+0xc0>
 800b02e:	684b      	ldr	r3, [r1, #4]
 800b030:	2b00      	cmp	r3, #0
 800b032:	dc05      	bgt.n	800b040 <__sflush_r+0x20>
 800b034:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b036:	2b00      	cmp	r3, #0
 800b038:	dc02      	bgt.n	800b040 <__sflush_r+0x20>
 800b03a:	2000      	movs	r0, #0
 800b03c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b040:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b042:	2e00      	cmp	r6, #0
 800b044:	d0f9      	beq.n	800b03a <__sflush_r+0x1a>
 800b046:	2300      	movs	r3, #0
 800b048:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b04c:	682f      	ldr	r7, [r5, #0]
 800b04e:	602b      	str	r3, [r5, #0]
 800b050:	d032      	beq.n	800b0b8 <__sflush_r+0x98>
 800b052:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b054:	89a3      	ldrh	r3, [r4, #12]
 800b056:	075a      	lsls	r2, r3, #29
 800b058:	d505      	bpl.n	800b066 <__sflush_r+0x46>
 800b05a:	6863      	ldr	r3, [r4, #4]
 800b05c:	1ac0      	subs	r0, r0, r3
 800b05e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b060:	b10b      	cbz	r3, 800b066 <__sflush_r+0x46>
 800b062:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b064:	1ac0      	subs	r0, r0, r3
 800b066:	2300      	movs	r3, #0
 800b068:	4602      	mov	r2, r0
 800b06a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b06c:	6a21      	ldr	r1, [r4, #32]
 800b06e:	4628      	mov	r0, r5
 800b070:	47b0      	blx	r6
 800b072:	1c43      	adds	r3, r0, #1
 800b074:	89a3      	ldrh	r3, [r4, #12]
 800b076:	d106      	bne.n	800b086 <__sflush_r+0x66>
 800b078:	6829      	ldr	r1, [r5, #0]
 800b07a:	291d      	cmp	r1, #29
 800b07c:	d82c      	bhi.n	800b0d8 <__sflush_r+0xb8>
 800b07e:	4a2a      	ldr	r2, [pc, #168]	; (800b128 <__sflush_r+0x108>)
 800b080:	40ca      	lsrs	r2, r1
 800b082:	07d6      	lsls	r6, r2, #31
 800b084:	d528      	bpl.n	800b0d8 <__sflush_r+0xb8>
 800b086:	2200      	movs	r2, #0
 800b088:	6062      	str	r2, [r4, #4]
 800b08a:	04d9      	lsls	r1, r3, #19
 800b08c:	6922      	ldr	r2, [r4, #16]
 800b08e:	6022      	str	r2, [r4, #0]
 800b090:	d504      	bpl.n	800b09c <__sflush_r+0x7c>
 800b092:	1c42      	adds	r2, r0, #1
 800b094:	d101      	bne.n	800b09a <__sflush_r+0x7a>
 800b096:	682b      	ldr	r3, [r5, #0]
 800b098:	b903      	cbnz	r3, 800b09c <__sflush_r+0x7c>
 800b09a:	6560      	str	r0, [r4, #84]	; 0x54
 800b09c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b09e:	602f      	str	r7, [r5, #0]
 800b0a0:	2900      	cmp	r1, #0
 800b0a2:	d0ca      	beq.n	800b03a <__sflush_r+0x1a>
 800b0a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b0a8:	4299      	cmp	r1, r3
 800b0aa:	d002      	beq.n	800b0b2 <__sflush_r+0x92>
 800b0ac:	4628      	mov	r0, r5
 800b0ae:	f7fe fca1 	bl	80099f4 <_free_r>
 800b0b2:	2000      	movs	r0, #0
 800b0b4:	6360      	str	r0, [r4, #52]	; 0x34
 800b0b6:	e7c1      	b.n	800b03c <__sflush_r+0x1c>
 800b0b8:	6a21      	ldr	r1, [r4, #32]
 800b0ba:	2301      	movs	r3, #1
 800b0bc:	4628      	mov	r0, r5
 800b0be:	47b0      	blx	r6
 800b0c0:	1c41      	adds	r1, r0, #1
 800b0c2:	d1c7      	bne.n	800b054 <__sflush_r+0x34>
 800b0c4:	682b      	ldr	r3, [r5, #0]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d0c4      	beq.n	800b054 <__sflush_r+0x34>
 800b0ca:	2b1d      	cmp	r3, #29
 800b0cc:	d001      	beq.n	800b0d2 <__sflush_r+0xb2>
 800b0ce:	2b16      	cmp	r3, #22
 800b0d0:	d101      	bne.n	800b0d6 <__sflush_r+0xb6>
 800b0d2:	602f      	str	r7, [r5, #0]
 800b0d4:	e7b1      	b.n	800b03a <__sflush_r+0x1a>
 800b0d6:	89a3      	ldrh	r3, [r4, #12]
 800b0d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0dc:	81a3      	strh	r3, [r4, #12]
 800b0de:	e7ad      	b.n	800b03c <__sflush_r+0x1c>
 800b0e0:	690f      	ldr	r7, [r1, #16]
 800b0e2:	2f00      	cmp	r7, #0
 800b0e4:	d0a9      	beq.n	800b03a <__sflush_r+0x1a>
 800b0e6:	0793      	lsls	r3, r2, #30
 800b0e8:	680e      	ldr	r6, [r1, #0]
 800b0ea:	bf08      	it	eq
 800b0ec:	694b      	ldreq	r3, [r1, #20]
 800b0ee:	600f      	str	r7, [r1, #0]
 800b0f0:	bf18      	it	ne
 800b0f2:	2300      	movne	r3, #0
 800b0f4:	eba6 0807 	sub.w	r8, r6, r7
 800b0f8:	608b      	str	r3, [r1, #8]
 800b0fa:	f1b8 0f00 	cmp.w	r8, #0
 800b0fe:	dd9c      	ble.n	800b03a <__sflush_r+0x1a>
 800b100:	6a21      	ldr	r1, [r4, #32]
 800b102:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b104:	4643      	mov	r3, r8
 800b106:	463a      	mov	r2, r7
 800b108:	4628      	mov	r0, r5
 800b10a:	47b0      	blx	r6
 800b10c:	2800      	cmp	r0, #0
 800b10e:	dc06      	bgt.n	800b11e <__sflush_r+0xfe>
 800b110:	89a3      	ldrh	r3, [r4, #12]
 800b112:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b116:	81a3      	strh	r3, [r4, #12]
 800b118:	f04f 30ff 	mov.w	r0, #4294967295
 800b11c:	e78e      	b.n	800b03c <__sflush_r+0x1c>
 800b11e:	4407      	add	r7, r0
 800b120:	eba8 0800 	sub.w	r8, r8, r0
 800b124:	e7e9      	b.n	800b0fa <__sflush_r+0xda>
 800b126:	bf00      	nop
 800b128:	20400001 	.word	0x20400001

0800b12c <_fflush_r>:
 800b12c:	b538      	push	{r3, r4, r5, lr}
 800b12e:	690b      	ldr	r3, [r1, #16]
 800b130:	4605      	mov	r5, r0
 800b132:	460c      	mov	r4, r1
 800b134:	b913      	cbnz	r3, 800b13c <_fflush_r+0x10>
 800b136:	2500      	movs	r5, #0
 800b138:	4628      	mov	r0, r5
 800b13a:	bd38      	pop	{r3, r4, r5, pc}
 800b13c:	b118      	cbz	r0, 800b146 <_fflush_r+0x1a>
 800b13e:	6983      	ldr	r3, [r0, #24]
 800b140:	b90b      	cbnz	r3, 800b146 <_fflush_r+0x1a>
 800b142:	f000 f887 	bl	800b254 <__sinit>
 800b146:	4b14      	ldr	r3, [pc, #80]	; (800b198 <_fflush_r+0x6c>)
 800b148:	429c      	cmp	r4, r3
 800b14a:	d11b      	bne.n	800b184 <_fflush_r+0x58>
 800b14c:	686c      	ldr	r4, [r5, #4]
 800b14e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d0ef      	beq.n	800b136 <_fflush_r+0xa>
 800b156:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b158:	07d0      	lsls	r0, r2, #31
 800b15a:	d404      	bmi.n	800b166 <_fflush_r+0x3a>
 800b15c:	0599      	lsls	r1, r3, #22
 800b15e:	d402      	bmi.n	800b166 <_fflush_r+0x3a>
 800b160:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b162:	f7ff f901 	bl	800a368 <__retarget_lock_acquire_recursive>
 800b166:	4628      	mov	r0, r5
 800b168:	4621      	mov	r1, r4
 800b16a:	f7ff ff59 	bl	800b020 <__sflush_r>
 800b16e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b170:	07da      	lsls	r2, r3, #31
 800b172:	4605      	mov	r5, r0
 800b174:	d4e0      	bmi.n	800b138 <_fflush_r+0xc>
 800b176:	89a3      	ldrh	r3, [r4, #12]
 800b178:	059b      	lsls	r3, r3, #22
 800b17a:	d4dd      	bmi.n	800b138 <_fflush_r+0xc>
 800b17c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b17e:	f7ff f8f5 	bl	800a36c <__retarget_lock_release_recursive>
 800b182:	e7d9      	b.n	800b138 <_fflush_r+0xc>
 800b184:	4b05      	ldr	r3, [pc, #20]	; (800b19c <_fflush_r+0x70>)
 800b186:	429c      	cmp	r4, r3
 800b188:	d101      	bne.n	800b18e <_fflush_r+0x62>
 800b18a:	68ac      	ldr	r4, [r5, #8]
 800b18c:	e7df      	b.n	800b14e <_fflush_r+0x22>
 800b18e:	4b04      	ldr	r3, [pc, #16]	; (800b1a0 <_fflush_r+0x74>)
 800b190:	429c      	cmp	r4, r3
 800b192:	bf08      	it	eq
 800b194:	68ec      	ldreq	r4, [r5, #12]
 800b196:	e7da      	b.n	800b14e <_fflush_r+0x22>
 800b198:	0800d88c 	.word	0x0800d88c
 800b19c:	0800d8ac 	.word	0x0800d8ac
 800b1a0:	0800d86c 	.word	0x0800d86c

0800b1a4 <std>:
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	b510      	push	{r4, lr}
 800b1a8:	4604      	mov	r4, r0
 800b1aa:	e9c0 3300 	strd	r3, r3, [r0]
 800b1ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b1b2:	6083      	str	r3, [r0, #8]
 800b1b4:	8181      	strh	r1, [r0, #12]
 800b1b6:	6643      	str	r3, [r0, #100]	; 0x64
 800b1b8:	81c2      	strh	r2, [r0, #14]
 800b1ba:	6183      	str	r3, [r0, #24]
 800b1bc:	4619      	mov	r1, r3
 800b1be:	2208      	movs	r2, #8
 800b1c0:	305c      	adds	r0, #92	; 0x5c
 800b1c2:	f7fe f99d 	bl	8009500 <memset>
 800b1c6:	4b05      	ldr	r3, [pc, #20]	; (800b1dc <std+0x38>)
 800b1c8:	6263      	str	r3, [r4, #36]	; 0x24
 800b1ca:	4b05      	ldr	r3, [pc, #20]	; (800b1e0 <std+0x3c>)
 800b1cc:	62a3      	str	r3, [r4, #40]	; 0x28
 800b1ce:	4b05      	ldr	r3, [pc, #20]	; (800b1e4 <std+0x40>)
 800b1d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b1d2:	4b05      	ldr	r3, [pc, #20]	; (800b1e8 <std+0x44>)
 800b1d4:	6224      	str	r4, [r4, #32]
 800b1d6:	6323      	str	r3, [r4, #48]	; 0x30
 800b1d8:	bd10      	pop	{r4, pc}
 800b1da:	bf00      	nop
 800b1dc:	0800ac75 	.word	0x0800ac75
 800b1e0:	0800ac9b 	.word	0x0800ac9b
 800b1e4:	0800acd3 	.word	0x0800acd3
 800b1e8:	0800acf7 	.word	0x0800acf7

0800b1ec <_cleanup_r>:
 800b1ec:	4901      	ldr	r1, [pc, #4]	; (800b1f4 <_cleanup_r+0x8>)
 800b1ee:	f000 b8af 	b.w	800b350 <_fwalk_reent>
 800b1f2:	bf00      	nop
 800b1f4:	0800b12d 	.word	0x0800b12d

0800b1f8 <__sfmoreglue>:
 800b1f8:	b570      	push	{r4, r5, r6, lr}
 800b1fa:	2268      	movs	r2, #104	; 0x68
 800b1fc:	1e4d      	subs	r5, r1, #1
 800b1fe:	4355      	muls	r5, r2
 800b200:	460e      	mov	r6, r1
 800b202:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b206:	f7fe fc61 	bl	8009acc <_malloc_r>
 800b20a:	4604      	mov	r4, r0
 800b20c:	b140      	cbz	r0, 800b220 <__sfmoreglue+0x28>
 800b20e:	2100      	movs	r1, #0
 800b210:	e9c0 1600 	strd	r1, r6, [r0]
 800b214:	300c      	adds	r0, #12
 800b216:	60a0      	str	r0, [r4, #8]
 800b218:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b21c:	f7fe f970 	bl	8009500 <memset>
 800b220:	4620      	mov	r0, r4
 800b222:	bd70      	pop	{r4, r5, r6, pc}

0800b224 <__sfp_lock_acquire>:
 800b224:	4801      	ldr	r0, [pc, #4]	; (800b22c <__sfp_lock_acquire+0x8>)
 800b226:	f7ff b89f 	b.w	800a368 <__retarget_lock_acquire_recursive>
 800b22a:	bf00      	nop
 800b22c:	20000e62 	.word	0x20000e62

0800b230 <__sfp_lock_release>:
 800b230:	4801      	ldr	r0, [pc, #4]	; (800b238 <__sfp_lock_release+0x8>)
 800b232:	f7ff b89b 	b.w	800a36c <__retarget_lock_release_recursive>
 800b236:	bf00      	nop
 800b238:	20000e62 	.word	0x20000e62

0800b23c <__sinit_lock_acquire>:
 800b23c:	4801      	ldr	r0, [pc, #4]	; (800b244 <__sinit_lock_acquire+0x8>)
 800b23e:	f7ff b893 	b.w	800a368 <__retarget_lock_acquire_recursive>
 800b242:	bf00      	nop
 800b244:	20000e63 	.word	0x20000e63

0800b248 <__sinit_lock_release>:
 800b248:	4801      	ldr	r0, [pc, #4]	; (800b250 <__sinit_lock_release+0x8>)
 800b24a:	f7ff b88f 	b.w	800a36c <__retarget_lock_release_recursive>
 800b24e:	bf00      	nop
 800b250:	20000e63 	.word	0x20000e63

0800b254 <__sinit>:
 800b254:	b510      	push	{r4, lr}
 800b256:	4604      	mov	r4, r0
 800b258:	f7ff fff0 	bl	800b23c <__sinit_lock_acquire>
 800b25c:	69a3      	ldr	r3, [r4, #24]
 800b25e:	b11b      	cbz	r3, 800b268 <__sinit+0x14>
 800b260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b264:	f7ff bff0 	b.w	800b248 <__sinit_lock_release>
 800b268:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b26c:	6523      	str	r3, [r4, #80]	; 0x50
 800b26e:	4b13      	ldr	r3, [pc, #76]	; (800b2bc <__sinit+0x68>)
 800b270:	4a13      	ldr	r2, [pc, #76]	; (800b2c0 <__sinit+0x6c>)
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	62a2      	str	r2, [r4, #40]	; 0x28
 800b276:	42a3      	cmp	r3, r4
 800b278:	bf04      	itt	eq
 800b27a:	2301      	moveq	r3, #1
 800b27c:	61a3      	streq	r3, [r4, #24]
 800b27e:	4620      	mov	r0, r4
 800b280:	f000 f820 	bl	800b2c4 <__sfp>
 800b284:	6060      	str	r0, [r4, #4]
 800b286:	4620      	mov	r0, r4
 800b288:	f000 f81c 	bl	800b2c4 <__sfp>
 800b28c:	60a0      	str	r0, [r4, #8]
 800b28e:	4620      	mov	r0, r4
 800b290:	f000 f818 	bl	800b2c4 <__sfp>
 800b294:	2200      	movs	r2, #0
 800b296:	60e0      	str	r0, [r4, #12]
 800b298:	2104      	movs	r1, #4
 800b29a:	6860      	ldr	r0, [r4, #4]
 800b29c:	f7ff ff82 	bl	800b1a4 <std>
 800b2a0:	68a0      	ldr	r0, [r4, #8]
 800b2a2:	2201      	movs	r2, #1
 800b2a4:	2109      	movs	r1, #9
 800b2a6:	f7ff ff7d 	bl	800b1a4 <std>
 800b2aa:	68e0      	ldr	r0, [r4, #12]
 800b2ac:	2202      	movs	r2, #2
 800b2ae:	2112      	movs	r1, #18
 800b2b0:	f7ff ff78 	bl	800b1a4 <std>
 800b2b4:	2301      	movs	r3, #1
 800b2b6:	61a3      	str	r3, [r4, #24]
 800b2b8:	e7d2      	b.n	800b260 <__sinit+0xc>
 800b2ba:	bf00      	nop
 800b2bc:	0800d588 	.word	0x0800d588
 800b2c0:	0800b1ed 	.word	0x0800b1ed

0800b2c4 <__sfp>:
 800b2c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2c6:	4607      	mov	r7, r0
 800b2c8:	f7ff ffac 	bl	800b224 <__sfp_lock_acquire>
 800b2cc:	4b1e      	ldr	r3, [pc, #120]	; (800b348 <__sfp+0x84>)
 800b2ce:	681e      	ldr	r6, [r3, #0]
 800b2d0:	69b3      	ldr	r3, [r6, #24]
 800b2d2:	b913      	cbnz	r3, 800b2da <__sfp+0x16>
 800b2d4:	4630      	mov	r0, r6
 800b2d6:	f7ff ffbd 	bl	800b254 <__sinit>
 800b2da:	3648      	adds	r6, #72	; 0x48
 800b2dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b2e0:	3b01      	subs	r3, #1
 800b2e2:	d503      	bpl.n	800b2ec <__sfp+0x28>
 800b2e4:	6833      	ldr	r3, [r6, #0]
 800b2e6:	b30b      	cbz	r3, 800b32c <__sfp+0x68>
 800b2e8:	6836      	ldr	r6, [r6, #0]
 800b2ea:	e7f7      	b.n	800b2dc <__sfp+0x18>
 800b2ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b2f0:	b9d5      	cbnz	r5, 800b328 <__sfp+0x64>
 800b2f2:	4b16      	ldr	r3, [pc, #88]	; (800b34c <__sfp+0x88>)
 800b2f4:	60e3      	str	r3, [r4, #12]
 800b2f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b2fa:	6665      	str	r5, [r4, #100]	; 0x64
 800b2fc:	f7ff f832 	bl	800a364 <__retarget_lock_init_recursive>
 800b300:	f7ff ff96 	bl	800b230 <__sfp_lock_release>
 800b304:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b308:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b30c:	6025      	str	r5, [r4, #0]
 800b30e:	61a5      	str	r5, [r4, #24]
 800b310:	2208      	movs	r2, #8
 800b312:	4629      	mov	r1, r5
 800b314:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b318:	f7fe f8f2 	bl	8009500 <memset>
 800b31c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b320:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b324:	4620      	mov	r0, r4
 800b326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b328:	3468      	adds	r4, #104	; 0x68
 800b32a:	e7d9      	b.n	800b2e0 <__sfp+0x1c>
 800b32c:	2104      	movs	r1, #4
 800b32e:	4638      	mov	r0, r7
 800b330:	f7ff ff62 	bl	800b1f8 <__sfmoreglue>
 800b334:	4604      	mov	r4, r0
 800b336:	6030      	str	r0, [r6, #0]
 800b338:	2800      	cmp	r0, #0
 800b33a:	d1d5      	bne.n	800b2e8 <__sfp+0x24>
 800b33c:	f7ff ff78 	bl	800b230 <__sfp_lock_release>
 800b340:	230c      	movs	r3, #12
 800b342:	603b      	str	r3, [r7, #0]
 800b344:	e7ee      	b.n	800b324 <__sfp+0x60>
 800b346:	bf00      	nop
 800b348:	0800d588 	.word	0x0800d588
 800b34c:	ffff0001 	.word	0xffff0001

0800b350 <_fwalk_reent>:
 800b350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b354:	4606      	mov	r6, r0
 800b356:	4688      	mov	r8, r1
 800b358:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b35c:	2700      	movs	r7, #0
 800b35e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b362:	f1b9 0901 	subs.w	r9, r9, #1
 800b366:	d505      	bpl.n	800b374 <_fwalk_reent+0x24>
 800b368:	6824      	ldr	r4, [r4, #0]
 800b36a:	2c00      	cmp	r4, #0
 800b36c:	d1f7      	bne.n	800b35e <_fwalk_reent+0xe>
 800b36e:	4638      	mov	r0, r7
 800b370:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b374:	89ab      	ldrh	r3, [r5, #12]
 800b376:	2b01      	cmp	r3, #1
 800b378:	d907      	bls.n	800b38a <_fwalk_reent+0x3a>
 800b37a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b37e:	3301      	adds	r3, #1
 800b380:	d003      	beq.n	800b38a <_fwalk_reent+0x3a>
 800b382:	4629      	mov	r1, r5
 800b384:	4630      	mov	r0, r6
 800b386:	47c0      	blx	r8
 800b388:	4307      	orrs	r7, r0
 800b38a:	3568      	adds	r5, #104	; 0x68
 800b38c:	e7e9      	b.n	800b362 <_fwalk_reent+0x12>
	...

0800b390 <_lseek_r>:
 800b390:	b538      	push	{r3, r4, r5, lr}
 800b392:	4d07      	ldr	r5, [pc, #28]	; (800b3b0 <_lseek_r+0x20>)
 800b394:	4604      	mov	r4, r0
 800b396:	4608      	mov	r0, r1
 800b398:	4611      	mov	r1, r2
 800b39a:	2200      	movs	r2, #0
 800b39c:	602a      	str	r2, [r5, #0]
 800b39e:	461a      	mov	r2, r3
 800b3a0:	f7f8 fcd8 	bl	8003d54 <_lseek>
 800b3a4:	1c43      	adds	r3, r0, #1
 800b3a6:	d102      	bne.n	800b3ae <_lseek_r+0x1e>
 800b3a8:	682b      	ldr	r3, [r5, #0]
 800b3aa:	b103      	cbz	r3, 800b3ae <_lseek_r+0x1e>
 800b3ac:	6023      	str	r3, [r4, #0]
 800b3ae:	bd38      	pop	{r3, r4, r5, pc}
 800b3b0:	20000e68 	.word	0x20000e68

0800b3b4 <__swhatbuf_r>:
 800b3b4:	b570      	push	{r4, r5, r6, lr}
 800b3b6:	460e      	mov	r6, r1
 800b3b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3bc:	2900      	cmp	r1, #0
 800b3be:	b096      	sub	sp, #88	; 0x58
 800b3c0:	4614      	mov	r4, r2
 800b3c2:	461d      	mov	r5, r3
 800b3c4:	da08      	bge.n	800b3d8 <__swhatbuf_r+0x24>
 800b3c6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	602a      	str	r2, [r5, #0]
 800b3ce:	061a      	lsls	r2, r3, #24
 800b3d0:	d410      	bmi.n	800b3f4 <__swhatbuf_r+0x40>
 800b3d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3d6:	e00e      	b.n	800b3f6 <__swhatbuf_r+0x42>
 800b3d8:	466a      	mov	r2, sp
 800b3da:	f000 fd19 	bl	800be10 <_fstat_r>
 800b3de:	2800      	cmp	r0, #0
 800b3e0:	dbf1      	blt.n	800b3c6 <__swhatbuf_r+0x12>
 800b3e2:	9a01      	ldr	r2, [sp, #4]
 800b3e4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b3e8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b3ec:	425a      	negs	r2, r3
 800b3ee:	415a      	adcs	r2, r3
 800b3f0:	602a      	str	r2, [r5, #0]
 800b3f2:	e7ee      	b.n	800b3d2 <__swhatbuf_r+0x1e>
 800b3f4:	2340      	movs	r3, #64	; 0x40
 800b3f6:	2000      	movs	r0, #0
 800b3f8:	6023      	str	r3, [r4, #0]
 800b3fa:	b016      	add	sp, #88	; 0x58
 800b3fc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b400 <__smakebuf_r>:
 800b400:	898b      	ldrh	r3, [r1, #12]
 800b402:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b404:	079d      	lsls	r5, r3, #30
 800b406:	4606      	mov	r6, r0
 800b408:	460c      	mov	r4, r1
 800b40a:	d507      	bpl.n	800b41c <__smakebuf_r+0x1c>
 800b40c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b410:	6023      	str	r3, [r4, #0]
 800b412:	6123      	str	r3, [r4, #16]
 800b414:	2301      	movs	r3, #1
 800b416:	6163      	str	r3, [r4, #20]
 800b418:	b002      	add	sp, #8
 800b41a:	bd70      	pop	{r4, r5, r6, pc}
 800b41c:	ab01      	add	r3, sp, #4
 800b41e:	466a      	mov	r2, sp
 800b420:	f7ff ffc8 	bl	800b3b4 <__swhatbuf_r>
 800b424:	9900      	ldr	r1, [sp, #0]
 800b426:	4605      	mov	r5, r0
 800b428:	4630      	mov	r0, r6
 800b42a:	f7fe fb4f 	bl	8009acc <_malloc_r>
 800b42e:	b948      	cbnz	r0, 800b444 <__smakebuf_r+0x44>
 800b430:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b434:	059a      	lsls	r2, r3, #22
 800b436:	d4ef      	bmi.n	800b418 <__smakebuf_r+0x18>
 800b438:	f023 0303 	bic.w	r3, r3, #3
 800b43c:	f043 0302 	orr.w	r3, r3, #2
 800b440:	81a3      	strh	r3, [r4, #12]
 800b442:	e7e3      	b.n	800b40c <__smakebuf_r+0xc>
 800b444:	4b0d      	ldr	r3, [pc, #52]	; (800b47c <__smakebuf_r+0x7c>)
 800b446:	62b3      	str	r3, [r6, #40]	; 0x28
 800b448:	89a3      	ldrh	r3, [r4, #12]
 800b44a:	6020      	str	r0, [r4, #0]
 800b44c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b450:	81a3      	strh	r3, [r4, #12]
 800b452:	9b00      	ldr	r3, [sp, #0]
 800b454:	6163      	str	r3, [r4, #20]
 800b456:	9b01      	ldr	r3, [sp, #4]
 800b458:	6120      	str	r0, [r4, #16]
 800b45a:	b15b      	cbz	r3, 800b474 <__smakebuf_r+0x74>
 800b45c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b460:	4630      	mov	r0, r6
 800b462:	f000 fce7 	bl	800be34 <_isatty_r>
 800b466:	b128      	cbz	r0, 800b474 <__smakebuf_r+0x74>
 800b468:	89a3      	ldrh	r3, [r4, #12]
 800b46a:	f023 0303 	bic.w	r3, r3, #3
 800b46e:	f043 0301 	orr.w	r3, r3, #1
 800b472:	81a3      	strh	r3, [r4, #12]
 800b474:	89a0      	ldrh	r0, [r4, #12]
 800b476:	4305      	orrs	r5, r0
 800b478:	81a5      	strh	r5, [r4, #12]
 800b47a:	e7cd      	b.n	800b418 <__smakebuf_r+0x18>
 800b47c:	0800b1ed 	.word	0x0800b1ed

0800b480 <memcpy>:
 800b480:	440a      	add	r2, r1
 800b482:	4291      	cmp	r1, r2
 800b484:	f100 33ff 	add.w	r3, r0, #4294967295
 800b488:	d100      	bne.n	800b48c <memcpy+0xc>
 800b48a:	4770      	bx	lr
 800b48c:	b510      	push	{r4, lr}
 800b48e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b492:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b496:	4291      	cmp	r1, r2
 800b498:	d1f9      	bne.n	800b48e <memcpy+0xe>
 800b49a:	bd10      	pop	{r4, pc}

0800b49c <memmove>:
 800b49c:	4288      	cmp	r0, r1
 800b49e:	b510      	push	{r4, lr}
 800b4a0:	eb01 0402 	add.w	r4, r1, r2
 800b4a4:	d902      	bls.n	800b4ac <memmove+0x10>
 800b4a6:	4284      	cmp	r4, r0
 800b4a8:	4623      	mov	r3, r4
 800b4aa:	d807      	bhi.n	800b4bc <memmove+0x20>
 800b4ac:	1e43      	subs	r3, r0, #1
 800b4ae:	42a1      	cmp	r1, r4
 800b4b0:	d008      	beq.n	800b4c4 <memmove+0x28>
 800b4b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b4b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b4ba:	e7f8      	b.n	800b4ae <memmove+0x12>
 800b4bc:	4402      	add	r2, r0
 800b4be:	4601      	mov	r1, r0
 800b4c0:	428a      	cmp	r2, r1
 800b4c2:	d100      	bne.n	800b4c6 <memmove+0x2a>
 800b4c4:	bd10      	pop	{r4, pc}
 800b4c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b4ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b4ce:	e7f7      	b.n	800b4c0 <memmove+0x24>

0800b4d0 <_realloc_r>:
 800b4d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4d4:	4680      	mov	r8, r0
 800b4d6:	4614      	mov	r4, r2
 800b4d8:	460e      	mov	r6, r1
 800b4da:	b921      	cbnz	r1, 800b4e6 <_realloc_r+0x16>
 800b4dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b4e0:	4611      	mov	r1, r2
 800b4e2:	f7fe baf3 	b.w	8009acc <_malloc_r>
 800b4e6:	b92a      	cbnz	r2, 800b4f4 <_realloc_r+0x24>
 800b4e8:	f7fe fa84 	bl	80099f4 <_free_r>
 800b4ec:	4625      	mov	r5, r4
 800b4ee:	4628      	mov	r0, r5
 800b4f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4f4:	f000 fcae 	bl	800be54 <_malloc_usable_size_r>
 800b4f8:	4284      	cmp	r4, r0
 800b4fa:	4607      	mov	r7, r0
 800b4fc:	d802      	bhi.n	800b504 <_realloc_r+0x34>
 800b4fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b502:	d812      	bhi.n	800b52a <_realloc_r+0x5a>
 800b504:	4621      	mov	r1, r4
 800b506:	4640      	mov	r0, r8
 800b508:	f7fe fae0 	bl	8009acc <_malloc_r>
 800b50c:	4605      	mov	r5, r0
 800b50e:	2800      	cmp	r0, #0
 800b510:	d0ed      	beq.n	800b4ee <_realloc_r+0x1e>
 800b512:	42bc      	cmp	r4, r7
 800b514:	4622      	mov	r2, r4
 800b516:	4631      	mov	r1, r6
 800b518:	bf28      	it	cs
 800b51a:	463a      	movcs	r2, r7
 800b51c:	f7ff ffb0 	bl	800b480 <memcpy>
 800b520:	4631      	mov	r1, r6
 800b522:	4640      	mov	r0, r8
 800b524:	f7fe fa66 	bl	80099f4 <_free_r>
 800b528:	e7e1      	b.n	800b4ee <_realloc_r+0x1e>
 800b52a:	4635      	mov	r5, r6
 800b52c:	e7df      	b.n	800b4ee <_realloc_r+0x1e>

0800b52e <_sungetc_r>:
 800b52e:	b538      	push	{r3, r4, r5, lr}
 800b530:	1c4b      	adds	r3, r1, #1
 800b532:	4614      	mov	r4, r2
 800b534:	d103      	bne.n	800b53e <_sungetc_r+0x10>
 800b536:	f04f 35ff 	mov.w	r5, #4294967295
 800b53a:	4628      	mov	r0, r5
 800b53c:	bd38      	pop	{r3, r4, r5, pc}
 800b53e:	8993      	ldrh	r3, [r2, #12]
 800b540:	f023 0320 	bic.w	r3, r3, #32
 800b544:	8193      	strh	r3, [r2, #12]
 800b546:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b548:	6852      	ldr	r2, [r2, #4]
 800b54a:	b2cd      	uxtb	r5, r1
 800b54c:	b18b      	cbz	r3, 800b572 <_sungetc_r+0x44>
 800b54e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b550:	4293      	cmp	r3, r2
 800b552:	dd08      	ble.n	800b566 <_sungetc_r+0x38>
 800b554:	6823      	ldr	r3, [r4, #0]
 800b556:	1e5a      	subs	r2, r3, #1
 800b558:	6022      	str	r2, [r4, #0]
 800b55a:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b55e:	6863      	ldr	r3, [r4, #4]
 800b560:	3301      	adds	r3, #1
 800b562:	6063      	str	r3, [r4, #4]
 800b564:	e7e9      	b.n	800b53a <_sungetc_r+0xc>
 800b566:	4621      	mov	r1, r4
 800b568:	f000 fc18 	bl	800bd9c <__submore>
 800b56c:	2800      	cmp	r0, #0
 800b56e:	d0f1      	beq.n	800b554 <_sungetc_r+0x26>
 800b570:	e7e1      	b.n	800b536 <_sungetc_r+0x8>
 800b572:	6921      	ldr	r1, [r4, #16]
 800b574:	6823      	ldr	r3, [r4, #0]
 800b576:	b151      	cbz	r1, 800b58e <_sungetc_r+0x60>
 800b578:	4299      	cmp	r1, r3
 800b57a:	d208      	bcs.n	800b58e <_sungetc_r+0x60>
 800b57c:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800b580:	42a9      	cmp	r1, r5
 800b582:	d104      	bne.n	800b58e <_sungetc_r+0x60>
 800b584:	3b01      	subs	r3, #1
 800b586:	3201      	adds	r2, #1
 800b588:	6023      	str	r3, [r4, #0]
 800b58a:	6062      	str	r2, [r4, #4]
 800b58c:	e7d5      	b.n	800b53a <_sungetc_r+0xc>
 800b58e:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800b592:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b596:	6363      	str	r3, [r4, #52]	; 0x34
 800b598:	2303      	movs	r3, #3
 800b59a:	63a3      	str	r3, [r4, #56]	; 0x38
 800b59c:	4623      	mov	r3, r4
 800b59e:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b5a2:	6023      	str	r3, [r4, #0]
 800b5a4:	2301      	movs	r3, #1
 800b5a6:	e7dc      	b.n	800b562 <_sungetc_r+0x34>

0800b5a8 <__ssrefill_r>:
 800b5a8:	b510      	push	{r4, lr}
 800b5aa:	460c      	mov	r4, r1
 800b5ac:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b5ae:	b169      	cbz	r1, 800b5cc <__ssrefill_r+0x24>
 800b5b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b5b4:	4299      	cmp	r1, r3
 800b5b6:	d001      	beq.n	800b5bc <__ssrefill_r+0x14>
 800b5b8:	f7fe fa1c 	bl	80099f4 <_free_r>
 800b5bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b5be:	6063      	str	r3, [r4, #4]
 800b5c0:	2000      	movs	r0, #0
 800b5c2:	6360      	str	r0, [r4, #52]	; 0x34
 800b5c4:	b113      	cbz	r3, 800b5cc <__ssrefill_r+0x24>
 800b5c6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b5c8:	6023      	str	r3, [r4, #0]
 800b5ca:	bd10      	pop	{r4, pc}
 800b5cc:	6923      	ldr	r3, [r4, #16]
 800b5ce:	6023      	str	r3, [r4, #0]
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	6063      	str	r3, [r4, #4]
 800b5d4:	89a3      	ldrh	r3, [r4, #12]
 800b5d6:	f043 0320 	orr.w	r3, r3, #32
 800b5da:	81a3      	strh	r3, [r4, #12]
 800b5dc:	f04f 30ff 	mov.w	r0, #4294967295
 800b5e0:	e7f3      	b.n	800b5ca <__ssrefill_r+0x22>
	...

0800b5e4 <__ssvfiscanf_r>:
 800b5e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5e8:	460c      	mov	r4, r1
 800b5ea:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800b5ee:	2100      	movs	r1, #0
 800b5f0:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800b5f4:	49a6      	ldr	r1, [pc, #664]	; (800b890 <__ssvfiscanf_r+0x2ac>)
 800b5f6:	91a0      	str	r1, [sp, #640]	; 0x280
 800b5f8:	f10d 0804 	add.w	r8, sp, #4
 800b5fc:	49a5      	ldr	r1, [pc, #660]	; (800b894 <__ssvfiscanf_r+0x2b0>)
 800b5fe:	4fa6      	ldr	r7, [pc, #664]	; (800b898 <__ssvfiscanf_r+0x2b4>)
 800b600:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800b89c <__ssvfiscanf_r+0x2b8>
 800b604:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800b608:	4606      	mov	r6, r0
 800b60a:	91a1      	str	r1, [sp, #644]	; 0x284
 800b60c:	9300      	str	r3, [sp, #0]
 800b60e:	7813      	ldrb	r3, [r2, #0]
 800b610:	2b00      	cmp	r3, #0
 800b612:	f000 815a 	beq.w	800b8ca <__ssvfiscanf_r+0x2e6>
 800b616:	5dd9      	ldrb	r1, [r3, r7]
 800b618:	f011 0108 	ands.w	r1, r1, #8
 800b61c:	f102 0501 	add.w	r5, r2, #1
 800b620:	d019      	beq.n	800b656 <__ssvfiscanf_r+0x72>
 800b622:	6863      	ldr	r3, [r4, #4]
 800b624:	2b00      	cmp	r3, #0
 800b626:	dd0f      	ble.n	800b648 <__ssvfiscanf_r+0x64>
 800b628:	6823      	ldr	r3, [r4, #0]
 800b62a:	781a      	ldrb	r2, [r3, #0]
 800b62c:	5cba      	ldrb	r2, [r7, r2]
 800b62e:	0712      	lsls	r2, r2, #28
 800b630:	d401      	bmi.n	800b636 <__ssvfiscanf_r+0x52>
 800b632:	462a      	mov	r2, r5
 800b634:	e7eb      	b.n	800b60e <__ssvfiscanf_r+0x2a>
 800b636:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b638:	3201      	adds	r2, #1
 800b63a:	9245      	str	r2, [sp, #276]	; 0x114
 800b63c:	6862      	ldr	r2, [r4, #4]
 800b63e:	3301      	adds	r3, #1
 800b640:	3a01      	subs	r2, #1
 800b642:	6062      	str	r2, [r4, #4]
 800b644:	6023      	str	r3, [r4, #0]
 800b646:	e7ec      	b.n	800b622 <__ssvfiscanf_r+0x3e>
 800b648:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b64a:	4621      	mov	r1, r4
 800b64c:	4630      	mov	r0, r6
 800b64e:	4798      	blx	r3
 800b650:	2800      	cmp	r0, #0
 800b652:	d0e9      	beq.n	800b628 <__ssvfiscanf_r+0x44>
 800b654:	e7ed      	b.n	800b632 <__ssvfiscanf_r+0x4e>
 800b656:	2b25      	cmp	r3, #37	; 0x25
 800b658:	d012      	beq.n	800b680 <__ssvfiscanf_r+0x9c>
 800b65a:	469a      	mov	sl, r3
 800b65c:	6863      	ldr	r3, [r4, #4]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	f340 8091 	ble.w	800b786 <__ssvfiscanf_r+0x1a2>
 800b664:	6822      	ldr	r2, [r4, #0]
 800b666:	7813      	ldrb	r3, [r2, #0]
 800b668:	4553      	cmp	r3, sl
 800b66a:	f040 812e 	bne.w	800b8ca <__ssvfiscanf_r+0x2e6>
 800b66e:	6863      	ldr	r3, [r4, #4]
 800b670:	3b01      	subs	r3, #1
 800b672:	6063      	str	r3, [r4, #4]
 800b674:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800b676:	3201      	adds	r2, #1
 800b678:	3301      	adds	r3, #1
 800b67a:	6022      	str	r2, [r4, #0]
 800b67c:	9345      	str	r3, [sp, #276]	; 0x114
 800b67e:	e7d8      	b.n	800b632 <__ssvfiscanf_r+0x4e>
 800b680:	9141      	str	r1, [sp, #260]	; 0x104
 800b682:	9143      	str	r1, [sp, #268]	; 0x10c
 800b684:	7853      	ldrb	r3, [r2, #1]
 800b686:	2b2a      	cmp	r3, #42	; 0x2a
 800b688:	bf02      	ittt	eq
 800b68a:	2310      	moveq	r3, #16
 800b68c:	1c95      	addeq	r5, r2, #2
 800b68e:	9341      	streq	r3, [sp, #260]	; 0x104
 800b690:	220a      	movs	r2, #10
 800b692:	46aa      	mov	sl, r5
 800b694:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800b698:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800b69c:	2b09      	cmp	r3, #9
 800b69e:	d91d      	bls.n	800b6dc <__ssvfiscanf_r+0xf8>
 800b6a0:	487e      	ldr	r0, [pc, #504]	; (800b89c <__ssvfiscanf_r+0x2b8>)
 800b6a2:	2203      	movs	r2, #3
 800b6a4:	f7f4 fdd4 	bl	8000250 <memchr>
 800b6a8:	b140      	cbz	r0, 800b6bc <__ssvfiscanf_r+0xd8>
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	eba0 0009 	sub.w	r0, r0, r9
 800b6b0:	fa03 f000 	lsl.w	r0, r3, r0
 800b6b4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b6b6:	4318      	orrs	r0, r3
 800b6b8:	9041      	str	r0, [sp, #260]	; 0x104
 800b6ba:	4655      	mov	r5, sl
 800b6bc:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b6c0:	2b78      	cmp	r3, #120	; 0x78
 800b6c2:	d806      	bhi.n	800b6d2 <__ssvfiscanf_r+0xee>
 800b6c4:	2b57      	cmp	r3, #87	; 0x57
 800b6c6:	d810      	bhi.n	800b6ea <__ssvfiscanf_r+0x106>
 800b6c8:	2b25      	cmp	r3, #37	; 0x25
 800b6ca:	d0c6      	beq.n	800b65a <__ssvfiscanf_r+0x76>
 800b6cc:	d856      	bhi.n	800b77c <__ssvfiscanf_r+0x198>
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d064      	beq.n	800b79c <__ssvfiscanf_r+0x1b8>
 800b6d2:	2303      	movs	r3, #3
 800b6d4:	9347      	str	r3, [sp, #284]	; 0x11c
 800b6d6:	230a      	movs	r3, #10
 800b6d8:	9342      	str	r3, [sp, #264]	; 0x108
 800b6da:	e071      	b.n	800b7c0 <__ssvfiscanf_r+0x1dc>
 800b6dc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800b6de:	fb02 1103 	mla	r1, r2, r3, r1
 800b6e2:	3930      	subs	r1, #48	; 0x30
 800b6e4:	9143      	str	r1, [sp, #268]	; 0x10c
 800b6e6:	4655      	mov	r5, sl
 800b6e8:	e7d3      	b.n	800b692 <__ssvfiscanf_r+0xae>
 800b6ea:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800b6ee:	2a20      	cmp	r2, #32
 800b6f0:	d8ef      	bhi.n	800b6d2 <__ssvfiscanf_r+0xee>
 800b6f2:	a101      	add	r1, pc, #4	; (adr r1, 800b6f8 <__ssvfiscanf_r+0x114>)
 800b6f4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b6f8:	0800b7ab 	.word	0x0800b7ab
 800b6fc:	0800b6d3 	.word	0x0800b6d3
 800b700:	0800b6d3 	.word	0x0800b6d3
 800b704:	0800b809 	.word	0x0800b809
 800b708:	0800b6d3 	.word	0x0800b6d3
 800b70c:	0800b6d3 	.word	0x0800b6d3
 800b710:	0800b6d3 	.word	0x0800b6d3
 800b714:	0800b6d3 	.word	0x0800b6d3
 800b718:	0800b6d3 	.word	0x0800b6d3
 800b71c:	0800b6d3 	.word	0x0800b6d3
 800b720:	0800b6d3 	.word	0x0800b6d3
 800b724:	0800b81f 	.word	0x0800b81f
 800b728:	0800b7f5 	.word	0x0800b7f5
 800b72c:	0800b783 	.word	0x0800b783
 800b730:	0800b783 	.word	0x0800b783
 800b734:	0800b783 	.word	0x0800b783
 800b738:	0800b6d3 	.word	0x0800b6d3
 800b73c:	0800b7f9 	.word	0x0800b7f9
 800b740:	0800b6d3 	.word	0x0800b6d3
 800b744:	0800b6d3 	.word	0x0800b6d3
 800b748:	0800b6d3 	.word	0x0800b6d3
 800b74c:	0800b6d3 	.word	0x0800b6d3
 800b750:	0800b82f 	.word	0x0800b82f
 800b754:	0800b801 	.word	0x0800b801
 800b758:	0800b7a3 	.word	0x0800b7a3
 800b75c:	0800b6d3 	.word	0x0800b6d3
 800b760:	0800b6d3 	.word	0x0800b6d3
 800b764:	0800b82b 	.word	0x0800b82b
 800b768:	0800b6d3 	.word	0x0800b6d3
 800b76c:	0800b7f5 	.word	0x0800b7f5
 800b770:	0800b6d3 	.word	0x0800b6d3
 800b774:	0800b6d3 	.word	0x0800b6d3
 800b778:	0800b7ab 	.word	0x0800b7ab
 800b77c:	3b45      	subs	r3, #69	; 0x45
 800b77e:	2b02      	cmp	r3, #2
 800b780:	d8a7      	bhi.n	800b6d2 <__ssvfiscanf_r+0xee>
 800b782:	2305      	movs	r3, #5
 800b784:	e01b      	b.n	800b7be <__ssvfiscanf_r+0x1da>
 800b786:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b788:	4621      	mov	r1, r4
 800b78a:	4630      	mov	r0, r6
 800b78c:	4798      	blx	r3
 800b78e:	2800      	cmp	r0, #0
 800b790:	f43f af68 	beq.w	800b664 <__ssvfiscanf_r+0x80>
 800b794:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b796:	2800      	cmp	r0, #0
 800b798:	f040 808d 	bne.w	800b8b6 <__ssvfiscanf_r+0x2d2>
 800b79c:	f04f 30ff 	mov.w	r0, #4294967295
 800b7a0:	e08f      	b.n	800b8c2 <__ssvfiscanf_r+0x2de>
 800b7a2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b7a4:	f042 0220 	orr.w	r2, r2, #32
 800b7a8:	9241      	str	r2, [sp, #260]	; 0x104
 800b7aa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b7ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b7b0:	9241      	str	r2, [sp, #260]	; 0x104
 800b7b2:	2210      	movs	r2, #16
 800b7b4:	2b6f      	cmp	r3, #111	; 0x6f
 800b7b6:	9242      	str	r2, [sp, #264]	; 0x108
 800b7b8:	bf34      	ite	cc
 800b7ba:	2303      	movcc	r3, #3
 800b7bc:	2304      	movcs	r3, #4
 800b7be:	9347      	str	r3, [sp, #284]	; 0x11c
 800b7c0:	6863      	ldr	r3, [r4, #4]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	dd42      	ble.n	800b84c <__ssvfiscanf_r+0x268>
 800b7c6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b7c8:	0659      	lsls	r1, r3, #25
 800b7ca:	d404      	bmi.n	800b7d6 <__ssvfiscanf_r+0x1f2>
 800b7cc:	6823      	ldr	r3, [r4, #0]
 800b7ce:	781a      	ldrb	r2, [r3, #0]
 800b7d0:	5cba      	ldrb	r2, [r7, r2]
 800b7d2:	0712      	lsls	r2, r2, #28
 800b7d4:	d441      	bmi.n	800b85a <__ssvfiscanf_r+0x276>
 800b7d6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800b7d8:	2b02      	cmp	r3, #2
 800b7da:	dc50      	bgt.n	800b87e <__ssvfiscanf_r+0x29a>
 800b7dc:	466b      	mov	r3, sp
 800b7de:	4622      	mov	r2, r4
 800b7e0:	a941      	add	r1, sp, #260	; 0x104
 800b7e2:	4630      	mov	r0, r6
 800b7e4:	f000 f876 	bl	800b8d4 <_scanf_chars>
 800b7e8:	2801      	cmp	r0, #1
 800b7ea:	d06e      	beq.n	800b8ca <__ssvfiscanf_r+0x2e6>
 800b7ec:	2802      	cmp	r0, #2
 800b7ee:	f47f af20 	bne.w	800b632 <__ssvfiscanf_r+0x4e>
 800b7f2:	e7cf      	b.n	800b794 <__ssvfiscanf_r+0x1b0>
 800b7f4:	220a      	movs	r2, #10
 800b7f6:	e7dd      	b.n	800b7b4 <__ssvfiscanf_r+0x1d0>
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	9342      	str	r3, [sp, #264]	; 0x108
 800b7fc:	2303      	movs	r3, #3
 800b7fe:	e7de      	b.n	800b7be <__ssvfiscanf_r+0x1da>
 800b800:	2308      	movs	r3, #8
 800b802:	9342      	str	r3, [sp, #264]	; 0x108
 800b804:	2304      	movs	r3, #4
 800b806:	e7da      	b.n	800b7be <__ssvfiscanf_r+0x1da>
 800b808:	4629      	mov	r1, r5
 800b80a:	4640      	mov	r0, r8
 800b80c:	f000 f9c6 	bl	800bb9c <__sccl>
 800b810:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b812:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b816:	9341      	str	r3, [sp, #260]	; 0x104
 800b818:	4605      	mov	r5, r0
 800b81a:	2301      	movs	r3, #1
 800b81c:	e7cf      	b.n	800b7be <__ssvfiscanf_r+0x1da>
 800b81e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b820:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b824:	9341      	str	r3, [sp, #260]	; 0x104
 800b826:	2300      	movs	r3, #0
 800b828:	e7c9      	b.n	800b7be <__ssvfiscanf_r+0x1da>
 800b82a:	2302      	movs	r3, #2
 800b82c:	e7c7      	b.n	800b7be <__ssvfiscanf_r+0x1da>
 800b82e:	9841      	ldr	r0, [sp, #260]	; 0x104
 800b830:	06c3      	lsls	r3, r0, #27
 800b832:	f53f aefe 	bmi.w	800b632 <__ssvfiscanf_r+0x4e>
 800b836:	9b00      	ldr	r3, [sp, #0]
 800b838:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b83a:	1d19      	adds	r1, r3, #4
 800b83c:	9100      	str	r1, [sp, #0]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	f010 0f01 	tst.w	r0, #1
 800b844:	bf14      	ite	ne
 800b846:	801a      	strhne	r2, [r3, #0]
 800b848:	601a      	streq	r2, [r3, #0]
 800b84a:	e6f2      	b.n	800b632 <__ssvfiscanf_r+0x4e>
 800b84c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b84e:	4621      	mov	r1, r4
 800b850:	4630      	mov	r0, r6
 800b852:	4798      	blx	r3
 800b854:	2800      	cmp	r0, #0
 800b856:	d0b6      	beq.n	800b7c6 <__ssvfiscanf_r+0x1e2>
 800b858:	e79c      	b.n	800b794 <__ssvfiscanf_r+0x1b0>
 800b85a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b85c:	3201      	adds	r2, #1
 800b85e:	9245      	str	r2, [sp, #276]	; 0x114
 800b860:	6862      	ldr	r2, [r4, #4]
 800b862:	3a01      	subs	r2, #1
 800b864:	2a00      	cmp	r2, #0
 800b866:	6062      	str	r2, [r4, #4]
 800b868:	dd02      	ble.n	800b870 <__ssvfiscanf_r+0x28c>
 800b86a:	3301      	adds	r3, #1
 800b86c:	6023      	str	r3, [r4, #0]
 800b86e:	e7ad      	b.n	800b7cc <__ssvfiscanf_r+0x1e8>
 800b870:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b872:	4621      	mov	r1, r4
 800b874:	4630      	mov	r0, r6
 800b876:	4798      	blx	r3
 800b878:	2800      	cmp	r0, #0
 800b87a:	d0a7      	beq.n	800b7cc <__ssvfiscanf_r+0x1e8>
 800b87c:	e78a      	b.n	800b794 <__ssvfiscanf_r+0x1b0>
 800b87e:	2b04      	cmp	r3, #4
 800b880:	dc0e      	bgt.n	800b8a0 <__ssvfiscanf_r+0x2bc>
 800b882:	466b      	mov	r3, sp
 800b884:	4622      	mov	r2, r4
 800b886:	a941      	add	r1, sp, #260	; 0x104
 800b888:	4630      	mov	r0, r6
 800b88a:	f000 f87d 	bl	800b988 <_scanf_i>
 800b88e:	e7ab      	b.n	800b7e8 <__ssvfiscanf_r+0x204>
 800b890:	0800b52f 	.word	0x0800b52f
 800b894:	0800b5a9 	.word	0x0800b5a9
 800b898:	0800d76c 	.word	0x0800d76c
 800b89c:	0800d73e 	.word	0x0800d73e
 800b8a0:	4b0b      	ldr	r3, [pc, #44]	; (800b8d0 <__ssvfiscanf_r+0x2ec>)
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	f43f aec5 	beq.w	800b632 <__ssvfiscanf_r+0x4e>
 800b8a8:	466b      	mov	r3, sp
 800b8aa:	4622      	mov	r2, r4
 800b8ac:	a941      	add	r1, sp, #260	; 0x104
 800b8ae:	4630      	mov	r0, r6
 800b8b0:	f3af 8000 	nop.w
 800b8b4:	e798      	b.n	800b7e8 <__ssvfiscanf_r+0x204>
 800b8b6:	89a3      	ldrh	r3, [r4, #12]
 800b8b8:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b8bc:	bf18      	it	ne
 800b8be:	f04f 30ff 	movne.w	r0, #4294967295
 800b8c2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800b8c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8ca:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b8cc:	e7f9      	b.n	800b8c2 <__ssvfiscanf_r+0x2de>
 800b8ce:	bf00      	nop
 800b8d0:	00000000 	.word	0x00000000

0800b8d4 <_scanf_chars>:
 800b8d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8d8:	4615      	mov	r5, r2
 800b8da:	688a      	ldr	r2, [r1, #8]
 800b8dc:	4680      	mov	r8, r0
 800b8de:	460c      	mov	r4, r1
 800b8e0:	b932      	cbnz	r2, 800b8f0 <_scanf_chars+0x1c>
 800b8e2:	698a      	ldr	r2, [r1, #24]
 800b8e4:	2a00      	cmp	r2, #0
 800b8e6:	bf0c      	ite	eq
 800b8e8:	2201      	moveq	r2, #1
 800b8ea:	f04f 32ff 	movne.w	r2, #4294967295
 800b8ee:	608a      	str	r2, [r1, #8]
 800b8f0:	6822      	ldr	r2, [r4, #0]
 800b8f2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800b984 <_scanf_chars+0xb0>
 800b8f6:	06d1      	lsls	r1, r2, #27
 800b8f8:	bf5f      	itttt	pl
 800b8fa:	681a      	ldrpl	r2, [r3, #0]
 800b8fc:	1d11      	addpl	r1, r2, #4
 800b8fe:	6019      	strpl	r1, [r3, #0]
 800b900:	6816      	ldrpl	r6, [r2, #0]
 800b902:	2700      	movs	r7, #0
 800b904:	69a0      	ldr	r0, [r4, #24]
 800b906:	b188      	cbz	r0, 800b92c <_scanf_chars+0x58>
 800b908:	2801      	cmp	r0, #1
 800b90a:	d107      	bne.n	800b91c <_scanf_chars+0x48>
 800b90c:	682a      	ldr	r2, [r5, #0]
 800b90e:	7811      	ldrb	r1, [r2, #0]
 800b910:	6962      	ldr	r2, [r4, #20]
 800b912:	5c52      	ldrb	r2, [r2, r1]
 800b914:	b952      	cbnz	r2, 800b92c <_scanf_chars+0x58>
 800b916:	2f00      	cmp	r7, #0
 800b918:	d031      	beq.n	800b97e <_scanf_chars+0xaa>
 800b91a:	e022      	b.n	800b962 <_scanf_chars+0x8e>
 800b91c:	2802      	cmp	r0, #2
 800b91e:	d120      	bne.n	800b962 <_scanf_chars+0x8e>
 800b920:	682b      	ldr	r3, [r5, #0]
 800b922:	781b      	ldrb	r3, [r3, #0]
 800b924:	f813 3009 	ldrb.w	r3, [r3, r9]
 800b928:	071b      	lsls	r3, r3, #28
 800b92a:	d41a      	bmi.n	800b962 <_scanf_chars+0x8e>
 800b92c:	6823      	ldr	r3, [r4, #0]
 800b92e:	06da      	lsls	r2, r3, #27
 800b930:	bf5e      	ittt	pl
 800b932:	682b      	ldrpl	r3, [r5, #0]
 800b934:	781b      	ldrbpl	r3, [r3, #0]
 800b936:	f806 3b01 	strbpl.w	r3, [r6], #1
 800b93a:	682a      	ldr	r2, [r5, #0]
 800b93c:	686b      	ldr	r3, [r5, #4]
 800b93e:	3201      	adds	r2, #1
 800b940:	602a      	str	r2, [r5, #0]
 800b942:	68a2      	ldr	r2, [r4, #8]
 800b944:	3b01      	subs	r3, #1
 800b946:	3a01      	subs	r2, #1
 800b948:	606b      	str	r3, [r5, #4]
 800b94a:	3701      	adds	r7, #1
 800b94c:	60a2      	str	r2, [r4, #8]
 800b94e:	b142      	cbz	r2, 800b962 <_scanf_chars+0x8e>
 800b950:	2b00      	cmp	r3, #0
 800b952:	dcd7      	bgt.n	800b904 <_scanf_chars+0x30>
 800b954:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b958:	4629      	mov	r1, r5
 800b95a:	4640      	mov	r0, r8
 800b95c:	4798      	blx	r3
 800b95e:	2800      	cmp	r0, #0
 800b960:	d0d0      	beq.n	800b904 <_scanf_chars+0x30>
 800b962:	6823      	ldr	r3, [r4, #0]
 800b964:	f013 0310 	ands.w	r3, r3, #16
 800b968:	d105      	bne.n	800b976 <_scanf_chars+0xa2>
 800b96a:	68e2      	ldr	r2, [r4, #12]
 800b96c:	3201      	adds	r2, #1
 800b96e:	60e2      	str	r2, [r4, #12]
 800b970:	69a2      	ldr	r2, [r4, #24]
 800b972:	b102      	cbz	r2, 800b976 <_scanf_chars+0xa2>
 800b974:	7033      	strb	r3, [r6, #0]
 800b976:	6923      	ldr	r3, [r4, #16]
 800b978:	443b      	add	r3, r7
 800b97a:	6123      	str	r3, [r4, #16]
 800b97c:	2000      	movs	r0, #0
 800b97e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b982:	bf00      	nop
 800b984:	0800d76c 	.word	0x0800d76c

0800b988 <_scanf_i>:
 800b988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b98c:	4698      	mov	r8, r3
 800b98e:	4b76      	ldr	r3, [pc, #472]	; (800bb68 <_scanf_i+0x1e0>)
 800b990:	460c      	mov	r4, r1
 800b992:	4682      	mov	sl, r0
 800b994:	4616      	mov	r6, r2
 800b996:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b99a:	b087      	sub	sp, #28
 800b99c:	ab03      	add	r3, sp, #12
 800b99e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b9a2:	4b72      	ldr	r3, [pc, #456]	; (800bb6c <_scanf_i+0x1e4>)
 800b9a4:	69a1      	ldr	r1, [r4, #24]
 800b9a6:	4a72      	ldr	r2, [pc, #456]	; (800bb70 <_scanf_i+0x1e8>)
 800b9a8:	2903      	cmp	r1, #3
 800b9aa:	bf18      	it	ne
 800b9ac:	461a      	movne	r2, r3
 800b9ae:	68a3      	ldr	r3, [r4, #8]
 800b9b0:	9201      	str	r2, [sp, #4]
 800b9b2:	1e5a      	subs	r2, r3, #1
 800b9b4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b9b8:	bf88      	it	hi
 800b9ba:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b9be:	4627      	mov	r7, r4
 800b9c0:	bf82      	ittt	hi
 800b9c2:	eb03 0905 	addhi.w	r9, r3, r5
 800b9c6:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b9ca:	60a3      	strhi	r3, [r4, #8]
 800b9cc:	f857 3b1c 	ldr.w	r3, [r7], #28
 800b9d0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800b9d4:	bf98      	it	ls
 800b9d6:	f04f 0900 	movls.w	r9, #0
 800b9da:	6023      	str	r3, [r4, #0]
 800b9dc:	463d      	mov	r5, r7
 800b9de:	f04f 0b00 	mov.w	fp, #0
 800b9e2:	6831      	ldr	r1, [r6, #0]
 800b9e4:	ab03      	add	r3, sp, #12
 800b9e6:	7809      	ldrb	r1, [r1, #0]
 800b9e8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800b9ec:	2202      	movs	r2, #2
 800b9ee:	f7f4 fc2f 	bl	8000250 <memchr>
 800b9f2:	b328      	cbz	r0, 800ba40 <_scanf_i+0xb8>
 800b9f4:	f1bb 0f01 	cmp.w	fp, #1
 800b9f8:	d159      	bne.n	800baae <_scanf_i+0x126>
 800b9fa:	6862      	ldr	r2, [r4, #4]
 800b9fc:	b92a      	cbnz	r2, 800ba0a <_scanf_i+0x82>
 800b9fe:	6822      	ldr	r2, [r4, #0]
 800ba00:	2308      	movs	r3, #8
 800ba02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ba06:	6063      	str	r3, [r4, #4]
 800ba08:	6022      	str	r2, [r4, #0]
 800ba0a:	6822      	ldr	r2, [r4, #0]
 800ba0c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800ba10:	6022      	str	r2, [r4, #0]
 800ba12:	68a2      	ldr	r2, [r4, #8]
 800ba14:	1e51      	subs	r1, r2, #1
 800ba16:	60a1      	str	r1, [r4, #8]
 800ba18:	b192      	cbz	r2, 800ba40 <_scanf_i+0xb8>
 800ba1a:	6832      	ldr	r2, [r6, #0]
 800ba1c:	1c51      	adds	r1, r2, #1
 800ba1e:	6031      	str	r1, [r6, #0]
 800ba20:	7812      	ldrb	r2, [r2, #0]
 800ba22:	f805 2b01 	strb.w	r2, [r5], #1
 800ba26:	6872      	ldr	r2, [r6, #4]
 800ba28:	3a01      	subs	r2, #1
 800ba2a:	2a00      	cmp	r2, #0
 800ba2c:	6072      	str	r2, [r6, #4]
 800ba2e:	dc07      	bgt.n	800ba40 <_scanf_i+0xb8>
 800ba30:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800ba34:	4631      	mov	r1, r6
 800ba36:	4650      	mov	r0, sl
 800ba38:	4790      	blx	r2
 800ba3a:	2800      	cmp	r0, #0
 800ba3c:	f040 8085 	bne.w	800bb4a <_scanf_i+0x1c2>
 800ba40:	f10b 0b01 	add.w	fp, fp, #1
 800ba44:	f1bb 0f03 	cmp.w	fp, #3
 800ba48:	d1cb      	bne.n	800b9e2 <_scanf_i+0x5a>
 800ba4a:	6863      	ldr	r3, [r4, #4]
 800ba4c:	b90b      	cbnz	r3, 800ba52 <_scanf_i+0xca>
 800ba4e:	230a      	movs	r3, #10
 800ba50:	6063      	str	r3, [r4, #4]
 800ba52:	6863      	ldr	r3, [r4, #4]
 800ba54:	4947      	ldr	r1, [pc, #284]	; (800bb74 <_scanf_i+0x1ec>)
 800ba56:	6960      	ldr	r0, [r4, #20]
 800ba58:	1ac9      	subs	r1, r1, r3
 800ba5a:	f000 f89f 	bl	800bb9c <__sccl>
 800ba5e:	f04f 0b00 	mov.w	fp, #0
 800ba62:	68a3      	ldr	r3, [r4, #8]
 800ba64:	6822      	ldr	r2, [r4, #0]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d03d      	beq.n	800bae6 <_scanf_i+0x15e>
 800ba6a:	6831      	ldr	r1, [r6, #0]
 800ba6c:	6960      	ldr	r0, [r4, #20]
 800ba6e:	f891 c000 	ldrb.w	ip, [r1]
 800ba72:	f810 000c 	ldrb.w	r0, [r0, ip]
 800ba76:	2800      	cmp	r0, #0
 800ba78:	d035      	beq.n	800bae6 <_scanf_i+0x15e>
 800ba7a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800ba7e:	d124      	bne.n	800baca <_scanf_i+0x142>
 800ba80:	0510      	lsls	r0, r2, #20
 800ba82:	d522      	bpl.n	800baca <_scanf_i+0x142>
 800ba84:	f10b 0b01 	add.w	fp, fp, #1
 800ba88:	f1b9 0f00 	cmp.w	r9, #0
 800ba8c:	d003      	beq.n	800ba96 <_scanf_i+0x10e>
 800ba8e:	3301      	adds	r3, #1
 800ba90:	f109 39ff 	add.w	r9, r9, #4294967295
 800ba94:	60a3      	str	r3, [r4, #8]
 800ba96:	6873      	ldr	r3, [r6, #4]
 800ba98:	3b01      	subs	r3, #1
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	6073      	str	r3, [r6, #4]
 800ba9e:	dd1b      	ble.n	800bad8 <_scanf_i+0x150>
 800baa0:	6833      	ldr	r3, [r6, #0]
 800baa2:	3301      	adds	r3, #1
 800baa4:	6033      	str	r3, [r6, #0]
 800baa6:	68a3      	ldr	r3, [r4, #8]
 800baa8:	3b01      	subs	r3, #1
 800baaa:	60a3      	str	r3, [r4, #8]
 800baac:	e7d9      	b.n	800ba62 <_scanf_i+0xda>
 800baae:	f1bb 0f02 	cmp.w	fp, #2
 800bab2:	d1ae      	bne.n	800ba12 <_scanf_i+0x8a>
 800bab4:	6822      	ldr	r2, [r4, #0]
 800bab6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800baba:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800babe:	d1bf      	bne.n	800ba40 <_scanf_i+0xb8>
 800bac0:	2310      	movs	r3, #16
 800bac2:	6063      	str	r3, [r4, #4]
 800bac4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bac8:	e7a2      	b.n	800ba10 <_scanf_i+0x88>
 800baca:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800bace:	6022      	str	r2, [r4, #0]
 800bad0:	780b      	ldrb	r3, [r1, #0]
 800bad2:	f805 3b01 	strb.w	r3, [r5], #1
 800bad6:	e7de      	b.n	800ba96 <_scanf_i+0x10e>
 800bad8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800badc:	4631      	mov	r1, r6
 800bade:	4650      	mov	r0, sl
 800bae0:	4798      	blx	r3
 800bae2:	2800      	cmp	r0, #0
 800bae4:	d0df      	beq.n	800baa6 <_scanf_i+0x11e>
 800bae6:	6823      	ldr	r3, [r4, #0]
 800bae8:	05db      	lsls	r3, r3, #23
 800baea:	d50d      	bpl.n	800bb08 <_scanf_i+0x180>
 800baec:	42bd      	cmp	r5, r7
 800baee:	d909      	bls.n	800bb04 <_scanf_i+0x17c>
 800baf0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800baf4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800baf8:	4632      	mov	r2, r6
 800bafa:	4650      	mov	r0, sl
 800bafc:	4798      	blx	r3
 800bafe:	f105 39ff 	add.w	r9, r5, #4294967295
 800bb02:	464d      	mov	r5, r9
 800bb04:	42bd      	cmp	r5, r7
 800bb06:	d02d      	beq.n	800bb64 <_scanf_i+0x1dc>
 800bb08:	6822      	ldr	r2, [r4, #0]
 800bb0a:	f012 0210 	ands.w	r2, r2, #16
 800bb0e:	d113      	bne.n	800bb38 <_scanf_i+0x1b0>
 800bb10:	702a      	strb	r2, [r5, #0]
 800bb12:	6863      	ldr	r3, [r4, #4]
 800bb14:	9e01      	ldr	r6, [sp, #4]
 800bb16:	4639      	mov	r1, r7
 800bb18:	4650      	mov	r0, sl
 800bb1a:	47b0      	blx	r6
 800bb1c:	6821      	ldr	r1, [r4, #0]
 800bb1e:	f8d8 3000 	ldr.w	r3, [r8]
 800bb22:	f011 0f20 	tst.w	r1, #32
 800bb26:	d013      	beq.n	800bb50 <_scanf_i+0x1c8>
 800bb28:	1d1a      	adds	r2, r3, #4
 800bb2a:	f8c8 2000 	str.w	r2, [r8]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	6018      	str	r0, [r3, #0]
 800bb32:	68e3      	ldr	r3, [r4, #12]
 800bb34:	3301      	adds	r3, #1
 800bb36:	60e3      	str	r3, [r4, #12]
 800bb38:	1bed      	subs	r5, r5, r7
 800bb3a:	44ab      	add	fp, r5
 800bb3c:	6925      	ldr	r5, [r4, #16]
 800bb3e:	445d      	add	r5, fp
 800bb40:	6125      	str	r5, [r4, #16]
 800bb42:	2000      	movs	r0, #0
 800bb44:	b007      	add	sp, #28
 800bb46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb4a:	f04f 0b00 	mov.w	fp, #0
 800bb4e:	e7ca      	b.n	800bae6 <_scanf_i+0x15e>
 800bb50:	1d1a      	adds	r2, r3, #4
 800bb52:	f8c8 2000 	str.w	r2, [r8]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	f011 0f01 	tst.w	r1, #1
 800bb5c:	bf14      	ite	ne
 800bb5e:	8018      	strhne	r0, [r3, #0]
 800bb60:	6018      	streq	r0, [r3, #0]
 800bb62:	e7e6      	b.n	800bb32 <_scanf_i+0x1aa>
 800bb64:	2001      	movs	r0, #1
 800bb66:	e7ed      	b.n	800bb44 <_scanf_i+0x1bc>
 800bb68:	0800c09c 	.word	0x0800c09c
 800bb6c:	0800ae1d 	.word	0x0800ae1d
 800bb70:	0800bd99 	.word	0x0800bd99
 800bb74:	0800d8e5 	.word	0x0800d8e5

0800bb78 <_read_r>:
 800bb78:	b538      	push	{r3, r4, r5, lr}
 800bb7a:	4d07      	ldr	r5, [pc, #28]	; (800bb98 <_read_r+0x20>)
 800bb7c:	4604      	mov	r4, r0
 800bb7e:	4608      	mov	r0, r1
 800bb80:	4611      	mov	r1, r2
 800bb82:	2200      	movs	r2, #0
 800bb84:	602a      	str	r2, [r5, #0]
 800bb86:	461a      	mov	r2, r3
 800bb88:	f7f8 f884 	bl	8003c94 <_read>
 800bb8c:	1c43      	adds	r3, r0, #1
 800bb8e:	d102      	bne.n	800bb96 <_read_r+0x1e>
 800bb90:	682b      	ldr	r3, [r5, #0]
 800bb92:	b103      	cbz	r3, 800bb96 <_read_r+0x1e>
 800bb94:	6023      	str	r3, [r4, #0]
 800bb96:	bd38      	pop	{r3, r4, r5, pc}
 800bb98:	20000e68 	.word	0x20000e68

0800bb9c <__sccl>:
 800bb9c:	b570      	push	{r4, r5, r6, lr}
 800bb9e:	780b      	ldrb	r3, [r1, #0]
 800bba0:	4604      	mov	r4, r0
 800bba2:	2b5e      	cmp	r3, #94	; 0x5e
 800bba4:	bf0b      	itete	eq
 800bba6:	784b      	ldrbeq	r3, [r1, #1]
 800bba8:	1c48      	addne	r0, r1, #1
 800bbaa:	1c88      	addeq	r0, r1, #2
 800bbac:	2200      	movne	r2, #0
 800bbae:	bf08      	it	eq
 800bbb0:	2201      	moveq	r2, #1
 800bbb2:	1e61      	subs	r1, r4, #1
 800bbb4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800bbb8:	f801 2f01 	strb.w	r2, [r1, #1]!
 800bbbc:	42a9      	cmp	r1, r5
 800bbbe:	d1fb      	bne.n	800bbb8 <__sccl+0x1c>
 800bbc0:	b90b      	cbnz	r3, 800bbc6 <__sccl+0x2a>
 800bbc2:	3801      	subs	r0, #1
 800bbc4:	bd70      	pop	{r4, r5, r6, pc}
 800bbc6:	f082 0201 	eor.w	r2, r2, #1
 800bbca:	54e2      	strb	r2, [r4, r3]
 800bbcc:	4605      	mov	r5, r0
 800bbce:	4628      	mov	r0, r5
 800bbd0:	f810 1b01 	ldrb.w	r1, [r0], #1
 800bbd4:	292d      	cmp	r1, #45	; 0x2d
 800bbd6:	d006      	beq.n	800bbe6 <__sccl+0x4a>
 800bbd8:	295d      	cmp	r1, #93	; 0x5d
 800bbda:	d0f3      	beq.n	800bbc4 <__sccl+0x28>
 800bbdc:	b909      	cbnz	r1, 800bbe2 <__sccl+0x46>
 800bbde:	4628      	mov	r0, r5
 800bbe0:	e7f0      	b.n	800bbc4 <__sccl+0x28>
 800bbe2:	460b      	mov	r3, r1
 800bbe4:	e7f1      	b.n	800bbca <__sccl+0x2e>
 800bbe6:	786e      	ldrb	r6, [r5, #1]
 800bbe8:	2e5d      	cmp	r6, #93	; 0x5d
 800bbea:	d0fa      	beq.n	800bbe2 <__sccl+0x46>
 800bbec:	42b3      	cmp	r3, r6
 800bbee:	dcf8      	bgt.n	800bbe2 <__sccl+0x46>
 800bbf0:	3502      	adds	r5, #2
 800bbf2:	4619      	mov	r1, r3
 800bbf4:	3101      	adds	r1, #1
 800bbf6:	428e      	cmp	r6, r1
 800bbf8:	5462      	strb	r2, [r4, r1]
 800bbfa:	dcfb      	bgt.n	800bbf4 <__sccl+0x58>
 800bbfc:	1af1      	subs	r1, r6, r3
 800bbfe:	3901      	subs	r1, #1
 800bc00:	1c58      	adds	r0, r3, #1
 800bc02:	42b3      	cmp	r3, r6
 800bc04:	bfa8      	it	ge
 800bc06:	2100      	movge	r1, #0
 800bc08:	1843      	adds	r3, r0, r1
 800bc0a:	e7e0      	b.n	800bbce <__sccl+0x32>

0800bc0c <_raise_r>:
 800bc0c:	291f      	cmp	r1, #31
 800bc0e:	b538      	push	{r3, r4, r5, lr}
 800bc10:	4604      	mov	r4, r0
 800bc12:	460d      	mov	r5, r1
 800bc14:	d904      	bls.n	800bc20 <_raise_r+0x14>
 800bc16:	2316      	movs	r3, #22
 800bc18:	6003      	str	r3, [r0, #0]
 800bc1a:	f04f 30ff 	mov.w	r0, #4294967295
 800bc1e:	bd38      	pop	{r3, r4, r5, pc}
 800bc20:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bc22:	b112      	cbz	r2, 800bc2a <_raise_r+0x1e>
 800bc24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bc28:	b94b      	cbnz	r3, 800bc3e <_raise_r+0x32>
 800bc2a:	4620      	mov	r0, r4
 800bc2c:	f000 f830 	bl	800bc90 <_getpid_r>
 800bc30:	462a      	mov	r2, r5
 800bc32:	4601      	mov	r1, r0
 800bc34:	4620      	mov	r0, r4
 800bc36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc3a:	f000 b817 	b.w	800bc6c <_kill_r>
 800bc3e:	2b01      	cmp	r3, #1
 800bc40:	d00a      	beq.n	800bc58 <_raise_r+0x4c>
 800bc42:	1c59      	adds	r1, r3, #1
 800bc44:	d103      	bne.n	800bc4e <_raise_r+0x42>
 800bc46:	2316      	movs	r3, #22
 800bc48:	6003      	str	r3, [r0, #0]
 800bc4a:	2001      	movs	r0, #1
 800bc4c:	e7e7      	b.n	800bc1e <_raise_r+0x12>
 800bc4e:	2400      	movs	r4, #0
 800bc50:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bc54:	4628      	mov	r0, r5
 800bc56:	4798      	blx	r3
 800bc58:	2000      	movs	r0, #0
 800bc5a:	e7e0      	b.n	800bc1e <_raise_r+0x12>

0800bc5c <raise>:
 800bc5c:	4b02      	ldr	r3, [pc, #8]	; (800bc68 <raise+0xc>)
 800bc5e:	4601      	mov	r1, r0
 800bc60:	6818      	ldr	r0, [r3, #0]
 800bc62:	f7ff bfd3 	b.w	800bc0c <_raise_r>
 800bc66:	bf00      	nop
 800bc68:	200000c8 	.word	0x200000c8

0800bc6c <_kill_r>:
 800bc6c:	b538      	push	{r3, r4, r5, lr}
 800bc6e:	4d07      	ldr	r5, [pc, #28]	; (800bc8c <_kill_r+0x20>)
 800bc70:	2300      	movs	r3, #0
 800bc72:	4604      	mov	r4, r0
 800bc74:	4608      	mov	r0, r1
 800bc76:	4611      	mov	r1, r2
 800bc78:	602b      	str	r3, [r5, #0]
 800bc7a:	f7f7 fff1 	bl	8003c60 <_kill>
 800bc7e:	1c43      	adds	r3, r0, #1
 800bc80:	d102      	bne.n	800bc88 <_kill_r+0x1c>
 800bc82:	682b      	ldr	r3, [r5, #0]
 800bc84:	b103      	cbz	r3, 800bc88 <_kill_r+0x1c>
 800bc86:	6023      	str	r3, [r4, #0]
 800bc88:	bd38      	pop	{r3, r4, r5, pc}
 800bc8a:	bf00      	nop
 800bc8c:	20000e68 	.word	0x20000e68

0800bc90 <_getpid_r>:
 800bc90:	f7f7 bfde 	b.w	8003c50 <_getpid>

0800bc94 <_strtol_l.constprop.0>:
 800bc94:	2b01      	cmp	r3, #1
 800bc96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc9a:	d001      	beq.n	800bca0 <_strtol_l.constprop.0+0xc>
 800bc9c:	2b24      	cmp	r3, #36	; 0x24
 800bc9e:	d906      	bls.n	800bcae <_strtol_l.constprop.0+0x1a>
 800bca0:	f7fd fae2 	bl	8009268 <__errno>
 800bca4:	2316      	movs	r3, #22
 800bca6:	6003      	str	r3, [r0, #0]
 800bca8:	2000      	movs	r0, #0
 800bcaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcae:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800bd94 <_strtol_l.constprop.0+0x100>
 800bcb2:	460d      	mov	r5, r1
 800bcb4:	462e      	mov	r6, r5
 800bcb6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bcba:	f814 700c 	ldrb.w	r7, [r4, ip]
 800bcbe:	f017 0708 	ands.w	r7, r7, #8
 800bcc2:	d1f7      	bne.n	800bcb4 <_strtol_l.constprop.0+0x20>
 800bcc4:	2c2d      	cmp	r4, #45	; 0x2d
 800bcc6:	d132      	bne.n	800bd2e <_strtol_l.constprop.0+0x9a>
 800bcc8:	782c      	ldrb	r4, [r5, #0]
 800bcca:	2701      	movs	r7, #1
 800bccc:	1cb5      	adds	r5, r6, #2
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d05b      	beq.n	800bd8a <_strtol_l.constprop.0+0xf6>
 800bcd2:	2b10      	cmp	r3, #16
 800bcd4:	d109      	bne.n	800bcea <_strtol_l.constprop.0+0x56>
 800bcd6:	2c30      	cmp	r4, #48	; 0x30
 800bcd8:	d107      	bne.n	800bcea <_strtol_l.constprop.0+0x56>
 800bcda:	782c      	ldrb	r4, [r5, #0]
 800bcdc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800bce0:	2c58      	cmp	r4, #88	; 0x58
 800bce2:	d14d      	bne.n	800bd80 <_strtol_l.constprop.0+0xec>
 800bce4:	786c      	ldrb	r4, [r5, #1]
 800bce6:	2310      	movs	r3, #16
 800bce8:	3502      	adds	r5, #2
 800bcea:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800bcee:	f108 38ff 	add.w	r8, r8, #4294967295
 800bcf2:	f04f 0c00 	mov.w	ip, #0
 800bcf6:	fbb8 f9f3 	udiv	r9, r8, r3
 800bcfa:	4666      	mov	r6, ip
 800bcfc:	fb03 8a19 	mls	sl, r3, r9, r8
 800bd00:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800bd04:	f1be 0f09 	cmp.w	lr, #9
 800bd08:	d816      	bhi.n	800bd38 <_strtol_l.constprop.0+0xa4>
 800bd0a:	4674      	mov	r4, lr
 800bd0c:	42a3      	cmp	r3, r4
 800bd0e:	dd24      	ble.n	800bd5a <_strtol_l.constprop.0+0xc6>
 800bd10:	f1bc 0f00 	cmp.w	ip, #0
 800bd14:	db1e      	blt.n	800bd54 <_strtol_l.constprop.0+0xc0>
 800bd16:	45b1      	cmp	r9, r6
 800bd18:	d31c      	bcc.n	800bd54 <_strtol_l.constprop.0+0xc0>
 800bd1a:	d101      	bne.n	800bd20 <_strtol_l.constprop.0+0x8c>
 800bd1c:	45a2      	cmp	sl, r4
 800bd1e:	db19      	blt.n	800bd54 <_strtol_l.constprop.0+0xc0>
 800bd20:	fb06 4603 	mla	r6, r6, r3, r4
 800bd24:	f04f 0c01 	mov.w	ip, #1
 800bd28:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bd2c:	e7e8      	b.n	800bd00 <_strtol_l.constprop.0+0x6c>
 800bd2e:	2c2b      	cmp	r4, #43	; 0x2b
 800bd30:	bf04      	itt	eq
 800bd32:	782c      	ldrbeq	r4, [r5, #0]
 800bd34:	1cb5      	addeq	r5, r6, #2
 800bd36:	e7ca      	b.n	800bcce <_strtol_l.constprop.0+0x3a>
 800bd38:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800bd3c:	f1be 0f19 	cmp.w	lr, #25
 800bd40:	d801      	bhi.n	800bd46 <_strtol_l.constprop.0+0xb2>
 800bd42:	3c37      	subs	r4, #55	; 0x37
 800bd44:	e7e2      	b.n	800bd0c <_strtol_l.constprop.0+0x78>
 800bd46:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800bd4a:	f1be 0f19 	cmp.w	lr, #25
 800bd4e:	d804      	bhi.n	800bd5a <_strtol_l.constprop.0+0xc6>
 800bd50:	3c57      	subs	r4, #87	; 0x57
 800bd52:	e7db      	b.n	800bd0c <_strtol_l.constprop.0+0x78>
 800bd54:	f04f 3cff 	mov.w	ip, #4294967295
 800bd58:	e7e6      	b.n	800bd28 <_strtol_l.constprop.0+0x94>
 800bd5a:	f1bc 0f00 	cmp.w	ip, #0
 800bd5e:	da05      	bge.n	800bd6c <_strtol_l.constprop.0+0xd8>
 800bd60:	2322      	movs	r3, #34	; 0x22
 800bd62:	6003      	str	r3, [r0, #0]
 800bd64:	4646      	mov	r6, r8
 800bd66:	b942      	cbnz	r2, 800bd7a <_strtol_l.constprop.0+0xe6>
 800bd68:	4630      	mov	r0, r6
 800bd6a:	e79e      	b.n	800bcaa <_strtol_l.constprop.0+0x16>
 800bd6c:	b107      	cbz	r7, 800bd70 <_strtol_l.constprop.0+0xdc>
 800bd6e:	4276      	negs	r6, r6
 800bd70:	2a00      	cmp	r2, #0
 800bd72:	d0f9      	beq.n	800bd68 <_strtol_l.constprop.0+0xd4>
 800bd74:	f1bc 0f00 	cmp.w	ip, #0
 800bd78:	d000      	beq.n	800bd7c <_strtol_l.constprop.0+0xe8>
 800bd7a:	1e69      	subs	r1, r5, #1
 800bd7c:	6011      	str	r1, [r2, #0]
 800bd7e:	e7f3      	b.n	800bd68 <_strtol_l.constprop.0+0xd4>
 800bd80:	2430      	movs	r4, #48	; 0x30
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d1b1      	bne.n	800bcea <_strtol_l.constprop.0+0x56>
 800bd86:	2308      	movs	r3, #8
 800bd88:	e7af      	b.n	800bcea <_strtol_l.constprop.0+0x56>
 800bd8a:	2c30      	cmp	r4, #48	; 0x30
 800bd8c:	d0a5      	beq.n	800bcda <_strtol_l.constprop.0+0x46>
 800bd8e:	230a      	movs	r3, #10
 800bd90:	e7ab      	b.n	800bcea <_strtol_l.constprop.0+0x56>
 800bd92:	bf00      	nop
 800bd94:	0800d76c 	.word	0x0800d76c

0800bd98 <_strtol_r>:
 800bd98:	f7ff bf7c 	b.w	800bc94 <_strtol_l.constprop.0>

0800bd9c <__submore>:
 800bd9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bda0:	460c      	mov	r4, r1
 800bda2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800bda4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bda8:	4299      	cmp	r1, r3
 800bdaa:	d11d      	bne.n	800bde8 <__submore+0x4c>
 800bdac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800bdb0:	f7fd fe8c 	bl	8009acc <_malloc_r>
 800bdb4:	b918      	cbnz	r0, 800bdbe <__submore+0x22>
 800bdb6:	f04f 30ff 	mov.w	r0, #4294967295
 800bdba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bdc2:	63a3      	str	r3, [r4, #56]	; 0x38
 800bdc4:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800bdc8:	6360      	str	r0, [r4, #52]	; 0x34
 800bdca:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800bdce:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800bdd2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800bdd6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800bdda:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800bdde:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800bde2:	6020      	str	r0, [r4, #0]
 800bde4:	2000      	movs	r0, #0
 800bde6:	e7e8      	b.n	800bdba <__submore+0x1e>
 800bde8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800bdea:	0077      	lsls	r7, r6, #1
 800bdec:	463a      	mov	r2, r7
 800bdee:	f7ff fb6f 	bl	800b4d0 <_realloc_r>
 800bdf2:	4605      	mov	r5, r0
 800bdf4:	2800      	cmp	r0, #0
 800bdf6:	d0de      	beq.n	800bdb6 <__submore+0x1a>
 800bdf8:	eb00 0806 	add.w	r8, r0, r6
 800bdfc:	4601      	mov	r1, r0
 800bdfe:	4632      	mov	r2, r6
 800be00:	4640      	mov	r0, r8
 800be02:	f7ff fb3d 	bl	800b480 <memcpy>
 800be06:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800be0a:	f8c4 8000 	str.w	r8, [r4]
 800be0e:	e7e9      	b.n	800bde4 <__submore+0x48>

0800be10 <_fstat_r>:
 800be10:	b538      	push	{r3, r4, r5, lr}
 800be12:	4d07      	ldr	r5, [pc, #28]	; (800be30 <_fstat_r+0x20>)
 800be14:	2300      	movs	r3, #0
 800be16:	4604      	mov	r4, r0
 800be18:	4608      	mov	r0, r1
 800be1a:	4611      	mov	r1, r2
 800be1c:	602b      	str	r3, [r5, #0]
 800be1e:	f7f7 ff7e 	bl	8003d1e <_fstat>
 800be22:	1c43      	adds	r3, r0, #1
 800be24:	d102      	bne.n	800be2c <_fstat_r+0x1c>
 800be26:	682b      	ldr	r3, [r5, #0]
 800be28:	b103      	cbz	r3, 800be2c <_fstat_r+0x1c>
 800be2a:	6023      	str	r3, [r4, #0]
 800be2c:	bd38      	pop	{r3, r4, r5, pc}
 800be2e:	bf00      	nop
 800be30:	20000e68 	.word	0x20000e68

0800be34 <_isatty_r>:
 800be34:	b538      	push	{r3, r4, r5, lr}
 800be36:	4d06      	ldr	r5, [pc, #24]	; (800be50 <_isatty_r+0x1c>)
 800be38:	2300      	movs	r3, #0
 800be3a:	4604      	mov	r4, r0
 800be3c:	4608      	mov	r0, r1
 800be3e:	602b      	str	r3, [r5, #0]
 800be40:	f7f7 ff7d 	bl	8003d3e <_isatty>
 800be44:	1c43      	adds	r3, r0, #1
 800be46:	d102      	bne.n	800be4e <_isatty_r+0x1a>
 800be48:	682b      	ldr	r3, [r5, #0]
 800be4a:	b103      	cbz	r3, 800be4e <_isatty_r+0x1a>
 800be4c:	6023      	str	r3, [r4, #0]
 800be4e:	bd38      	pop	{r3, r4, r5, pc}
 800be50:	20000e68 	.word	0x20000e68

0800be54 <_malloc_usable_size_r>:
 800be54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be58:	1f18      	subs	r0, r3, #4
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	bfbc      	itt	lt
 800be5e:	580b      	ldrlt	r3, [r1, r0]
 800be60:	18c0      	addlt	r0, r0, r3
 800be62:	4770      	bx	lr

0800be64 <_init>:
 800be64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be66:	bf00      	nop
 800be68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be6a:	bc08      	pop	{r3}
 800be6c:	469e      	mov	lr, r3
 800be6e:	4770      	bx	lr

0800be70 <_fini>:
 800be70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be72:	bf00      	nop
 800be74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be76:	bc08      	pop	{r3}
 800be78:	469e      	mov	lr, r3
 800be7a:	4770      	bx	lr
